
STM32F407ZGT6_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08004450  08004450  00014450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800452c  0800452c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800452c  0800452c  0001452c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004534  08004534  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004534  08004534  00014534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004538  08004538  00014538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800453c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00001228  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001294  20001294  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000ad53  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001f6e  00000000  00000000  0002ae32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000998  00000000  00000000  0002cda0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000741  00000000  00000000  0002d738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002d44  00000000  00000000  0002de79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000c8c0  00000000  00000000  00030bbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c6597  00000000  00000000  0003d47d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002f58  00000000  00000000  00103a14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007f  00000000  00000000  0010696c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004438 	.word	0x08004438

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08004438 	.word	0x08004438

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08a      	sub	sp, #40	; 0x28
 8000570:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	613b      	str	r3, [r7, #16]
 8000586:	4b2e      	ldr	r3, [pc, #184]	; (8000640 <MX_GPIO_Init+0xd4>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	4a2d      	ldr	r2, [pc, #180]	; (8000640 <MX_GPIO_Init+0xd4>)
 800058c:	f043 0320 	orr.w	r3, r3, #32
 8000590:	6313      	str	r3, [r2, #48]	; 0x30
 8000592:	4b2b      	ldr	r3, [pc, #172]	; (8000640 <MX_GPIO_Init+0xd4>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	f003 0320 	and.w	r3, r3, #32
 800059a:	613b      	str	r3, [r7, #16]
 800059c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
 80005a2:	4b27      	ldr	r3, [pc, #156]	; (8000640 <MX_GPIO_Init+0xd4>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a26      	ldr	r2, [pc, #152]	; (8000640 <MX_GPIO_Init+0xd4>)
 80005a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
 80005ae:	4b24      	ldr	r3, [pc, #144]	; (8000640 <MX_GPIO_Init+0xd4>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	4b20      	ldr	r3, [pc, #128]	; (8000640 <MX_GPIO_Init+0xd4>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a1f      	ldr	r2, [pc, #124]	; (8000640 <MX_GPIO_Init+0xd4>)
 80005c4:	f043 0302 	orr.w	r3, r3, #2
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b1d      	ldr	r3, [pc, #116]	; (8000640 <MX_GPIO_Init+0xd4>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0302 	and.w	r3, r3, #2
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	4b19      	ldr	r3, [pc, #100]	; (8000640 <MX_GPIO_Init+0xd4>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a18      	ldr	r2, [pc, #96]	; (8000640 <MX_GPIO_Init+0xd4>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b16      	ldr	r3, [pc, #88]	; (8000640 <MX_GPIO_Init+0xd4>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005f8:	4812      	ldr	r0, [pc, #72]	; (8000644 <MX_GPIO_Init+0xd8>)
 80005fa:	f001 f951 	bl	80018a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80005fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000604:	2301      	movs	r3, #1
 8000606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060c:	2300      	movs	r3, #0
 800060e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000610:	f107 0314 	add.w	r3, r7, #20
 8000614:	4619      	mov	r1, r3
 8000616:	480b      	ldr	r0, [pc, #44]	; (8000644 <MX_GPIO_Init+0xd8>)
 8000618:	f000 ffa6 	bl	8001568 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 800061c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000620:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000622:	2300      	movs	r3, #0
 8000624:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000626:	2300      	movs	r3, #0
 8000628:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	4619      	mov	r1, r3
 8000630:	4805      	ldr	r0, [pc, #20]	; (8000648 <MX_GPIO_Init+0xdc>)
 8000632:	f000 ff99 	bl	8001568 <HAL_GPIO_Init>

}
 8000636:	bf00      	nop
 8000638:	3728      	adds	r7, #40	; 0x28
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40023800 	.word	0x40023800
 8000644:	40021400 	.word	0x40021400
 8000648:	40020400 	.word	0x40020400

0800064c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000650:	f000 fe0e 	bl	8001270 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000654:	f000 f894 	bl	8000780 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000658:	f7ff ff88 	bl	800056c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800065c:	f000 fd6c 	bl	8001138 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000660:	f000 fbbe 	bl	8000de0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  norflash_init();                        /* 初始化NORFLASH */
 8000664:	f000 f900 	bl	8000868 <norflash_init>
  id = norflash_read_id();                /* 读取FLASH ID */
 8000668:	f000 fa22 	bl	8000ab0 <norflash_read_id>
 800066c:	4603      	mov	r3, r0
 800066e:	461a      	mov	r2, r3
 8000670:	4b37      	ldr	r3, [pc, #220]	; (8000750 <main+0x104>)
 8000672:	801a      	strh	r2, [r3, #0]
  while ((id == 0) || (id == 0XFFFF))     /* 检测不到FLASH芯片 */
 8000674:	e008      	b.n	8000688 <main+0x3c>
  {
      HAL_Delay(500);
 8000676:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800067a:	f000 fe6b 	bl	8001354 <HAL_Delay>
      HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);              /* LED0闪烁 */
 800067e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000682:	4834      	ldr	r0, [pc, #208]	; (8000754 <main+0x108>)
 8000684:	f001 f925 	bl	80018d2 <HAL_GPIO_TogglePin>
  while ((id == 0) || (id == 0XFFFF))     /* 检测不到FLASH芯片 */
 8000688:	4b31      	ldr	r3, [pc, #196]	; (8000750 <main+0x104>)
 800068a:	881b      	ldrh	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d0f2      	beq.n	8000676 <main+0x2a>
 8000690:	4b2f      	ldr	r3, [pc, #188]	; (8000750 <main+0x104>)
 8000692:	881b      	ldrh	r3, [r3, #0]
 8000694:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000698:	4293      	cmp	r3, r2
 800069a:	d0ec      	beq.n	8000676 <main+0x2a>
  }
  flashsize = 16 * 1024 * 1024;   /* FLASH 大小为16M字节 */
 800069c:	4b2e      	ldr	r3, [pc, #184]	; (8000758 <main+0x10c>)
 800069e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80006a2:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
while (1)
{
	printf("Start Write FLASH....\r\n");
 80006a4:	482d      	ldr	r0, [pc, #180]	; (800075c <main+0x110>)
 80006a6:	f002 fe51 	bl	800334c <puts>
	sprintf((char *)datatemp, "%s", (char *)g_text_buf);
 80006aa:	4a2d      	ldr	r2, [pc, #180]	; (8000760 <main+0x114>)
 80006ac:	492d      	ldr	r1, [pc, #180]	; (8000764 <main+0x118>)
 80006ae:	482e      	ldr	r0, [pc, #184]	; (8000768 <main+0x11c>)
 80006b0:	f002 fe54 	bl	800335c <siprintf>
	norflash_write((uint8_t *)datatemp, flashsize - 100, TEXT_SIZE);      /* 从倒数第100个地址处开始,写入SIZE长度的数据 */
 80006b4:	4b28      	ldr	r3, [pc, #160]	; (8000758 <main+0x10c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	3b64      	subs	r3, #100	; 0x64
 80006ba:	220f      	movs	r2, #15
 80006bc:	4619      	mov	r1, r3
 80006be:	482a      	ldr	r0, [pc, #168]	; (8000768 <main+0x11c>)
 80006c0:	f000 fac8 	bl	8000c54 <norflash_write>
	printf("FLASH Write Finished!\r\n");
 80006c4:	4829      	ldr	r0, [pc, #164]	; (800076c <main+0x120>)
 80006c6:	f002 fe41 	bl	800334c <puts>
	HAL_Delay(500);
 80006ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006ce:	f000 fe41 	bl	8001354 <HAL_Delay>


	printf("Start Read FLASH... .\r\n");
 80006d2:	4827      	ldr	r0, [pc, #156]	; (8000770 <main+0x124>)
 80006d4:	f002 fe3a 	bl	800334c <puts>
	norflash_read(datatemp, flashsize - 100, TEXT_SIZE);
 80006d8:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <main+0x10c>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	3b64      	subs	r3, #100	; 0x64
 80006de:	220f      	movs	r2, #15
 80006e0:	4619      	mov	r1, r3
 80006e2:	4821      	ldr	r0, [pc, #132]	; (8000768 <main+0x11c>)
 80006e4:	f000 fa16 	bl	8000b14 <norflash_read>
	printf("The Data Readed Is: ");
 80006e8:	4822      	ldr	r0, [pc, #136]	; (8000774 <main+0x128>)
 80006ea:	f002 fdc1 	bl	8003270 <iprintf>
	for(i=0;i<TEXT_SIZE;i++)
 80006ee:	4b22      	ldr	r3, [pc, #136]	; (8000778 <main+0x12c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	801a      	strh	r2, [r3, #0]
 80006f4:	e00d      	b.n	8000712 <main+0xc6>
		printf("%c",datatemp[i]);
 80006f6:	4b20      	ldr	r3, [pc, #128]	; (8000778 <main+0x12c>)
 80006f8:	881b      	ldrh	r3, [r3, #0]
 80006fa:	461a      	mov	r2, r3
 80006fc:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <main+0x11c>)
 80006fe:	5c9b      	ldrb	r3, [r3, r2]
 8000700:	4618      	mov	r0, r3
 8000702:	f002 fdc7 	bl	8003294 <putchar>
	for(i=0;i<TEXT_SIZE;i++)
 8000706:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <main+0x12c>)
 8000708:	881b      	ldrh	r3, [r3, #0]
 800070a:	3301      	adds	r3, #1
 800070c:	b29a      	uxth	r2, r3
 800070e:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <main+0x12c>)
 8000710:	801a      	strh	r2, [r3, #0]
 8000712:	4b19      	ldr	r3, [pc, #100]	; (8000778 <main+0x12c>)
 8000714:	881b      	ldrh	r3, [r3, #0]
 8000716:	2b0e      	cmp	r3, #14
 8000718:	d9ed      	bls.n	80006f6 <main+0xaa>
	printf("\r\n");
 800071a:	4818      	ldr	r0, [pc, #96]	; (800077c <main+0x130>)
 800071c:	f002 fe16 	bl	800334c <puts>
	i++;
 8000720:	4b15      	ldr	r3, [pc, #84]	; (8000778 <main+0x12c>)
 8000722:	881b      	ldrh	r3, [r3, #0]
 8000724:	3301      	adds	r3, #1
 8000726:	b29a      	uxth	r2, r3
 8000728:	4b13      	ldr	r3, [pc, #76]	; (8000778 <main+0x12c>)
 800072a:	801a      	strh	r2, [r3, #0]
    if (i == 20)
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <main+0x12c>)
 800072e:	881b      	ldrh	r3, [r3, #0]
 8000730:	2b14      	cmp	r3, #20
 8000732:	d107      	bne.n	8000744 <main+0xf8>
    {
    	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);       /* LED0闪烁 */
 8000734:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000738:	4806      	ldr	r0, [pc, #24]	; (8000754 <main+0x108>)
 800073a:	f001 f8ca 	bl	80018d2 <HAL_GPIO_TogglePin>
        i = 0;
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <main+0x12c>)
 8000740:	2200      	movs	r2, #0
 8000742:	801a      	strh	r2, [r3, #0]
    }
	HAL_Delay(1000);
 8000744:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000748:	f000 fe04 	bl	8001354 <HAL_Delay>
	printf("Start Write FLASH....\r\n");
 800074c:	e7aa      	b.n	80006a4 <main+0x58>
 800074e:	bf00      	nop
 8000750:	200000a0 	.word	0x200000a0
 8000754:	40021400 	.word	0x40021400
 8000758:	2000009c 	.word	0x2000009c
 800075c:	08004450 	.word	0x08004450
 8000760:	080044d0 	.word	0x080044d0
 8000764:	08004468 	.word	0x08004468
 8000768:	2000008c 	.word	0x2000008c
 800076c:	0800446c 	.word	0x0800446c
 8000770:	08004484 	.word	0x08004484
 8000774:	0800449c 	.word	0x0800449c
 8000778:	20000088 	.word	0x20000088
 800077c:	080044b4 	.word	0x080044b4

08000780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b094      	sub	sp, #80	; 0x50
 8000784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000786:	f107 0320 	add.w	r3, r7, #32
 800078a:	2230      	movs	r2, #48	; 0x30
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f002 fedc 	bl	800354c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a4:	2300      	movs	r3, #0
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	4b28      	ldr	r3, [pc, #160]	; (800084c <SystemClock_Config+0xcc>)
 80007aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ac:	4a27      	ldr	r2, [pc, #156]	; (800084c <SystemClock_Config+0xcc>)
 80007ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b2:	6413      	str	r3, [r2, #64]	; 0x40
 80007b4:	4b25      	ldr	r3, [pc, #148]	; (800084c <SystemClock_Config+0xcc>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007c0:	2300      	movs	r3, #0
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	4b22      	ldr	r3, [pc, #136]	; (8000850 <SystemClock_Config+0xd0>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a21      	ldr	r2, [pc, #132]	; (8000850 <SystemClock_Config+0xd0>)
 80007ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ce:	6013      	str	r3, [r2, #0]
 80007d0:	4b1f      	ldr	r3, [pc, #124]	; (8000850 <SystemClock_Config+0xd0>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007dc:	2301      	movs	r3, #1
 80007de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e6:	2302      	movs	r3, #2
 80007e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007f0:	2304      	movs	r3, #4
 80007f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007f4:	23a8      	movs	r3, #168	; 0xa8
 80007f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f8:	2302      	movs	r3, #2
 80007fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007fc:	2304      	movs	r3, #4
 80007fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000800:	f107 0320 	add.w	r3, r7, #32
 8000804:	4618      	mov	r0, r3
 8000806:	f001 f87f 	bl	8001908 <HAL_RCC_OscConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000810:	f000 f820 	bl	8000854 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000814:	230f      	movs	r3, #15
 8000816:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000818:	2302      	movs	r3, #2
 800081a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000820:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000824:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000826:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800082c:	f107 030c 	add.w	r3, r7, #12
 8000830:	2105      	movs	r1, #5
 8000832:	4618      	mov	r0, r3
 8000834:	f001 fae0 	bl	8001df8 <HAL_RCC_ClockConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800083e:	f000 f809 	bl	8000854 <Error_Handler>
  }
}
 8000842:	bf00      	nop
 8000844:	3750      	adds	r7, #80	; 0x50
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800
 8000850:	40007000 	.word	0x40007000

08000854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  printf("something wrong ....\r\n");
 8000858:	4802      	ldr	r0, [pc, #8]	; (8000864 <Error_Handler+0x10>)
 800085a:	f002 fd77 	bl	800334c <puts>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085e:	b672      	cpsid	i
}
 8000860:	bf00      	nop
  __disable_irq();

  while (1)
 8000862:	e7fe      	b.n	8000862 <Error_Handler+0xe>
 8000864:	080044b8 	.word	0x080044b8

08000868 <norflash_init>:
 * @brief       初始化SPI NOR FLASH
 * @param       无
 * @retval      无
 */
void norflash_init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b088      	sub	sp, #32
 800086c:	af00      	add	r7, sp, #0
    uint8_t temp;

    NORFLASH_CS_GPIO_CLK_ENABLE();      /* NORFLASH CS脚 时钟使能 */
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	4b2b      	ldr	r3, [pc, #172]	; (8000920 <norflash_init+0xb8>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a2a      	ldr	r2, [pc, #168]	; (8000920 <norflash_init+0xb8>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b28      	ldr	r3, [pc, #160]	; (8000920 <norflash_init+0xb8>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]

    GPIO_InitTypeDef gpio_init_struct;
    gpio_init_struct.Pin = NORFLASH_CS_GPIO_PIN;
 800088a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800088e:	60bb      	str	r3, [r7, #8]
    gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;
 8000890:	2301      	movs	r3, #1
 8000892:	60fb      	str	r3, [r7, #12]
    gpio_init_struct.Pull = GPIO_PULLUP;
 8000894:	2301      	movs	r3, #1
 8000896:	613b      	str	r3, [r7, #16]
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000898:	2302      	movs	r3, #2
 800089a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(NORFLASH_CS_GPIO_PORT, &gpio_init_struct); /* CS引脚模式设置(复用输出) */
 800089c:	f107 0308 	add.w	r3, r7, #8
 80008a0:	4619      	mov	r1, r3
 80008a2:	4820      	ldr	r0, [pc, #128]	; (8000924 <norflash_init+0xbc>)
 80008a4:	f000 fe60 	bl	8001568 <HAL_GPIO_Init>

    NORFLASH_CS(1);                         /* 取消片选 */
 80008a8:	2201      	movs	r2, #1
 80008aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008ae:	481d      	ldr	r0, [pc, #116]	; (8000924 <norflash_init+0xbc>)
 80008b0:	f000 fff6 	bl	80018a0 <HAL_GPIO_WritePin>

    MX_SPI1_Init();                            /* 初始化SPI1 */
 80008b4:	f000 fa94 	bl	8000de0 <MX_SPI1_Init>
    
    g_norflash_type = norflash_read_id();   /* 读取FLASH ID. */
 80008b8:	f000 f8fa 	bl	8000ab0 <norflash_read_id>
 80008bc:	4603      	mov	r3, r0
 80008be:	461a      	mov	r2, r3
 80008c0:	4b19      	ldr	r3, [pc, #100]	; (8000928 <norflash_init+0xc0>)
 80008c2:	801a      	strh	r2, [r3, #0]
    
    if (g_norflash_type == W25Q256)         /* SPI FLASH为W25Q256, 必须使能4字节地址模式 */
 80008c4:	4b18      	ldr	r3, [pc, #96]	; (8000928 <norflash_init+0xc0>)
 80008c6:	881b      	ldrh	r3, [r3, #0]
 80008c8:	f64e 7218 	movw	r2, #61208	; 0xef18
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d123      	bne.n	8000918 <norflash_init+0xb0>
    {
        temp = norflash_read_sr(3);         /* 读取状态寄存器3，判断地址模式 */
 80008d0:	2003      	movs	r0, #3
 80008d2:	f000 f877 	bl	80009c4 <norflash_read_sr>
 80008d6:	4603      	mov	r3, r0
 80008d8:	77fb      	strb	r3, [r7, #31]

        if ((temp & 0X01) == 0)             /* 如果不是4字节地址模式,则进入4字节地址模式 */
 80008da:	7ffb      	ldrb	r3, [r7, #31]
 80008dc:	f003 0301 	and.w	r3, r3, #1
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d119      	bne.n	8000918 <norflash_init+0xb0>
        {
            norflash_write_enable();        /* 写使能 */
 80008e4:	f000 f830 	bl	8000948 <norflash_write_enable>
            temp |= 1 << 1;                 /* ADP=1, 上电4位地址模式 */
 80008e8:	7ffb      	ldrb	r3, [r7, #31]
 80008ea:	f043 0302 	orr.w	r3, r3, #2
 80008ee:	77fb      	strb	r3, [r7, #31]
            norflash_write_sr(3, temp);     /* 写SR3 */
 80008f0:	7ffb      	ldrb	r3, [r7, #31]
 80008f2:	4619      	mov	r1, r3
 80008f4:	2003      	movs	r0, #3
 80008f6:	f000 f8a1 	bl	8000a3c <norflash_write_sr>
            
            NORFLASH_CS(0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000900:	4808      	ldr	r0, [pc, #32]	; (8000924 <norflash_init+0xbc>)
 8000902:	f000 ffcd 	bl	80018a0 <HAL_GPIO_WritePin>
            spi1_read_write_byte(FLASH_Enable4ByteAddr);    /* 使能4字节地址指令 */
 8000906:	20b7      	movs	r0, #183	; 0xb7
 8000908:	f000 fa54 	bl	8000db4 <spi1_read_write_byte>
            NORFLASH_CS(1);
 800090c:	2201      	movs	r2, #1
 800090e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000912:	4804      	ldr	r0, [pc, #16]	; (8000924 <norflash_init+0xbc>)
 8000914:	f000 ffc4 	bl	80018a0 <HAL_GPIO_WritePin>
        }
    }

    //printf("ID:%x\r\n", g_norflash_type);
}
 8000918:	bf00      	nop
 800091a:	3720      	adds	r7, #32
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40023800 	.word	0x40023800
 8000924:	40020400 	.word	0x40020400
 8000928:	20000000 	.word	0x20000000

0800092c <norflash_wait_busy>:
 * @brief       等待空闲
 * @param       无
 * @retval      无
 */
static void norflash_wait_busy(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
    while ((norflash_read_sr(1) & 0x01) == 0x01);   /* 等待BUSY位清空 */
 8000930:	bf00      	nop
 8000932:	2001      	movs	r0, #1
 8000934:	f000 f846 	bl	80009c4 <norflash_read_sr>
 8000938:	4603      	mov	r3, r0
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	2b01      	cmp	r3, #1
 8000940:	d0f7      	beq.n	8000932 <norflash_wait_busy+0x6>
}
 8000942:	bf00      	nop
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}

08000948 <norflash_write_enable>:
 *   @note      将S1寄存器的WEL置位
 * @param       无
 * @retval      无
 */
void norflash_write_enable(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
    NORFLASH_CS(0);
 800094c:	2200      	movs	r2, #0
 800094e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000952:	4807      	ldr	r0, [pc, #28]	; (8000970 <norflash_write_enable+0x28>)
 8000954:	f000 ffa4 	bl	80018a0 <HAL_GPIO_WritePin>
    spi1_read_write_byte(FLASH_WriteEnable);   /* 发送写使能 */
 8000958:	2006      	movs	r0, #6
 800095a:	f000 fa2b 	bl	8000db4 <spi1_read_write_byte>
    NORFLASH_CS(1);
 800095e:	2201      	movs	r2, #1
 8000960:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000964:	4802      	ldr	r0, [pc, #8]	; (8000970 <norflash_write_enable+0x28>)
 8000966:	f000 ff9b 	bl	80018a0 <HAL_GPIO_WritePin>
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40020400 	.word	0x40020400

08000974 <norflash_send_address>:
 *   @note      根据芯片型号的不同, 发送24ibt / 32bit地址
 * @param       address : 要发送的地址
 * @retval      无
 */
static void norflash_send_address(uint32_t address)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
    if (g_norflash_type == W25Q256)                     /* 只有W25Q256支持4字节地址模式 */
 800097c:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <norflash_send_address+0x4c>)
 800097e:	881b      	ldrh	r3, [r3, #0]
 8000980:	f64e 7218 	movw	r2, #61208	; 0xef18
 8000984:	4293      	cmp	r3, r2
 8000986:	d105      	bne.n	8000994 <norflash_send_address+0x20>
    {
        spi1_read_write_byte((uint8_t)((address)>>24)); /* 发送 bit31 ~ bit24 地址 */
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	0e1b      	lsrs	r3, r3, #24
 800098c:	b2db      	uxtb	r3, r3
 800098e:	4618      	mov	r0, r3
 8000990:	f000 fa10 	bl	8000db4 <spi1_read_write_byte>
    } 
    spi1_read_write_byte((uint8_t)((address)>>16));     /* 发送 bit23 ~ bit16 地址 */
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	0c1b      	lsrs	r3, r3, #16
 8000998:	b2db      	uxtb	r3, r3
 800099a:	4618      	mov	r0, r3
 800099c:	f000 fa0a 	bl	8000db4 <spi1_read_write_byte>
    spi1_read_write_byte((uint8_t)((address)>>8));      /* 发送 bit15 ~ bit8  地址 */
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	0a1b      	lsrs	r3, r3, #8
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 fa04 	bl	8000db4 <spi1_read_write_byte>
    spi1_read_write_byte((uint8_t)address);             /* 发送 bit7  ~ bit0  地址 */
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 f9ff 	bl	8000db4 <spi1_read_write_byte>
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000000 	.word	0x20000000

080009c4 <norflash_read_sr>:
 *
 * @param       regno: 状态寄存器号，范:1~3
 * @retval      状态寄存器值
 */
uint8_t norflash_read_sr(uint8_t regno)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	71fb      	strb	r3, [r7, #7]
    uint8_t byte = 0, command = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	73bb      	strb	r3, [r7, #14]
 80009d2:	2300      	movs	r3, #0
 80009d4:	73fb      	strb	r3, [r7, #15]

    switch (regno)
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	2b03      	cmp	r3, #3
 80009da:	d00c      	beq.n	80009f6 <norflash_read_sr+0x32>
 80009dc:	2b03      	cmp	r3, #3
 80009de:	dc0d      	bgt.n	80009fc <norflash_read_sr+0x38>
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d002      	beq.n	80009ea <norflash_read_sr+0x26>
 80009e4:	2b02      	cmp	r3, #2
 80009e6:	d003      	beq.n	80009f0 <norflash_read_sr+0x2c>
 80009e8:	e008      	b.n	80009fc <norflash_read_sr+0x38>
    {
        case 1:
            command = FLASH_ReadStatusReg1;  /* 读状态寄存器1指令 */
 80009ea:	2305      	movs	r3, #5
 80009ec:	73fb      	strb	r3, [r7, #15]
            break;
 80009ee:	e008      	b.n	8000a02 <norflash_read_sr+0x3e>

        case 2:
            command = FLASH_ReadStatusReg2;  /* 读状态寄存器2指令 */
 80009f0:	2335      	movs	r3, #53	; 0x35
 80009f2:	73fb      	strb	r3, [r7, #15]
            break;
 80009f4:	e005      	b.n	8000a02 <norflash_read_sr+0x3e>

        case 3:
            command = FLASH_ReadStatusReg3;  /* 读状态寄存器3指令 */
 80009f6:	2315      	movs	r3, #21
 80009f8:	73fb      	strb	r3, [r7, #15]
            break;
 80009fa:	e002      	b.n	8000a02 <norflash_read_sr+0x3e>

        default:
            command = FLASH_ReadStatusReg1;
 80009fc:	2305      	movs	r3, #5
 80009fe:	73fb      	strb	r3, [r7, #15]
            break;
 8000a00:	bf00      	nop
    }

    NORFLASH_CS(0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a08:	480b      	ldr	r0, [pc, #44]	; (8000a38 <norflash_read_sr+0x74>)
 8000a0a:	f000 ff49 	bl	80018a0 <HAL_GPIO_WritePin>
    spi1_read_write_byte(command);      /* 发送读寄存器命令 */
 8000a0e:	7bfb      	ldrb	r3, [r7, #15]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f000 f9cf 	bl	8000db4 <spi1_read_write_byte>
    byte = spi1_read_write_byte(0Xff);  /* 读取一个字节 */
 8000a16:	20ff      	movs	r0, #255	; 0xff
 8000a18:	f000 f9cc 	bl	8000db4 <spi1_read_write_byte>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	73bb      	strb	r3, [r7, #14]
    NORFLASH_CS(1);
 8000a20:	2201      	movs	r2, #1
 8000a22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a26:	4804      	ldr	r0, [pc, #16]	; (8000a38 <norflash_read_sr+0x74>)
 8000a28:	f000 ff3a 	bl	80018a0 <HAL_GPIO_WritePin>
    
    return byte;
 8000a2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40020400 	.word	0x40020400

08000a3c <norflash_write_sr>:
 * @param       regno: 状态寄存器号，范:1~3
 * @param       sr   : 要写入状态寄存器的值
 * @retval      无
 */
void norflash_write_sr(uint8_t regno, uint8_t sr)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	460a      	mov	r2, r1
 8000a46:	71fb      	strb	r3, [r7, #7]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	71bb      	strb	r3, [r7, #6]
    uint8_t command = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	73fb      	strb	r3, [r7, #15]

    switch (regno)
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	2b03      	cmp	r3, #3
 8000a54:	d00c      	beq.n	8000a70 <norflash_write_sr+0x34>
 8000a56:	2b03      	cmp	r3, #3
 8000a58:	dc0d      	bgt.n	8000a76 <norflash_write_sr+0x3a>
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d002      	beq.n	8000a64 <norflash_write_sr+0x28>
 8000a5e:	2b02      	cmp	r3, #2
 8000a60:	d003      	beq.n	8000a6a <norflash_write_sr+0x2e>
 8000a62:	e008      	b.n	8000a76 <norflash_write_sr+0x3a>
    {
        case 1:
            command = FLASH_WriteStatusReg1;  /* 写状态寄存器1指令 */
 8000a64:	2301      	movs	r3, #1
 8000a66:	73fb      	strb	r3, [r7, #15]
            break;
 8000a68:	e008      	b.n	8000a7c <norflash_write_sr+0x40>

        case 2:
            command = FLASH_WriteStatusReg2;  /* 写状态寄存器2指令 */
 8000a6a:	2331      	movs	r3, #49	; 0x31
 8000a6c:	73fb      	strb	r3, [r7, #15]
            break;
 8000a6e:	e005      	b.n	8000a7c <norflash_write_sr+0x40>

        case 3:
            command = FLASH_WriteStatusReg3;  /* 写状态寄存器3指令 */
 8000a70:	2311      	movs	r3, #17
 8000a72:	73fb      	strb	r3, [r7, #15]
            break;
 8000a74:	e002      	b.n	8000a7c <norflash_write_sr+0x40>

        default:
            command = FLASH_WriteStatusReg1;
 8000a76:	2301      	movs	r3, #1
 8000a78:	73fb      	strb	r3, [r7, #15]
            break;
 8000a7a:	bf00      	nop
    }

    NORFLASH_CS(0);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a82:	480a      	ldr	r0, [pc, #40]	; (8000aac <norflash_write_sr+0x70>)
 8000a84:	f000 ff0c 	bl	80018a0 <HAL_GPIO_WritePin>
    spi1_read_write_byte(command);  /* 发送读寄存器命令 */
 8000a88:	7bfb      	ldrb	r3, [r7, #15]
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 f992 	bl	8000db4 <spi1_read_write_byte>
    spi1_read_write_byte(sr);       /* 写入一个字节 */
 8000a90:	79bb      	ldrb	r3, [r7, #6]
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 f98e 	bl	8000db4 <spi1_read_write_byte>
    NORFLASH_CS(1);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a9e:	4803      	ldr	r0, [pc, #12]	; (8000aac <norflash_write_sr+0x70>)
 8000aa0:	f000 fefe 	bl	80018a0 <HAL_GPIO_WritePin>
}
 8000aa4:	bf00      	nop
 8000aa6:	3710      	adds	r7, #16
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40020400 	.word	0x40020400

08000ab0 <norflash_read_id>:
 * @param       无
 * @retval      FLASH芯片ID
 *   @note      芯片ID列表见: norflash.h, 芯片列表部分
 */
uint16_t norflash_read_id(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
    uint16_t deviceid;

    NORFLASH_CS(0);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000abc:	4814      	ldr	r0, [pc, #80]	; (8000b10 <norflash_read_id+0x60>)
 8000abe:	f000 feef 	bl	80018a0 <HAL_GPIO_WritePin>
    spi1_read_write_byte(FLASH_ManufactDeviceID);   /* 发送读 ID 命令 */
 8000ac2:	2090      	movs	r0, #144	; 0x90
 8000ac4:	f000 f976 	bl	8000db4 <spi1_read_write_byte>
    spi1_read_write_byte(0);                        /* 写入一个字节 */
 8000ac8:	2000      	movs	r0, #0
 8000aca:	f000 f973 	bl	8000db4 <spi1_read_write_byte>
    spi1_read_write_byte(0);
 8000ace:	2000      	movs	r0, #0
 8000ad0:	f000 f970 	bl	8000db4 <spi1_read_write_byte>
    spi1_read_write_byte(0);
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	f000 f96d 	bl	8000db4 <spi1_read_write_byte>
    deviceid = spi1_read_write_byte(0xFF) << 8;     /* 读取高8位字节 */
 8000ada:	20ff      	movs	r0, #255	; 0xff
 8000adc:	f000 f96a 	bl	8000db4 <spi1_read_write_byte>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	021b      	lsls	r3, r3, #8
 8000ae6:	80fb      	strh	r3, [r7, #6]
    deviceid |= spi1_read_write_byte(0xFF);         /* 读取低8位字节 */
 8000ae8:	20ff      	movs	r0, #255	; 0xff
 8000aea:	f000 f963 	bl	8000db4 <spi1_read_write_byte>
 8000aee:	4603      	mov	r3, r0
 8000af0:	b29a      	uxth	r2, r3
 8000af2:	88fb      	ldrh	r3, [r7, #6]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	80fb      	strh	r3, [r7, #6]
    NORFLASH_CS(1);
 8000af8:	2201      	movs	r2, #1
 8000afa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000afe:	4804      	ldr	r0, [pc, #16]	; (8000b10 <norflash_read_id+0x60>)
 8000b00:	f000 fece 	bl	80018a0 <HAL_GPIO_WritePin>

    return deviceid;
 8000b04:	88fb      	ldrh	r3, [r7, #6]
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40020400 	.word	0x40020400

08000b14 <norflash_read>:
 * @param       addr    : 开始读取的地址(最大32bit)
 * @param       datalen : 要读取的字节数(最大65535)
 * @retval      无
 */
void norflash_read(uint8_t *pbuf, uint32_t addr, uint16_t datalen)
{
 8000b14:	b590      	push	{r4, r7, lr}
 8000b16:	b087      	sub	sp, #28
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	4613      	mov	r3, r2
 8000b20:	80fb      	strh	r3, [r7, #6]
    uint16_t i;

    NORFLASH_CS(0);
 8000b22:	2200      	movs	r2, #0
 8000b24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b28:	4812      	ldr	r0, [pc, #72]	; (8000b74 <norflash_read+0x60>)
 8000b2a:	f000 feb9 	bl	80018a0 <HAL_GPIO_WritePin>
    spi1_read_write_byte(FLASH_ReadData);       /* 发送读取命令 */
 8000b2e:	2003      	movs	r0, #3
 8000b30:	f000 f940 	bl	8000db4 <spi1_read_write_byte>
    norflash_send_address(addr);                /* 发送地址 */
 8000b34:	68b8      	ldr	r0, [r7, #8]
 8000b36:	f7ff ff1d 	bl	8000974 <norflash_send_address>
    
    for (i = 0; i < datalen; i++)
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	82fb      	strh	r3, [r7, #22]
 8000b3e:	e00a      	b.n	8000b56 <norflash_read+0x42>
    {
        pbuf[i] = spi1_read_write_byte(0XFF);   /* 循环读取 */
 8000b40:	8afb      	ldrh	r3, [r7, #22]
 8000b42:	68fa      	ldr	r2, [r7, #12]
 8000b44:	18d4      	adds	r4, r2, r3
 8000b46:	20ff      	movs	r0, #255	; 0xff
 8000b48:	f000 f934 	bl	8000db4 <spi1_read_write_byte>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	7023      	strb	r3, [r4, #0]
    for (i = 0; i < datalen; i++)
 8000b50:	8afb      	ldrh	r3, [r7, #22]
 8000b52:	3301      	adds	r3, #1
 8000b54:	82fb      	strh	r3, [r7, #22]
 8000b56:	8afa      	ldrh	r2, [r7, #22]
 8000b58:	88fb      	ldrh	r3, [r7, #6]
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	d3f0      	bcc.n	8000b40 <norflash_read+0x2c>
    }
    
    NORFLASH_CS(1);
 8000b5e:	2201      	movs	r2, #1
 8000b60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b64:	4803      	ldr	r0, [pc, #12]	; (8000b74 <norflash_read+0x60>)
 8000b66:	f000 fe9b 	bl	80018a0 <HAL_GPIO_WritePin>
}
 8000b6a:	bf00      	nop
 8000b6c:	371c      	adds	r7, #28
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd90      	pop	{r4, r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40020400 	.word	0x40020400

08000b78 <norflash_write_page>:
 * @param       addr    : 开始写入的地址(最大32bit)
 * @param       datalen : 要写入的字节数(最大256),该数不应该超过该页的剩余字节数!!!
 * @retval      无
 */
static void norflash_write_page(uint8_t *pbuf, uint32_t addr, uint16_t datalen)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	4613      	mov	r3, r2
 8000b84:	80fb      	strh	r3, [r7, #6]
    uint16_t i;

    norflash_write_enable();                    /* 写使能 */
 8000b86:	f7ff fedf 	bl	8000948 <norflash_write_enable>

    NORFLASH_CS(0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b90:	4812      	ldr	r0, [pc, #72]	; (8000bdc <norflash_write_page+0x64>)
 8000b92:	f000 fe85 	bl	80018a0 <HAL_GPIO_WritePin>
    spi1_read_write_byte(FLASH_PageProgram);    /* 发送写页命令 */
 8000b96:	2002      	movs	r0, #2
 8000b98:	f000 f90c 	bl	8000db4 <spi1_read_write_byte>
    norflash_send_address(addr);                /* 发送地址 */
 8000b9c:	68b8      	ldr	r0, [r7, #8]
 8000b9e:	f7ff fee9 	bl	8000974 <norflash_send_address>

    for (i = 0; i < datalen; i++)
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	82fb      	strh	r3, [r7, #22]
 8000ba6:	e009      	b.n	8000bbc <norflash_write_page+0x44>
    {
        spi1_read_write_byte(pbuf[i]);          /* 循环读取 */
 8000ba8:	8afb      	ldrh	r3, [r7, #22]
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	4413      	add	r3, r2
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 f8ff 	bl	8000db4 <spi1_read_write_byte>
    for (i = 0; i < datalen; i++)
 8000bb6:	8afb      	ldrh	r3, [r7, #22]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	82fb      	strh	r3, [r7, #22]
 8000bbc:	8afa      	ldrh	r2, [r7, #22]
 8000bbe:	88fb      	ldrh	r3, [r7, #6]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d3f1      	bcc.n	8000ba8 <norflash_write_page+0x30>
    }
    
    NORFLASH_CS(1);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bca:	4804      	ldr	r0, [pc, #16]	; (8000bdc <norflash_write_page+0x64>)
 8000bcc:	f000 fe68 	bl	80018a0 <HAL_GPIO_WritePin>
    norflash_wait_busy();       /* 等待写入结束 */
 8000bd0:	f7ff feac 	bl	800092c <norflash_wait_busy>
}
 8000bd4:	bf00      	nop
 8000bd6:	3718      	adds	r7, #24
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40020400 	.word	0x40020400

08000be0 <norflash_write_nocheck>:
 * @param       addr    : 开始写入的地址(最大32bit)
 * @param       datalen : 要写入的字节数(最大65535)
 * @retval      无
 */
static void norflash_write_nocheck(uint8_t *pbuf, uint32_t addr, uint16_t datalen)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	4613      	mov	r3, r2
 8000bec:	80fb      	strh	r3, [r7, #6]
    uint16_t pageremain;
    pageremain = 256 - addr % 256;  /* 单页剩余的字节数 */
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000bfa:	82fb      	strh	r3, [r7, #22]

    if (datalen <= pageremain)      /* 不大于256个字节 */
 8000bfc:	88fa      	ldrh	r2, [r7, #6]
 8000bfe:	8afb      	ldrh	r3, [r7, #22]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d801      	bhi.n	8000c08 <norflash_write_nocheck+0x28>
    {
        pageremain = datalen;
 8000c04:	88fb      	ldrh	r3, [r7, #6]
 8000c06:	82fb      	strh	r3, [r7, #22]
    while (1)
    {
        /* 当写入字节比页内剩余地址还少的时候, 一次性写完
         * 当写入直接比页内剩余地址还多的时候, 先写完整个页内剩余地址, 然后根据剩余长度进行不同处理
         */
        norflash_write_page(pbuf, addr, pageremain);
 8000c08:	8afb      	ldrh	r3, [r7, #22]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	68b9      	ldr	r1, [r7, #8]
 8000c0e:	68f8      	ldr	r0, [r7, #12]
 8000c10:	f7ff ffb2 	bl	8000b78 <norflash_write_page>

        if (datalen == pageremain)      /* 写入结束了 */
 8000c14:	88fa      	ldrh	r2, [r7, #6]
 8000c16:	8afb      	ldrh	r3, [r7, #22]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d016      	beq.n	8000c4a <norflash_write_nocheck+0x6a>
        {
            break;
        }
        else                            /* datalen > pageremain */
        {
            pbuf += pageremain;         /* pbuf指针地址偏移,前面已经写了pageremain字节 */
 8000c1c:	8afb      	ldrh	r3, [r7, #22]
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	4413      	add	r3, r2
 8000c22:	60fb      	str	r3, [r7, #12]
            addr += pageremain;         /* 写地址偏移,前面已经写了pageremain字节 */
 8000c24:	8afb      	ldrh	r3, [r7, #22]
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	4413      	add	r3, r2
 8000c2a:	60bb      	str	r3, [r7, #8]
            datalen -= pageremain;      /* 写入总长度减去已经写入了的字节数 */
 8000c2c:	88fa      	ldrh	r2, [r7, #6]
 8000c2e:	8afb      	ldrh	r3, [r7, #22]
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	80fb      	strh	r3, [r7, #6]

            if (datalen > 256)          /* 剩余数据还大于一页,可以一次写一页 */
 8000c34:	88fb      	ldrh	r3, [r7, #6]
 8000c36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c3a:	d903      	bls.n	8000c44 <norflash_write_nocheck+0x64>
            {
                pageremain = 256;       /* 一次可以写入256个字节 */
 8000c3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c40:	82fb      	strh	r3, [r7, #22]
 8000c42:	e7e1      	b.n	8000c08 <norflash_write_nocheck+0x28>
            }
            else                        /* 剩余数据小于一页,可以一次写完 */
            {
                pageremain = datalen;   /* 不够256个字节了 */
 8000c44:	88fb      	ldrh	r3, [r7, #6]
 8000c46:	82fb      	strh	r3, [r7, #22]
        norflash_write_page(pbuf, addr, pageremain);
 8000c48:	e7de      	b.n	8000c08 <norflash_write_nocheck+0x28>
            break;
 8000c4a:	bf00      	nop
            }
        }
    }
}
 8000c4c:	bf00      	nop
 8000c4e:	3718      	adds	r7, #24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <norflash_write>:
 * @retval      无
 */
uint8_t g_norflash_buf[4096];   /* 扇区缓存 */

void norflash_write(uint8_t *pbuf, uint32_t addr, uint16_t datalen)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b088      	sub	sp, #32
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	80fb      	strh	r3, [r7, #6]
    uint16_t secoff;
    uint16_t secremain;
    uint16_t i;
    uint8_t *norflash_buf;

    norflash_buf = g_norflash_buf;
 8000c62:	4b40      	ldr	r3, [pc, #256]	; (8000d64 <norflash_write+0x110>)
 8000c64:	613b      	str	r3, [r7, #16]
    secpos = addr / 4096;       /* 扇区地址 */
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	0b1b      	lsrs	r3, r3, #12
 8000c6a:	61fb      	str	r3, [r7, #28]
    secoff = addr % 4096;       /* 在扇区内的偏移 */
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c74:	837b      	strh	r3, [r7, #26]
    secremain = 4096 - secoff;  /* 扇区剩余空间大小 */
 8000c76:	8b7b      	ldrh	r3, [r7, #26]
 8000c78:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8000c7c:	833b      	strh	r3, [r7, #24]

    //printf("ad:%X,nb:%X\r\n", addr, datalen); /* 测试用 */
    if (datalen <= secremain)
 8000c7e:	88fa      	ldrh	r2, [r7, #6]
 8000c80:	8b3b      	ldrh	r3, [r7, #24]
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d801      	bhi.n	8000c8a <norflash_write+0x36>
    {
        secremain = datalen;    /* 不大于4096个字节 */
 8000c86:	88fb      	ldrh	r3, [r7, #6]
 8000c88:	833b      	strh	r3, [r7, #24]
    }

    while (1)
    {
        norflash_read(norflash_buf, secpos * 4096, 4096);   /* 读出整个扇区的内容 */
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	031b      	lsls	r3, r3, #12
 8000c8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c92:	4619      	mov	r1, r3
 8000c94:	6938      	ldr	r0, [r7, #16]
 8000c96:	f7ff ff3d 	bl	8000b14 <norflash_read>

        for (i = 0; i < secremain; i++)     /* 校验数据 */
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	82fb      	strh	r3, [r7, #22]
 8000c9e:	e00b      	b.n	8000cb8 <norflash_write+0x64>
        {
            if (norflash_buf[secoff + i] != 0XFF)
 8000ca0:	8b7a      	ldrh	r2, [r7, #26]
 8000ca2:	8afb      	ldrh	r3, [r7, #22]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	4413      	add	r3, r2
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	2bff      	cmp	r3, #255	; 0xff
 8000cb0:	d107      	bne.n	8000cc2 <norflash_write+0x6e>
        for (i = 0; i < secremain; i++)     /* 校验数据 */
 8000cb2:	8afb      	ldrh	r3, [r7, #22]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	82fb      	strh	r3, [r7, #22]
 8000cb8:	8afa      	ldrh	r2, [r7, #22]
 8000cba:	8b3b      	ldrh	r3, [r7, #24]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d3ef      	bcc.n	8000ca0 <norflash_write+0x4c>
 8000cc0:	e000      	b.n	8000cc4 <norflash_write+0x70>
            {
                break;                      /* 需要擦除, 直接退出for循环 */
 8000cc2:	bf00      	nop
            }
        }

        if (i < secremain)                  /* 需要擦除 */
 8000cc4:	8afa      	ldrh	r2, [r7, #22]
 8000cc6:	8b3b      	ldrh	r3, [r7, #24]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d220      	bcs.n	8000d0e <norflash_write+0xba>
        {
            norflash_erase_sector(secpos);  /* 擦除这个扇区 */
 8000ccc:	69f8      	ldr	r0, [r7, #28]
 8000cce:	f000 f84b 	bl	8000d68 <norflash_erase_sector>

            for (i = 0; i < secremain; i++) /* 复制 */
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	82fb      	strh	r3, [r7, #22]
 8000cd6:	e00d      	b.n	8000cf4 <norflash_write+0xa0>
            {
                norflash_buf[i + secoff] = pbuf[i];
 8000cd8:	8afb      	ldrh	r3, [r7, #22]
 8000cda:	68fa      	ldr	r2, [r7, #12]
 8000cdc:	441a      	add	r2, r3
 8000cde:	8af9      	ldrh	r1, [r7, #22]
 8000ce0:	8b7b      	ldrh	r3, [r7, #26]
 8000ce2:	440b      	add	r3, r1
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	440b      	add	r3, r1
 8000cea:	7812      	ldrb	r2, [r2, #0]
 8000cec:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < secremain; i++) /* 复制 */
 8000cee:	8afb      	ldrh	r3, [r7, #22]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	82fb      	strh	r3, [r7, #22]
 8000cf4:	8afa      	ldrh	r2, [r7, #22]
 8000cf6:	8b3b      	ldrh	r3, [r7, #24]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d3ed      	bcc.n	8000cd8 <norflash_write+0x84>
            }

            norflash_write_nocheck(norflash_buf, secpos * 4096, 4096);  /* 写入整个扇区 */
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	031b      	lsls	r3, r3, #12
 8000d00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d04:	4619      	mov	r1, r3
 8000d06:	6938      	ldr	r0, [r7, #16]
 8000d08:	f7ff ff6a 	bl	8000be0 <norflash_write_nocheck>
 8000d0c:	e005      	b.n	8000d1a <norflash_write+0xc6>
        }
        else    /* 写已经擦除了的,直接写入扇区剩余区间. */
        {
            norflash_write_nocheck(pbuf, addr, secremain);              /* 直接写扇区 */
 8000d0e:	8b3b      	ldrh	r3, [r7, #24]
 8000d10:	461a      	mov	r2, r3
 8000d12:	68b9      	ldr	r1, [r7, #8]
 8000d14:	68f8      	ldr	r0, [r7, #12]
 8000d16:	f7ff ff63 	bl	8000be0 <norflash_write_nocheck>
        }

        if (datalen == secremain)
 8000d1a:	88fa      	ldrh	r2, [r7, #6]
 8000d1c:	8b3b      	ldrh	r3, [r7, #24]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d01b      	beq.n	8000d5a <norflash_write+0x106>
        {
            break;  /* 写入结束了 */
        }
        else        /* 写入未结束 */
        {
            secpos++;               /* 扇区地址增1 */
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	3301      	adds	r3, #1
 8000d26:	61fb      	str	r3, [r7, #28]
            secoff = 0;             /* 偏移位置为0 */
 8000d28:	2300      	movs	r3, #0
 8000d2a:	837b      	strh	r3, [r7, #26]

            pbuf += secremain;      /* 指针偏移 */
 8000d2c:	8b3b      	ldrh	r3, [r7, #24]
 8000d2e:	68fa      	ldr	r2, [r7, #12]
 8000d30:	4413      	add	r3, r2
 8000d32:	60fb      	str	r3, [r7, #12]
            addr += secremain;      /* 写地址偏移 */
 8000d34:	8b3b      	ldrh	r3, [r7, #24]
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	4413      	add	r3, r2
 8000d3a:	60bb      	str	r3, [r7, #8]
            datalen -= secremain;   /* 字节数递减 */
 8000d3c:	88fa      	ldrh	r2, [r7, #6]
 8000d3e:	8b3b      	ldrh	r3, [r7, #24]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	80fb      	strh	r3, [r7, #6]

            if (datalen > 4096)
 8000d44:	88fb      	ldrh	r3, [r7, #6]
 8000d46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d4a:	d903      	bls.n	8000d54 <norflash_write+0x100>
            {
                secremain = 4096;   /* 下一个扇区还是写不完 */
 8000d4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d50:	833b      	strh	r3, [r7, #24]
 8000d52:	e79a      	b.n	8000c8a <norflash_write+0x36>
            }
            else
            {
                secremain = datalen;/* 下一个扇区可以写完了 */
 8000d54:	88fb      	ldrh	r3, [r7, #6]
 8000d56:	833b      	strh	r3, [r7, #24]
        norflash_read(norflash_buf, secpos * 4096, 4096);   /* 读出整个扇区的内容 */
 8000d58:	e797      	b.n	8000c8a <norflash_write+0x36>
            break;  /* 写入结束了 */
 8000d5a:	bf00      	nop
            }
        }
    }
}
 8000d5c:	bf00      	nop
 8000d5e:	3720      	adds	r7, #32
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	200000a4 	.word	0x200000a4

08000d68 <norflash_erase_sector>:
 * 
 * @param       saddr : 扇区地址 根据实际容量设置
 * @retval      无
 */
void norflash_erase_sector(uint32_t saddr)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
    //printf("fe:%x\r\n", saddr);   /* 监视falsh擦除情况,测试用 */
    saddr *= 4096;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	031b      	lsls	r3, r3, #12
 8000d74:	607b      	str	r3, [r7, #4]
    norflash_write_enable();        /* 写使能 */
 8000d76:	f7ff fde7 	bl	8000948 <norflash_write_enable>
    norflash_wait_busy();           /* 等待空闲 */
 8000d7a:	f7ff fdd7 	bl	800092c <norflash_wait_busy>

    NORFLASH_CS(0);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d84:	480a      	ldr	r0, [pc, #40]	; (8000db0 <norflash_erase_sector+0x48>)
 8000d86:	f000 fd8b 	bl	80018a0 <HAL_GPIO_WritePin>
    spi1_read_write_byte(FLASH_SectorErase);    /* 发送写页命令 */
 8000d8a:	2020      	movs	r0, #32
 8000d8c:	f000 f812 	bl	8000db4 <spi1_read_write_byte>
    norflash_send_address(saddr);   /* 发送地址 */
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f7ff fdef 	bl	8000974 <norflash_send_address>
    NORFLASH_CS(1);
 8000d96:	2201      	movs	r2, #1
 8000d98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d9c:	4804      	ldr	r0, [pc, #16]	; (8000db0 <norflash_erase_sector+0x48>)
 8000d9e:	f000 fd7f 	bl	80018a0 <HAL_GPIO_WritePin>
    norflash_wait_busy();           /* 等待扇区擦除完成 */
 8000da2:	f7ff fdc3 	bl	800092c <norflash_wait_busy>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40020400 	.word	0x40020400

08000db4 <spi1_read_write_byte>:



uint8_t spi1_read_write_byte(uint8_t txdata)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af02      	add	r7, sp, #8
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
    uint8_t rxdata;
    HAL_SPI_TransmitReceive(&hspi1, &txdata, &rxdata, 1, 1000);
 8000dbe:	f107 020f 	add.w	r2, r7, #15
 8000dc2:	1df9      	adds	r1, r7, #7
 8000dc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc8:	9300      	str	r3, [sp, #0]
 8000dca:	2301      	movs	r3, #1
 8000dcc:	4803      	ldr	r0, [pc, #12]	; (8000ddc <spi1_read_write_byte+0x28>)
 8000dce:	f001 fabc 	bl	800234a <HAL_SPI_TransmitReceive>
    return rxdata; /* 返回收到的数据 */
 8000dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	200010a4 	.word	0x200010a4

08000de0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000de4:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <MX_SPI1_Init+0x64>)
 8000de6:	4a18      	ldr	r2, [pc, #96]	; (8000e48 <MX_SPI1_Init+0x68>)
 8000de8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dea:	4b16      	ldr	r3, [pc, #88]	; (8000e44 <MX_SPI1_Init+0x64>)
 8000dec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000df0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000df2:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <MX_SPI1_Init+0x64>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <MX_SPI1_Init+0x64>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000dfe:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <MX_SPI1_Init+0x64>)
 8000e00:	2202      	movs	r2, #2
 8000e02:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000e04:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <MX_SPI1_Init+0x64>)
 8000e06:	2201      	movs	r2, #1
 8000e08:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <MX_SPI1_Init+0x64>)
 8000e0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e10:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000e12:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <MX_SPI1_Init+0x64>)
 8000e14:	2208      	movs	r2, #8
 8000e16:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e18:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <MX_SPI1_Init+0x64>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e1e:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <MX_SPI1_Init+0x64>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e24:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <MX_SPI1_Init+0x64>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <MX_SPI1_Init+0x64>)
 8000e2c:	220a      	movs	r2, #10
 8000e2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e30:	4804      	ldr	r0, [pc, #16]	; (8000e44 <MX_SPI1_Init+0x64>)
 8000e32:	f001 fa01 	bl	8002238 <HAL_SPI_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e3c:	f7ff fd0a 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	200010a4 	.word	0x200010a4
 8000e48:	40013000 	.word	0x40013000

08000e4c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08a      	sub	sp, #40	; 0x28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a19      	ldr	r2, [pc, #100]	; (8000ed0 <HAL_SPI_MspInit+0x84>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d12b      	bne.n	8000ec6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <HAL_SPI_MspInit+0x88>)
 8000e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e76:	4a17      	ldr	r2, [pc, #92]	; (8000ed4 <HAL_SPI_MspInit+0x88>)
 8000e78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <HAL_SPI_MspInit+0x88>)
 8000e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <HAL_SPI_MspInit+0x88>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a10      	ldr	r2, [pc, #64]	; (8000ed4 <HAL_SPI_MspInit+0x88>)
 8000e94:	f043 0302 	orr.w	r3, r3, #2
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <HAL_SPI_MspInit+0x88>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0302 	and.w	r3, r3, #2
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000ea6:	2338      	movs	r3, #56	; 0x38
 8000ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eb6:	2305      	movs	r3, #5
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <HAL_SPI_MspInit+0x8c>)
 8000ec2:	f000 fb51 	bl	8001568 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000ec6:	bf00      	nop
 8000ec8:	3728      	adds	r7, #40	; 0x28
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40013000 	.word	0x40013000
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	40020400 	.word	0x40020400

08000edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <HAL_MspInit+0x4c>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eea:	4a0f      	ldr	r2, [pc, #60]	; (8000f28 <HAL_MspInit+0x4c>)
 8000eec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ef2:	4b0d      	ldr	r3, [pc, #52]	; (8000f28 <HAL_MspInit+0x4c>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	603b      	str	r3, [r7, #0]
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <HAL_MspInit+0x4c>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	4a08      	ldr	r2, [pc, #32]	; (8000f28 <HAL_MspInit+0x4c>)
 8000f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <HAL_MspInit+0x4c>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f16:	603b      	str	r3, [r7, #0]
 8000f18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	40023800 	.word	0x40023800

08000f2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <NMI_Handler+0x4>

08000f32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f36:	e7fe      	b.n	8000f36 <HardFault_Handler+0x4>

08000f38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <MemManage_Handler+0x4>

08000f3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f42:	e7fe      	b.n	8000f42 <BusFault_Handler+0x4>

08000f44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <UsageFault_Handler+0x4>

08000f4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f78:	f000 f9cc 	bl	8001314 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]
 8000f90:	e00a      	b.n	8000fa8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f92:	f000 f8bd 	bl	8001110 <__io_getchar>
 8000f96:	4601      	mov	r1, r0
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	1c5a      	adds	r2, r3, #1
 8000f9c:	60ba      	str	r2, [r7, #8]
 8000f9e:	b2ca      	uxtb	r2, r1
 8000fa0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	617b      	str	r3, [r7, #20]
 8000fa8:	697a      	ldr	r2, [r7, #20]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	dbf0      	blt.n	8000f92 <_read+0x12>
  }

  return len;
 8000fb0:	687b      	ldr	r3, [r7, #4]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3718      	adds	r7, #24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b086      	sub	sp, #24
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	60f8      	str	r0, [r7, #12]
 8000fc2:	60b9      	str	r1, [r7, #8]
 8000fc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	e009      	b.n	8000fe0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	1c5a      	adds	r2, r3, #1
 8000fd0:	60ba      	str	r2, [r7, #8]
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f000 f889 	bl	80010ec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	617b      	str	r3, [r7, #20]
 8000fe0:	697a      	ldr	r2, [r7, #20]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	dbf1      	blt.n	8000fcc <_write+0x12>
  }
  return len;
 8000fe8:	687b      	ldr	r3, [r7, #4]
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3718      	adds	r7, #24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <_close>:

int _close(int file)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b083      	sub	sp, #12
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ffa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
 8001012:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800101a:	605a      	str	r2, [r3, #4]
  return 0;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <_isatty>:

int _isatty(int file)
{
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001032:	2301      	movs	r3, #1
}
 8001034:	4618      	mov	r0, r3
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001064:	4a14      	ldr	r2, [pc, #80]	; (80010b8 <_sbrk+0x5c>)
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <_sbrk+0x60>)
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001070:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <_sbrk+0x64>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d102      	bne.n	800107e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001078:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <_sbrk+0x64>)
 800107a:	4a12      	ldr	r2, [pc, #72]	; (80010c4 <_sbrk+0x68>)
 800107c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800107e:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <_sbrk+0x64>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4413      	add	r3, r2
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	429a      	cmp	r2, r3
 800108a:	d207      	bcs.n	800109c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800108c:	f002 faac 	bl	80035e8 <__errno>
 8001090:	4603      	mov	r3, r0
 8001092:	220c      	movs	r2, #12
 8001094:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
 800109a:	e009      	b.n	80010b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800109c:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <_sbrk+0x64>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010a2:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <_sbrk+0x64>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4413      	add	r3, r2
 80010aa:	4a05      	ldr	r2, [pc, #20]	; (80010c0 <_sbrk+0x64>)
 80010ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ae:	68fb      	ldr	r3, [r7, #12]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3718      	adds	r7, #24
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20020000 	.word	0x20020000
 80010bc:	00000400 	.word	0x00000400
 80010c0:	200010fc 	.word	0x200010fc
 80010c4:	20001298 	.word	0x20001298

080010c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <SystemInit+0x20>)
 80010ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010d2:	4a05      	ldr	r2, [pc, #20]	; (80010e8 <SystemInit+0x20>)
 80010d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__io_putchar>:
     *@brief  Retargets the C library printf  function to the USART.
     *@param  None
     *@retval None
 ******************************************************************/
 PUTCHAR_PROTOTYPE
 {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
     HAL_UART_Transmit(&huart1, (uint8_t *)&ch,1,0xFFFF);
 80010f4:	1d39      	adds	r1, r7, #4
 80010f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010fa:	2201      	movs	r2, #1
 80010fc:	4803      	ldr	r0, [pc, #12]	; (800110c <__io_putchar+0x20>)
 80010fe:	f001 fbde 	bl	80028be <HAL_UART_Transmit>
     return ch;
 8001102:	687b      	ldr	r3, [r7, #4]
 }
 8001104:	4618      	mov	r0, r3
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20001100 	.word	0x20001100

08001110 <__io_getchar>:
    *@brief  Retargets the C library scanf function to the USART.
    *@param  None
    *@retval None
******************************************************************/
GETCHAR_PROTOTYPE
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	uint8_t  ch;
	HAL_UART_Receive(&huart1,(uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001118:	f107 010f 	add.w	r1, r7, #15
 800111c:	f04f 33ff 	mov.w	r3, #4294967295
 8001120:	2201      	movs	r2, #1
 8001122:	4804      	ldr	r0, [pc, #16]	; (8001134 <__io_getchar+0x24>)
 8001124:	f001 fc5d 	bl	80029e2 <HAL_UART_Receive>
	return  ch;
 8001128:	7bfb      	ldrb	r3, [r7, #15]
}
 800112a:	4618      	mov	r0, r3
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20001100 	.word	0x20001100

08001138 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800113c:	4b11      	ldr	r3, [pc, #68]	; (8001184 <MX_USART1_UART_Init+0x4c>)
 800113e:	4a12      	ldr	r2, [pc, #72]	; (8001188 <MX_USART1_UART_Init+0x50>)
 8001140:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001142:	4b10      	ldr	r3, [pc, #64]	; (8001184 <MX_USART1_UART_Init+0x4c>)
 8001144:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001148:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <MX_USART1_UART_Init+0x4c>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <MX_USART1_UART_Init+0x4c>)
 8001152:	2200      	movs	r2, #0
 8001154:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <MX_USART1_UART_Init+0x4c>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800115c:	4b09      	ldr	r3, [pc, #36]	; (8001184 <MX_USART1_UART_Init+0x4c>)
 800115e:	220c      	movs	r2, #12
 8001160:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001162:	4b08      	ldr	r3, [pc, #32]	; (8001184 <MX_USART1_UART_Init+0x4c>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <MX_USART1_UART_Init+0x4c>)
 800116a:	2200      	movs	r2, #0
 800116c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800116e:	4805      	ldr	r0, [pc, #20]	; (8001184 <MX_USART1_UART_Init+0x4c>)
 8001170:	f001 fb58 	bl	8002824 <HAL_UART_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800117a:	f7ff fb6b 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20001100 	.word	0x20001100
 8001188:	40011000 	.word	0x40011000

0800118c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08a      	sub	sp, #40	; 0x28
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a19      	ldr	r2, [pc, #100]	; (8001210 <HAL_UART_MspInit+0x84>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d12c      	bne.n	8001208 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	4b18      	ldr	r3, [pc, #96]	; (8001214 <HAL_UART_MspInit+0x88>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	4a17      	ldr	r2, [pc, #92]	; (8001214 <HAL_UART_MspInit+0x88>)
 80011b8:	f043 0310 	orr.w	r3, r3, #16
 80011bc:	6453      	str	r3, [r2, #68]	; 0x44
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <HAL_UART_MspInit+0x88>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	f003 0310 	and.w	r3, r3, #16
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <HAL_UART_MspInit+0x88>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a10      	ldr	r2, [pc, #64]	; (8001214 <HAL_UART_MspInit+0x88>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <HAL_UART_MspInit+0x88>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80011e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80011ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ec:	2302      	movs	r3, #2
 80011ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f4:	2303      	movs	r3, #3
 80011f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011f8:	2307      	movs	r3, #7
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	4619      	mov	r1, r3
 8001202:	4805      	ldr	r0, [pc, #20]	; (8001218 <HAL_UART_MspInit+0x8c>)
 8001204:	f000 f9b0 	bl	8001568 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001208:	bf00      	nop
 800120a:	3728      	adds	r7, #40	; 0x28
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40011000 	.word	0x40011000
 8001214:	40023800 	.word	0x40023800
 8001218:	40020000 	.word	0x40020000

0800121c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800121c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001254 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001220:	480d      	ldr	r0, [pc, #52]	; (8001258 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001222:	490e      	ldr	r1, [pc, #56]	; (800125c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001224:	4a0e      	ldr	r2, [pc, #56]	; (8001260 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001226:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001228:	e002      	b.n	8001230 <LoopCopyDataInit>

0800122a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800122a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800122c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800122e:	3304      	adds	r3, #4

08001230 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001230:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001232:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001234:	d3f9      	bcc.n	800122a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001236:	4a0b      	ldr	r2, [pc, #44]	; (8001264 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001238:	4c0b      	ldr	r4, [pc, #44]	; (8001268 <LoopFillZerobss+0x26>)
  movs r3, #0
 800123a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800123c:	e001      	b.n	8001242 <LoopFillZerobss>

0800123e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800123e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001240:	3204      	adds	r2, #4

08001242 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001242:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001244:	d3fb      	bcc.n	800123e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001246:	f7ff ff3f 	bl	80010c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800124a:	f002 f9d3 	bl	80035f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800124e:	f7ff f9fd 	bl	800064c <main>
  bx  lr    
 8001252:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001254:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001258:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800125c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001260:	0800453c 	.word	0x0800453c
  ldr r2, =_sbss
 8001264:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001268:	20001294 	.word	0x20001294

0800126c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800126c:	e7fe      	b.n	800126c <ADC_IRQHandler>
	...

08001270 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001274:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <HAL_Init+0x40>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a0d      	ldr	r2, [pc, #52]	; (80012b0 <HAL_Init+0x40>)
 800127a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800127e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001280:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <HAL_Init+0x40>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a0a      	ldr	r2, [pc, #40]	; (80012b0 <HAL_Init+0x40>)
 8001286:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800128a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800128c:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <HAL_Init+0x40>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a07      	ldr	r2, [pc, #28]	; (80012b0 <HAL_Init+0x40>)
 8001292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001296:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001298:	2003      	movs	r0, #3
 800129a:	f000 f931 	bl	8001500 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800129e:	200f      	movs	r0, #15
 80012a0:	f000 f808 	bl	80012b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012a4:	f7ff fe1a 	bl	8000edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40023c00 	.word	0x40023c00

080012b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <HAL_InitTick+0x54>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <HAL_InitTick+0x58>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	4619      	mov	r1, r3
 80012c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 f93b 	bl	800154e <HAL_SYSTICK_Config>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e00e      	b.n	8001300 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2b0f      	cmp	r3, #15
 80012e6:	d80a      	bhi.n	80012fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e8:	2200      	movs	r2, #0
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	f04f 30ff 	mov.w	r0, #4294967295
 80012f0:	f000 f911 	bl	8001516 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f4:	4a06      	ldr	r2, [pc, #24]	; (8001310 <HAL_InitTick+0x5c>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012fa:	2300      	movs	r3, #0
 80012fc:	e000      	b.n	8001300 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
}
 8001300:	4618      	mov	r0, r3
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000004 	.word	0x20000004
 800130c:	2000000c 	.word	0x2000000c
 8001310:	20000008 	.word	0x20000008

08001314 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_IncTick+0x20>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	461a      	mov	r2, r3
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_IncTick+0x24>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4413      	add	r3, r2
 8001324:	4a04      	ldr	r2, [pc, #16]	; (8001338 <HAL_IncTick+0x24>)
 8001326:	6013      	str	r3, [r2, #0]
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	2000000c 	.word	0x2000000c
 8001338:	20001144 	.word	0x20001144

0800133c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return uwTick;
 8001340:	4b03      	ldr	r3, [pc, #12]	; (8001350 <HAL_GetTick+0x14>)
 8001342:	681b      	ldr	r3, [r3, #0]
}
 8001344:	4618      	mov	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	20001144 	.word	0x20001144

08001354 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800135c:	f7ff ffee 	bl	800133c <HAL_GetTick>
 8001360:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800136c:	d005      	beq.n	800137a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800136e:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <HAL_Delay+0x44>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	461a      	mov	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4413      	add	r3, r2
 8001378:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800137a:	bf00      	nop
 800137c:	f7ff ffde 	bl	800133c <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	429a      	cmp	r2, r3
 800138a:	d8f7      	bhi.n	800137c <HAL_Delay+0x28>
  {
  }
}
 800138c:	bf00      	nop
 800138e:	bf00      	nop
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	2000000c 	.word	0x2000000c

0800139c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <__NVIC_SetPriorityGrouping+0x44>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013b8:	4013      	ands	r3, r2
 80013ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ce:	4a04      	ldr	r2, [pc, #16]	; (80013e0 <__NVIC_SetPriorityGrouping+0x44>)
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	60d3      	str	r3, [r2, #12]
}
 80013d4:	bf00      	nop
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e8:	4b04      	ldr	r3, [pc, #16]	; (80013fc <__NVIC_GetPriorityGrouping+0x18>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	0a1b      	lsrs	r3, r3, #8
 80013ee:	f003 0307 	and.w	r3, r3, #7
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	6039      	str	r1, [r7, #0]
 800140a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800140c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001410:	2b00      	cmp	r3, #0
 8001412:	db0a      	blt.n	800142a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	b2da      	uxtb	r2, r3
 8001418:	490c      	ldr	r1, [pc, #48]	; (800144c <__NVIC_SetPriority+0x4c>)
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	0112      	lsls	r2, r2, #4
 8001420:	b2d2      	uxtb	r2, r2
 8001422:	440b      	add	r3, r1
 8001424:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001428:	e00a      	b.n	8001440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	b2da      	uxtb	r2, r3
 800142e:	4908      	ldr	r1, [pc, #32]	; (8001450 <__NVIC_SetPriority+0x50>)
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	f003 030f 	and.w	r3, r3, #15
 8001436:	3b04      	subs	r3, #4
 8001438:	0112      	lsls	r2, r2, #4
 800143a:	b2d2      	uxtb	r2, r2
 800143c:	440b      	add	r3, r1
 800143e:	761a      	strb	r2, [r3, #24]
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000e100 	.word	0xe000e100
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001454:	b480      	push	{r7}
 8001456:	b089      	sub	sp, #36	; 0x24
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f1c3 0307 	rsb	r3, r3, #7
 800146e:	2b04      	cmp	r3, #4
 8001470:	bf28      	it	cs
 8001472:	2304      	movcs	r3, #4
 8001474:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3304      	adds	r3, #4
 800147a:	2b06      	cmp	r3, #6
 800147c:	d902      	bls.n	8001484 <NVIC_EncodePriority+0x30>
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3b03      	subs	r3, #3
 8001482:	e000      	b.n	8001486 <NVIC_EncodePriority+0x32>
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001488:	f04f 32ff 	mov.w	r2, #4294967295
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43da      	mvns	r2, r3
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	401a      	ands	r2, r3
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800149c:	f04f 31ff 	mov.w	r1, #4294967295
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	fa01 f303 	lsl.w	r3, r1, r3
 80014a6:	43d9      	mvns	r1, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ac:	4313      	orrs	r3, r2
         );
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3724      	adds	r7, #36	; 0x24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
	...

080014bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014cc:	d301      	bcc.n	80014d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ce:	2301      	movs	r3, #1
 80014d0:	e00f      	b.n	80014f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014d2:	4a0a      	ldr	r2, [pc, #40]	; (80014fc <SysTick_Config+0x40>)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014da:	210f      	movs	r1, #15
 80014dc:	f04f 30ff 	mov.w	r0, #4294967295
 80014e0:	f7ff ff8e 	bl	8001400 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014e4:	4b05      	ldr	r3, [pc, #20]	; (80014fc <SysTick_Config+0x40>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ea:	4b04      	ldr	r3, [pc, #16]	; (80014fc <SysTick_Config+0x40>)
 80014ec:	2207      	movs	r2, #7
 80014ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	e000e010 	.word	0xe000e010

08001500 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff ff47 	bl	800139c <__NVIC_SetPriorityGrouping>
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001516:	b580      	push	{r7, lr}
 8001518:	b086      	sub	sp, #24
 800151a:	af00      	add	r7, sp, #0
 800151c:	4603      	mov	r3, r0
 800151e:	60b9      	str	r1, [r7, #8]
 8001520:	607a      	str	r2, [r7, #4]
 8001522:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001528:	f7ff ff5c 	bl	80013e4 <__NVIC_GetPriorityGrouping>
 800152c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	68b9      	ldr	r1, [r7, #8]
 8001532:	6978      	ldr	r0, [r7, #20]
 8001534:	f7ff ff8e 	bl	8001454 <NVIC_EncodePriority>
 8001538:	4602      	mov	r2, r0
 800153a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800153e:	4611      	mov	r1, r2
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff ff5d 	bl	8001400 <__NVIC_SetPriority>
}
 8001546:	bf00      	nop
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff ffb0 	bl	80014bc <SysTick_Config>
 800155c:	4603      	mov	r3, r0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
	...

08001568 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001568:	b480      	push	{r7}
 800156a:	b089      	sub	sp, #36	; 0x24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800157a:	2300      	movs	r3, #0
 800157c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
 8001582:	e16b      	b.n	800185c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001584:	2201      	movs	r2, #1
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	4013      	ands	r3, r2
 8001596:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	429a      	cmp	r2, r3
 800159e:	f040 815a 	bne.w	8001856 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f003 0303 	and.w	r3, r3, #3
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d005      	beq.n	80015ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d130      	bne.n	800161c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	2203      	movs	r2, #3
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43db      	mvns	r3, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4013      	ands	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	68da      	ldr	r2, [r3, #12]
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015f0:	2201      	movs	r2, #1
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4013      	ands	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	091b      	lsrs	r3, r3, #4
 8001606:	f003 0201 	and.w	r2, r3, #1
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4313      	orrs	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f003 0303 	and.w	r3, r3, #3
 8001624:	2b03      	cmp	r3, #3
 8001626:	d017      	beq.n	8001658 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	2203      	movs	r2, #3
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4313      	orrs	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 0303 	and.w	r3, r3, #3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d123      	bne.n	80016ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	08da      	lsrs	r2, r3, #3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3208      	adds	r2, #8
 800166c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001670:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	f003 0307 	and.w	r3, r3, #7
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	220f      	movs	r2, #15
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4013      	ands	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	691a      	ldr	r2, [r3, #16]
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4313      	orrs	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	08da      	lsrs	r2, r3, #3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	3208      	adds	r2, #8
 80016a6:	69b9      	ldr	r1, [r7, #24]
 80016a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	2203      	movs	r2, #3
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4013      	ands	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 0203 	and.w	r2, r3, #3
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f000 80b4 	beq.w	8001856 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	4b60      	ldr	r3, [pc, #384]	; (8001874 <HAL_GPIO_Init+0x30c>)
 80016f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f6:	4a5f      	ldr	r2, [pc, #380]	; (8001874 <HAL_GPIO_Init+0x30c>)
 80016f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016fc:	6453      	str	r3, [r2, #68]	; 0x44
 80016fe:	4b5d      	ldr	r3, [pc, #372]	; (8001874 <HAL_GPIO_Init+0x30c>)
 8001700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800170a:	4a5b      	ldr	r2, [pc, #364]	; (8001878 <HAL_GPIO_Init+0x310>)
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	089b      	lsrs	r3, r3, #2
 8001710:	3302      	adds	r3, #2
 8001712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001716:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	f003 0303 	and.w	r3, r3, #3
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	220f      	movs	r2, #15
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43db      	mvns	r3, r3
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	4013      	ands	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a52      	ldr	r2, [pc, #328]	; (800187c <HAL_GPIO_Init+0x314>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d02b      	beq.n	800178e <HAL_GPIO_Init+0x226>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a51      	ldr	r2, [pc, #324]	; (8001880 <HAL_GPIO_Init+0x318>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d025      	beq.n	800178a <HAL_GPIO_Init+0x222>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a50      	ldr	r2, [pc, #320]	; (8001884 <HAL_GPIO_Init+0x31c>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d01f      	beq.n	8001786 <HAL_GPIO_Init+0x21e>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a4f      	ldr	r2, [pc, #316]	; (8001888 <HAL_GPIO_Init+0x320>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d019      	beq.n	8001782 <HAL_GPIO_Init+0x21a>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a4e      	ldr	r2, [pc, #312]	; (800188c <HAL_GPIO_Init+0x324>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d013      	beq.n	800177e <HAL_GPIO_Init+0x216>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a4d      	ldr	r2, [pc, #308]	; (8001890 <HAL_GPIO_Init+0x328>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d00d      	beq.n	800177a <HAL_GPIO_Init+0x212>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a4c      	ldr	r2, [pc, #304]	; (8001894 <HAL_GPIO_Init+0x32c>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d007      	beq.n	8001776 <HAL_GPIO_Init+0x20e>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a4b      	ldr	r2, [pc, #300]	; (8001898 <HAL_GPIO_Init+0x330>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d101      	bne.n	8001772 <HAL_GPIO_Init+0x20a>
 800176e:	2307      	movs	r3, #7
 8001770:	e00e      	b.n	8001790 <HAL_GPIO_Init+0x228>
 8001772:	2308      	movs	r3, #8
 8001774:	e00c      	b.n	8001790 <HAL_GPIO_Init+0x228>
 8001776:	2306      	movs	r3, #6
 8001778:	e00a      	b.n	8001790 <HAL_GPIO_Init+0x228>
 800177a:	2305      	movs	r3, #5
 800177c:	e008      	b.n	8001790 <HAL_GPIO_Init+0x228>
 800177e:	2304      	movs	r3, #4
 8001780:	e006      	b.n	8001790 <HAL_GPIO_Init+0x228>
 8001782:	2303      	movs	r3, #3
 8001784:	e004      	b.n	8001790 <HAL_GPIO_Init+0x228>
 8001786:	2302      	movs	r3, #2
 8001788:	e002      	b.n	8001790 <HAL_GPIO_Init+0x228>
 800178a:	2301      	movs	r3, #1
 800178c:	e000      	b.n	8001790 <HAL_GPIO_Init+0x228>
 800178e:	2300      	movs	r3, #0
 8001790:	69fa      	ldr	r2, [r7, #28]
 8001792:	f002 0203 	and.w	r2, r2, #3
 8001796:	0092      	lsls	r2, r2, #2
 8001798:	4093      	lsls	r3, r2
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4313      	orrs	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017a0:	4935      	ldr	r1, [pc, #212]	; (8001878 <HAL_GPIO_Init+0x310>)
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	089b      	lsrs	r3, r3, #2
 80017a6:	3302      	adds	r3, #2
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017ae:	4b3b      	ldr	r3, [pc, #236]	; (800189c <HAL_GPIO_Init+0x334>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	43db      	mvns	r3, r3
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4013      	ands	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017d2:	4a32      	ldr	r2, [pc, #200]	; (800189c <HAL_GPIO_Init+0x334>)
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017d8:	4b30      	ldr	r3, [pc, #192]	; (800189c <HAL_GPIO_Init+0x334>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	43db      	mvns	r3, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4013      	ands	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017fc:	4a27      	ldr	r2, [pc, #156]	; (800189c <HAL_GPIO_Init+0x334>)
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001802:	4b26      	ldr	r3, [pc, #152]	; (800189c <HAL_GPIO_Init+0x334>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	43db      	mvns	r3, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4013      	ands	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	4313      	orrs	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001826:	4a1d      	ldr	r2, [pc, #116]	; (800189c <HAL_GPIO_Init+0x334>)
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800182c:	4b1b      	ldr	r3, [pc, #108]	; (800189c <HAL_GPIO_Init+0x334>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	43db      	mvns	r3, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d003      	beq.n	8001850 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	4313      	orrs	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001850:	4a12      	ldr	r2, [pc, #72]	; (800189c <HAL_GPIO_Init+0x334>)
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	3301      	adds	r3, #1
 800185a:	61fb      	str	r3, [r7, #28]
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	2b0f      	cmp	r3, #15
 8001860:	f67f ae90 	bls.w	8001584 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001864:	bf00      	nop
 8001866:	bf00      	nop
 8001868:	3724      	adds	r7, #36	; 0x24
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	40023800 	.word	0x40023800
 8001878:	40013800 	.word	0x40013800
 800187c:	40020000 	.word	0x40020000
 8001880:	40020400 	.word	0x40020400
 8001884:	40020800 	.word	0x40020800
 8001888:	40020c00 	.word	0x40020c00
 800188c:	40021000 	.word	0x40021000
 8001890:	40021400 	.word	0x40021400
 8001894:	40021800 	.word	0x40021800
 8001898:	40021c00 	.word	0x40021c00
 800189c:	40013c00 	.word	0x40013c00

080018a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	460b      	mov	r3, r1
 80018aa:	807b      	strh	r3, [r7, #2]
 80018ac:	4613      	mov	r3, r2
 80018ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018b0:	787b      	ldrb	r3, [r7, #1]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018b6:	887a      	ldrh	r2, [r7, #2]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018bc:	e003      	b.n	80018c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018be:	887b      	ldrh	r3, [r7, #2]
 80018c0:	041a      	lsls	r2, r3, #16
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	619a      	str	r2, [r3, #24]
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b085      	sub	sp, #20
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
 80018da:	460b      	mov	r3, r1
 80018dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018e4:	887a      	ldrh	r2, [r7, #2]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	4013      	ands	r3, r2
 80018ea:	041a      	lsls	r2, r3, #16
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	43d9      	mvns	r1, r3
 80018f0:	887b      	ldrh	r3, [r7, #2]
 80018f2:	400b      	ands	r3, r1
 80018f4:	431a      	orrs	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	619a      	str	r2, [r3, #24]
}
 80018fa:	bf00      	nop
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
	...

08001908 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e267      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b00      	cmp	r3, #0
 8001924:	d075      	beq.n	8001a12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001926:	4b88      	ldr	r3, [pc, #544]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 030c 	and.w	r3, r3, #12
 800192e:	2b04      	cmp	r3, #4
 8001930:	d00c      	beq.n	800194c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001932:	4b85      	ldr	r3, [pc, #532]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800193a:	2b08      	cmp	r3, #8
 800193c:	d112      	bne.n	8001964 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800193e:	4b82      	ldr	r3, [pc, #520]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001946:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800194a:	d10b      	bne.n	8001964 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800194c:	4b7e      	ldr	r3, [pc, #504]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d05b      	beq.n	8001a10 <HAL_RCC_OscConfig+0x108>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d157      	bne.n	8001a10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e242      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800196c:	d106      	bne.n	800197c <HAL_RCC_OscConfig+0x74>
 800196e:	4b76      	ldr	r3, [pc, #472]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a75      	ldr	r2, [pc, #468]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001978:	6013      	str	r3, [r2, #0]
 800197a:	e01d      	b.n	80019b8 <HAL_RCC_OscConfig+0xb0>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001984:	d10c      	bne.n	80019a0 <HAL_RCC_OscConfig+0x98>
 8001986:	4b70      	ldr	r3, [pc, #448]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a6f      	ldr	r2, [pc, #444]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 800198c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001990:	6013      	str	r3, [r2, #0]
 8001992:	4b6d      	ldr	r3, [pc, #436]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a6c      	ldr	r2, [pc, #432]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	e00b      	b.n	80019b8 <HAL_RCC_OscConfig+0xb0>
 80019a0:	4b69      	ldr	r3, [pc, #420]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a68      	ldr	r2, [pc, #416]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 80019a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019aa:	6013      	str	r3, [r2, #0]
 80019ac:	4b66      	ldr	r3, [pc, #408]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a65      	ldr	r2, [pc, #404]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 80019b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d013      	beq.n	80019e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c0:	f7ff fcbc 	bl	800133c <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019c8:	f7ff fcb8 	bl	800133c <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b64      	cmp	r3, #100	; 0x64
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e207      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019da:	4b5b      	ldr	r3, [pc, #364]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0f0      	beq.n	80019c8 <HAL_RCC_OscConfig+0xc0>
 80019e6:	e014      	b.n	8001a12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e8:	f7ff fca8 	bl	800133c <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019f0:	f7ff fca4 	bl	800133c <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b64      	cmp	r3, #100	; 0x64
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e1f3      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a02:	4b51      	ldr	r3, [pc, #324]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1f0      	bne.n	80019f0 <HAL_RCC_OscConfig+0xe8>
 8001a0e:	e000      	b.n	8001a12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d063      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a1e:	4b4a      	ldr	r3, [pc, #296]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 030c 	and.w	r3, r3, #12
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d00b      	beq.n	8001a42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a2a:	4b47      	ldr	r3, [pc, #284]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a32:	2b08      	cmp	r3, #8
 8001a34:	d11c      	bne.n	8001a70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a36:	4b44      	ldr	r3, [pc, #272]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d116      	bne.n	8001a70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a42:	4b41      	ldr	r3, [pc, #260]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d005      	beq.n	8001a5a <HAL_RCC_OscConfig+0x152>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d001      	beq.n	8001a5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e1c7      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a5a:	4b3b      	ldr	r3, [pc, #236]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	4937      	ldr	r1, [pc, #220]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a6e:	e03a      	b.n	8001ae6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d020      	beq.n	8001aba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a78:	4b34      	ldr	r3, [pc, #208]	; (8001b4c <HAL_RCC_OscConfig+0x244>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7e:	f7ff fc5d 	bl	800133c <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a86:	f7ff fc59 	bl	800133c <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e1a8      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a98:	4b2b      	ldr	r3, [pc, #172]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0f0      	beq.n	8001a86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa4:	4b28      	ldr	r3, [pc, #160]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	4925      	ldr	r1, [pc, #148]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	600b      	str	r3, [r1, #0]
 8001ab8:	e015      	b.n	8001ae6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aba:	4b24      	ldr	r3, [pc, #144]	; (8001b4c <HAL_RCC_OscConfig+0x244>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac0:	f7ff fc3c 	bl	800133c <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ac8:	f7ff fc38 	bl	800133c <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e187      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ada:	4b1b      	ldr	r3, [pc, #108]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f0      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0308 	and.w	r3, r3, #8
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d036      	beq.n	8001b60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d016      	beq.n	8001b28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001afa:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <HAL_RCC_OscConfig+0x248>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b00:	f7ff fc1c 	bl	800133c <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b08:	f7ff fc18 	bl	800133c <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e167      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d0f0      	beq.n	8001b08 <HAL_RCC_OscConfig+0x200>
 8001b26:	e01b      	b.n	8001b60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b28:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <HAL_RCC_OscConfig+0x248>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b2e:	f7ff fc05 	bl	800133c <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b34:	e00e      	b.n	8001b54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b36:	f7ff fc01 	bl	800133c <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d907      	bls.n	8001b54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e150      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	42470000 	.word	0x42470000
 8001b50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b54:	4b88      	ldr	r3, [pc, #544]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1ea      	bne.n	8001b36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f000 8097 	beq.w	8001c9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b72:	4b81      	ldr	r3, [pc, #516]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d10f      	bne.n	8001b9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60bb      	str	r3, [r7, #8]
 8001b82:	4b7d      	ldr	r3, [pc, #500]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	4a7c      	ldr	r2, [pc, #496]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b8e:	4b7a      	ldr	r3, [pc, #488]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b96:	60bb      	str	r3, [r7, #8]
 8001b98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b9e:	4b77      	ldr	r3, [pc, #476]	; (8001d7c <HAL_RCC_OscConfig+0x474>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d118      	bne.n	8001bdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001baa:	4b74      	ldr	r3, [pc, #464]	; (8001d7c <HAL_RCC_OscConfig+0x474>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a73      	ldr	r2, [pc, #460]	; (8001d7c <HAL_RCC_OscConfig+0x474>)
 8001bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bb6:	f7ff fbc1 	bl	800133c <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bbe:	f7ff fbbd 	bl	800133c <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e10c      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd0:	4b6a      	ldr	r3, [pc, #424]	; (8001d7c <HAL_RCC_OscConfig+0x474>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d0f0      	beq.n	8001bbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d106      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x2ea>
 8001be4:	4b64      	ldr	r3, [pc, #400]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be8:	4a63      	ldr	r2, [pc, #396]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	6713      	str	r3, [r2, #112]	; 0x70
 8001bf0:	e01c      	b.n	8001c2c <HAL_RCC_OscConfig+0x324>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	2b05      	cmp	r3, #5
 8001bf8:	d10c      	bne.n	8001c14 <HAL_RCC_OscConfig+0x30c>
 8001bfa:	4b5f      	ldr	r3, [pc, #380]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bfe:	4a5e      	ldr	r2, [pc, #376]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001c00:	f043 0304 	orr.w	r3, r3, #4
 8001c04:	6713      	str	r3, [r2, #112]	; 0x70
 8001c06:	4b5c      	ldr	r3, [pc, #368]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c0a:	4a5b      	ldr	r2, [pc, #364]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	6713      	str	r3, [r2, #112]	; 0x70
 8001c12:	e00b      	b.n	8001c2c <HAL_RCC_OscConfig+0x324>
 8001c14:	4b58      	ldr	r3, [pc, #352]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c18:	4a57      	ldr	r2, [pc, #348]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001c1a:	f023 0301 	bic.w	r3, r3, #1
 8001c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c20:	4b55      	ldr	r3, [pc, #340]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c24:	4a54      	ldr	r2, [pc, #336]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001c26:	f023 0304 	bic.w	r3, r3, #4
 8001c2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d015      	beq.n	8001c60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c34:	f7ff fb82 	bl	800133c <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c3a:	e00a      	b.n	8001c52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c3c:	f7ff fb7e 	bl	800133c <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e0cb      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c52:	4b49      	ldr	r3, [pc, #292]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0ee      	beq.n	8001c3c <HAL_RCC_OscConfig+0x334>
 8001c5e:	e014      	b.n	8001c8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c60:	f7ff fb6c 	bl	800133c <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c66:	e00a      	b.n	8001c7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c68:	f7ff fb68 	bl	800133c <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e0b5      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c7e:	4b3e      	ldr	r3, [pc, #248]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1ee      	bne.n	8001c68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c8a:	7dfb      	ldrb	r3, [r7, #23]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d105      	bne.n	8001c9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c90:	4b39      	ldr	r3, [pc, #228]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c94:	4a38      	ldr	r2, [pc, #224]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001c96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f000 80a1 	beq.w	8001de8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ca6:	4b34      	ldr	r3, [pc, #208]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 030c 	and.w	r3, r3, #12
 8001cae:	2b08      	cmp	r3, #8
 8001cb0:	d05c      	beq.n	8001d6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d141      	bne.n	8001d3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cba:	4b31      	ldr	r3, [pc, #196]	; (8001d80 <HAL_RCC_OscConfig+0x478>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc0:	f7ff fb3c 	bl	800133c <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cc8:	f7ff fb38 	bl	800133c <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e087      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cda:	4b27      	ldr	r3, [pc, #156]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f0      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69da      	ldr	r2, [r3, #28]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf4:	019b      	lsls	r3, r3, #6
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfc:	085b      	lsrs	r3, r3, #1
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	041b      	lsls	r3, r3, #16
 8001d02:	431a      	orrs	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d08:	061b      	lsls	r3, r3, #24
 8001d0a:	491b      	ldr	r1, [pc, #108]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d10:	4b1b      	ldr	r3, [pc, #108]	; (8001d80 <HAL_RCC_OscConfig+0x478>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d16:	f7ff fb11 	bl	800133c <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d1e:	f7ff fb0d 	bl	800133c <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e05c      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d30:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0f0      	beq.n	8001d1e <HAL_RCC_OscConfig+0x416>
 8001d3c:	e054      	b.n	8001de8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d3e:	4b10      	ldr	r3, [pc, #64]	; (8001d80 <HAL_RCC_OscConfig+0x478>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d44:	f7ff fafa 	bl	800133c <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d4c:	f7ff faf6 	bl	800133c <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e045      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d5e:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f0      	bne.n	8001d4c <HAL_RCC_OscConfig+0x444>
 8001d6a:	e03d      	b.n	8001de8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d107      	bne.n	8001d84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e038      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	40007000 	.word	0x40007000
 8001d80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d84:	4b1b      	ldr	r3, [pc, #108]	; (8001df4 <HAL_RCC_OscConfig+0x4ec>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d028      	beq.n	8001de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d121      	bne.n	8001de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d11a      	bne.n	8001de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001db4:	4013      	ands	r3, r2
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001dba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d111      	bne.n	8001de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dca:	085b      	lsrs	r3, r3, #1
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d107      	bne.n	8001de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d001      	beq.n	8001de8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e000      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40023800 	.word	0x40023800

08001df8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e0cc      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e0c:	4b68      	ldr	r3, [pc, #416]	; (8001fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d90c      	bls.n	8001e34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e1a:	4b65      	ldr	r3, [pc, #404]	; (8001fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e22:	4b63      	ldr	r3, [pc, #396]	; (8001fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d001      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e0b8      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d020      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d005      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e4c:	4b59      	ldr	r3, [pc, #356]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	4a58      	ldr	r2, [pc, #352]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0308 	and.w	r3, r3, #8
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d005      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e64:	4b53      	ldr	r3, [pc, #332]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	4a52      	ldr	r2, [pc, #328]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e70:	4b50      	ldr	r3, [pc, #320]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	494d      	ldr	r1, [pc, #308]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d044      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d107      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e96:	4b47      	ldr	r3, [pc, #284]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d119      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e07f      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d003      	beq.n	8001eb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eb2:	2b03      	cmp	r3, #3
 8001eb4:	d107      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eb6:	4b3f      	ldr	r3, [pc, #252]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d109      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e06f      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec6:	4b3b      	ldr	r3, [pc, #236]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e067      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ed6:	4b37      	ldr	r3, [pc, #220]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f023 0203 	bic.w	r2, r3, #3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	4934      	ldr	r1, [pc, #208]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ee8:	f7ff fa28 	bl	800133c <HAL_GetTick>
 8001eec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eee:	e00a      	b.n	8001f06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ef0:	f7ff fa24 	bl	800133c <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e04f      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f06:	4b2b      	ldr	r3, [pc, #172]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 020c 	and.w	r2, r3, #12
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d1eb      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f18:	4b25      	ldr	r3, [pc, #148]	; (8001fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d20c      	bcs.n	8001f40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f26:	4b22      	ldr	r3, [pc, #136]	; (8001fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	b2d2      	uxtb	r2, r2
 8001f2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2e:	4b20      	ldr	r3, [pc, #128]	; (8001fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d001      	beq.n	8001f40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e032      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d008      	beq.n	8001f5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f4c:	4b19      	ldr	r3, [pc, #100]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	4916      	ldr	r1, [pc, #88]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0308 	and.w	r3, r3, #8
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d009      	beq.n	8001f7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f6a:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	490e      	ldr	r1, [pc, #56]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f7e:	f000 f821 	bl	8001fc4 <HAL_RCC_GetSysClockFreq>
 8001f82:	4602      	mov	r2, r0
 8001f84:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	091b      	lsrs	r3, r3, #4
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	490a      	ldr	r1, [pc, #40]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f90:	5ccb      	ldrb	r3, [r1, r3]
 8001f92:	fa22 f303 	lsr.w	r3, r2, r3
 8001f96:	4a09      	ldr	r2, [pc, #36]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001f98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f9a:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff f988 	bl	80012b4 <HAL_InitTick>

  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40023c00 	.word	0x40023c00
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	080044e0 	.word	0x080044e0
 8001fbc:	20000004 	.word	0x20000004
 8001fc0:	20000008 	.word	0x20000008

08001fc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fc8:	b094      	sub	sp, #80	; 0x50
 8001fca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	647b      	str	r3, [r7, #68]	; 0x44
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fdc:	4b79      	ldr	r3, [pc, #484]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 030c 	and.w	r3, r3, #12
 8001fe4:	2b08      	cmp	r3, #8
 8001fe6:	d00d      	beq.n	8002004 <HAL_RCC_GetSysClockFreq+0x40>
 8001fe8:	2b08      	cmp	r3, #8
 8001fea:	f200 80e1 	bhi.w	80021b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d002      	beq.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x34>
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	d003      	beq.n	8001ffe <HAL_RCC_GetSysClockFreq+0x3a>
 8001ff6:	e0db      	b.n	80021b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ff8:	4b73      	ldr	r3, [pc, #460]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ffa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001ffc:	e0db      	b.n	80021b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ffe:	4b73      	ldr	r3, [pc, #460]	; (80021cc <HAL_RCC_GetSysClockFreq+0x208>)
 8002000:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002002:	e0d8      	b.n	80021b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002004:	4b6f      	ldr	r3, [pc, #444]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800200c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800200e:	4b6d      	ldr	r3, [pc, #436]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d063      	beq.n	80020e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800201a:	4b6a      	ldr	r3, [pc, #424]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	099b      	lsrs	r3, r3, #6
 8002020:	2200      	movs	r2, #0
 8002022:	63bb      	str	r3, [r7, #56]	; 0x38
 8002024:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800202c:	633b      	str	r3, [r7, #48]	; 0x30
 800202e:	2300      	movs	r3, #0
 8002030:	637b      	str	r3, [r7, #52]	; 0x34
 8002032:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002036:	4622      	mov	r2, r4
 8002038:	462b      	mov	r3, r5
 800203a:	f04f 0000 	mov.w	r0, #0
 800203e:	f04f 0100 	mov.w	r1, #0
 8002042:	0159      	lsls	r1, r3, #5
 8002044:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002048:	0150      	lsls	r0, r2, #5
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	4621      	mov	r1, r4
 8002050:	1a51      	subs	r1, r2, r1
 8002052:	6139      	str	r1, [r7, #16]
 8002054:	4629      	mov	r1, r5
 8002056:	eb63 0301 	sbc.w	r3, r3, r1
 800205a:	617b      	str	r3, [r7, #20]
 800205c:	f04f 0200 	mov.w	r2, #0
 8002060:	f04f 0300 	mov.w	r3, #0
 8002064:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002068:	4659      	mov	r1, fp
 800206a:	018b      	lsls	r3, r1, #6
 800206c:	4651      	mov	r1, sl
 800206e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002072:	4651      	mov	r1, sl
 8002074:	018a      	lsls	r2, r1, #6
 8002076:	4651      	mov	r1, sl
 8002078:	ebb2 0801 	subs.w	r8, r2, r1
 800207c:	4659      	mov	r1, fp
 800207e:	eb63 0901 	sbc.w	r9, r3, r1
 8002082:	f04f 0200 	mov.w	r2, #0
 8002086:	f04f 0300 	mov.w	r3, #0
 800208a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800208e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002092:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002096:	4690      	mov	r8, r2
 8002098:	4699      	mov	r9, r3
 800209a:	4623      	mov	r3, r4
 800209c:	eb18 0303 	adds.w	r3, r8, r3
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	462b      	mov	r3, r5
 80020a4:	eb49 0303 	adc.w	r3, r9, r3
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	f04f 0200 	mov.w	r2, #0
 80020ae:	f04f 0300 	mov.w	r3, #0
 80020b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80020b6:	4629      	mov	r1, r5
 80020b8:	024b      	lsls	r3, r1, #9
 80020ba:	4621      	mov	r1, r4
 80020bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80020c0:	4621      	mov	r1, r4
 80020c2:	024a      	lsls	r2, r1, #9
 80020c4:	4610      	mov	r0, r2
 80020c6:	4619      	mov	r1, r3
 80020c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020ca:	2200      	movs	r2, #0
 80020cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80020ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80020d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80020d4:	f7fe f8cc 	bl	8000270 <__aeabi_uldivmod>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4613      	mov	r3, r2
 80020de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020e0:	e058      	b.n	8002194 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020e2:	4b38      	ldr	r3, [pc, #224]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	099b      	lsrs	r3, r3, #6
 80020e8:	2200      	movs	r2, #0
 80020ea:	4618      	mov	r0, r3
 80020ec:	4611      	mov	r1, r2
 80020ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80020f2:	623b      	str	r3, [r7, #32]
 80020f4:	2300      	movs	r3, #0
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
 80020f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80020fc:	4642      	mov	r2, r8
 80020fe:	464b      	mov	r3, r9
 8002100:	f04f 0000 	mov.w	r0, #0
 8002104:	f04f 0100 	mov.w	r1, #0
 8002108:	0159      	lsls	r1, r3, #5
 800210a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800210e:	0150      	lsls	r0, r2, #5
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	4641      	mov	r1, r8
 8002116:	ebb2 0a01 	subs.w	sl, r2, r1
 800211a:	4649      	mov	r1, r9
 800211c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002120:	f04f 0200 	mov.w	r2, #0
 8002124:	f04f 0300 	mov.w	r3, #0
 8002128:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800212c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002130:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002134:	ebb2 040a 	subs.w	r4, r2, sl
 8002138:	eb63 050b 	sbc.w	r5, r3, fp
 800213c:	f04f 0200 	mov.w	r2, #0
 8002140:	f04f 0300 	mov.w	r3, #0
 8002144:	00eb      	lsls	r3, r5, #3
 8002146:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800214a:	00e2      	lsls	r2, r4, #3
 800214c:	4614      	mov	r4, r2
 800214e:	461d      	mov	r5, r3
 8002150:	4643      	mov	r3, r8
 8002152:	18e3      	adds	r3, r4, r3
 8002154:	603b      	str	r3, [r7, #0]
 8002156:	464b      	mov	r3, r9
 8002158:	eb45 0303 	adc.w	r3, r5, r3
 800215c:	607b      	str	r3, [r7, #4]
 800215e:	f04f 0200 	mov.w	r2, #0
 8002162:	f04f 0300 	mov.w	r3, #0
 8002166:	e9d7 4500 	ldrd	r4, r5, [r7]
 800216a:	4629      	mov	r1, r5
 800216c:	028b      	lsls	r3, r1, #10
 800216e:	4621      	mov	r1, r4
 8002170:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002174:	4621      	mov	r1, r4
 8002176:	028a      	lsls	r2, r1, #10
 8002178:	4610      	mov	r0, r2
 800217a:	4619      	mov	r1, r3
 800217c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800217e:	2200      	movs	r2, #0
 8002180:	61bb      	str	r3, [r7, #24]
 8002182:	61fa      	str	r2, [r7, #28]
 8002184:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002188:	f7fe f872 	bl	8000270 <__aeabi_uldivmod>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4613      	mov	r3, r2
 8002192:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002194:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	0c1b      	lsrs	r3, r3, #16
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	3301      	adds	r3, #1
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80021a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021ae:	e002      	b.n	80021b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021b0:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80021b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3750      	adds	r7, #80	; 0x50
 80021bc:	46bd      	mov	sp, r7
 80021be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021c2:	bf00      	nop
 80021c4:	40023800 	.word	0x40023800
 80021c8:	00f42400 	.word	0x00f42400
 80021cc:	007a1200 	.word	0x007a1200

080021d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021d4:	4b03      	ldr	r3, [pc, #12]	; (80021e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80021d6:	681b      	ldr	r3, [r3, #0]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	20000004 	.word	0x20000004

080021e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80021ec:	f7ff fff0 	bl	80021d0 <HAL_RCC_GetHCLKFreq>
 80021f0:	4602      	mov	r2, r0
 80021f2:	4b05      	ldr	r3, [pc, #20]	; (8002208 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	0a9b      	lsrs	r3, r3, #10
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	4903      	ldr	r1, [pc, #12]	; (800220c <HAL_RCC_GetPCLK1Freq+0x24>)
 80021fe:	5ccb      	ldrb	r3, [r1, r3]
 8002200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002204:	4618      	mov	r0, r3
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40023800 	.word	0x40023800
 800220c:	080044f0 	.word	0x080044f0

08002210 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002214:	f7ff ffdc 	bl	80021d0 <HAL_RCC_GetHCLKFreq>
 8002218:	4602      	mov	r2, r0
 800221a:	4b05      	ldr	r3, [pc, #20]	; (8002230 <HAL_RCC_GetPCLK2Freq+0x20>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	0b5b      	lsrs	r3, r3, #13
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	4903      	ldr	r1, [pc, #12]	; (8002234 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002226:	5ccb      	ldrb	r3, [r1, r3]
 8002228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800222c:	4618      	mov	r0, r3
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40023800 	.word	0x40023800
 8002234:	080044f0 	.word	0x080044f0

08002238 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e07b      	b.n	8002342 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224e:	2b00      	cmp	r3, #0
 8002250:	d108      	bne.n	8002264 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800225a:	d009      	beq.n	8002270 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	61da      	str	r2, [r3, #28]
 8002262:	e005      	b.n	8002270 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d106      	bne.n	8002290 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7fe fdde 	bl	8000e4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2202      	movs	r2, #2
 8002294:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80022b8:	431a      	orrs	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	431a      	orrs	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	431a      	orrs	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022e0:	431a      	orrs	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022ea:	431a      	orrs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f4:	ea42 0103 	orr.w	r1, r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	430a      	orrs	r2, r1
 8002306:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	0c1b      	lsrs	r3, r3, #16
 800230e:	f003 0104 	and.w	r1, r3, #4
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	f003 0210 	and.w	r2, r3, #16
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	69da      	ldr	r2, [r3, #28]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002330:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b08c      	sub	sp, #48	; 0x30
 800234e:	af00      	add	r7, sp, #0
 8002350:	60f8      	str	r0, [r7, #12]
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	607a      	str	r2, [r7, #4]
 8002356:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002358:	2301      	movs	r3, #1
 800235a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800235c:	2300      	movs	r3, #0
 800235e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002368:	2b01      	cmp	r3, #1
 800236a:	d101      	bne.n	8002370 <HAL_SPI_TransmitReceive+0x26>
 800236c:	2302      	movs	r3, #2
 800236e:	e18a      	b.n	8002686 <HAL_SPI_TransmitReceive+0x33c>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002378:	f7fe ffe0 	bl	800133c <HAL_GetTick>
 800237c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002384:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800238e:	887b      	ldrh	r3, [r7, #2]
 8002390:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002392:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002396:	2b01      	cmp	r3, #1
 8002398:	d00f      	beq.n	80023ba <HAL_SPI_TransmitReceive+0x70>
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023a0:	d107      	bne.n	80023b2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d103      	bne.n	80023b2 <HAL_SPI_TransmitReceive+0x68>
 80023aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023ae:	2b04      	cmp	r3, #4
 80023b0:	d003      	beq.n	80023ba <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80023b2:	2302      	movs	r3, #2
 80023b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80023b8:	e15b      	b.n	8002672 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d005      	beq.n	80023cc <HAL_SPI_TransmitReceive+0x82>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d002      	beq.n	80023cc <HAL_SPI_TransmitReceive+0x82>
 80023c6:	887b      	ldrh	r3, [r7, #2]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d103      	bne.n	80023d4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80023d2:	e14e      	b.n	8002672 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b04      	cmp	r3, #4
 80023de:	d003      	beq.n	80023e8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2205      	movs	r2, #5
 80023e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	887a      	ldrh	r2, [r7, #2]
 80023f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	887a      	ldrh	r2, [r7, #2]
 80023fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	887a      	ldrh	r2, [r7, #2]
 800240a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	887a      	ldrh	r2, [r7, #2]
 8002410:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002428:	2b40      	cmp	r3, #64	; 0x40
 800242a:	d007      	beq.n	800243c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800243a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002444:	d178      	bne.n	8002538 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d002      	beq.n	8002454 <HAL_SPI_TransmitReceive+0x10a>
 800244e:	8b7b      	ldrh	r3, [r7, #26]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d166      	bne.n	8002522 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002458:	881a      	ldrh	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002464:	1c9a      	adds	r2, r3, #2
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800246e:	b29b      	uxth	r3, r3
 8002470:	3b01      	subs	r3, #1
 8002472:	b29a      	uxth	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002478:	e053      	b.n	8002522 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b02      	cmp	r3, #2
 8002486:	d11b      	bne.n	80024c0 <HAL_SPI_TransmitReceive+0x176>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800248c:	b29b      	uxth	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d016      	beq.n	80024c0 <HAL_SPI_TransmitReceive+0x176>
 8002492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002494:	2b01      	cmp	r3, #1
 8002496:	d113      	bne.n	80024c0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249c:	881a      	ldrh	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a8:	1c9a      	adds	r2, r3, #2
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	3b01      	subs	r3, #1
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024bc:	2300      	movs	r3, #0
 80024be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d119      	bne.n	8002502 <HAL_SPI_TransmitReceive+0x1b8>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d014      	beq.n	8002502 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e2:	b292      	uxth	r2, r2
 80024e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ea:	1c9a      	adds	r2, r3, #2
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	3b01      	subs	r3, #1
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80024fe:	2301      	movs	r3, #1
 8002500:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002502:	f7fe ff1b 	bl	800133c <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800250e:	429a      	cmp	r2, r3
 8002510:	d807      	bhi.n	8002522 <HAL_SPI_TransmitReceive+0x1d8>
 8002512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002518:	d003      	beq.n	8002522 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002520:	e0a7      	b.n	8002672 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002526:	b29b      	uxth	r3, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1a6      	bne.n	800247a <HAL_SPI_TransmitReceive+0x130>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002530:	b29b      	uxth	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1a1      	bne.n	800247a <HAL_SPI_TransmitReceive+0x130>
 8002536:	e07c      	b.n	8002632 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d002      	beq.n	8002546 <HAL_SPI_TransmitReceive+0x1fc>
 8002540:	8b7b      	ldrh	r3, [r7, #26]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d16b      	bne.n	800261e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	330c      	adds	r3, #12
 8002550:	7812      	ldrb	r2, [r2, #0]
 8002552:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002558:	1c5a      	adds	r2, r3, #1
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002562:	b29b      	uxth	r3, r3
 8002564:	3b01      	subs	r3, #1
 8002566:	b29a      	uxth	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800256c:	e057      	b.n	800261e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b02      	cmp	r3, #2
 800257a:	d11c      	bne.n	80025b6 <HAL_SPI_TransmitReceive+0x26c>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002580:	b29b      	uxth	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d017      	beq.n	80025b6 <HAL_SPI_TransmitReceive+0x26c>
 8002586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002588:	2b01      	cmp	r3, #1
 800258a:	d114      	bne.n	80025b6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	330c      	adds	r3, #12
 8002596:	7812      	ldrb	r2, [r2, #0]
 8002598:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	1c5a      	adds	r2, r3, #1
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d119      	bne.n	80025f8 <HAL_SPI_TransmitReceive+0x2ae>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d014      	beq.n	80025f8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68da      	ldr	r2, [r3, #12]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e0:	1c5a      	adds	r2, r3, #1
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80025f4:	2301      	movs	r3, #1
 80025f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80025f8:	f7fe fea0 	bl	800133c <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002604:	429a      	cmp	r2, r3
 8002606:	d803      	bhi.n	8002610 <HAL_SPI_TransmitReceive+0x2c6>
 8002608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800260a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260e:	d102      	bne.n	8002616 <HAL_SPI_TransmitReceive+0x2cc>
 8002610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002612:	2b00      	cmp	r3, #0
 8002614:	d103      	bne.n	800261e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800261c:	e029      	b.n	8002672 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002622:	b29b      	uxth	r3, r3
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1a2      	bne.n	800256e <HAL_SPI_TransmitReceive+0x224>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800262c:	b29b      	uxth	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d19d      	bne.n	800256e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002634:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 f8b2 	bl	80027a0 <SPI_EndRxTxTransaction>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d006      	beq.n	8002650 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2220      	movs	r2, #32
 800264c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800264e:	e010      	b.n	8002672 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10b      	bne.n	8002670 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	617b      	str	r3, [r7, #20]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	617b      	str	r3, [r7, #20]
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	e000      	b.n	8002672 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002670:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002682:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002686:	4618      	mov	r0, r3
 8002688:	3730      	adds	r7, #48	; 0x30
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b088      	sub	sp, #32
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	603b      	str	r3, [r7, #0]
 800269c:	4613      	mov	r3, r2
 800269e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80026a0:	f7fe fe4c 	bl	800133c <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a8:	1a9b      	subs	r3, r3, r2
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	4413      	add	r3, r2
 80026ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80026b0:	f7fe fe44 	bl	800133c <HAL_GetTick>
 80026b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80026b6:	4b39      	ldr	r3, [pc, #228]	; (800279c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	015b      	lsls	r3, r3, #5
 80026bc:	0d1b      	lsrs	r3, r3, #20
 80026be:	69fa      	ldr	r2, [r7, #28]
 80026c0:	fb02 f303 	mul.w	r3, r2, r3
 80026c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026c6:	e054      	b.n	8002772 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ce:	d050      	beq.n	8002772 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80026d0:	f7fe fe34 	bl	800133c <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	69fa      	ldr	r2, [r7, #28]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d902      	bls.n	80026e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d13d      	bne.n	8002762 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80026f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026fe:	d111      	bne.n	8002724 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002708:	d004      	beq.n	8002714 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002712:	d107      	bne.n	8002724 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002722:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002728:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800272c:	d10f      	bne.n	800274e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800274c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e017      	b.n	8002792 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002768:	2300      	movs	r3, #0
 800276a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	3b01      	subs	r3, #1
 8002770:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	4013      	ands	r3, r2
 800277c:	68ba      	ldr	r2, [r7, #8]
 800277e:	429a      	cmp	r2, r3
 8002780:	bf0c      	ite	eq
 8002782:	2301      	moveq	r3, #1
 8002784:	2300      	movne	r3, #0
 8002786:	b2db      	uxtb	r3, r3
 8002788:	461a      	mov	r2, r3
 800278a:	79fb      	ldrb	r3, [r7, #7]
 800278c:	429a      	cmp	r2, r3
 800278e:	d19b      	bne.n	80026c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3720      	adds	r7, #32
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20000004 	.word	0x20000004

080027a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b088      	sub	sp, #32
 80027a4:	af02      	add	r7, sp, #8
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80027ac:	4b1b      	ldr	r3, [pc, #108]	; (800281c <SPI_EndRxTxTransaction+0x7c>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a1b      	ldr	r2, [pc, #108]	; (8002820 <SPI_EndRxTxTransaction+0x80>)
 80027b2:	fba2 2303 	umull	r2, r3, r2, r3
 80027b6:	0d5b      	lsrs	r3, r3, #21
 80027b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027bc:	fb02 f303 	mul.w	r3, r2, r3
 80027c0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027ca:	d112      	bne.n	80027f2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2200      	movs	r2, #0
 80027d4:	2180      	movs	r1, #128	; 0x80
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f7ff ff5a 	bl	8002690 <SPI_WaitFlagStateUntilTimeout>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d016      	beq.n	8002810 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e6:	f043 0220 	orr.w	r2, r3, #32
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e00f      	b.n	8002812 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00a      	beq.n	800280e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	3b01      	subs	r3, #1
 80027fc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002808:	2b80      	cmp	r3, #128	; 0x80
 800280a:	d0f2      	beq.n	80027f2 <SPI_EndRxTxTransaction+0x52>
 800280c:	e000      	b.n	8002810 <SPI_EndRxTxTransaction+0x70>
        break;
 800280e:	bf00      	nop
  }

  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3718      	adds	r7, #24
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	20000004 	.word	0x20000004
 8002820:	165e9f81 	.word	0x165e9f81

08002824 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e03f      	b.n	80028b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d106      	bne.n	8002850 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7fe fc9e 	bl	800118c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2224      	movs	r2, #36	; 0x24
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68da      	ldr	r2, [r3, #12]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002866:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 f9cb 	bl	8002c04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	691a      	ldr	r2, [r3, #16]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800287c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	695a      	ldr	r2, [r3, #20]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800288c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68da      	ldr	r2, [r3, #12]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800289c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2220      	movs	r2, #32
 80028a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2220      	movs	r2, #32
 80028b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b08a      	sub	sp, #40	; 0x28
 80028c2:	af02      	add	r7, sp, #8
 80028c4:	60f8      	str	r0, [r7, #12]
 80028c6:	60b9      	str	r1, [r7, #8]
 80028c8:	603b      	str	r3, [r7, #0]
 80028ca:	4613      	mov	r3, r2
 80028cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028ce:	2300      	movs	r3, #0
 80028d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b20      	cmp	r3, #32
 80028dc:	d17c      	bne.n	80029d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d002      	beq.n	80028ea <HAL_UART_Transmit+0x2c>
 80028e4:	88fb      	ldrh	r3, [r7, #6]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e075      	b.n	80029da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d101      	bne.n	80028fc <HAL_UART_Transmit+0x3e>
 80028f8:	2302      	movs	r3, #2
 80028fa:	e06e      	b.n	80029da <HAL_UART_Transmit+0x11c>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2221      	movs	r2, #33	; 0x21
 800290e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002912:	f7fe fd13 	bl	800133c <HAL_GetTick>
 8002916:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	88fa      	ldrh	r2, [r7, #6]
 800291c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	88fa      	ldrh	r2, [r7, #6]
 8002922:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800292c:	d108      	bne.n	8002940 <HAL_UART_Transmit+0x82>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d104      	bne.n	8002940 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002936:	2300      	movs	r3, #0
 8002938:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	61bb      	str	r3, [r7, #24]
 800293e:	e003      	b.n	8002948 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002944:	2300      	movs	r3, #0
 8002946:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002950:	e02a      	b.n	80029a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	2200      	movs	r2, #0
 800295a:	2180      	movs	r1, #128	; 0x80
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f000 f8e2 	bl	8002b26 <UART_WaitOnFlagUntilTimeout>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e036      	b.n	80029da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10b      	bne.n	800298a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	881b      	ldrh	r3, [r3, #0]
 8002976:	461a      	mov	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002980:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	3302      	adds	r3, #2
 8002986:	61bb      	str	r3, [r7, #24]
 8002988:	e007      	b.n	800299a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	781a      	ldrb	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	3301      	adds	r3, #1
 8002998:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800299e:	b29b      	uxth	r3, r3
 80029a0:	3b01      	subs	r3, #1
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1cf      	bne.n	8002952 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	2200      	movs	r2, #0
 80029ba:	2140      	movs	r1, #64	; 0x40
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 f8b2 	bl	8002b26 <UART_WaitOnFlagUntilTimeout>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e006      	b.n	80029da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2220      	movs	r2, #32
 80029d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80029d4:	2300      	movs	r3, #0
 80029d6:	e000      	b.n	80029da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80029d8:	2302      	movs	r3, #2
  }
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3720      	adds	r7, #32
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b08a      	sub	sp, #40	; 0x28
 80029e6:	af02      	add	r7, sp, #8
 80029e8:	60f8      	str	r0, [r7, #12]
 80029ea:	60b9      	str	r1, [r7, #8]
 80029ec:	603b      	str	r3, [r7, #0]
 80029ee:	4613      	mov	r3, r2
 80029f0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029f2:	2300      	movs	r3, #0
 80029f4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b20      	cmp	r3, #32
 8002a00:	f040 808c 	bne.w	8002b1c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d002      	beq.n	8002a10 <HAL_UART_Receive+0x2e>
 8002a0a:	88fb      	ldrh	r3, [r7, #6]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e084      	b.n	8002b1e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d101      	bne.n	8002a22 <HAL_UART_Receive+0x40>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e07d      	b.n	8002b1e <HAL_UART_Receive+0x13c>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2222      	movs	r2, #34	; 0x22
 8002a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a3e:	f7fe fc7d 	bl	800133c <HAL_GetTick>
 8002a42:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	88fa      	ldrh	r2, [r7, #6]
 8002a48:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	88fa      	ldrh	r2, [r7, #6]
 8002a4e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a58:	d108      	bne.n	8002a6c <HAL_UART_Receive+0x8a>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d104      	bne.n	8002a6c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	61bb      	str	r3, [r7, #24]
 8002a6a:	e003      	b.n	8002a74 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a70:	2300      	movs	r3, #0
 8002a72:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002a7c:	e043      	b.n	8002b06 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	2200      	movs	r2, #0
 8002a86:	2120      	movs	r1, #32
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f000 f84c 	bl	8002b26 <UART_WaitOnFlagUntilTimeout>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e042      	b.n	8002b1e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10c      	bne.n	8002ab8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	3302      	adds	r3, #2
 8002ab4:	61bb      	str	r3, [r7, #24]
 8002ab6:	e01f      	b.n	8002af8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ac0:	d007      	beq.n	8002ad2 <HAL_UART_Receive+0xf0>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10a      	bne.n	8002ae0 <HAL_UART_Receive+0xfe>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d106      	bne.n	8002ae0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	701a      	strb	r2, [r3, #0]
 8002ade:	e008      	b.n	8002af2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	3301      	adds	r3, #1
 8002af6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	3b01      	subs	r3, #1
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1b6      	bne.n	8002a7e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2220      	movs	r2, #32
 8002b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	e000      	b.n	8002b1e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002b1c:	2302      	movs	r3, #2
  }
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3720      	adds	r7, #32
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b090      	sub	sp, #64	; 0x40
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	60f8      	str	r0, [r7, #12]
 8002b2e:	60b9      	str	r1, [r7, #8]
 8002b30:	603b      	str	r3, [r7, #0]
 8002b32:	4613      	mov	r3, r2
 8002b34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b36:	e050      	b.n	8002bda <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3e:	d04c      	beq.n	8002bda <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d007      	beq.n	8002b56 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b46:	f7fe fbf9 	bl	800133c <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d241      	bcs.n	8002bda <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	330c      	adds	r3, #12
 8002b5c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b60:	e853 3f00 	ldrex	r3, [r3]
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	330c      	adds	r3, #12
 8002b74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b76:	637a      	str	r2, [r7, #52]	; 0x34
 8002b78:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b7e:	e841 2300 	strex	r3, r2, [r1]
 8002b82:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1e5      	bne.n	8002b56 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	3314      	adds	r3, #20
 8002b90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	e853 3f00 	ldrex	r3, [r3]
 8002b98:	613b      	str	r3, [r7, #16]
   return(result);
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	f023 0301 	bic.w	r3, r3, #1
 8002ba0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	3314      	adds	r3, #20
 8002ba8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002baa:	623a      	str	r2, [r7, #32]
 8002bac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bae:	69f9      	ldr	r1, [r7, #28]
 8002bb0:	6a3a      	ldr	r2, [r7, #32]
 8002bb2:	e841 2300 	strex	r3, r2, [r1]
 8002bb6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1e5      	bne.n	8002b8a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2220      	movs	r2, #32
 8002bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e00f      	b.n	8002bfa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	4013      	ands	r3, r2
 8002be4:	68ba      	ldr	r2, [r7, #8]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	bf0c      	ite	eq
 8002bea:	2301      	moveq	r3, #1
 8002bec:	2300      	movne	r3, #0
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	79fb      	ldrb	r3, [r7, #7]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d09f      	beq.n	8002b38 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3740      	adds	r7, #64	; 0x40
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
	...

08002c04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c08:	b0c0      	sub	sp, #256	; 0x100
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c20:	68d9      	ldr	r1, [r3, #12]
 8002c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	ea40 0301 	orr.w	r3, r0, r1
 8002c2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	431a      	orrs	r2, r3
 8002c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c5c:	f021 010c 	bic.w	r1, r1, #12
 8002c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002c6a:	430b      	orrs	r3, r1
 8002c6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c7e:	6999      	ldr	r1, [r3, #24]
 8002c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	ea40 0301 	orr.w	r3, r0, r1
 8002c8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	4b8f      	ldr	r3, [pc, #572]	; (8002ed0 <UART_SetConfig+0x2cc>)
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d005      	beq.n	8002ca4 <UART_SetConfig+0xa0>
 8002c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	4b8d      	ldr	r3, [pc, #564]	; (8002ed4 <UART_SetConfig+0x2d0>)
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d104      	bne.n	8002cae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ca4:	f7ff fab4 	bl	8002210 <HAL_RCC_GetPCLK2Freq>
 8002ca8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002cac:	e003      	b.n	8002cb6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002cae:	f7ff fa9b 	bl	80021e8 <HAL_RCC_GetPCLK1Freq>
 8002cb2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cc0:	f040 810c 	bne.w	8002edc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002cce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002cd2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002cd6:	4622      	mov	r2, r4
 8002cd8:	462b      	mov	r3, r5
 8002cda:	1891      	adds	r1, r2, r2
 8002cdc:	65b9      	str	r1, [r7, #88]	; 0x58
 8002cde:	415b      	adcs	r3, r3
 8002ce0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ce2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ce6:	4621      	mov	r1, r4
 8002ce8:	eb12 0801 	adds.w	r8, r2, r1
 8002cec:	4629      	mov	r1, r5
 8002cee:	eb43 0901 	adc.w	r9, r3, r1
 8002cf2:	f04f 0200 	mov.w	r2, #0
 8002cf6:	f04f 0300 	mov.w	r3, #0
 8002cfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d06:	4690      	mov	r8, r2
 8002d08:	4699      	mov	r9, r3
 8002d0a:	4623      	mov	r3, r4
 8002d0c:	eb18 0303 	adds.w	r3, r8, r3
 8002d10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002d14:	462b      	mov	r3, r5
 8002d16:	eb49 0303 	adc.w	r3, r9, r3
 8002d1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d2a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002d2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002d32:	460b      	mov	r3, r1
 8002d34:	18db      	adds	r3, r3, r3
 8002d36:	653b      	str	r3, [r7, #80]	; 0x50
 8002d38:	4613      	mov	r3, r2
 8002d3a:	eb42 0303 	adc.w	r3, r2, r3
 8002d3e:	657b      	str	r3, [r7, #84]	; 0x54
 8002d40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002d44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002d48:	f7fd fa92 	bl	8000270 <__aeabi_uldivmod>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	460b      	mov	r3, r1
 8002d50:	4b61      	ldr	r3, [pc, #388]	; (8002ed8 <UART_SetConfig+0x2d4>)
 8002d52:	fba3 2302 	umull	r2, r3, r3, r2
 8002d56:	095b      	lsrs	r3, r3, #5
 8002d58:	011c      	lsls	r4, r3, #4
 8002d5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d64:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002d68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002d6c:	4642      	mov	r2, r8
 8002d6e:	464b      	mov	r3, r9
 8002d70:	1891      	adds	r1, r2, r2
 8002d72:	64b9      	str	r1, [r7, #72]	; 0x48
 8002d74:	415b      	adcs	r3, r3
 8002d76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002d7c:	4641      	mov	r1, r8
 8002d7e:	eb12 0a01 	adds.w	sl, r2, r1
 8002d82:	4649      	mov	r1, r9
 8002d84:	eb43 0b01 	adc.w	fp, r3, r1
 8002d88:	f04f 0200 	mov.w	r2, #0
 8002d8c:	f04f 0300 	mov.w	r3, #0
 8002d90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d9c:	4692      	mov	sl, r2
 8002d9e:	469b      	mov	fp, r3
 8002da0:	4643      	mov	r3, r8
 8002da2:	eb1a 0303 	adds.w	r3, sl, r3
 8002da6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002daa:	464b      	mov	r3, r9
 8002dac:	eb4b 0303 	adc.w	r3, fp, r3
 8002db0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002dc0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002dc4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	18db      	adds	r3, r3, r3
 8002dcc:	643b      	str	r3, [r7, #64]	; 0x40
 8002dce:	4613      	mov	r3, r2
 8002dd0:	eb42 0303 	adc.w	r3, r2, r3
 8002dd4:	647b      	str	r3, [r7, #68]	; 0x44
 8002dd6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002dda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002dde:	f7fd fa47 	bl	8000270 <__aeabi_uldivmod>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	4611      	mov	r1, r2
 8002de8:	4b3b      	ldr	r3, [pc, #236]	; (8002ed8 <UART_SetConfig+0x2d4>)
 8002dea:	fba3 2301 	umull	r2, r3, r3, r1
 8002dee:	095b      	lsrs	r3, r3, #5
 8002df0:	2264      	movs	r2, #100	; 0x64
 8002df2:	fb02 f303 	mul.w	r3, r2, r3
 8002df6:	1acb      	subs	r3, r1, r3
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002dfe:	4b36      	ldr	r3, [pc, #216]	; (8002ed8 <UART_SetConfig+0x2d4>)
 8002e00:	fba3 2302 	umull	r2, r3, r3, r2
 8002e04:	095b      	lsrs	r3, r3, #5
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e0c:	441c      	add	r4, r3
 8002e0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e12:	2200      	movs	r2, #0
 8002e14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e18:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002e1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002e20:	4642      	mov	r2, r8
 8002e22:	464b      	mov	r3, r9
 8002e24:	1891      	adds	r1, r2, r2
 8002e26:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e28:	415b      	adcs	r3, r3
 8002e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e30:	4641      	mov	r1, r8
 8002e32:	1851      	adds	r1, r2, r1
 8002e34:	6339      	str	r1, [r7, #48]	; 0x30
 8002e36:	4649      	mov	r1, r9
 8002e38:	414b      	adcs	r3, r1
 8002e3a:	637b      	str	r3, [r7, #52]	; 0x34
 8002e3c:	f04f 0200 	mov.w	r2, #0
 8002e40:	f04f 0300 	mov.w	r3, #0
 8002e44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002e48:	4659      	mov	r1, fp
 8002e4a:	00cb      	lsls	r3, r1, #3
 8002e4c:	4651      	mov	r1, sl
 8002e4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e52:	4651      	mov	r1, sl
 8002e54:	00ca      	lsls	r2, r1, #3
 8002e56:	4610      	mov	r0, r2
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	4642      	mov	r2, r8
 8002e5e:	189b      	adds	r3, r3, r2
 8002e60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e64:	464b      	mov	r3, r9
 8002e66:	460a      	mov	r2, r1
 8002e68:	eb42 0303 	adc.w	r3, r2, r3
 8002e6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002e7c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002e80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002e84:	460b      	mov	r3, r1
 8002e86:	18db      	adds	r3, r3, r3
 8002e88:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	eb42 0303 	adc.w	r3, r2, r3
 8002e90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002e9a:	f7fd f9e9 	bl	8000270 <__aeabi_uldivmod>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	4b0d      	ldr	r3, [pc, #52]	; (8002ed8 <UART_SetConfig+0x2d4>)
 8002ea4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ea8:	095b      	lsrs	r3, r3, #5
 8002eaa:	2164      	movs	r1, #100	; 0x64
 8002eac:	fb01 f303 	mul.w	r3, r1, r3
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	3332      	adds	r3, #50	; 0x32
 8002eb6:	4a08      	ldr	r2, [pc, #32]	; (8002ed8 <UART_SetConfig+0x2d4>)
 8002eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebc:	095b      	lsrs	r3, r3, #5
 8002ebe:	f003 0207 	and.w	r2, r3, #7
 8002ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4422      	add	r2, r4
 8002eca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ecc:	e106      	b.n	80030dc <UART_SetConfig+0x4d8>
 8002ece:	bf00      	nop
 8002ed0:	40011000 	.word	0x40011000
 8002ed4:	40011400 	.word	0x40011400
 8002ed8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002edc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002ee6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002eea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002eee:	4642      	mov	r2, r8
 8002ef0:	464b      	mov	r3, r9
 8002ef2:	1891      	adds	r1, r2, r2
 8002ef4:	6239      	str	r1, [r7, #32]
 8002ef6:	415b      	adcs	r3, r3
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8002efa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002efe:	4641      	mov	r1, r8
 8002f00:	1854      	adds	r4, r2, r1
 8002f02:	4649      	mov	r1, r9
 8002f04:	eb43 0501 	adc.w	r5, r3, r1
 8002f08:	f04f 0200 	mov.w	r2, #0
 8002f0c:	f04f 0300 	mov.w	r3, #0
 8002f10:	00eb      	lsls	r3, r5, #3
 8002f12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f16:	00e2      	lsls	r2, r4, #3
 8002f18:	4614      	mov	r4, r2
 8002f1a:	461d      	mov	r5, r3
 8002f1c:	4643      	mov	r3, r8
 8002f1e:	18e3      	adds	r3, r4, r3
 8002f20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002f24:	464b      	mov	r3, r9
 8002f26:	eb45 0303 	adc.w	r3, r5, r3
 8002f2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f3e:	f04f 0200 	mov.w	r2, #0
 8002f42:	f04f 0300 	mov.w	r3, #0
 8002f46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f4a:	4629      	mov	r1, r5
 8002f4c:	008b      	lsls	r3, r1, #2
 8002f4e:	4621      	mov	r1, r4
 8002f50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f54:	4621      	mov	r1, r4
 8002f56:	008a      	lsls	r2, r1, #2
 8002f58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002f5c:	f7fd f988 	bl	8000270 <__aeabi_uldivmod>
 8002f60:	4602      	mov	r2, r0
 8002f62:	460b      	mov	r3, r1
 8002f64:	4b60      	ldr	r3, [pc, #384]	; (80030e8 <UART_SetConfig+0x4e4>)
 8002f66:	fba3 2302 	umull	r2, r3, r3, r2
 8002f6a:	095b      	lsrs	r3, r3, #5
 8002f6c:	011c      	lsls	r4, r3, #4
 8002f6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f72:	2200      	movs	r2, #0
 8002f74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f78:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002f80:	4642      	mov	r2, r8
 8002f82:	464b      	mov	r3, r9
 8002f84:	1891      	adds	r1, r2, r2
 8002f86:	61b9      	str	r1, [r7, #24]
 8002f88:	415b      	adcs	r3, r3
 8002f8a:	61fb      	str	r3, [r7, #28]
 8002f8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f90:	4641      	mov	r1, r8
 8002f92:	1851      	adds	r1, r2, r1
 8002f94:	6139      	str	r1, [r7, #16]
 8002f96:	4649      	mov	r1, r9
 8002f98:	414b      	adcs	r3, r1
 8002f9a:	617b      	str	r3, [r7, #20]
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	f04f 0300 	mov.w	r3, #0
 8002fa4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fa8:	4659      	mov	r1, fp
 8002faa:	00cb      	lsls	r3, r1, #3
 8002fac:	4651      	mov	r1, sl
 8002fae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fb2:	4651      	mov	r1, sl
 8002fb4:	00ca      	lsls	r2, r1, #3
 8002fb6:	4610      	mov	r0, r2
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4603      	mov	r3, r0
 8002fbc:	4642      	mov	r2, r8
 8002fbe:	189b      	adds	r3, r3, r2
 8002fc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002fc4:	464b      	mov	r3, r9
 8002fc6:	460a      	mov	r2, r1
 8002fc8:	eb42 0303 	adc.w	r3, r2, r3
 8002fcc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002fda:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	f04f 0300 	mov.w	r3, #0
 8002fe4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002fe8:	4649      	mov	r1, r9
 8002fea:	008b      	lsls	r3, r1, #2
 8002fec:	4641      	mov	r1, r8
 8002fee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ff2:	4641      	mov	r1, r8
 8002ff4:	008a      	lsls	r2, r1, #2
 8002ff6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002ffa:	f7fd f939 	bl	8000270 <__aeabi_uldivmod>
 8002ffe:	4602      	mov	r2, r0
 8003000:	460b      	mov	r3, r1
 8003002:	4611      	mov	r1, r2
 8003004:	4b38      	ldr	r3, [pc, #224]	; (80030e8 <UART_SetConfig+0x4e4>)
 8003006:	fba3 2301 	umull	r2, r3, r3, r1
 800300a:	095b      	lsrs	r3, r3, #5
 800300c:	2264      	movs	r2, #100	; 0x64
 800300e:	fb02 f303 	mul.w	r3, r2, r3
 8003012:	1acb      	subs	r3, r1, r3
 8003014:	011b      	lsls	r3, r3, #4
 8003016:	3332      	adds	r3, #50	; 0x32
 8003018:	4a33      	ldr	r2, [pc, #204]	; (80030e8 <UART_SetConfig+0x4e4>)
 800301a:	fba2 2303 	umull	r2, r3, r2, r3
 800301e:	095b      	lsrs	r3, r3, #5
 8003020:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003024:	441c      	add	r4, r3
 8003026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800302a:	2200      	movs	r2, #0
 800302c:	673b      	str	r3, [r7, #112]	; 0x70
 800302e:	677a      	str	r2, [r7, #116]	; 0x74
 8003030:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003034:	4642      	mov	r2, r8
 8003036:	464b      	mov	r3, r9
 8003038:	1891      	adds	r1, r2, r2
 800303a:	60b9      	str	r1, [r7, #8]
 800303c:	415b      	adcs	r3, r3
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003044:	4641      	mov	r1, r8
 8003046:	1851      	adds	r1, r2, r1
 8003048:	6039      	str	r1, [r7, #0]
 800304a:	4649      	mov	r1, r9
 800304c:	414b      	adcs	r3, r1
 800304e:	607b      	str	r3, [r7, #4]
 8003050:	f04f 0200 	mov.w	r2, #0
 8003054:	f04f 0300 	mov.w	r3, #0
 8003058:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800305c:	4659      	mov	r1, fp
 800305e:	00cb      	lsls	r3, r1, #3
 8003060:	4651      	mov	r1, sl
 8003062:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003066:	4651      	mov	r1, sl
 8003068:	00ca      	lsls	r2, r1, #3
 800306a:	4610      	mov	r0, r2
 800306c:	4619      	mov	r1, r3
 800306e:	4603      	mov	r3, r0
 8003070:	4642      	mov	r2, r8
 8003072:	189b      	adds	r3, r3, r2
 8003074:	66bb      	str	r3, [r7, #104]	; 0x68
 8003076:	464b      	mov	r3, r9
 8003078:	460a      	mov	r2, r1
 800307a:	eb42 0303 	adc.w	r3, r2, r3
 800307e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	663b      	str	r3, [r7, #96]	; 0x60
 800308a:	667a      	str	r2, [r7, #100]	; 0x64
 800308c:	f04f 0200 	mov.w	r2, #0
 8003090:	f04f 0300 	mov.w	r3, #0
 8003094:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003098:	4649      	mov	r1, r9
 800309a:	008b      	lsls	r3, r1, #2
 800309c:	4641      	mov	r1, r8
 800309e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030a2:	4641      	mov	r1, r8
 80030a4:	008a      	lsls	r2, r1, #2
 80030a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80030aa:	f7fd f8e1 	bl	8000270 <__aeabi_uldivmod>
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	4b0d      	ldr	r3, [pc, #52]	; (80030e8 <UART_SetConfig+0x4e4>)
 80030b4:	fba3 1302 	umull	r1, r3, r3, r2
 80030b8:	095b      	lsrs	r3, r3, #5
 80030ba:	2164      	movs	r1, #100	; 0x64
 80030bc:	fb01 f303 	mul.w	r3, r1, r3
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	011b      	lsls	r3, r3, #4
 80030c4:	3332      	adds	r3, #50	; 0x32
 80030c6:	4a08      	ldr	r2, [pc, #32]	; (80030e8 <UART_SetConfig+0x4e4>)
 80030c8:	fba2 2303 	umull	r2, r3, r2, r3
 80030cc:	095b      	lsrs	r3, r3, #5
 80030ce:	f003 020f 	and.w	r2, r3, #15
 80030d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4422      	add	r2, r4
 80030da:	609a      	str	r2, [r3, #8]
}
 80030dc:	bf00      	nop
 80030de:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80030e2:	46bd      	mov	sp, r7
 80030e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030e8:	51eb851f 	.word	0x51eb851f

080030ec <std>:
 80030ec:	2300      	movs	r3, #0
 80030ee:	b510      	push	{r4, lr}
 80030f0:	4604      	mov	r4, r0
 80030f2:	e9c0 3300 	strd	r3, r3, [r0]
 80030f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80030fa:	6083      	str	r3, [r0, #8]
 80030fc:	8181      	strh	r1, [r0, #12]
 80030fe:	6643      	str	r3, [r0, #100]	; 0x64
 8003100:	81c2      	strh	r2, [r0, #14]
 8003102:	6183      	str	r3, [r0, #24]
 8003104:	4619      	mov	r1, r3
 8003106:	2208      	movs	r2, #8
 8003108:	305c      	adds	r0, #92	; 0x5c
 800310a:	f000 fa1f 	bl	800354c <memset>
 800310e:	4b0d      	ldr	r3, [pc, #52]	; (8003144 <std+0x58>)
 8003110:	6263      	str	r3, [r4, #36]	; 0x24
 8003112:	4b0d      	ldr	r3, [pc, #52]	; (8003148 <std+0x5c>)
 8003114:	62a3      	str	r3, [r4, #40]	; 0x28
 8003116:	4b0d      	ldr	r3, [pc, #52]	; (800314c <std+0x60>)
 8003118:	62e3      	str	r3, [r4, #44]	; 0x2c
 800311a:	4b0d      	ldr	r3, [pc, #52]	; (8003150 <std+0x64>)
 800311c:	6323      	str	r3, [r4, #48]	; 0x30
 800311e:	4b0d      	ldr	r3, [pc, #52]	; (8003154 <std+0x68>)
 8003120:	6224      	str	r4, [r4, #32]
 8003122:	429c      	cmp	r4, r3
 8003124:	d006      	beq.n	8003134 <std+0x48>
 8003126:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800312a:	4294      	cmp	r4, r2
 800312c:	d002      	beq.n	8003134 <std+0x48>
 800312e:	33d0      	adds	r3, #208	; 0xd0
 8003130:	429c      	cmp	r4, r3
 8003132:	d105      	bne.n	8003140 <std+0x54>
 8003134:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800313c:	f000 ba7e 	b.w	800363c <__retarget_lock_init_recursive>
 8003140:	bd10      	pop	{r4, pc}
 8003142:	bf00      	nop
 8003144:	0800339d 	.word	0x0800339d
 8003148:	080033bf 	.word	0x080033bf
 800314c:	080033f7 	.word	0x080033f7
 8003150:	0800341b 	.word	0x0800341b
 8003154:	20001148 	.word	0x20001148

08003158 <stdio_exit_handler>:
 8003158:	4a02      	ldr	r2, [pc, #8]	; (8003164 <stdio_exit_handler+0xc>)
 800315a:	4903      	ldr	r1, [pc, #12]	; (8003168 <stdio_exit_handler+0x10>)
 800315c:	4803      	ldr	r0, [pc, #12]	; (800316c <stdio_exit_handler+0x14>)
 800315e:	f000 b869 	b.w	8003234 <_fwalk_sglue>
 8003162:	bf00      	nop
 8003164:	20000010 	.word	0x20000010
 8003168:	08004199 	.word	0x08004199
 800316c:	2000001c 	.word	0x2000001c

08003170 <cleanup_stdio>:
 8003170:	6841      	ldr	r1, [r0, #4]
 8003172:	4b0c      	ldr	r3, [pc, #48]	; (80031a4 <cleanup_stdio+0x34>)
 8003174:	4299      	cmp	r1, r3
 8003176:	b510      	push	{r4, lr}
 8003178:	4604      	mov	r4, r0
 800317a:	d001      	beq.n	8003180 <cleanup_stdio+0x10>
 800317c:	f001 f80c 	bl	8004198 <_fflush_r>
 8003180:	68a1      	ldr	r1, [r4, #8]
 8003182:	4b09      	ldr	r3, [pc, #36]	; (80031a8 <cleanup_stdio+0x38>)
 8003184:	4299      	cmp	r1, r3
 8003186:	d002      	beq.n	800318e <cleanup_stdio+0x1e>
 8003188:	4620      	mov	r0, r4
 800318a:	f001 f805 	bl	8004198 <_fflush_r>
 800318e:	68e1      	ldr	r1, [r4, #12]
 8003190:	4b06      	ldr	r3, [pc, #24]	; (80031ac <cleanup_stdio+0x3c>)
 8003192:	4299      	cmp	r1, r3
 8003194:	d004      	beq.n	80031a0 <cleanup_stdio+0x30>
 8003196:	4620      	mov	r0, r4
 8003198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800319c:	f000 bffc 	b.w	8004198 <_fflush_r>
 80031a0:	bd10      	pop	{r4, pc}
 80031a2:	bf00      	nop
 80031a4:	20001148 	.word	0x20001148
 80031a8:	200011b0 	.word	0x200011b0
 80031ac:	20001218 	.word	0x20001218

080031b0 <global_stdio_init.part.0>:
 80031b0:	b510      	push	{r4, lr}
 80031b2:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <global_stdio_init.part.0+0x30>)
 80031b4:	4c0b      	ldr	r4, [pc, #44]	; (80031e4 <global_stdio_init.part.0+0x34>)
 80031b6:	4a0c      	ldr	r2, [pc, #48]	; (80031e8 <global_stdio_init.part.0+0x38>)
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	4620      	mov	r0, r4
 80031bc:	2200      	movs	r2, #0
 80031be:	2104      	movs	r1, #4
 80031c0:	f7ff ff94 	bl	80030ec <std>
 80031c4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80031c8:	2201      	movs	r2, #1
 80031ca:	2109      	movs	r1, #9
 80031cc:	f7ff ff8e 	bl	80030ec <std>
 80031d0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80031d4:	2202      	movs	r2, #2
 80031d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031da:	2112      	movs	r1, #18
 80031dc:	f7ff bf86 	b.w	80030ec <std>
 80031e0:	20001280 	.word	0x20001280
 80031e4:	20001148 	.word	0x20001148
 80031e8:	08003159 	.word	0x08003159

080031ec <__sfp_lock_acquire>:
 80031ec:	4801      	ldr	r0, [pc, #4]	; (80031f4 <__sfp_lock_acquire+0x8>)
 80031ee:	f000 ba26 	b.w	800363e <__retarget_lock_acquire_recursive>
 80031f2:	bf00      	nop
 80031f4:	20001289 	.word	0x20001289

080031f8 <__sfp_lock_release>:
 80031f8:	4801      	ldr	r0, [pc, #4]	; (8003200 <__sfp_lock_release+0x8>)
 80031fa:	f000 ba21 	b.w	8003640 <__retarget_lock_release_recursive>
 80031fe:	bf00      	nop
 8003200:	20001289 	.word	0x20001289

08003204 <__sinit>:
 8003204:	b510      	push	{r4, lr}
 8003206:	4604      	mov	r4, r0
 8003208:	f7ff fff0 	bl	80031ec <__sfp_lock_acquire>
 800320c:	6a23      	ldr	r3, [r4, #32]
 800320e:	b11b      	cbz	r3, 8003218 <__sinit+0x14>
 8003210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003214:	f7ff bff0 	b.w	80031f8 <__sfp_lock_release>
 8003218:	4b04      	ldr	r3, [pc, #16]	; (800322c <__sinit+0x28>)
 800321a:	6223      	str	r3, [r4, #32]
 800321c:	4b04      	ldr	r3, [pc, #16]	; (8003230 <__sinit+0x2c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1f5      	bne.n	8003210 <__sinit+0xc>
 8003224:	f7ff ffc4 	bl	80031b0 <global_stdio_init.part.0>
 8003228:	e7f2      	b.n	8003210 <__sinit+0xc>
 800322a:	bf00      	nop
 800322c:	08003171 	.word	0x08003171
 8003230:	20001280 	.word	0x20001280

08003234 <_fwalk_sglue>:
 8003234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003238:	4607      	mov	r7, r0
 800323a:	4688      	mov	r8, r1
 800323c:	4614      	mov	r4, r2
 800323e:	2600      	movs	r6, #0
 8003240:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003244:	f1b9 0901 	subs.w	r9, r9, #1
 8003248:	d505      	bpl.n	8003256 <_fwalk_sglue+0x22>
 800324a:	6824      	ldr	r4, [r4, #0]
 800324c:	2c00      	cmp	r4, #0
 800324e:	d1f7      	bne.n	8003240 <_fwalk_sglue+0xc>
 8003250:	4630      	mov	r0, r6
 8003252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003256:	89ab      	ldrh	r3, [r5, #12]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d907      	bls.n	800326c <_fwalk_sglue+0x38>
 800325c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003260:	3301      	adds	r3, #1
 8003262:	d003      	beq.n	800326c <_fwalk_sglue+0x38>
 8003264:	4629      	mov	r1, r5
 8003266:	4638      	mov	r0, r7
 8003268:	47c0      	blx	r8
 800326a:	4306      	orrs	r6, r0
 800326c:	3568      	adds	r5, #104	; 0x68
 800326e:	e7e9      	b.n	8003244 <_fwalk_sglue+0x10>

08003270 <iprintf>:
 8003270:	b40f      	push	{r0, r1, r2, r3}
 8003272:	b507      	push	{r0, r1, r2, lr}
 8003274:	4906      	ldr	r1, [pc, #24]	; (8003290 <iprintf+0x20>)
 8003276:	ab04      	add	r3, sp, #16
 8003278:	6808      	ldr	r0, [r1, #0]
 800327a:	f853 2b04 	ldr.w	r2, [r3], #4
 800327e:	6881      	ldr	r1, [r0, #8]
 8003280:	9301      	str	r3, [sp, #4]
 8003282:	f000 fc59 	bl	8003b38 <_vfiprintf_r>
 8003286:	b003      	add	sp, #12
 8003288:	f85d eb04 	ldr.w	lr, [sp], #4
 800328c:	b004      	add	sp, #16
 800328e:	4770      	bx	lr
 8003290:	20000068 	.word	0x20000068

08003294 <putchar>:
 8003294:	4b02      	ldr	r3, [pc, #8]	; (80032a0 <putchar+0xc>)
 8003296:	4601      	mov	r1, r0
 8003298:	6818      	ldr	r0, [r3, #0]
 800329a:	6882      	ldr	r2, [r0, #8]
 800329c:	f001 b806 	b.w	80042ac <_putc_r>
 80032a0:	20000068 	.word	0x20000068

080032a4 <_puts_r>:
 80032a4:	6a03      	ldr	r3, [r0, #32]
 80032a6:	b570      	push	{r4, r5, r6, lr}
 80032a8:	6884      	ldr	r4, [r0, #8]
 80032aa:	4605      	mov	r5, r0
 80032ac:	460e      	mov	r6, r1
 80032ae:	b90b      	cbnz	r3, 80032b4 <_puts_r+0x10>
 80032b0:	f7ff ffa8 	bl	8003204 <__sinit>
 80032b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80032b6:	07db      	lsls	r3, r3, #31
 80032b8:	d405      	bmi.n	80032c6 <_puts_r+0x22>
 80032ba:	89a3      	ldrh	r3, [r4, #12]
 80032bc:	0598      	lsls	r0, r3, #22
 80032be:	d402      	bmi.n	80032c6 <_puts_r+0x22>
 80032c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032c2:	f000 f9bc 	bl	800363e <__retarget_lock_acquire_recursive>
 80032c6:	89a3      	ldrh	r3, [r4, #12]
 80032c8:	0719      	lsls	r1, r3, #28
 80032ca:	d513      	bpl.n	80032f4 <_puts_r+0x50>
 80032cc:	6923      	ldr	r3, [r4, #16]
 80032ce:	b18b      	cbz	r3, 80032f4 <_puts_r+0x50>
 80032d0:	3e01      	subs	r6, #1
 80032d2:	68a3      	ldr	r3, [r4, #8]
 80032d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80032d8:	3b01      	subs	r3, #1
 80032da:	60a3      	str	r3, [r4, #8]
 80032dc:	b9e9      	cbnz	r1, 800331a <_puts_r+0x76>
 80032de:	2b00      	cmp	r3, #0
 80032e0:	da2e      	bge.n	8003340 <_puts_r+0x9c>
 80032e2:	4622      	mov	r2, r4
 80032e4:	210a      	movs	r1, #10
 80032e6:	4628      	mov	r0, r5
 80032e8:	f000 f89b 	bl	8003422 <__swbuf_r>
 80032ec:	3001      	adds	r0, #1
 80032ee:	d007      	beq.n	8003300 <_puts_r+0x5c>
 80032f0:	250a      	movs	r5, #10
 80032f2:	e007      	b.n	8003304 <_puts_r+0x60>
 80032f4:	4621      	mov	r1, r4
 80032f6:	4628      	mov	r0, r5
 80032f8:	f000 f8d0 	bl	800349c <__swsetup_r>
 80032fc:	2800      	cmp	r0, #0
 80032fe:	d0e7      	beq.n	80032d0 <_puts_r+0x2c>
 8003300:	f04f 35ff 	mov.w	r5, #4294967295
 8003304:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003306:	07da      	lsls	r2, r3, #31
 8003308:	d405      	bmi.n	8003316 <_puts_r+0x72>
 800330a:	89a3      	ldrh	r3, [r4, #12]
 800330c:	059b      	lsls	r3, r3, #22
 800330e:	d402      	bmi.n	8003316 <_puts_r+0x72>
 8003310:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003312:	f000 f995 	bl	8003640 <__retarget_lock_release_recursive>
 8003316:	4628      	mov	r0, r5
 8003318:	bd70      	pop	{r4, r5, r6, pc}
 800331a:	2b00      	cmp	r3, #0
 800331c:	da04      	bge.n	8003328 <_puts_r+0x84>
 800331e:	69a2      	ldr	r2, [r4, #24]
 8003320:	429a      	cmp	r2, r3
 8003322:	dc06      	bgt.n	8003332 <_puts_r+0x8e>
 8003324:	290a      	cmp	r1, #10
 8003326:	d004      	beq.n	8003332 <_puts_r+0x8e>
 8003328:	6823      	ldr	r3, [r4, #0]
 800332a:	1c5a      	adds	r2, r3, #1
 800332c:	6022      	str	r2, [r4, #0]
 800332e:	7019      	strb	r1, [r3, #0]
 8003330:	e7cf      	b.n	80032d2 <_puts_r+0x2e>
 8003332:	4622      	mov	r2, r4
 8003334:	4628      	mov	r0, r5
 8003336:	f000 f874 	bl	8003422 <__swbuf_r>
 800333a:	3001      	adds	r0, #1
 800333c:	d1c9      	bne.n	80032d2 <_puts_r+0x2e>
 800333e:	e7df      	b.n	8003300 <_puts_r+0x5c>
 8003340:	6823      	ldr	r3, [r4, #0]
 8003342:	250a      	movs	r5, #10
 8003344:	1c5a      	adds	r2, r3, #1
 8003346:	6022      	str	r2, [r4, #0]
 8003348:	701d      	strb	r5, [r3, #0]
 800334a:	e7db      	b.n	8003304 <_puts_r+0x60>

0800334c <puts>:
 800334c:	4b02      	ldr	r3, [pc, #8]	; (8003358 <puts+0xc>)
 800334e:	4601      	mov	r1, r0
 8003350:	6818      	ldr	r0, [r3, #0]
 8003352:	f7ff bfa7 	b.w	80032a4 <_puts_r>
 8003356:	bf00      	nop
 8003358:	20000068 	.word	0x20000068

0800335c <siprintf>:
 800335c:	b40e      	push	{r1, r2, r3}
 800335e:	b500      	push	{lr}
 8003360:	b09c      	sub	sp, #112	; 0x70
 8003362:	ab1d      	add	r3, sp, #116	; 0x74
 8003364:	9002      	str	r0, [sp, #8]
 8003366:	9006      	str	r0, [sp, #24]
 8003368:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800336c:	4809      	ldr	r0, [pc, #36]	; (8003394 <siprintf+0x38>)
 800336e:	9107      	str	r1, [sp, #28]
 8003370:	9104      	str	r1, [sp, #16]
 8003372:	4909      	ldr	r1, [pc, #36]	; (8003398 <siprintf+0x3c>)
 8003374:	f853 2b04 	ldr.w	r2, [r3], #4
 8003378:	9105      	str	r1, [sp, #20]
 800337a:	6800      	ldr	r0, [r0, #0]
 800337c:	9301      	str	r3, [sp, #4]
 800337e:	a902      	add	r1, sp, #8
 8003380:	f000 fab2 	bl	80038e8 <_svfiprintf_r>
 8003384:	9b02      	ldr	r3, [sp, #8]
 8003386:	2200      	movs	r2, #0
 8003388:	701a      	strb	r2, [r3, #0]
 800338a:	b01c      	add	sp, #112	; 0x70
 800338c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003390:	b003      	add	sp, #12
 8003392:	4770      	bx	lr
 8003394:	20000068 	.word	0x20000068
 8003398:	ffff0208 	.word	0xffff0208

0800339c <__sread>:
 800339c:	b510      	push	{r4, lr}
 800339e:	460c      	mov	r4, r1
 80033a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033a4:	f000 f8fc 	bl	80035a0 <_read_r>
 80033a8:	2800      	cmp	r0, #0
 80033aa:	bfab      	itete	ge
 80033ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80033ae:	89a3      	ldrhlt	r3, [r4, #12]
 80033b0:	181b      	addge	r3, r3, r0
 80033b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80033b6:	bfac      	ite	ge
 80033b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80033ba:	81a3      	strhlt	r3, [r4, #12]
 80033bc:	bd10      	pop	{r4, pc}

080033be <__swrite>:
 80033be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033c2:	461f      	mov	r7, r3
 80033c4:	898b      	ldrh	r3, [r1, #12]
 80033c6:	05db      	lsls	r3, r3, #23
 80033c8:	4605      	mov	r5, r0
 80033ca:	460c      	mov	r4, r1
 80033cc:	4616      	mov	r6, r2
 80033ce:	d505      	bpl.n	80033dc <__swrite+0x1e>
 80033d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033d4:	2302      	movs	r3, #2
 80033d6:	2200      	movs	r2, #0
 80033d8:	f000 f8d0 	bl	800357c <_lseek_r>
 80033dc:	89a3      	ldrh	r3, [r4, #12]
 80033de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033e6:	81a3      	strh	r3, [r4, #12]
 80033e8:	4632      	mov	r2, r6
 80033ea:	463b      	mov	r3, r7
 80033ec:	4628      	mov	r0, r5
 80033ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80033f2:	f000 b8e7 	b.w	80035c4 <_write_r>

080033f6 <__sseek>:
 80033f6:	b510      	push	{r4, lr}
 80033f8:	460c      	mov	r4, r1
 80033fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033fe:	f000 f8bd 	bl	800357c <_lseek_r>
 8003402:	1c43      	adds	r3, r0, #1
 8003404:	89a3      	ldrh	r3, [r4, #12]
 8003406:	bf15      	itete	ne
 8003408:	6560      	strne	r0, [r4, #84]	; 0x54
 800340a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800340e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003412:	81a3      	strheq	r3, [r4, #12]
 8003414:	bf18      	it	ne
 8003416:	81a3      	strhne	r3, [r4, #12]
 8003418:	bd10      	pop	{r4, pc}

0800341a <__sclose>:
 800341a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800341e:	f000 b89d 	b.w	800355c <_close_r>

08003422 <__swbuf_r>:
 8003422:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003424:	460e      	mov	r6, r1
 8003426:	4614      	mov	r4, r2
 8003428:	4605      	mov	r5, r0
 800342a:	b118      	cbz	r0, 8003434 <__swbuf_r+0x12>
 800342c:	6a03      	ldr	r3, [r0, #32]
 800342e:	b90b      	cbnz	r3, 8003434 <__swbuf_r+0x12>
 8003430:	f7ff fee8 	bl	8003204 <__sinit>
 8003434:	69a3      	ldr	r3, [r4, #24]
 8003436:	60a3      	str	r3, [r4, #8]
 8003438:	89a3      	ldrh	r3, [r4, #12]
 800343a:	071a      	lsls	r2, r3, #28
 800343c:	d525      	bpl.n	800348a <__swbuf_r+0x68>
 800343e:	6923      	ldr	r3, [r4, #16]
 8003440:	b31b      	cbz	r3, 800348a <__swbuf_r+0x68>
 8003442:	6823      	ldr	r3, [r4, #0]
 8003444:	6922      	ldr	r2, [r4, #16]
 8003446:	1a98      	subs	r0, r3, r2
 8003448:	6963      	ldr	r3, [r4, #20]
 800344a:	b2f6      	uxtb	r6, r6
 800344c:	4283      	cmp	r3, r0
 800344e:	4637      	mov	r7, r6
 8003450:	dc04      	bgt.n	800345c <__swbuf_r+0x3a>
 8003452:	4621      	mov	r1, r4
 8003454:	4628      	mov	r0, r5
 8003456:	f000 fe9f 	bl	8004198 <_fflush_r>
 800345a:	b9e0      	cbnz	r0, 8003496 <__swbuf_r+0x74>
 800345c:	68a3      	ldr	r3, [r4, #8]
 800345e:	3b01      	subs	r3, #1
 8003460:	60a3      	str	r3, [r4, #8]
 8003462:	6823      	ldr	r3, [r4, #0]
 8003464:	1c5a      	adds	r2, r3, #1
 8003466:	6022      	str	r2, [r4, #0]
 8003468:	701e      	strb	r6, [r3, #0]
 800346a:	6962      	ldr	r2, [r4, #20]
 800346c:	1c43      	adds	r3, r0, #1
 800346e:	429a      	cmp	r2, r3
 8003470:	d004      	beq.n	800347c <__swbuf_r+0x5a>
 8003472:	89a3      	ldrh	r3, [r4, #12]
 8003474:	07db      	lsls	r3, r3, #31
 8003476:	d506      	bpl.n	8003486 <__swbuf_r+0x64>
 8003478:	2e0a      	cmp	r6, #10
 800347a:	d104      	bne.n	8003486 <__swbuf_r+0x64>
 800347c:	4621      	mov	r1, r4
 800347e:	4628      	mov	r0, r5
 8003480:	f000 fe8a 	bl	8004198 <_fflush_r>
 8003484:	b938      	cbnz	r0, 8003496 <__swbuf_r+0x74>
 8003486:	4638      	mov	r0, r7
 8003488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800348a:	4621      	mov	r1, r4
 800348c:	4628      	mov	r0, r5
 800348e:	f000 f805 	bl	800349c <__swsetup_r>
 8003492:	2800      	cmp	r0, #0
 8003494:	d0d5      	beq.n	8003442 <__swbuf_r+0x20>
 8003496:	f04f 37ff 	mov.w	r7, #4294967295
 800349a:	e7f4      	b.n	8003486 <__swbuf_r+0x64>

0800349c <__swsetup_r>:
 800349c:	b538      	push	{r3, r4, r5, lr}
 800349e:	4b2a      	ldr	r3, [pc, #168]	; (8003548 <__swsetup_r+0xac>)
 80034a0:	4605      	mov	r5, r0
 80034a2:	6818      	ldr	r0, [r3, #0]
 80034a4:	460c      	mov	r4, r1
 80034a6:	b118      	cbz	r0, 80034b0 <__swsetup_r+0x14>
 80034a8:	6a03      	ldr	r3, [r0, #32]
 80034aa:	b90b      	cbnz	r3, 80034b0 <__swsetup_r+0x14>
 80034ac:	f7ff feaa 	bl	8003204 <__sinit>
 80034b0:	89a3      	ldrh	r3, [r4, #12]
 80034b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80034b6:	0718      	lsls	r0, r3, #28
 80034b8:	d422      	bmi.n	8003500 <__swsetup_r+0x64>
 80034ba:	06d9      	lsls	r1, r3, #27
 80034bc:	d407      	bmi.n	80034ce <__swsetup_r+0x32>
 80034be:	2309      	movs	r3, #9
 80034c0:	602b      	str	r3, [r5, #0]
 80034c2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80034c6:	81a3      	strh	r3, [r4, #12]
 80034c8:	f04f 30ff 	mov.w	r0, #4294967295
 80034cc:	e034      	b.n	8003538 <__swsetup_r+0x9c>
 80034ce:	0758      	lsls	r0, r3, #29
 80034d0:	d512      	bpl.n	80034f8 <__swsetup_r+0x5c>
 80034d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80034d4:	b141      	cbz	r1, 80034e8 <__swsetup_r+0x4c>
 80034d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80034da:	4299      	cmp	r1, r3
 80034dc:	d002      	beq.n	80034e4 <__swsetup_r+0x48>
 80034de:	4628      	mov	r0, r5
 80034e0:	f000 f8b0 	bl	8003644 <_free_r>
 80034e4:	2300      	movs	r3, #0
 80034e6:	6363      	str	r3, [r4, #52]	; 0x34
 80034e8:	89a3      	ldrh	r3, [r4, #12]
 80034ea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80034ee:	81a3      	strh	r3, [r4, #12]
 80034f0:	2300      	movs	r3, #0
 80034f2:	6063      	str	r3, [r4, #4]
 80034f4:	6923      	ldr	r3, [r4, #16]
 80034f6:	6023      	str	r3, [r4, #0]
 80034f8:	89a3      	ldrh	r3, [r4, #12]
 80034fa:	f043 0308 	orr.w	r3, r3, #8
 80034fe:	81a3      	strh	r3, [r4, #12]
 8003500:	6923      	ldr	r3, [r4, #16]
 8003502:	b94b      	cbnz	r3, 8003518 <__swsetup_r+0x7c>
 8003504:	89a3      	ldrh	r3, [r4, #12]
 8003506:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800350a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800350e:	d003      	beq.n	8003518 <__swsetup_r+0x7c>
 8003510:	4621      	mov	r1, r4
 8003512:	4628      	mov	r0, r5
 8003514:	f000 fe8e 	bl	8004234 <__smakebuf_r>
 8003518:	89a0      	ldrh	r0, [r4, #12]
 800351a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800351e:	f010 0301 	ands.w	r3, r0, #1
 8003522:	d00a      	beq.n	800353a <__swsetup_r+0x9e>
 8003524:	2300      	movs	r3, #0
 8003526:	60a3      	str	r3, [r4, #8]
 8003528:	6963      	ldr	r3, [r4, #20]
 800352a:	425b      	negs	r3, r3
 800352c:	61a3      	str	r3, [r4, #24]
 800352e:	6923      	ldr	r3, [r4, #16]
 8003530:	b943      	cbnz	r3, 8003544 <__swsetup_r+0xa8>
 8003532:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003536:	d1c4      	bne.n	80034c2 <__swsetup_r+0x26>
 8003538:	bd38      	pop	{r3, r4, r5, pc}
 800353a:	0781      	lsls	r1, r0, #30
 800353c:	bf58      	it	pl
 800353e:	6963      	ldrpl	r3, [r4, #20]
 8003540:	60a3      	str	r3, [r4, #8]
 8003542:	e7f4      	b.n	800352e <__swsetup_r+0x92>
 8003544:	2000      	movs	r0, #0
 8003546:	e7f7      	b.n	8003538 <__swsetup_r+0x9c>
 8003548:	20000068 	.word	0x20000068

0800354c <memset>:
 800354c:	4402      	add	r2, r0
 800354e:	4603      	mov	r3, r0
 8003550:	4293      	cmp	r3, r2
 8003552:	d100      	bne.n	8003556 <memset+0xa>
 8003554:	4770      	bx	lr
 8003556:	f803 1b01 	strb.w	r1, [r3], #1
 800355a:	e7f9      	b.n	8003550 <memset+0x4>

0800355c <_close_r>:
 800355c:	b538      	push	{r3, r4, r5, lr}
 800355e:	4d06      	ldr	r5, [pc, #24]	; (8003578 <_close_r+0x1c>)
 8003560:	2300      	movs	r3, #0
 8003562:	4604      	mov	r4, r0
 8003564:	4608      	mov	r0, r1
 8003566:	602b      	str	r3, [r5, #0]
 8003568:	f7fd fd43 	bl	8000ff2 <_close>
 800356c:	1c43      	adds	r3, r0, #1
 800356e:	d102      	bne.n	8003576 <_close_r+0x1a>
 8003570:	682b      	ldr	r3, [r5, #0]
 8003572:	b103      	cbz	r3, 8003576 <_close_r+0x1a>
 8003574:	6023      	str	r3, [r4, #0]
 8003576:	bd38      	pop	{r3, r4, r5, pc}
 8003578:	20001284 	.word	0x20001284

0800357c <_lseek_r>:
 800357c:	b538      	push	{r3, r4, r5, lr}
 800357e:	4d07      	ldr	r5, [pc, #28]	; (800359c <_lseek_r+0x20>)
 8003580:	4604      	mov	r4, r0
 8003582:	4608      	mov	r0, r1
 8003584:	4611      	mov	r1, r2
 8003586:	2200      	movs	r2, #0
 8003588:	602a      	str	r2, [r5, #0]
 800358a:	461a      	mov	r2, r3
 800358c:	f7fd fd58 	bl	8001040 <_lseek>
 8003590:	1c43      	adds	r3, r0, #1
 8003592:	d102      	bne.n	800359a <_lseek_r+0x1e>
 8003594:	682b      	ldr	r3, [r5, #0]
 8003596:	b103      	cbz	r3, 800359a <_lseek_r+0x1e>
 8003598:	6023      	str	r3, [r4, #0]
 800359a:	bd38      	pop	{r3, r4, r5, pc}
 800359c:	20001284 	.word	0x20001284

080035a0 <_read_r>:
 80035a0:	b538      	push	{r3, r4, r5, lr}
 80035a2:	4d07      	ldr	r5, [pc, #28]	; (80035c0 <_read_r+0x20>)
 80035a4:	4604      	mov	r4, r0
 80035a6:	4608      	mov	r0, r1
 80035a8:	4611      	mov	r1, r2
 80035aa:	2200      	movs	r2, #0
 80035ac:	602a      	str	r2, [r5, #0]
 80035ae:	461a      	mov	r2, r3
 80035b0:	f7fd fce6 	bl	8000f80 <_read>
 80035b4:	1c43      	adds	r3, r0, #1
 80035b6:	d102      	bne.n	80035be <_read_r+0x1e>
 80035b8:	682b      	ldr	r3, [r5, #0]
 80035ba:	b103      	cbz	r3, 80035be <_read_r+0x1e>
 80035bc:	6023      	str	r3, [r4, #0]
 80035be:	bd38      	pop	{r3, r4, r5, pc}
 80035c0:	20001284 	.word	0x20001284

080035c4 <_write_r>:
 80035c4:	b538      	push	{r3, r4, r5, lr}
 80035c6:	4d07      	ldr	r5, [pc, #28]	; (80035e4 <_write_r+0x20>)
 80035c8:	4604      	mov	r4, r0
 80035ca:	4608      	mov	r0, r1
 80035cc:	4611      	mov	r1, r2
 80035ce:	2200      	movs	r2, #0
 80035d0:	602a      	str	r2, [r5, #0]
 80035d2:	461a      	mov	r2, r3
 80035d4:	f7fd fcf1 	bl	8000fba <_write>
 80035d8:	1c43      	adds	r3, r0, #1
 80035da:	d102      	bne.n	80035e2 <_write_r+0x1e>
 80035dc:	682b      	ldr	r3, [r5, #0]
 80035de:	b103      	cbz	r3, 80035e2 <_write_r+0x1e>
 80035e0:	6023      	str	r3, [r4, #0]
 80035e2:	bd38      	pop	{r3, r4, r5, pc}
 80035e4:	20001284 	.word	0x20001284

080035e8 <__errno>:
 80035e8:	4b01      	ldr	r3, [pc, #4]	; (80035f0 <__errno+0x8>)
 80035ea:	6818      	ldr	r0, [r3, #0]
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	20000068 	.word	0x20000068

080035f4 <__libc_init_array>:
 80035f4:	b570      	push	{r4, r5, r6, lr}
 80035f6:	4d0d      	ldr	r5, [pc, #52]	; (800362c <__libc_init_array+0x38>)
 80035f8:	4c0d      	ldr	r4, [pc, #52]	; (8003630 <__libc_init_array+0x3c>)
 80035fa:	1b64      	subs	r4, r4, r5
 80035fc:	10a4      	asrs	r4, r4, #2
 80035fe:	2600      	movs	r6, #0
 8003600:	42a6      	cmp	r6, r4
 8003602:	d109      	bne.n	8003618 <__libc_init_array+0x24>
 8003604:	4d0b      	ldr	r5, [pc, #44]	; (8003634 <__libc_init_array+0x40>)
 8003606:	4c0c      	ldr	r4, [pc, #48]	; (8003638 <__libc_init_array+0x44>)
 8003608:	f000 ff16 	bl	8004438 <_init>
 800360c:	1b64      	subs	r4, r4, r5
 800360e:	10a4      	asrs	r4, r4, #2
 8003610:	2600      	movs	r6, #0
 8003612:	42a6      	cmp	r6, r4
 8003614:	d105      	bne.n	8003622 <__libc_init_array+0x2e>
 8003616:	bd70      	pop	{r4, r5, r6, pc}
 8003618:	f855 3b04 	ldr.w	r3, [r5], #4
 800361c:	4798      	blx	r3
 800361e:	3601      	adds	r6, #1
 8003620:	e7ee      	b.n	8003600 <__libc_init_array+0xc>
 8003622:	f855 3b04 	ldr.w	r3, [r5], #4
 8003626:	4798      	blx	r3
 8003628:	3601      	adds	r6, #1
 800362a:	e7f2      	b.n	8003612 <__libc_init_array+0x1e>
 800362c:	08004534 	.word	0x08004534
 8003630:	08004534 	.word	0x08004534
 8003634:	08004534 	.word	0x08004534
 8003638:	08004538 	.word	0x08004538

0800363c <__retarget_lock_init_recursive>:
 800363c:	4770      	bx	lr

0800363e <__retarget_lock_acquire_recursive>:
 800363e:	4770      	bx	lr

08003640 <__retarget_lock_release_recursive>:
 8003640:	4770      	bx	lr
	...

08003644 <_free_r>:
 8003644:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003646:	2900      	cmp	r1, #0
 8003648:	d044      	beq.n	80036d4 <_free_r+0x90>
 800364a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800364e:	9001      	str	r0, [sp, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	f1a1 0404 	sub.w	r4, r1, #4
 8003656:	bfb8      	it	lt
 8003658:	18e4      	addlt	r4, r4, r3
 800365a:	f000 f8df 	bl	800381c <__malloc_lock>
 800365e:	4a1e      	ldr	r2, [pc, #120]	; (80036d8 <_free_r+0x94>)
 8003660:	9801      	ldr	r0, [sp, #4]
 8003662:	6813      	ldr	r3, [r2, #0]
 8003664:	b933      	cbnz	r3, 8003674 <_free_r+0x30>
 8003666:	6063      	str	r3, [r4, #4]
 8003668:	6014      	str	r4, [r2, #0]
 800366a:	b003      	add	sp, #12
 800366c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003670:	f000 b8da 	b.w	8003828 <__malloc_unlock>
 8003674:	42a3      	cmp	r3, r4
 8003676:	d908      	bls.n	800368a <_free_r+0x46>
 8003678:	6825      	ldr	r5, [r4, #0]
 800367a:	1961      	adds	r1, r4, r5
 800367c:	428b      	cmp	r3, r1
 800367e:	bf01      	itttt	eq
 8003680:	6819      	ldreq	r1, [r3, #0]
 8003682:	685b      	ldreq	r3, [r3, #4]
 8003684:	1949      	addeq	r1, r1, r5
 8003686:	6021      	streq	r1, [r4, #0]
 8003688:	e7ed      	b.n	8003666 <_free_r+0x22>
 800368a:	461a      	mov	r2, r3
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	b10b      	cbz	r3, 8003694 <_free_r+0x50>
 8003690:	42a3      	cmp	r3, r4
 8003692:	d9fa      	bls.n	800368a <_free_r+0x46>
 8003694:	6811      	ldr	r1, [r2, #0]
 8003696:	1855      	adds	r5, r2, r1
 8003698:	42a5      	cmp	r5, r4
 800369a:	d10b      	bne.n	80036b4 <_free_r+0x70>
 800369c:	6824      	ldr	r4, [r4, #0]
 800369e:	4421      	add	r1, r4
 80036a0:	1854      	adds	r4, r2, r1
 80036a2:	42a3      	cmp	r3, r4
 80036a4:	6011      	str	r1, [r2, #0]
 80036a6:	d1e0      	bne.n	800366a <_free_r+0x26>
 80036a8:	681c      	ldr	r4, [r3, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	6053      	str	r3, [r2, #4]
 80036ae:	440c      	add	r4, r1
 80036b0:	6014      	str	r4, [r2, #0]
 80036b2:	e7da      	b.n	800366a <_free_r+0x26>
 80036b4:	d902      	bls.n	80036bc <_free_r+0x78>
 80036b6:	230c      	movs	r3, #12
 80036b8:	6003      	str	r3, [r0, #0]
 80036ba:	e7d6      	b.n	800366a <_free_r+0x26>
 80036bc:	6825      	ldr	r5, [r4, #0]
 80036be:	1961      	adds	r1, r4, r5
 80036c0:	428b      	cmp	r3, r1
 80036c2:	bf04      	itt	eq
 80036c4:	6819      	ldreq	r1, [r3, #0]
 80036c6:	685b      	ldreq	r3, [r3, #4]
 80036c8:	6063      	str	r3, [r4, #4]
 80036ca:	bf04      	itt	eq
 80036cc:	1949      	addeq	r1, r1, r5
 80036ce:	6021      	streq	r1, [r4, #0]
 80036d0:	6054      	str	r4, [r2, #4]
 80036d2:	e7ca      	b.n	800366a <_free_r+0x26>
 80036d4:	b003      	add	sp, #12
 80036d6:	bd30      	pop	{r4, r5, pc}
 80036d8:	2000128c 	.word	0x2000128c

080036dc <sbrk_aligned>:
 80036dc:	b570      	push	{r4, r5, r6, lr}
 80036de:	4e0e      	ldr	r6, [pc, #56]	; (8003718 <sbrk_aligned+0x3c>)
 80036e0:	460c      	mov	r4, r1
 80036e2:	6831      	ldr	r1, [r6, #0]
 80036e4:	4605      	mov	r5, r0
 80036e6:	b911      	cbnz	r1, 80036ee <sbrk_aligned+0x12>
 80036e8:	f000 fe50 	bl	800438c <_sbrk_r>
 80036ec:	6030      	str	r0, [r6, #0]
 80036ee:	4621      	mov	r1, r4
 80036f0:	4628      	mov	r0, r5
 80036f2:	f000 fe4b 	bl	800438c <_sbrk_r>
 80036f6:	1c43      	adds	r3, r0, #1
 80036f8:	d00a      	beq.n	8003710 <sbrk_aligned+0x34>
 80036fa:	1cc4      	adds	r4, r0, #3
 80036fc:	f024 0403 	bic.w	r4, r4, #3
 8003700:	42a0      	cmp	r0, r4
 8003702:	d007      	beq.n	8003714 <sbrk_aligned+0x38>
 8003704:	1a21      	subs	r1, r4, r0
 8003706:	4628      	mov	r0, r5
 8003708:	f000 fe40 	bl	800438c <_sbrk_r>
 800370c:	3001      	adds	r0, #1
 800370e:	d101      	bne.n	8003714 <sbrk_aligned+0x38>
 8003710:	f04f 34ff 	mov.w	r4, #4294967295
 8003714:	4620      	mov	r0, r4
 8003716:	bd70      	pop	{r4, r5, r6, pc}
 8003718:	20001290 	.word	0x20001290

0800371c <_malloc_r>:
 800371c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003720:	1ccd      	adds	r5, r1, #3
 8003722:	f025 0503 	bic.w	r5, r5, #3
 8003726:	3508      	adds	r5, #8
 8003728:	2d0c      	cmp	r5, #12
 800372a:	bf38      	it	cc
 800372c:	250c      	movcc	r5, #12
 800372e:	2d00      	cmp	r5, #0
 8003730:	4607      	mov	r7, r0
 8003732:	db01      	blt.n	8003738 <_malloc_r+0x1c>
 8003734:	42a9      	cmp	r1, r5
 8003736:	d905      	bls.n	8003744 <_malloc_r+0x28>
 8003738:	230c      	movs	r3, #12
 800373a:	603b      	str	r3, [r7, #0]
 800373c:	2600      	movs	r6, #0
 800373e:	4630      	mov	r0, r6
 8003740:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003744:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003818 <_malloc_r+0xfc>
 8003748:	f000 f868 	bl	800381c <__malloc_lock>
 800374c:	f8d8 3000 	ldr.w	r3, [r8]
 8003750:	461c      	mov	r4, r3
 8003752:	bb5c      	cbnz	r4, 80037ac <_malloc_r+0x90>
 8003754:	4629      	mov	r1, r5
 8003756:	4638      	mov	r0, r7
 8003758:	f7ff ffc0 	bl	80036dc <sbrk_aligned>
 800375c:	1c43      	adds	r3, r0, #1
 800375e:	4604      	mov	r4, r0
 8003760:	d155      	bne.n	800380e <_malloc_r+0xf2>
 8003762:	f8d8 4000 	ldr.w	r4, [r8]
 8003766:	4626      	mov	r6, r4
 8003768:	2e00      	cmp	r6, #0
 800376a:	d145      	bne.n	80037f8 <_malloc_r+0xdc>
 800376c:	2c00      	cmp	r4, #0
 800376e:	d048      	beq.n	8003802 <_malloc_r+0xe6>
 8003770:	6823      	ldr	r3, [r4, #0]
 8003772:	4631      	mov	r1, r6
 8003774:	4638      	mov	r0, r7
 8003776:	eb04 0903 	add.w	r9, r4, r3
 800377a:	f000 fe07 	bl	800438c <_sbrk_r>
 800377e:	4581      	cmp	r9, r0
 8003780:	d13f      	bne.n	8003802 <_malloc_r+0xe6>
 8003782:	6821      	ldr	r1, [r4, #0]
 8003784:	1a6d      	subs	r5, r5, r1
 8003786:	4629      	mov	r1, r5
 8003788:	4638      	mov	r0, r7
 800378a:	f7ff ffa7 	bl	80036dc <sbrk_aligned>
 800378e:	3001      	adds	r0, #1
 8003790:	d037      	beq.n	8003802 <_malloc_r+0xe6>
 8003792:	6823      	ldr	r3, [r4, #0]
 8003794:	442b      	add	r3, r5
 8003796:	6023      	str	r3, [r4, #0]
 8003798:	f8d8 3000 	ldr.w	r3, [r8]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d038      	beq.n	8003812 <_malloc_r+0xf6>
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	42a2      	cmp	r2, r4
 80037a4:	d12b      	bne.n	80037fe <_malloc_r+0xe2>
 80037a6:	2200      	movs	r2, #0
 80037a8:	605a      	str	r2, [r3, #4]
 80037aa:	e00f      	b.n	80037cc <_malloc_r+0xb0>
 80037ac:	6822      	ldr	r2, [r4, #0]
 80037ae:	1b52      	subs	r2, r2, r5
 80037b0:	d41f      	bmi.n	80037f2 <_malloc_r+0xd6>
 80037b2:	2a0b      	cmp	r2, #11
 80037b4:	d917      	bls.n	80037e6 <_malloc_r+0xca>
 80037b6:	1961      	adds	r1, r4, r5
 80037b8:	42a3      	cmp	r3, r4
 80037ba:	6025      	str	r5, [r4, #0]
 80037bc:	bf18      	it	ne
 80037be:	6059      	strne	r1, [r3, #4]
 80037c0:	6863      	ldr	r3, [r4, #4]
 80037c2:	bf08      	it	eq
 80037c4:	f8c8 1000 	streq.w	r1, [r8]
 80037c8:	5162      	str	r2, [r4, r5]
 80037ca:	604b      	str	r3, [r1, #4]
 80037cc:	4638      	mov	r0, r7
 80037ce:	f104 060b 	add.w	r6, r4, #11
 80037d2:	f000 f829 	bl	8003828 <__malloc_unlock>
 80037d6:	f026 0607 	bic.w	r6, r6, #7
 80037da:	1d23      	adds	r3, r4, #4
 80037dc:	1af2      	subs	r2, r6, r3
 80037de:	d0ae      	beq.n	800373e <_malloc_r+0x22>
 80037e0:	1b9b      	subs	r3, r3, r6
 80037e2:	50a3      	str	r3, [r4, r2]
 80037e4:	e7ab      	b.n	800373e <_malloc_r+0x22>
 80037e6:	42a3      	cmp	r3, r4
 80037e8:	6862      	ldr	r2, [r4, #4]
 80037ea:	d1dd      	bne.n	80037a8 <_malloc_r+0x8c>
 80037ec:	f8c8 2000 	str.w	r2, [r8]
 80037f0:	e7ec      	b.n	80037cc <_malloc_r+0xb0>
 80037f2:	4623      	mov	r3, r4
 80037f4:	6864      	ldr	r4, [r4, #4]
 80037f6:	e7ac      	b.n	8003752 <_malloc_r+0x36>
 80037f8:	4634      	mov	r4, r6
 80037fa:	6876      	ldr	r6, [r6, #4]
 80037fc:	e7b4      	b.n	8003768 <_malloc_r+0x4c>
 80037fe:	4613      	mov	r3, r2
 8003800:	e7cc      	b.n	800379c <_malloc_r+0x80>
 8003802:	230c      	movs	r3, #12
 8003804:	603b      	str	r3, [r7, #0]
 8003806:	4638      	mov	r0, r7
 8003808:	f000 f80e 	bl	8003828 <__malloc_unlock>
 800380c:	e797      	b.n	800373e <_malloc_r+0x22>
 800380e:	6025      	str	r5, [r4, #0]
 8003810:	e7dc      	b.n	80037cc <_malloc_r+0xb0>
 8003812:	605b      	str	r3, [r3, #4]
 8003814:	deff      	udf	#255	; 0xff
 8003816:	bf00      	nop
 8003818:	2000128c 	.word	0x2000128c

0800381c <__malloc_lock>:
 800381c:	4801      	ldr	r0, [pc, #4]	; (8003824 <__malloc_lock+0x8>)
 800381e:	f7ff bf0e 	b.w	800363e <__retarget_lock_acquire_recursive>
 8003822:	bf00      	nop
 8003824:	20001288 	.word	0x20001288

08003828 <__malloc_unlock>:
 8003828:	4801      	ldr	r0, [pc, #4]	; (8003830 <__malloc_unlock+0x8>)
 800382a:	f7ff bf09 	b.w	8003640 <__retarget_lock_release_recursive>
 800382e:	bf00      	nop
 8003830:	20001288 	.word	0x20001288

08003834 <__ssputs_r>:
 8003834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003838:	688e      	ldr	r6, [r1, #8]
 800383a:	461f      	mov	r7, r3
 800383c:	42be      	cmp	r6, r7
 800383e:	680b      	ldr	r3, [r1, #0]
 8003840:	4682      	mov	sl, r0
 8003842:	460c      	mov	r4, r1
 8003844:	4690      	mov	r8, r2
 8003846:	d82c      	bhi.n	80038a2 <__ssputs_r+0x6e>
 8003848:	898a      	ldrh	r2, [r1, #12]
 800384a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800384e:	d026      	beq.n	800389e <__ssputs_r+0x6a>
 8003850:	6965      	ldr	r5, [r4, #20]
 8003852:	6909      	ldr	r1, [r1, #16]
 8003854:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003858:	eba3 0901 	sub.w	r9, r3, r1
 800385c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003860:	1c7b      	adds	r3, r7, #1
 8003862:	444b      	add	r3, r9
 8003864:	106d      	asrs	r5, r5, #1
 8003866:	429d      	cmp	r5, r3
 8003868:	bf38      	it	cc
 800386a:	461d      	movcc	r5, r3
 800386c:	0553      	lsls	r3, r2, #21
 800386e:	d527      	bpl.n	80038c0 <__ssputs_r+0x8c>
 8003870:	4629      	mov	r1, r5
 8003872:	f7ff ff53 	bl	800371c <_malloc_r>
 8003876:	4606      	mov	r6, r0
 8003878:	b360      	cbz	r0, 80038d4 <__ssputs_r+0xa0>
 800387a:	6921      	ldr	r1, [r4, #16]
 800387c:	464a      	mov	r2, r9
 800387e:	f000 fd95 	bl	80043ac <memcpy>
 8003882:	89a3      	ldrh	r3, [r4, #12]
 8003884:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800388c:	81a3      	strh	r3, [r4, #12]
 800388e:	6126      	str	r6, [r4, #16]
 8003890:	6165      	str	r5, [r4, #20]
 8003892:	444e      	add	r6, r9
 8003894:	eba5 0509 	sub.w	r5, r5, r9
 8003898:	6026      	str	r6, [r4, #0]
 800389a:	60a5      	str	r5, [r4, #8]
 800389c:	463e      	mov	r6, r7
 800389e:	42be      	cmp	r6, r7
 80038a0:	d900      	bls.n	80038a4 <__ssputs_r+0x70>
 80038a2:	463e      	mov	r6, r7
 80038a4:	6820      	ldr	r0, [r4, #0]
 80038a6:	4632      	mov	r2, r6
 80038a8:	4641      	mov	r1, r8
 80038aa:	f000 fd33 	bl	8004314 <memmove>
 80038ae:	68a3      	ldr	r3, [r4, #8]
 80038b0:	1b9b      	subs	r3, r3, r6
 80038b2:	60a3      	str	r3, [r4, #8]
 80038b4:	6823      	ldr	r3, [r4, #0]
 80038b6:	4433      	add	r3, r6
 80038b8:	6023      	str	r3, [r4, #0]
 80038ba:	2000      	movs	r0, #0
 80038bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038c0:	462a      	mov	r2, r5
 80038c2:	f000 fd81 	bl	80043c8 <_realloc_r>
 80038c6:	4606      	mov	r6, r0
 80038c8:	2800      	cmp	r0, #0
 80038ca:	d1e0      	bne.n	800388e <__ssputs_r+0x5a>
 80038cc:	6921      	ldr	r1, [r4, #16]
 80038ce:	4650      	mov	r0, sl
 80038d0:	f7ff feb8 	bl	8003644 <_free_r>
 80038d4:	230c      	movs	r3, #12
 80038d6:	f8ca 3000 	str.w	r3, [sl]
 80038da:	89a3      	ldrh	r3, [r4, #12]
 80038dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038e0:	81a3      	strh	r3, [r4, #12]
 80038e2:	f04f 30ff 	mov.w	r0, #4294967295
 80038e6:	e7e9      	b.n	80038bc <__ssputs_r+0x88>

080038e8 <_svfiprintf_r>:
 80038e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038ec:	4698      	mov	r8, r3
 80038ee:	898b      	ldrh	r3, [r1, #12]
 80038f0:	061b      	lsls	r3, r3, #24
 80038f2:	b09d      	sub	sp, #116	; 0x74
 80038f4:	4607      	mov	r7, r0
 80038f6:	460d      	mov	r5, r1
 80038f8:	4614      	mov	r4, r2
 80038fa:	d50e      	bpl.n	800391a <_svfiprintf_r+0x32>
 80038fc:	690b      	ldr	r3, [r1, #16]
 80038fe:	b963      	cbnz	r3, 800391a <_svfiprintf_r+0x32>
 8003900:	2140      	movs	r1, #64	; 0x40
 8003902:	f7ff ff0b 	bl	800371c <_malloc_r>
 8003906:	6028      	str	r0, [r5, #0]
 8003908:	6128      	str	r0, [r5, #16]
 800390a:	b920      	cbnz	r0, 8003916 <_svfiprintf_r+0x2e>
 800390c:	230c      	movs	r3, #12
 800390e:	603b      	str	r3, [r7, #0]
 8003910:	f04f 30ff 	mov.w	r0, #4294967295
 8003914:	e0d0      	b.n	8003ab8 <_svfiprintf_r+0x1d0>
 8003916:	2340      	movs	r3, #64	; 0x40
 8003918:	616b      	str	r3, [r5, #20]
 800391a:	2300      	movs	r3, #0
 800391c:	9309      	str	r3, [sp, #36]	; 0x24
 800391e:	2320      	movs	r3, #32
 8003920:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003924:	f8cd 800c 	str.w	r8, [sp, #12]
 8003928:	2330      	movs	r3, #48	; 0x30
 800392a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003ad0 <_svfiprintf_r+0x1e8>
 800392e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003932:	f04f 0901 	mov.w	r9, #1
 8003936:	4623      	mov	r3, r4
 8003938:	469a      	mov	sl, r3
 800393a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800393e:	b10a      	cbz	r2, 8003944 <_svfiprintf_r+0x5c>
 8003940:	2a25      	cmp	r2, #37	; 0x25
 8003942:	d1f9      	bne.n	8003938 <_svfiprintf_r+0x50>
 8003944:	ebba 0b04 	subs.w	fp, sl, r4
 8003948:	d00b      	beq.n	8003962 <_svfiprintf_r+0x7a>
 800394a:	465b      	mov	r3, fp
 800394c:	4622      	mov	r2, r4
 800394e:	4629      	mov	r1, r5
 8003950:	4638      	mov	r0, r7
 8003952:	f7ff ff6f 	bl	8003834 <__ssputs_r>
 8003956:	3001      	adds	r0, #1
 8003958:	f000 80a9 	beq.w	8003aae <_svfiprintf_r+0x1c6>
 800395c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800395e:	445a      	add	r2, fp
 8003960:	9209      	str	r2, [sp, #36]	; 0x24
 8003962:	f89a 3000 	ldrb.w	r3, [sl]
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 80a1 	beq.w	8003aae <_svfiprintf_r+0x1c6>
 800396c:	2300      	movs	r3, #0
 800396e:	f04f 32ff 	mov.w	r2, #4294967295
 8003972:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003976:	f10a 0a01 	add.w	sl, sl, #1
 800397a:	9304      	str	r3, [sp, #16]
 800397c:	9307      	str	r3, [sp, #28]
 800397e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003982:	931a      	str	r3, [sp, #104]	; 0x68
 8003984:	4654      	mov	r4, sl
 8003986:	2205      	movs	r2, #5
 8003988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800398c:	4850      	ldr	r0, [pc, #320]	; (8003ad0 <_svfiprintf_r+0x1e8>)
 800398e:	f7fc fc1f 	bl	80001d0 <memchr>
 8003992:	9a04      	ldr	r2, [sp, #16]
 8003994:	b9d8      	cbnz	r0, 80039ce <_svfiprintf_r+0xe6>
 8003996:	06d0      	lsls	r0, r2, #27
 8003998:	bf44      	itt	mi
 800399a:	2320      	movmi	r3, #32
 800399c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039a0:	0711      	lsls	r1, r2, #28
 80039a2:	bf44      	itt	mi
 80039a4:	232b      	movmi	r3, #43	; 0x2b
 80039a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039aa:	f89a 3000 	ldrb.w	r3, [sl]
 80039ae:	2b2a      	cmp	r3, #42	; 0x2a
 80039b0:	d015      	beq.n	80039de <_svfiprintf_r+0xf6>
 80039b2:	9a07      	ldr	r2, [sp, #28]
 80039b4:	4654      	mov	r4, sl
 80039b6:	2000      	movs	r0, #0
 80039b8:	f04f 0c0a 	mov.w	ip, #10
 80039bc:	4621      	mov	r1, r4
 80039be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039c2:	3b30      	subs	r3, #48	; 0x30
 80039c4:	2b09      	cmp	r3, #9
 80039c6:	d94d      	bls.n	8003a64 <_svfiprintf_r+0x17c>
 80039c8:	b1b0      	cbz	r0, 80039f8 <_svfiprintf_r+0x110>
 80039ca:	9207      	str	r2, [sp, #28]
 80039cc:	e014      	b.n	80039f8 <_svfiprintf_r+0x110>
 80039ce:	eba0 0308 	sub.w	r3, r0, r8
 80039d2:	fa09 f303 	lsl.w	r3, r9, r3
 80039d6:	4313      	orrs	r3, r2
 80039d8:	9304      	str	r3, [sp, #16]
 80039da:	46a2      	mov	sl, r4
 80039dc:	e7d2      	b.n	8003984 <_svfiprintf_r+0x9c>
 80039de:	9b03      	ldr	r3, [sp, #12]
 80039e0:	1d19      	adds	r1, r3, #4
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	9103      	str	r1, [sp, #12]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	bfbb      	ittet	lt
 80039ea:	425b      	neglt	r3, r3
 80039ec:	f042 0202 	orrlt.w	r2, r2, #2
 80039f0:	9307      	strge	r3, [sp, #28]
 80039f2:	9307      	strlt	r3, [sp, #28]
 80039f4:	bfb8      	it	lt
 80039f6:	9204      	strlt	r2, [sp, #16]
 80039f8:	7823      	ldrb	r3, [r4, #0]
 80039fa:	2b2e      	cmp	r3, #46	; 0x2e
 80039fc:	d10c      	bne.n	8003a18 <_svfiprintf_r+0x130>
 80039fe:	7863      	ldrb	r3, [r4, #1]
 8003a00:	2b2a      	cmp	r3, #42	; 0x2a
 8003a02:	d134      	bne.n	8003a6e <_svfiprintf_r+0x186>
 8003a04:	9b03      	ldr	r3, [sp, #12]
 8003a06:	1d1a      	adds	r2, r3, #4
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	9203      	str	r2, [sp, #12]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	bfb8      	it	lt
 8003a10:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a14:	3402      	adds	r4, #2
 8003a16:	9305      	str	r3, [sp, #20]
 8003a18:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003ae0 <_svfiprintf_r+0x1f8>
 8003a1c:	7821      	ldrb	r1, [r4, #0]
 8003a1e:	2203      	movs	r2, #3
 8003a20:	4650      	mov	r0, sl
 8003a22:	f7fc fbd5 	bl	80001d0 <memchr>
 8003a26:	b138      	cbz	r0, 8003a38 <_svfiprintf_r+0x150>
 8003a28:	9b04      	ldr	r3, [sp, #16]
 8003a2a:	eba0 000a 	sub.w	r0, r0, sl
 8003a2e:	2240      	movs	r2, #64	; 0x40
 8003a30:	4082      	lsls	r2, r0
 8003a32:	4313      	orrs	r3, r2
 8003a34:	3401      	adds	r4, #1
 8003a36:	9304      	str	r3, [sp, #16]
 8003a38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a3c:	4825      	ldr	r0, [pc, #148]	; (8003ad4 <_svfiprintf_r+0x1ec>)
 8003a3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a42:	2206      	movs	r2, #6
 8003a44:	f7fc fbc4 	bl	80001d0 <memchr>
 8003a48:	2800      	cmp	r0, #0
 8003a4a:	d038      	beq.n	8003abe <_svfiprintf_r+0x1d6>
 8003a4c:	4b22      	ldr	r3, [pc, #136]	; (8003ad8 <_svfiprintf_r+0x1f0>)
 8003a4e:	bb1b      	cbnz	r3, 8003a98 <_svfiprintf_r+0x1b0>
 8003a50:	9b03      	ldr	r3, [sp, #12]
 8003a52:	3307      	adds	r3, #7
 8003a54:	f023 0307 	bic.w	r3, r3, #7
 8003a58:	3308      	adds	r3, #8
 8003a5a:	9303      	str	r3, [sp, #12]
 8003a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a5e:	4433      	add	r3, r6
 8003a60:	9309      	str	r3, [sp, #36]	; 0x24
 8003a62:	e768      	b.n	8003936 <_svfiprintf_r+0x4e>
 8003a64:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a68:	460c      	mov	r4, r1
 8003a6a:	2001      	movs	r0, #1
 8003a6c:	e7a6      	b.n	80039bc <_svfiprintf_r+0xd4>
 8003a6e:	2300      	movs	r3, #0
 8003a70:	3401      	adds	r4, #1
 8003a72:	9305      	str	r3, [sp, #20]
 8003a74:	4619      	mov	r1, r3
 8003a76:	f04f 0c0a 	mov.w	ip, #10
 8003a7a:	4620      	mov	r0, r4
 8003a7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a80:	3a30      	subs	r2, #48	; 0x30
 8003a82:	2a09      	cmp	r2, #9
 8003a84:	d903      	bls.n	8003a8e <_svfiprintf_r+0x1a6>
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d0c6      	beq.n	8003a18 <_svfiprintf_r+0x130>
 8003a8a:	9105      	str	r1, [sp, #20]
 8003a8c:	e7c4      	b.n	8003a18 <_svfiprintf_r+0x130>
 8003a8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a92:	4604      	mov	r4, r0
 8003a94:	2301      	movs	r3, #1
 8003a96:	e7f0      	b.n	8003a7a <_svfiprintf_r+0x192>
 8003a98:	ab03      	add	r3, sp, #12
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	462a      	mov	r2, r5
 8003a9e:	4b0f      	ldr	r3, [pc, #60]	; (8003adc <_svfiprintf_r+0x1f4>)
 8003aa0:	a904      	add	r1, sp, #16
 8003aa2:	4638      	mov	r0, r7
 8003aa4:	f3af 8000 	nop.w
 8003aa8:	1c42      	adds	r2, r0, #1
 8003aaa:	4606      	mov	r6, r0
 8003aac:	d1d6      	bne.n	8003a5c <_svfiprintf_r+0x174>
 8003aae:	89ab      	ldrh	r3, [r5, #12]
 8003ab0:	065b      	lsls	r3, r3, #25
 8003ab2:	f53f af2d 	bmi.w	8003910 <_svfiprintf_r+0x28>
 8003ab6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ab8:	b01d      	add	sp, #116	; 0x74
 8003aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003abe:	ab03      	add	r3, sp, #12
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	462a      	mov	r2, r5
 8003ac4:	4b05      	ldr	r3, [pc, #20]	; (8003adc <_svfiprintf_r+0x1f4>)
 8003ac6:	a904      	add	r1, sp, #16
 8003ac8:	4638      	mov	r0, r7
 8003aca:	f000 f9bd 	bl	8003e48 <_printf_i>
 8003ace:	e7eb      	b.n	8003aa8 <_svfiprintf_r+0x1c0>
 8003ad0:	080044f8 	.word	0x080044f8
 8003ad4:	08004502 	.word	0x08004502
 8003ad8:	00000000 	.word	0x00000000
 8003adc:	08003835 	.word	0x08003835
 8003ae0:	080044fe 	.word	0x080044fe

08003ae4 <__sfputc_r>:
 8003ae4:	6893      	ldr	r3, [r2, #8]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	b410      	push	{r4}
 8003aec:	6093      	str	r3, [r2, #8]
 8003aee:	da08      	bge.n	8003b02 <__sfputc_r+0x1e>
 8003af0:	6994      	ldr	r4, [r2, #24]
 8003af2:	42a3      	cmp	r3, r4
 8003af4:	db01      	blt.n	8003afa <__sfputc_r+0x16>
 8003af6:	290a      	cmp	r1, #10
 8003af8:	d103      	bne.n	8003b02 <__sfputc_r+0x1e>
 8003afa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003afe:	f7ff bc90 	b.w	8003422 <__swbuf_r>
 8003b02:	6813      	ldr	r3, [r2, #0]
 8003b04:	1c58      	adds	r0, r3, #1
 8003b06:	6010      	str	r0, [r2, #0]
 8003b08:	7019      	strb	r1, [r3, #0]
 8003b0a:	4608      	mov	r0, r1
 8003b0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b10:	4770      	bx	lr

08003b12 <__sfputs_r>:
 8003b12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b14:	4606      	mov	r6, r0
 8003b16:	460f      	mov	r7, r1
 8003b18:	4614      	mov	r4, r2
 8003b1a:	18d5      	adds	r5, r2, r3
 8003b1c:	42ac      	cmp	r4, r5
 8003b1e:	d101      	bne.n	8003b24 <__sfputs_r+0x12>
 8003b20:	2000      	movs	r0, #0
 8003b22:	e007      	b.n	8003b34 <__sfputs_r+0x22>
 8003b24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b28:	463a      	mov	r2, r7
 8003b2a:	4630      	mov	r0, r6
 8003b2c:	f7ff ffda 	bl	8003ae4 <__sfputc_r>
 8003b30:	1c43      	adds	r3, r0, #1
 8003b32:	d1f3      	bne.n	8003b1c <__sfputs_r+0xa>
 8003b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003b38 <_vfiprintf_r>:
 8003b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b3c:	460d      	mov	r5, r1
 8003b3e:	b09d      	sub	sp, #116	; 0x74
 8003b40:	4614      	mov	r4, r2
 8003b42:	4698      	mov	r8, r3
 8003b44:	4606      	mov	r6, r0
 8003b46:	b118      	cbz	r0, 8003b50 <_vfiprintf_r+0x18>
 8003b48:	6a03      	ldr	r3, [r0, #32]
 8003b4a:	b90b      	cbnz	r3, 8003b50 <_vfiprintf_r+0x18>
 8003b4c:	f7ff fb5a 	bl	8003204 <__sinit>
 8003b50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b52:	07d9      	lsls	r1, r3, #31
 8003b54:	d405      	bmi.n	8003b62 <_vfiprintf_r+0x2a>
 8003b56:	89ab      	ldrh	r3, [r5, #12]
 8003b58:	059a      	lsls	r2, r3, #22
 8003b5a:	d402      	bmi.n	8003b62 <_vfiprintf_r+0x2a>
 8003b5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b5e:	f7ff fd6e 	bl	800363e <__retarget_lock_acquire_recursive>
 8003b62:	89ab      	ldrh	r3, [r5, #12]
 8003b64:	071b      	lsls	r3, r3, #28
 8003b66:	d501      	bpl.n	8003b6c <_vfiprintf_r+0x34>
 8003b68:	692b      	ldr	r3, [r5, #16]
 8003b6a:	b99b      	cbnz	r3, 8003b94 <_vfiprintf_r+0x5c>
 8003b6c:	4629      	mov	r1, r5
 8003b6e:	4630      	mov	r0, r6
 8003b70:	f7ff fc94 	bl	800349c <__swsetup_r>
 8003b74:	b170      	cbz	r0, 8003b94 <_vfiprintf_r+0x5c>
 8003b76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b78:	07dc      	lsls	r4, r3, #31
 8003b7a:	d504      	bpl.n	8003b86 <_vfiprintf_r+0x4e>
 8003b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b80:	b01d      	add	sp, #116	; 0x74
 8003b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b86:	89ab      	ldrh	r3, [r5, #12]
 8003b88:	0598      	lsls	r0, r3, #22
 8003b8a:	d4f7      	bmi.n	8003b7c <_vfiprintf_r+0x44>
 8003b8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b8e:	f7ff fd57 	bl	8003640 <__retarget_lock_release_recursive>
 8003b92:	e7f3      	b.n	8003b7c <_vfiprintf_r+0x44>
 8003b94:	2300      	movs	r3, #0
 8003b96:	9309      	str	r3, [sp, #36]	; 0x24
 8003b98:	2320      	movs	r3, #32
 8003b9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ba2:	2330      	movs	r3, #48	; 0x30
 8003ba4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003d58 <_vfiprintf_r+0x220>
 8003ba8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003bac:	f04f 0901 	mov.w	r9, #1
 8003bb0:	4623      	mov	r3, r4
 8003bb2:	469a      	mov	sl, r3
 8003bb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003bb8:	b10a      	cbz	r2, 8003bbe <_vfiprintf_r+0x86>
 8003bba:	2a25      	cmp	r2, #37	; 0x25
 8003bbc:	d1f9      	bne.n	8003bb2 <_vfiprintf_r+0x7a>
 8003bbe:	ebba 0b04 	subs.w	fp, sl, r4
 8003bc2:	d00b      	beq.n	8003bdc <_vfiprintf_r+0xa4>
 8003bc4:	465b      	mov	r3, fp
 8003bc6:	4622      	mov	r2, r4
 8003bc8:	4629      	mov	r1, r5
 8003bca:	4630      	mov	r0, r6
 8003bcc:	f7ff ffa1 	bl	8003b12 <__sfputs_r>
 8003bd0:	3001      	adds	r0, #1
 8003bd2:	f000 80a9 	beq.w	8003d28 <_vfiprintf_r+0x1f0>
 8003bd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003bd8:	445a      	add	r2, fp
 8003bda:	9209      	str	r2, [sp, #36]	; 0x24
 8003bdc:	f89a 3000 	ldrb.w	r3, [sl]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 80a1 	beq.w	8003d28 <_vfiprintf_r+0x1f0>
 8003be6:	2300      	movs	r3, #0
 8003be8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003bf0:	f10a 0a01 	add.w	sl, sl, #1
 8003bf4:	9304      	str	r3, [sp, #16]
 8003bf6:	9307      	str	r3, [sp, #28]
 8003bf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003bfc:	931a      	str	r3, [sp, #104]	; 0x68
 8003bfe:	4654      	mov	r4, sl
 8003c00:	2205      	movs	r2, #5
 8003c02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c06:	4854      	ldr	r0, [pc, #336]	; (8003d58 <_vfiprintf_r+0x220>)
 8003c08:	f7fc fae2 	bl	80001d0 <memchr>
 8003c0c:	9a04      	ldr	r2, [sp, #16]
 8003c0e:	b9d8      	cbnz	r0, 8003c48 <_vfiprintf_r+0x110>
 8003c10:	06d1      	lsls	r1, r2, #27
 8003c12:	bf44      	itt	mi
 8003c14:	2320      	movmi	r3, #32
 8003c16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c1a:	0713      	lsls	r3, r2, #28
 8003c1c:	bf44      	itt	mi
 8003c1e:	232b      	movmi	r3, #43	; 0x2b
 8003c20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c24:	f89a 3000 	ldrb.w	r3, [sl]
 8003c28:	2b2a      	cmp	r3, #42	; 0x2a
 8003c2a:	d015      	beq.n	8003c58 <_vfiprintf_r+0x120>
 8003c2c:	9a07      	ldr	r2, [sp, #28]
 8003c2e:	4654      	mov	r4, sl
 8003c30:	2000      	movs	r0, #0
 8003c32:	f04f 0c0a 	mov.w	ip, #10
 8003c36:	4621      	mov	r1, r4
 8003c38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c3c:	3b30      	subs	r3, #48	; 0x30
 8003c3e:	2b09      	cmp	r3, #9
 8003c40:	d94d      	bls.n	8003cde <_vfiprintf_r+0x1a6>
 8003c42:	b1b0      	cbz	r0, 8003c72 <_vfiprintf_r+0x13a>
 8003c44:	9207      	str	r2, [sp, #28]
 8003c46:	e014      	b.n	8003c72 <_vfiprintf_r+0x13a>
 8003c48:	eba0 0308 	sub.w	r3, r0, r8
 8003c4c:	fa09 f303 	lsl.w	r3, r9, r3
 8003c50:	4313      	orrs	r3, r2
 8003c52:	9304      	str	r3, [sp, #16]
 8003c54:	46a2      	mov	sl, r4
 8003c56:	e7d2      	b.n	8003bfe <_vfiprintf_r+0xc6>
 8003c58:	9b03      	ldr	r3, [sp, #12]
 8003c5a:	1d19      	adds	r1, r3, #4
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	9103      	str	r1, [sp, #12]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	bfbb      	ittet	lt
 8003c64:	425b      	neglt	r3, r3
 8003c66:	f042 0202 	orrlt.w	r2, r2, #2
 8003c6a:	9307      	strge	r3, [sp, #28]
 8003c6c:	9307      	strlt	r3, [sp, #28]
 8003c6e:	bfb8      	it	lt
 8003c70:	9204      	strlt	r2, [sp, #16]
 8003c72:	7823      	ldrb	r3, [r4, #0]
 8003c74:	2b2e      	cmp	r3, #46	; 0x2e
 8003c76:	d10c      	bne.n	8003c92 <_vfiprintf_r+0x15a>
 8003c78:	7863      	ldrb	r3, [r4, #1]
 8003c7a:	2b2a      	cmp	r3, #42	; 0x2a
 8003c7c:	d134      	bne.n	8003ce8 <_vfiprintf_r+0x1b0>
 8003c7e:	9b03      	ldr	r3, [sp, #12]
 8003c80:	1d1a      	adds	r2, r3, #4
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	9203      	str	r2, [sp, #12]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	bfb8      	it	lt
 8003c8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c8e:	3402      	adds	r4, #2
 8003c90:	9305      	str	r3, [sp, #20]
 8003c92:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003d68 <_vfiprintf_r+0x230>
 8003c96:	7821      	ldrb	r1, [r4, #0]
 8003c98:	2203      	movs	r2, #3
 8003c9a:	4650      	mov	r0, sl
 8003c9c:	f7fc fa98 	bl	80001d0 <memchr>
 8003ca0:	b138      	cbz	r0, 8003cb2 <_vfiprintf_r+0x17a>
 8003ca2:	9b04      	ldr	r3, [sp, #16]
 8003ca4:	eba0 000a 	sub.w	r0, r0, sl
 8003ca8:	2240      	movs	r2, #64	; 0x40
 8003caa:	4082      	lsls	r2, r0
 8003cac:	4313      	orrs	r3, r2
 8003cae:	3401      	adds	r4, #1
 8003cb0:	9304      	str	r3, [sp, #16]
 8003cb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cb6:	4829      	ldr	r0, [pc, #164]	; (8003d5c <_vfiprintf_r+0x224>)
 8003cb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003cbc:	2206      	movs	r2, #6
 8003cbe:	f7fc fa87 	bl	80001d0 <memchr>
 8003cc2:	2800      	cmp	r0, #0
 8003cc4:	d03f      	beq.n	8003d46 <_vfiprintf_r+0x20e>
 8003cc6:	4b26      	ldr	r3, [pc, #152]	; (8003d60 <_vfiprintf_r+0x228>)
 8003cc8:	bb1b      	cbnz	r3, 8003d12 <_vfiprintf_r+0x1da>
 8003cca:	9b03      	ldr	r3, [sp, #12]
 8003ccc:	3307      	adds	r3, #7
 8003cce:	f023 0307 	bic.w	r3, r3, #7
 8003cd2:	3308      	adds	r3, #8
 8003cd4:	9303      	str	r3, [sp, #12]
 8003cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cd8:	443b      	add	r3, r7
 8003cda:	9309      	str	r3, [sp, #36]	; 0x24
 8003cdc:	e768      	b.n	8003bb0 <_vfiprintf_r+0x78>
 8003cde:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ce2:	460c      	mov	r4, r1
 8003ce4:	2001      	movs	r0, #1
 8003ce6:	e7a6      	b.n	8003c36 <_vfiprintf_r+0xfe>
 8003ce8:	2300      	movs	r3, #0
 8003cea:	3401      	adds	r4, #1
 8003cec:	9305      	str	r3, [sp, #20]
 8003cee:	4619      	mov	r1, r3
 8003cf0:	f04f 0c0a 	mov.w	ip, #10
 8003cf4:	4620      	mov	r0, r4
 8003cf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003cfa:	3a30      	subs	r2, #48	; 0x30
 8003cfc:	2a09      	cmp	r2, #9
 8003cfe:	d903      	bls.n	8003d08 <_vfiprintf_r+0x1d0>
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d0c6      	beq.n	8003c92 <_vfiprintf_r+0x15a>
 8003d04:	9105      	str	r1, [sp, #20]
 8003d06:	e7c4      	b.n	8003c92 <_vfiprintf_r+0x15a>
 8003d08:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d0c:	4604      	mov	r4, r0
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e7f0      	b.n	8003cf4 <_vfiprintf_r+0x1bc>
 8003d12:	ab03      	add	r3, sp, #12
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	462a      	mov	r2, r5
 8003d18:	4b12      	ldr	r3, [pc, #72]	; (8003d64 <_vfiprintf_r+0x22c>)
 8003d1a:	a904      	add	r1, sp, #16
 8003d1c:	4630      	mov	r0, r6
 8003d1e:	f3af 8000 	nop.w
 8003d22:	4607      	mov	r7, r0
 8003d24:	1c78      	adds	r0, r7, #1
 8003d26:	d1d6      	bne.n	8003cd6 <_vfiprintf_r+0x19e>
 8003d28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d2a:	07d9      	lsls	r1, r3, #31
 8003d2c:	d405      	bmi.n	8003d3a <_vfiprintf_r+0x202>
 8003d2e:	89ab      	ldrh	r3, [r5, #12]
 8003d30:	059a      	lsls	r2, r3, #22
 8003d32:	d402      	bmi.n	8003d3a <_vfiprintf_r+0x202>
 8003d34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d36:	f7ff fc83 	bl	8003640 <__retarget_lock_release_recursive>
 8003d3a:	89ab      	ldrh	r3, [r5, #12]
 8003d3c:	065b      	lsls	r3, r3, #25
 8003d3e:	f53f af1d 	bmi.w	8003b7c <_vfiprintf_r+0x44>
 8003d42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d44:	e71c      	b.n	8003b80 <_vfiprintf_r+0x48>
 8003d46:	ab03      	add	r3, sp, #12
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	462a      	mov	r2, r5
 8003d4c:	4b05      	ldr	r3, [pc, #20]	; (8003d64 <_vfiprintf_r+0x22c>)
 8003d4e:	a904      	add	r1, sp, #16
 8003d50:	4630      	mov	r0, r6
 8003d52:	f000 f879 	bl	8003e48 <_printf_i>
 8003d56:	e7e4      	b.n	8003d22 <_vfiprintf_r+0x1ea>
 8003d58:	080044f8 	.word	0x080044f8
 8003d5c:	08004502 	.word	0x08004502
 8003d60:	00000000 	.word	0x00000000
 8003d64:	08003b13 	.word	0x08003b13
 8003d68:	080044fe 	.word	0x080044fe

08003d6c <_printf_common>:
 8003d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d70:	4616      	mov	r6, r2
 8003d72:	4699      	mov	r9, r3
 8003d74:	688a      	ldr	r2, [r1, #8]
 8003d76:	690b      	ldr	r3, [r1, #16]
 8003d78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	bfb8      	it	lt
 8003d80:	4613      	movlt	r3, r2
 8003d82:	6033      	str	r3, [r6, #0]
 8003d84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d88:	4607      	mov	r7, r0
 8003d8a:	460c      	mov	r4, r1
 8003d8c:	b10a      	cbz	r2, 8003d92 <_printf_common+0x26>
 8003d8e:	3301      	adds	r3, #1
 8003d90:	6033      	str	r3, [r6, #0]
 8003d92:	6823      	ldr	r3, [r4, #0]
 8003d94:	0699      	lsls	r1, r3, #26
 8003d96:	bf42      	ittt	mi
 8003d98:	6833      	ldrmi	r3, [r6, #0]
 8003d9a:	3302      	addmi	r3, #2
 8003d9c:	6033      	strmi	r3, [r6, #0]
 8003d9e:	6825      	ldr	r5, [r4, #0]
 8003da0:	f015 0506 	ands.w	r5, r5, #6
 8003da4:	d106      	bne.n	8003db4 <_printf_common+0x48>
 8003da6:	f104 0a19 	add.w	sl, r4, #25
 8003daa:	68e3      	ldr	r3, [r4, #12]
 8003dac:	6832      	ldr	r2, [r6, #0]
 8003dae:	1a9b      	subs	r3, r3, r2
 8003db0:	42ab      	cmp	r3, r5
 8003db2:	dc26      	bgt.n	8003e02 <_printf_common+0x96>
 8003db4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003db8:	1e13      	subs	r3, r2, #0
 8003dba:	6822      	ldr	r2, [r4, #0]
 8003dbc:	bf18      	it	ne
 8003dbe:	2301      	movne	r3, #1
 8003dc0:	0692      	lsls	r2, r2, #26
 8003dc2:	d42b      	bmi.n	8003e1c <_printf_common+0xb0>
 8003dc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003dc8:	4649      	mov	r1, r9
 8003dca:	4638      	mov	r0, r7
 8003dcc:	47c0      	blx	r8
 8003dce:	3001      	adds	r0, #1
 8003dd0:	d01e      	beq.n	8003e10 <_printf_common+0xa4>
 8003dd2:	6823      	ldr	r3, [r4, #0]
 8003dd4:	6922      	ldr	r2, [r4, #16]
 8003dd6:	f003 0306 	and.w	r3, r3, #6
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	bf02      	ittt	eq
 8003dde:	68e5      	ldreq	r5, [r4, #12]
 8003de0:	6833      	ldreq	r3, [r6, #0]
 8003de2:	1aed      	subeq	r5, r5, r3
 8003de4:	68a3      	ldr	r3, [r4, #8]
 8003de6:	bf0c      	ite	eq
 8003de8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003dec:	2500      	movne	r5, #0
 8003dee:	4293      	cmp	r3, r2
 8003df0:	bfc4      	itt	gt
 8003df2:	1a9b      	subgt	r3, r3, r2
 8003df4:	18ed      	addgt	r5, r5, r3
 8003df6:	2600      	movs	r6, #0
 8003df8:	341a      	adds	r4, #26
 8003dfa:	42b5      	cmp	r5, r6
 8003dfc:	d11a      	bne.n	8003e34 <_printf_common+0xc8>
 8003dfe:	2000      	movs	r0, #0
 8003e00:	e008      	b.n	8003e14 <_printf_common+0xa8>
 8003e02:	2301      	movs	r3, #1
 8003e04:	4652      	mov	r2, sl
 8003e06:	4649      	mov	r1, r9
 8003e08:	4638      	mov	r0, r7
 8003e0a:	47c0      	blx	r8
 8003e0c:	3001      	adds	r0, #1
 8003e0e:	d103      	bne.n	8003e18 <_printf_common+0xac>
 8003e10:	f04f 30ff 	mov.w	r0, #4294967295
 8003e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e18:	3501      	adds	r5, #1
 8003e1a:	e7c6      	b.n	8003daa <_printf_common+0x3e>
 8003e1c:	18e1      	adds	r1, r4, r3
 8003e1e:	1c5a      	adds	r2, r3, #1
 8003e20:	2030      	movs	r0, #48	; 0x30
 8003e22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e26:	4422      	add	r2, r4
 8003e28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e30:	3302      	adds	r3, #2
 8003e32:	e7c7      	b.n	8003dc4 <_printf_common+0x58>
 8003e34:	2301      	movs	r3, #1
 8003e36:	4622      	mov	r2, r4
 8003e38:	4649      	mov	r1, r9
 8003e3a:	4638      	mov	r0, r7
 8003e3c:	47c0      	blx	r8
 8003e3e:	3001      	adds	r0, #1
 8003e40:	d0e6      	beq.n	8003e10 <_printf_common+0xa4>
 8003e42:	3601      	adds	r6, #1
 8003e44:	e7d9      	b.n	8003dfa <_printf_common+0x8e>
	...

08003e48 <_printf_i>:
 8003e48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e4c:	7e0f      	ldrb	r7, [r1, #24]
 8003e4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e50:	2f78      	cmp	r7, #120	; 0x78
 8003e52:	4691      	mov	r9, r2
 8003e54:	4680      	mov	r8, r0
 8003e56:	460c      	mov	r4, r1
 8003e58:	469a      	mov	sl, r3
 8003e5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003e5e:	d807      	bhi.n	8003e70 <_printf_i+0x28>
 8003e60:	2f62      	cmp	r7, #98	; 0x62
 8003e62:	d80a      	bhi.n	8003e7a <_printf_i+0x32>
 8003e64:	2f00      	cmp	r7, #0
 8003e66:	f000 80d4 	beq.w	8004012 <_printf_i+0x1ca>
 8003e6a:	2f58      	cmp	r7, #88	; 0x58
 8003e6c:	f000 80c0 	beq.w	8003ff0 <_printf_i+0x1a8>
 8003e70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e78:	e03a      	b.n	8003ef0 <_printf_i+0xa8>
 8003e7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e7e:	2b15      	cmp	r3, #21
 8003e80:	d8f6      	bhi.n	8003e70 <_printf_i+0x28>
 8003e82:	a101      	add	r1, pc, #4	; (adr r1, 8003e88 <_printf_i+0x40>)
 8003e84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e88:	08003ee1 	.word	0x08003ee1
 8003e8c:	08003ef5 	.word	0x08003ef5
 8003e90:	08003e71 	.word	0x08003e71
 8003e94:	08003e71 	.word	0x08003e71
 8003e98:	08003e71 	.word	0x08003e71
 8003e9c:	08003e71 	.word	0x08003e71
 8003ea0:	08003ef5 	.word	0x08003ef5
 8003ea4:	08003e71 	.word	0x08003e71
 8003ea8:	08003e71 	.word	0x08003e71
 8003eac:	08003e71 	.word	0x08003e71
 8003eb0:	08003e71 	.word	0x08003e71
 8003eb4:	08003ff9 	.word	0x08003ff9
 8003eb8:	08003f21 	.word	0x08003f21
 8003ebc:	08003fb3 	.word	0x08003fb3
 8003ec0:	08003e71 	.word	0x08003e71
 8003ec4:	08003e71 	.word	0x08003e71
 8003ec8:	0800401b 	.word	0x0800401b
 8003ecc:	08003e71 	.word	0x08003e71
 8003ed0:	08003f21 	.word	0x08003f21
 8003ed4:	08003e71 	.word	0x08003e71
 8003ed8:	08003e71 	.word	0x08003e71
 8003edc:	08003fbb 	.word	0x08003fbb
 8003ee0:	682b      	ldr	r3, [r5, #0]
 8003ee2:	1d1a      	adds	r2, r3, #4
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	602a      	str	r2, [r5, #0]
 8003ee8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003eec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e09f      	b.n	8004034 <_printf_i+0x1ec>
 8003ef4:	6820      	ldr	r0, [r4, #0]
 8003ef6:	682b      	ldr	r3, [r5, #0]
 8003ef8:	0607      	lsls	r7, r0, #24
 8003efa:	f103 0104 	add.w	r1, r3, #4
 8003efe:	6029      	str	r1, [r5, #0]
 8003f00:	d501      	bpl.n	8003f06 <_printf_i+0xbe>
 8003f02:	681e      	ldr	r6, [r3, #0]
 8003f04:	e003      	b.n	8003f0e <_printf_i+0xc6>
 8003f06:	0646      	lsls	r6, r0, #25
 8003f08:	d5fb      	bpl.n	8003f02 <_printf_i+0xba>
 8003f0a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003f0e:	2e00      	cmp	r6, #0
 8003f10:	da03      	bge.n	8003f1a <_printf_i+0xd2>
 8003f12:	232d      	movs	r3, #45	; 0x2d
 8003f14:	4276      	negs	r6, r6
 8003f16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f1a:	485a      	ldr	r0, [pc, #360]	; (8004084 <_printf_i+0x23c>)
 8003f1c:	230a      	movs	r3, #10
 8003f1e:	e012      	b.n	8003f46 <_printf_i+0xfe>
 8003f20:	682b      	ldr	r3, [r5, #0]
 8003f22:	6820      	ldr	r0, [r4, #0]
 8003f24:	1d19      	adds	r1, r3, #4
 8003f26:	6029      	str	r1, [r5, #0]
 8003f28:	0605      	lsls	r5, r0, #24
 8003f2a:	d501      	bpl.n	8003f30 <_printf_i+0xe8>
 8003f2c:	681e      	ldr	r6, [r3, #0]
 8003f2e:	e002      	b.n	8003f36 <_printf_i+0xee>
 8003f30:	0641      	lsls	r1, r0, #25
 8003f32:	d5fb      	bpl.n	8003f2c <_printf_i+0xe4>
 8003f34:	881e      	ldrh	r6, [r3, #0]
 8003f36:	4853      	ldr	r0, [pc, #332]	; (8004084 <_printf_i+0x23c>)
 8003f38:	2f6f      	cmp	r7, #111	; 0x6f
 8003f3a:	bf0c      	ite	eq
 8003f3c:	2308      	moveq	r3, #8
 8003f3e:	230a      	movne	r3, #10
 8003f40:	2100      	movs	r1, #0
 8003f42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f46:	6865      	ldr	r5, [r4, #4]
 8003f48:	60a5      	str	r5, [r4, #8]
 8003f4a:	2d00      	cmp	r5, #0
 8003f4c:	bfa2      	ittt	ge
 8003f4e:	6821      	ldrge	r1, [r4, #0]
 8003f50:	f021 0104 	bicge.w	r1, r1, #4
 8003f54:	6021      	strge	r1, [r4, #0]
 8003f56:	b90e      	cbnz	r6, 8003f5c <_printf_i+0x114>
 8003f58:	2d00      	cmp	r5, #0
 8003f5a:	d04b      	beq.n	8003ff4 <_printf_i+0x1ac>
 8003f5c:	4615      	mov	r5, r2
 8003f5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003f62:	fb03 6711 	mls	r7, r3, r1, r6
 8003f66:	5dc7      	ldrb	r7, [r0, r7]
 8003f68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003f6c:	4637      	mov	r7, r6
 8003f6e:	42bb      	cmp	r3, r7
 8003f70:	460e      	mov	r6, r1
 8003f72:	d9f4      	bls.n	8003f5e <_printf_i+0x116>
 8003f74:	2b08      	cmp	r3, #8
 8003f76:	d10b      	bne.n	8003f90 <_printf_i+0x148>
 8003f78:	6823      	ldr	r3, [r4, #0]
 8003f7a:	07de      	lsls	r6, r3, #31
 8003f7c:	d508      	bpl.n	8003f90 <_printf_i+0x148>
 8003f7e:	6923      	ldr	r3, [r4, #16]
 8003f80:	6861      	ldr	r1, [r4, #4]
 8003f82:	4299      	cmp	r1, r3
 8003f84:	bfde      	ittt	le
 8003f86:	2330      	movle	r3, #48	; 0x30
 8003f88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f90:	1b52      	subs	r2, r2, r5
 8003f92:	6122      	str	r2, [r4, #16]
 8003f94:	f8cd a000 	str.w	sl, [sp]
 8003f98:	464b      	mov	r3, r9
 8003f9a:	aa03      	add	r2, sp, #12
 8003f9c:	4621      	mov	r1, r4
 8003f9e:	4640      	mov	r0, r8
 8003fa0:	f7ff fee4 	bl	8003d6c <_printf_common>
 8003fa4:	3001      	adds	r0, #1
 8003fa6:	d14a      	bne.n	800403e <_printf_i+0x1f6>
 8003fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fac:	b004      	add	sp, #16
 8003fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fb2:	6823      	ldr	r3, [r4, #0]
 8003fb4:	f043 0320 	orr.w	r3, r3, #32
 8003fb8:	6023      	str	r3, [r4, #0]
 8003fba:	4833      	ldr	r0, [pc, #204]	; (8004088 <_printf_i+0x240>)
 8003fbc:	2778      	movs	r7, #120	; 0x78
 8003fbe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003fc2:	6823      	ldr	r3, [r4, #0]
 8003fc4:	6829      	ldr	r1, [r5, #0]
 8003fc6:	061f      	lsls	r7, r3, #24
 8003fc8:	f851 6b04 	ldr.w	r6, [r1], #4
 8003fcc:	d402      	bmi.n	8003fd4 <_printf_i+0x18c>
 8003fce:	065f      	lsls	r7, r3, #25
 8003fd0:	bf48      	it	mi
 8003fd2:	b2b6      	uxthmi	r6, r6
 8003fd4:	07df      	lsls	r7, r3, #31
 8003fd6:	bf48      	it	mi
 8003fd8:	f043 0320 	orrmi.w	r3, r3, #32
 8003fdc:	6029      	str	r1, [r5, #0]
 8003fde:	bf48      	it	mi
 8003fe0:	6023      	strmi	r3, [r4, #0]
 8003fe2:	b91e      	cbnz	r6, 8003fec <_printf_i+0x1a4>
 8003fe4:	6823      	ldr	r3, [r4, #0]
 8003fe6:	f023 0320 	bic.w	r3, r3, #32
 8003fea:	6023      	str	r3, [r4, #0]
 8003fec:	2310      	movs	r3, #16
 8003fee:	e7a7      	b.n	8003f40 <_printf_i+0xf8>
 8003ff0:	4824      	ldr	r0, [pc, #144]	; (8004084 <_printf_i+0x23c>)
 8003ff2:	e7e4      	b.n	8003fbe <_printf_i+0x176>
 8003ff4:	4615      	mov	r5, r2
 8003ff6:	e7bd      	b.n	8003f74 <_printf_i+0x12c>
 8003ff8:	682b      	ldr	r3, [r5, #0]
 8003ffa:	6826      	ldr	r6, [r4, #0]
 8003ffc:	6961      	ldr	r1, [r4, #20]
 8003ffe:	1d18      	adds	r0, r3, #4
 8004000:	6028      	str	r0, [r5, #0]
 8004002:	0635      	lsls	r5, r6, #24
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	d501      	bpl.n	800400c <_printf_i+0x1c4>
 8004008:	6019      	str	r1, [r3, #0]
 800400a:	e002      	b.n	8004012 <_printf_i+0x1ca>
 800400c:	0670      	lsls	r0, r6, #25
 800400e:	d5fb      	bpl.n	8004008 <_printf_i+0x1c0>
 8004010:	8019      	strh	r1, [r3, #0]
 8004012:	2300      	movs	r3, #0
 8004014:	6123      	str	r3, [r4, #16]
 8004016:	4615      	mov	r5, r2
 8004018:	e7bc      	b.n	8003f94 <_printf_i+0x14c>
 800401a:	682b      	ldr	r3, [r5, #0]
 800401c:	1d1a      	adds	r2, r3, #4
 800401e:	602a      	str	r2, [r5, #0]
 8004020:	681d      	ldr	r5, [r3, #0]
 8004022:	6862      	ldr	r2, [r4, #4]
 8004024:	2100      	movs	r1, #0
 8004026:	4628      	mov	r0, r5
 8004028:	f7fc f8d2 	bl	80001d0 <memchr>
 800402c:	b108      	cbz	r0, 8004032 <_printf_i+0x1ea>
 800402e:	1b40      	subs	r0, r0, r5
 8004030:	6060      	str	r0, [r4, #4]
 8004032:	6863      	ldr	r3, [r4, #4]
 8004034:	6123      	str	r3, [r4, #16]
 8004036:	2300      	movs	r3, #0
 8004038:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800403c:	e7aa      	b.n	8003f94 <_printf_i+0x14c>
 800403e:	6923      	ldr	r3, [r4, #16]
 8004040:	462a      	mov	r2, r5
 8004042:	4649      	mov	r1, r9
 8004044:	4640      	mov	r0, r8
 8004046:	47d0      	blx	sl
 8004048:	3001      	adds	r0, #1
 800404a:	d0ad      	beq.n	8003fa8 <_printf_i+0x160>
 800404c:	6823      	ldr	r3, [r4, #0]
 800404e:	079b      	lsls	r3, r3, #30
 8004050:	d413      	bmi.n	800407a <_printf_i+0x232>
 8004052:	68e0      	ldr	r0, [r4, #12]
 8004054:	9b03      	ldr	r3, [sp, #12]
 8004056:	4298      	cmp	r0, r3
 8004058:	bfb8      	it	lt
 800405a:	4618      	movlt	r0, r3
 800405c:	e7a6      	b.n	8003fac <_printf_i+0x164>
 800405e:	2301      	movs	r3, #1
 8004060:	4632      	mov	r2, r6
 8004062:	4649      	mov	r1, r9
 8004064:	4640      	mov	r0, r8
 8004066:	47d0      	blx	sl
 8004068:	3001      	adds	r0, #1
 800406a:	d09d      	beq.n	8003fa8 <_printf_i+0x160>
 800406c:	3501      	adds	r5, #1
 800406e:	68e3      	ldr	r3, [r4, #12]
 8004070:	9903      	ldr	r1, [sp, #12]
 8004072:	1a5b      	subs	r3, r3, r1
 8004074:	42ab      	cmp	r3, r5
 8004076:	dcf2      	bgt.n	800405e <_printf_i+0x216>
 8004078:	e7eb      	b.n	8004052 <_printf_i+0x20a>
 800407a:	2500      	movs	r5, #0
 800407c:	f104 0619 	add.w	r6, r4, #25
 8004080:	e7f5      	b.n	800406e <_printf_i+0x226>
 8004082:	bf00      	nop
 8004084:	08004509 	.word	0x08004509
 8004088:	0800451a 	.word	0x0800451a

0800408c <__sflush_r>:
 800408c:	898a      	ldrh	r2, [r1, #12]
 800408e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004092:	4605      	mov	r5, r0
 8004094:	0710      	lsls	r0, r2, #28
 8004096:	460c      	mov	r4, r1
 8004098:	d458      	bmi.n	800414c <__sflush_r+0xc0>
 800409a:	684b      	ldr	r3, [r1, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	dc05      	bgt.n	80040ac <__sflush_r+0x20>
 80040a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	dc02      	bgt.n	80040ac <__sflush_r+0x20>
 80040a6:	2000      	movs	r0, #0
 80040a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80040ae:	2e00      	cmp	r6, #0
 80040b0:	d0f9      	beq.n	80040a6 <__sflush_r+0x1a>
 80040b2:	2300      	movs	r3, #0
 80040b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80040b8:	682f      	ldr	r7, [r5, #0]
 80040ba:	6a21      	ldr	r1, [r4, #32]
 80040bc:	602b      	str	r3, [r5, #0]
 80040be:	d032      	beq.n	8004126 <__sflush_r+0x9a>
 80040c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80040c2:	89a3      	ldrh	r3, [r4, #12]
 80040c4:	075a      	lsls	r2, r3, #29
 80040c6:	d505      	bpl.n	80040d4 <__sflush_r+0x48>
 80040c8:	6863      	ldr	r3, [r4, #4]
 80040ca:	1ac0      	subs	r0, r0, r3
 80040cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80040ce:	b10b      	cbz	r3, 80040d4 <__sflush_r+0x48>
 80040d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040d2:	1ac0      	subs	r0, r0, r3
 80040d4:	2300      	movs	r3, #0
 80040d6:	4602      	mov	r2, r0
 80040d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80040da:	6a21      	ldr	r1, [r4, #32]
 80040dc:	4628      	mov	r0, r5
 80040de:	47b0      	blx	r6
 80040e0:	1c43      	adds	r3, r0, #1
 80040e2:	89a3      	ldrh	r3, [r4, #12]
 80040e4:	d106      	bne.n	80040f4 <__sflush_r+0x68>
 80040e6:	6829      	ldr	r1, [r5, #0]
 80040e8:	291d      	cmp	r1, #29
 80040ea:	d82b      	bhi.n	8004144 <__sflush_r+0xb8>
 80040ec:	4a29      	ldr	r2, [pc, #164]	; (8004194 <__sflush_r+0x108>)
 80040ee:	410a      	asrs	r2, r1
 80040f0:	07d6      	lsls	r6, r2, #31
 80040f2:	d427      	bmi.n	8004144 <__sflush_r+0xb8>
 80040f4:	2200      	movs	r2, #0
 80040f6:	6062      	str	r2, [r4, #4]
 80040f8:	04d9      	lsls	r1, r3, #19
 80040fa:	6922      	ldr	r2, [r4, #16]
 80040fc:	6022      	str	r2, [r4, #0]
 80040fe:	d504      	bpl.n	800410a <__sflush_r+0x7e>
 8004100:	1c42      	adds	r2, r0, #1
 8004102:	d101      	bne.n	8004108 <__sflush_r+0x7c>
 8004104:	682b      	ldr	r3, [r5, #0]
 8004106:	b903      	cbnz	r3, 800410a <__sflush_r+0x7e>
 8004108:	6560      	str	r0, [r4, #84]	; 0x54
 800410a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800410c:	602f      	str	r7, [r5, #0]
 800410e:	2900      	cmp	r1, #0
 8004110:	d0c9      	beq.n	80040a6 <__sflush_r+0x1a>
 8004112:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004116:	4299      	cmp	r1, r3
 8004118:	d002      	beq.n	8004120 <__sflush_r+0x94>
 800411a:	4628      	mov	r0, r5
 800411c:	f7ff fa92 	bl	8003644 <_free_r>
 8004120:	2000      	movs	r0, #0
 8004122:	6360      	str	r0, [r4, #52]	; 0x34
 8004124:	e7c0      	b.n	80040a8 <__sflush_r+0x1c>
 8004126:	2301      	movs	r3, #1
 8004128:	4628      	mov	r0, r5
 800412a:	47b0      	blx	r6
 800412c:	1c41      	adds	r1, r0, #1
 800412e:	d1c8      	bne.n	80040c2 <__sflush_r+0x36>
 8004130:	682b      	ldr	r3, [r5, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d0c5      	beq.n	80040c2 <__sflush_r+0x36>
 8004136:	2b1d      	cmp	r3, #29
 8004138:	d001      	beq.n	800413e <__sflush_r+0xb2>
 800413a:	2b16      	cmp	r3, #22
 800413c:	d101      	bne.n	8004142 <__sflush_r+0xb6>
 800413e:	602f      	str	r7, [r5, #0]
 8004140:	e7b1      	b.n	80040a6 <__sflush_r+0x1a>
 8004142:	89a3      	ldrh	r3, [r4, #12]
 8004144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004148:	81a3      	strh	r3, [r4, #12]
 800414a:	e7ad      	b.n	80040a8 <__sflush_r+0x1c>
 800414c:	690f      	ldr	r7, [r1, #16]
 800414e:	2f00      	cmp	r7, #0
 8004150:	d0a9      	beq.n	80040a6 <__sflush_r+0x1a>
 8004152:	0793      	lsls	r3, r2, #30
 8004154:	680e      	ldr	r6, [r1, #0]
 8004156:	bf08      	it	eq
 8004158:	694b      	ldreq	r3, [r1, #20]
 800415a:	600f      	str	r7, [r1, #0]
 800415c:	bf18      	it	ne
 800415e:	2300      	movne	r3, #0
 8004160:	eba6 0807 	sub.w	r8, r6, r7
 8004164:	608b      	str	r3, [r1, #8]
 8004166:	f1b8 0f00 	cmp.w	r8, #0
 800416a:	dd9c      	ble.n	80040a6 <__sflush_r+0x1a>
 800416c:	6a21      	ldr	r1, [r4, #32]
 800416e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004170:	4643      	mov	r3, r8
 8004172:	463a      	mov	r2, r7
 8004174:	4628      	mov	r0, r5
 8004176:	47b0      	blx	r6
 8004178:	2800      	cmp	r0, #0
 800417a:	dc06      	bgt.n	800418a <__sflush_r+0xfe>
 800417c:	89a3      	ldrh	r3, [r4, #12]
 800417e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004182:	81a3      	strh	r3, [r4, #12]
 8004184:	f04f 30ff 	mov.w	r0, #4294967295
 8004188:	e78e      	b.n	80040a8 <__sflush_r+0x1c>
 800418a:	4407      	add	r7, r0
 800418c:	eba8 0800 	sub.w	r8, r8, r0
 8004190:	e7e9      	b.n	8004166 <__sflush_r+0xda>
 8004192:	bf00      	nop
 8004194:	dfbffffe 	.word	0xdfbffffe

08004198 <_fflush_r>:
 8004198:	b538      	push	{r3, r4, r5, lr}
 800419a:	690b      	ldr	r3, [r1, #16]
 800419c:	4605      	mov	r5, r0
 800419e:	460c      	mov	r4, r1
 80041a0:	b913      	cbnz	r3, 80041a8 <_fflush_r+0x10>
 80041a2:	2500      	movs	r5, #0
 80041a4:	4628      	mov	r0, r5
 80041a6:	bd38      	pop	{r3, r4, r5, pc}
 80041a8:	b118      	cbz	r0, 80041b2 <_fflush_r+0x1a>
 80041aa:	6a03      	ldr	r3, [r0, #32]
 80041ac:	b90b      	cbnz	r3, 80041b2 <_fflush_r+0x1a>
 80041ae:	f7ff f829 	bl	8003204 <__sinit>
 80041b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d0f3      	beq.n	80041a2 <_fflush_r+0xa>
 80041ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80041bc:	07d0      	lsls	r0, r2, #31
 80041be:	d404      	bmi.n	80041ca <_fflush_r+0x32>
 80041c0:	0599      	lsls	r1, r3, #22
 80041c2:	d402      	bmi.n	80041ca <_fflush_r+0x32>
 80041c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041c6:	f7ff fa3a 	bl	800363e <__retarget_lock_acquire_recursive>
 80041ca:	4628      	mov	r0, r5
 80041cc:	4621      	mov	r1, r4
 80041ce:	f7ff ff5d 	bl	800408c <__sflush_r>
 80041d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80041d4:	07da      	lsls	r2, r3, #31
 80041d6:	4605      	mov	r5, r0
 80041d8:	d4e4      	bmi.n	80041a4 <_fflush_r+0xc>
 80041da:	89a3      	ldrh	r3, [r4, #12]
 80041dc:	059b      	lsls	r3, r3, #22
 80041de:	d4e1      	bmi.n	80041a4 <_fflush_r+0xc>
 80041e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041e2:	f7ff fa2d 	bl	8003640 <__retarget_lock_release_recursive>
 80041e6:	e7dd      	b.n	80041a4 <_fflush_r+0xc>

080041e8 <__swhatbuf_r>:
 80041e8:	b570      	push	{r4, r5, r6, lr}
 80041ea:	460c      	mov	r4, r1
 80041ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041f0:	2900      	cmp	r1, #0
 80041f2:	b096      	sub	sp, #88	; 0x58
 80041f4:	4615      	mov	r5, r2
 80041f6:	461e      	mov	r6, r3
 80041f8:	da0d      	bge.n	8004216 <__swhatbuf_r+0x2e>
 80041fa:	89a3      	ldrh	r3, [r4, #12]
 80041fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004200:	f04f 0100 	mov.w	r1, #0
 8004204:	bf0c      	ite	eq
 8004206:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800420a:	2340      	movne	r3, #64	; 0x40
 800420c:	2000      	movs	r0, #0
 800420e:	6031      	str	r1, [r6, #0]
 8004210:	602b      	str	r3, [r5, #0]
 8004212:	b016      	add	sp, #88	; 0x58
 8004214:	bd70      	pop	{r4, r5, r6, pc}
 8004216:	466a      	mov	r2, sp
 8004218:	f000 f896 	bl	8004348 <_fstat_r>
 800421c:	2800      	cmp	r0, #0
 800421e:	dbec      	blt.n	80041fa <__swhatbuf_r+0x12>
 8004220:	9901      	ldr	r1, [sp, #4]
 8004222:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004226:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800422a:	4259      	negs	r1, r3
 800422c:	4159      	adcs	r1, r3
 800422e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004232:	e7eb      	b.n	800420c <__swhatbuf_r+0x24>

08004234 <__smakebuf_r>:
 8004234:	898b      	ldrh	r3, [r1, #12]
 8004236:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004238:	079d      	lsls	r5, r3, #30
 800423a:	4606      	mov	r6, r0
 800423c:	460c      	mov	r4, r1
 800423e:	d507      	bpl.n	8004250 <__smakebuf_r+0x1c>
 8004240:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004244:	6023      	str	r3, [r4, #0]
 8004246:	6123      	str	r3, [r4, #16]
 8004248:	2301      	movs	r3, #1
 800424a:	6163      	str	r3, [r4, #20]
 800424c:	b002      	add	sp, #8
 800424e:	bd70      	pop	{r4, r5, r6, pc}
 8004250:	ab01      	add	r3, sp, #4
 8004252:	466a      	mov	r2, sp
 8004254:	f7ff ffc8 	bl	80041e8 <__swhatbuf_r>
 8004258:	9900      	ldr	r1, [sp, #0]
 800425a:	4605      	mov	r5, r0
 800425c:	4630      	mov	r0, r6
 800425e:	f7ff fa5d 	bl	800371c <_malloc_r>
 8004262:	b948      	cbnz	r0, 8004278 <__smakebuf_r+0x44>
 8004264:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004268:	059a      	lsls	r2, r3, #22
 800426a:	d4ef      	bmi.n	800424c <__smakebuf_r+0x18>
 800426c:	f023 0303 	bic.w	r3, r3, #3
 8004270:	f043 0302 	orr.w	r3, r3, #2
 8004274:	81a3      	strh	r3, [r4, #12]
 8004276:	e7e3      	b.n	8004240 <__smakebuf_r+0xc>
 8004278:	89a3      	ldrh	r3, [r4, #12]
 800427a:	6020      	str	r0, [r4, #0]
 800427c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004280:	81a3      	strh	r3, [r4, #12]
 8004282:	9b00      	ldr	r3, [sp, #0]
 8004284:	6163      	str	r3, [r4, #20]
 8004286:	9b01      	ldr	r3, [sp, #4]
 8004288:	6120      	str	r0, [r4, #16]
 800428a:	b15b      	cbz	r3, 80042a4 <__smakebuf_r+0x70>
 800428c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004290:	4630      	mov	r0, r6
 8004292:	f000 f86b 	bl	800436c <_isatty_r>
 8004296:	b128      	cbz	r0, 80042a4 <__smakebuf_r+0x70>
 8004298:	89a3      	ldrh	r3, [r4, #12]
 800429a:	f023 0303 	bic.w	r3, r3, #3
 800429e:	f043 0301 	orr.w	r3, r3, #1
 80042a2:	81a3      	strh	r3, [r4, #12]
 80042a4:	89a3      	ldrh	r3, [r4, #12]
 80042a6:	431d      	orrs	r5, r3
 80042a8:	81a5      	strh	r5, [r4, #12]
 80042aa:	e7cf      	b.n	800424c <__smakebuf_r+0x18>

080042ac <_putc_r>:
 80042ac:	b570      	push	{r4, r5, r6, lr}
 80042ae:	460d      	mov	r5, r1
 80042b0:	4614      	mov	r4, r2
 80042b2:	4606      	mov	r6, r0
 80042b4:	b118      	cbz	r0, 80042be <_putc_r+0x12>
 80042b6:	6a03      	ldr	r3, [r0, #32]
 80042b8:	b90b      	cbnz	r3, 80042be <_putc_r+0x12>
 80042ba:	f7fe ffa3 	bl	8003204 <__sinit>
 80042be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042c0:	07d8      	lsls	r0, r3, #31
 80042c2:	d405      	bmi.n	80042d0 <_putc_r+0x24>
 80042c4:	89a3      	ldrh	r3, [r4, #12]
 80042c6:	0599      	lsls	r1, r3, #22
 80042c8:	d402      	bmi.n	80042d0 <_putc_r+0x24>
 80042ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042cc:	f7ff f9b7 	bl	800363e <__retarget_lock_acquire_recursive>
 80042d0:	68a3      	ldr	r3, [r4, #8]
 80042d2:	3b01      	subs	r3, #1
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	60a3      	str	r3, [r4, #8]
 80042d8:	da05      	bge.n	80042e6 <_putc_r+0x3a>
 80042da:	69a2      	ldr	r2, [r4, #24]
 80042dc:	4293      	cmp	r3, r2
 80042de:	db12      	blt.n	8004306 <_putc_r+0x5a>
 80042e0:	b2eb      	uxtb	r3, r5
 80042e2:	2b0a      	cmp	r3, #10
 80042e4:	d00f      	beq.n	8004306 <_putc_r+0x5a>
 80042e6:	6823      	ldr	r3, [r4, #0]
 80042e8:	1c5a      	adds	r2, r3, #1
 80042ea:	6022      	str	r2, [r4, #0]
 80042ec:	701d      	strb	r5, [r3, #0]
 80042ee:	b2ed      	uxtb	r5, r5
 80042f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042f2:	07da      	lsls	r2, r3, #31
 80042f4:	d405      	bmi.n	8004302 <_putc_r+0x56>
 80042f6:	89a3      	ldrh	r3, [r4, #12]
 80042f8:	059b      	lsls	r3, r3, #22
 80042fa:	d402      	bmi.n	8004302 <_putc_r+0x56>
 80042fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042fe:	f7ff f99f 	bl	8003640 <__retarget_lock_release_recursive>
 8004302:	4628      	mov	r0, r5
 8004304:	bd70      	pop	{r4, r5, r6, pc}
 8004306:	4629      	mov	r1, r5
 8004308:	4622      	mov	r2, r4
 800430a:	4630      	mov	r0, r6
 800430c:	f7ff f889 	bl	8003422 <__swbuf_r>
 8004310:	4605      	mov	r5, r0
 8004312:	e7ed      	b.n	80042f0 <_putc_r+0x44>

08004314 <memmove>:
 8004314:	4288      	cmp	r0, r1
 8004316:	b510      	push	{r4, lr}
 8004318:	eb01 0402 	add.w	r4, r1, r2
 800431c:	d902      	bls.n	8004324 <memmove+0x10>
 800431e:	4284      	cmp	r4, r0
 8004320:	4623      	mov	r3, r4
 8004322:	d807      	bhi.n	8004334 <memmove+0x20>
 8004324:	1e43      	subs	r3, r0, #1
 8004326:	42a1      	cmp	r1, r4
 8004328:	d008      	beq.n	800433c <memmove+0x28>
 800432a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800432e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004332:	e7f8      	b.n	8004326 <memmove+0x12>
 8004334:	4402      	add	r2, r0
 8004336:	4601      	mov	r1, r0
 8004338:	428a      	cmp	r2, r1
 800433a:	d100      	bne.n	800433e <memmove+0x2a>
 800433c:	bd10      	pop	{r4, pc}
 800433e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004342:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004346:	e7f7      	b.n	8004338 <memmove+0x24>

08004348 <_fstat_r>:
 8004348:	b538      	push	{r3, r4, r5, lr}
 800434a:	4d07      	ldr	r5, [pc, #28]	; (8004368 <_fstat_r+0x20>)
 800434c:	2300      	movs	r3, #0
 800434e:	4604      	mov	r4, r0
 8004350:	4608      	mov	r0, r1
 8004352:	4611      	mov	r1, r2
 8004354:	602b      	str	r3, [r5, #0]
 8004356:	f7fc fe58 	bl	800100a <_fstat>
 800435a:	1c43      	adds	r3, r0, #1
 800435c:	d102      	bne.n	8004364 <_fstat_r+0x1c>
 800435e:	682b      	ldr	r3, [r5, #0]
 8004360:	b103      	cbz	r3, 8004364 <_fstat_r+0x1c>
 8004362:	6023      	str	r3, [r4, #0]
 8004364:	bd38      	pop	{r3, r4, r5, pc}
 8004366:	bf00      	nop
 8004368:	20001284 	.word	0x20001284

0800436c <_isatty_r>:
 800436c:	b538      	push	{r3, r4, r5, lr}
 800436e:	4d06      	ldr	r5, [pc, #24]	; (8004388 <_isatty_r+0x1c>)
 8004370:	2300      	movs	r3, #0
 8004372:	4604      	mov	r4, r0
 8004374:	4608      	mov	r0, r1
 8004376:	602b      	str	r3, [r5, #0]
 8004378:	f7fc fe57 	bl	800102a <_isatty>
 800437c:	1c43      	adds	r3, r0, #1
 800437e:	d102      	bne.n	8004386 <_isatty_r+0x1a>
 8004380:	682b      	ldr	r3, [r5, #0]
 8004382:	b103      	cbz	r3, 8004386 <_isatty_r+0x1a>
 8004384:	6023      	str	r3, [r4, #0]
 8004386:	bd38      	pop	{r3, r4, r5, pc}
 8004388:	20001284 	.word	0x20001284

0800438c <_sbrk_r>:
 800438c:	b538      	push	{r3, r4, r5, lr}
 800438e:	4d06      	ldr	r5, [pc, #24]	; (80043a8 <_sbrk_r+0x1c>)
 8004390:	2300      	movs	r3, #0
 8004392:	4604      	mov	r4, r0
 8004394:	4608      	mov	r0, r1
 8004396:	602b      	str	r3, [r5, #0]
 8004398:	f7fc fe60 	bl	800105c <_sbrk>
 800439c:	1c43      	adds	r3, r0, #1
 800439e:	d102      	bne.n	80043a6 <_sbrk_r+0x1a>
 80043a0:	682b      	ldr	r3, [r5, #0]
 80043a2:	b103      	cbz	r3, 80043a6 <_sbrk_r+0x1a>
 80043a4:	6023      	str	r3, [r4, #0]
 80043a6:	bd38      	pop	{r3, r4, r5, pc}
 80043a8:	20001284 	.word	0x20001284

080043ac <memcpy>:
 80043ac:	440a      	add	r2, r1
 80043ae:	4291      	cmp	r1, r2
 80043b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80043b4:	d100      	bne.n	80043b8 <memcpy+0xc>
 80043b6:	4770      	bx	lr
 80043b8:	b510      	push	{r4, lr}
 80043ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043c2:	4291      	cmp	r1, r2
 80043c4:	d1f9      	bne.n	80043ba <memcpy+0xe>
 80043c6:	bd10      	pop	{r4, pc}

080043c8 <_realloc_r>:
 80043c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043cc:	4680      	mov	r8, r0
 80043ce:	4614      	mov	r4, r2
 80043d0:	460e      	mov	r6, r1
 80043d2:	b921      	cbnz	r1, 80043de <_realloc_r+0x16>
 80043d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043d8:	4611      	mov	r1, r2
 80043da:	f7ff b99f 	b.w	800371c <_malloc_r>
 80043de:	b92a      	cbnz	r2, 80043ec <_realloc_r+0x24>
 80043e0:	f7ff f930 	bl	8003644 <_free_r>
 80043e4:	4625      	mov	r5, r4
 80043e6:	4628      	mov	r0, r5
 80043e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043ec:	f000 f81b 	bl	8004426 <_malloc_usable_size_r>
 80043f0:	4284      	cmp	r4, r0
 80043f2:	4607      	mov	r7, r0
 80043f4:	d802      	bhi.n	80043fc <_realloc_r+0x34>
 80043f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80043fa:	d812      	bhi.n	8004422 <_realloc_r+0x5a>
 80043fc:	4621      	mov	r1, r4
 80043fe:	4640      	mov	r0, r8
 8004400:	f7ff f98c 	bl	800371c <_malloc_r>
 8004404:	4605      	mov	r5, r0
 8004406:	2800      	cmp	r0, #0
 8004408:	d0ed      	beq.n	80043e6 <_realloc_r+0x1e>
 800440a:	42bc      	cmp	r4, r7
 800440c:	4622      	mov	r2, r4
 800440e:	4631      	mov	r1, r6
 8004410:	bf28      	it	cs
 8004412:	463a      	movcs	r2, r7
 8004414:	f7ff ffca 	bl	80043ac <memcpy>
 8004418:	4631      	mov	r1, r6
 800441a:	4640      	mov	r0, r8
 800441c:	f7ff f912 	bl	8003644 <_free_r>
 8004420:	e7e1      	b.n	80043e6 <_realloc_r+0x1e>
 8004422:	4635      	mov	r5, r6
 8004424:	e7df      	b.n	80043e6 <_realloc_r+0x1e>

08004426 <_malloc_usable_size_r>:
 8004426:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800442a:	1f18      	subs	r0, r3, #4
 800442c:	2b00      	cmp	r3, #0
 800442e:	bfbc      	itt	lt
 8004430:	580b      	ldrlt	r3, [r1, r0]
 8004432:	18c0      	addlt	r0, r0, r3
 8004434:	4770      	bx	lr
	...

08004438 <_init>:
 8004438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800443a:	bf00      	nop
 800443c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800443e:	bc08      	pop	{r3}
 8004440:	469e      	mov	lr, r3
 8004442:	4770      	bx	lr

08004444 <_fini>:
 8004444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004446:	bf00      	nop
 8004448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800444a:	bc08      	pop	{r3}
 800444c:	469e      	mov	lr, r3
 800444e:	4770      	bx	lr
