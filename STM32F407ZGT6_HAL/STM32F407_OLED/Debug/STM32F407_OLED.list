
STM32F407_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003760  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f1c  080038f0  080038f0  000138f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800580c  0800580c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  0800580c  0800580c  0001580c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005814  08005814  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005814  08005814  00015814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005818  08005818  00015818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800581c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          000005c8  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000624  20000624  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00007c1d  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000018b8  00000000  00000000  00027cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000007e0  00000000  00000000  000295a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000209c5  00000000  00000000  00029d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b4ba  00000000  00000000  0004a74d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2803  00000000  00000000  00055c07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 000005ec  00000000  00000000  0011840a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000023dc  00000000  00000000  001189f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  0011add4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080038d8 	.word	0x080038d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080038d8 	.word	0x080038d8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b088      	sub	sp, #32
 8000570:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000572:	f107 030c 	add.w	r3, r7, #12
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	4b20      	ldr	r3, [pc, #128]	; (8000608 <MX_GPIO_Init+0x9c>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	4a1f      	ldr	r2, [pc, #124]	; (8000608 <MX_GPIO_Init+0x9c>)
 800058c:	f043 0320 	orr.w	r3, r3, #32
 8000590:	6313      	str	r3, [r2, #48]	; 0x30
 8000592:	4b1d      	ldr	r3, [pc, #116]	; (8000608 <MX_GPIO_Init+0x9c>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	f003 0320 	and.w	r3, r3, #32
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	4b19      	ldr	r3, [pc, #100]	; (8000608 <MX_GPIO_Init+0x9c>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a18      	ldr	r2, [pc, #96]	; (8000608 <MX_GPIO_Init+0x9c>)
 80005a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
 80005ae:	4b16      	ldr	r3, [pc, #88]	; (8000608 <MX_GPIO_Init+0x9c>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	603b      	str	r3, [r7, #0]
 80005be:	4b12      	ldr	r3, [pc, #72]	; (8000608 <MX_GPIO_Init+0x9c>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a11      	ldr	r2, [pc, #68]	; (8000608 <MX_GPIO_Init+0x9c>)
 80005c4:	f043 0302 	orr.w	r3, r3, #2
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <MX_GPIO_Init+0x9c>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0302 	and.w	r3, r3, #2
 80005d2:	603b      	str	r3, [r7, #0]
 80005d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005dc:	480b      	ldr	r0, [pc, #44]	; (800060c <MX_GPIO_Init+0xa0>)
 80005de:	f001 fc2d 	bl	8001e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e8:	2301      	movs	r3, #1
 80005ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	4619      	mov	r1, r3
 80005fa:	4804      	ldr	r0, [pc, #16]	; (800060c <MX_GPIO_Init+0xa0>)
 80005fc:	f001 fa82 	bl	8001b04 <HAL_GPIO_Init>

}
 8000600:	bf00      	nop
 8000602:	3720      	adds	r7, #32
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40023800 	.word	0x40023800
 800060c:	40021400 	.word	0x40021400

08000610 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <MX_I2C1_Init+0x50>)
 8000616:	4a13      	ldr	r2, [pc, #76]	; (8000664 <MX_I2C1_Init+0x54>)
 8000618:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800061a:	4b11      	ldr	r3, [pc, #68]	; (8000660 <MX_I2C1_Init+0x50>)
 800061c:	4a12      	ldr	r2, [pc, #72]	; (8000668 <MX_I2C1_Init+0x58>)
 800061e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000620:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <MX_I2C1_Init+0x50>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000626:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <MX_I2C1_Init+0x50>)
 8000628:	2200      	movs	r2, #0
 800062a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <MX_I2C1_Init+0x50>)
 800062e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000632:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000634:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <MX_I2C1_Init+0x50>)
 8000636:	2200      	movs	r2, #0
 8000638:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_I2C1_Init+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000640:	4b07      	ldr	r3, [pc, #28]	; (8000660 <MX_I2C1_Init+0x50>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MX_I2C1_Init+0x50>)
 8000648:	2200      	movs	r2, #0
 800064a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <MX_I2C1_Init+0x50>)
 800064e:	f001 fc0f 	bl	8001e70 <HAL_I2C_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000658:	f000 f9d2 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000078 	.word	0x20000078
 8000664:	40005400 	.word	0x40005400
 8000668:	00061a80 	.word	0x00061a80

0800066c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b08a      	sub	sp, #40	; 0x28
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000674:	f107 0314 	add.w	r3, r7, #20
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <HAL_I2C_MspInit+0x84>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d12b      	bne.n	80006e6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	613b      	str	r3, [r7, #16]
 8000692:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <HAL_I2C_MspInit+0x88>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a17      	ldr	r2, [pc, #92]	; (80006f4 <HAL_I2C_MspInit+0x88>)
 8000698:	f043 0302 	orr.w	r3, r3, #2
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <HAL_I2C_MspInit+0x88>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0302 	and.w	r3, r3, #2
 80006a6:	613b      	str	r3, [r7, #16]
 80006a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006aa:	23c0      	movs	r3, #192	; 0xc0
 80006ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006ae:	2312      	movs	r3, #18
 80006b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b6:	2303      	movs	r3, #3
 80006b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006ba:	2304      	movs	r3, #4
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	4619      	mov	r1, r3
 80006c4:	480c      	ldr	r0, [pc, #48]	; (80006f8 <HAL_I2C_MspInit+0x8c>)
 80006c6:	f001 fa1d 	bl	8001b04 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <HAL_I2C_MspInit+0x88>)
 80006d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d2:	4a08      	ldr	r2, [pc, #32]	; (80006f4 <HAL_I2C_MspInit+0x88>)
 80006d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006d8:	6413      	str	r3, [r2, #64]	; 0x40
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <HAL_I2C_MspInit+0x88>)
 80006dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006e6:	bf00      	nop
 80006e8:	3728      	adds	r7, #40	; 0x28
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40005400 	.word	0x40005400
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40020400 	.word	0x40020400

080006fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006fc:	b590      	push	{r4, r7, lr}
 80006fe:	b08b      	sub	sp, #44	; 0x2c
 8000700:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000702:	f001 f883 	bl	800180c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000706:	f000 f911 	bl	800092c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800070a:	f7ff ff2f 	bl	800056c <MX_GPIO_Init>
  MX_I2C1_Init();
 800070e:	f7ff ff7f 	bl	8000610 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  // 刚上电时STM32比OLED启动快，因此需要等待一段时间再初始化OLED
  HAL_Delay(1000);
 8000712:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000716:	f001 f8eb 	bl	80018f0 <HAL_Delay>
  // 初始化OLED
  OLED_Init();
 800071a:	f000 f99b 	bl	8000a54 <OLED_Init>
  // 设置OLED显示模式：正常/反色
  OLED_SetColorMode(OLED_COLOR_NORMAL);
 800071e:	2000      	movs	r0, #0
 8000720:	f000 fa08 	bl	8000b34 <OLED_SetColorMode>
  // 设置OLED显示方向：0°/180°
  OLED_SetOrientation(OLED_Orientation_0);
 8000724:	2000      	movs	r0, #0
 8000726:	f000 fa1c 	bl	8000b62 <OLED_SetOrientation>
  // 清空显示缓冲区
  OLED_ClearBuffer();
 800072a:	f000 fa93 	bl	8000c54 <OLED_ClearBuffer>
  // 将缓存内容更新到屏幕显示
  OLED_Refresh();
 800072e:	f000 fa37 	bl	8000ba0 <OLED_Refresh>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    // 中英文字符串混合显示
    OLED_ClearBuffer();
 8000732:	f000 fa8f 	bl	8000c54 <OLED_ClearBuffer>
    OLED_PrintChinese(0, 0, "感谢关注", 16, OLED_COLOR_REVERSED);
 8000736:	2301      	movs	r3, #1
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2310      	movs	r3, #16
 800073c:	4a75      	ldr	r2, [pc, #468]	; (8000914 <main+0x218>)
 800073e:	2100      	movs	r1, #0
 8000740:	2000      	movs	r0, #0
 8000742:	f000 fe51 	bl	80013e8 <OLED_PrintChinese>
    OLED_Refresh();
 8000746:	f000 fa2b 	bl	8000ba0 <OLED_Refresh>
    HAL_Delay(500);
 800074a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800074e:	f001 f8cf 	bl	80018f0 <HAL_Delay>
    OLED_PrintChinese(0, 22, "B站-KEYSKING", 16, OLED_COLOR_NORMAL);
 8000752:	2300      	movs	r3, #0
 8000754:	9300      	str	r3, [sp, #0]
 8000756:	2310      	movs	r3, #16
 8000758:	4a6f      	ldr	r2, [pc, #444]	; (8000918 <main+0x21c>)
 800075a:	2116      	movs	r1, #22
 800075c:	2000      	movs	r0, #0
 800075e:	f000 fe43 	bl	80013e8 <OLED_PrintChinese>
    OLED_Refresh();
 8000762:	f000 fa1d 	bl	8000ba0 <OLED_Refresh>
    HAL_Delay(500);
 8000766:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800076a:	f001 f8c1 	bl	80018f0 <HAL_Delay>
    OLED_PrintChinese(0, 44, "\\^o^/", 16, OLED_COLOR_NORMAL);
 800076e:	2300      	movs	r3, #0
 8000770:	9300      	str	r3, [sp, #0]
 8000772:	2310      	movs	r3, #16
 8000774:	4a69      	ldr	r2, [pc, #420]	; (800091c <main+0x220>)
 8000776:	212c      	movs	r1, #44	; 0x2c
 8000778:	2000      	movs	r0, #0
 800077a:	f000 fe35 	bl	80013e8 <OLED_PrintChinese>
    OLED_Refresh();
 800077e:	f000 fa0f 	bl	8000ba0 <OLED_Refresh>
    HAL_Delay(1500);
 8000782:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000786:	f001 f8b3 	bl	80018f0 <HAL_Delay>
    // 显示变量值
    int count = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	61fb      	str	r3, [r7, #28]
    char buf[10] = {0};
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	f107 0308 	add.w	r3, r7, #8
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	809a      	strh	r2, [r3, #4]
    OLED_ClearBuffer();
 800079c:	f000 fa5a 	bl	8000c54 <OLED_ClearBuffer>
    for(;;) {
      sprintf(buf, "%d %%", count);
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	69fa      	ldr	r2, [r7, #28]
 80007a4:	495e      	ldr	r1, [pc, #376]	; (8000920 <main+0x224>)
 80007a6:	4618      	mov	r0, r3
 80007a8:	f002 fbf2 	bl	8002f90 <siprintf>
      OLED_PrintChinese(40, 20, buf, 24, OLED_COLOR_NORMAL);
 80007ac:	1d3a      	adds	r2, r7, #4
 80007ae:	2300      	movs	r3, #0
 80007b0:	9300      	str	r3, [sp, #0]
 80007b2:	2318      	movs	r3, #24
 80007b4:	2114      	movs	r1, #20
 80007b6:	2028      	movs	r0, #40	; 0x28
 80007b8:	f000 fe16 	bl	80013e8 <OLED_PrintChinese>
      OLED_Refresh();
 80007bc:	f000 f9f0 	bl	8000ba0 <OLED_Refresh>
      HAL_Delay(15);
 80007c0:	200f      	movs	r0, #15
 80007c2:	f001 f895 	bl	80018f0 <HAL_Delay>
      if(count++ > 99){
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	1c5a      	adds	r2, r3, #1
 80007ca:	61fa      	str	r2, [r7, #28]
 80007cc:	2b63      	cmp	r3, #99	; 0x63
 80007ce:	dc00      	bgt.n	80007d2 <main+0xd6>
      sprintf(buf, "%d %%", count);
 80007d0:	e7e6      	b.n	80007a0 <main+0xa4>
        break;
 80007d2:	bf00      	nop
      }
    }
    HAL_Delay(1000);
 80007d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007d8:	f001 f88a 	bl	80018f0 <HAL_Delay>
    // 直线绘制
    OLED_ClearBuffer();
 80007dc:	f000 fa3a 	bl	8000c54 <OLED_ClearBuffer>
    for (int i = 0; i < 128; i+=8) {
 80007e0:	2300      	movs	r3, #0
 80007e2:	61bb      	str	r3, [r7, #24]
 80007e4:	e01c      	b.n	8000820 <main+0x124>
      OLED_DrawLine(0, 0, i, 63, OLED_COLOR_NORMAL);
 80007e6:	69bb      	ldr	r3, [r7, #24]
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	2300      	movs	r3, #0
 80007ec:	9300      	str	r3, [sp, #0]
 80007ee:	233f      	movs	r3, #63	; 0x3f
 80007f0:	2100      	movs	r1, #0
 80007f2:	2000      	movs	r0, #0
 80007f4:	f000 fabe 	bl	8000d74 <OLED_DrawLine>
      OLED_DrawLine(127, 0, 127 - i, 63, OLED_COLOR_NORMAL);
 80007f8:	69bb      	ldr	r3, [r7, #24]
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000800:	b2da      	uxtb	r2, r3
 8000802:	2300      	movs	r3, #0
 8000804:	9300      	str	r3, [sp, #0]
 8000806:	233f      	movs	r3, #63	; 0x3f
 8000808:	2100      	movs	r1, #0
 800080a:	207f      	movs	r0, #127	; 0x7f
 800080c:	f000 fab2 	bl	8000d74 <OLED_DrawLine>
      OLED_Refresh();
 8000810:	f000 f9c6 	bl	8000ba0 <OLED_Refresh>
      HAL_Delay(30);
 8000814:	201e      	movs	r0, #30
 8000816:	f001 f86b 	bl	80018f0 <HAL_Delay>
    for (int i = 0; i < 128; i+=8) {
 800081a:	69bb      	ldr	r3, [r7, #24]
 800081c:	3308      	adds	r3, #8
 800081e:	61bb      	str	r3, [r7, #24]
 8000820:	69bb      	ldr	r3, [r7, #24]
 8000822:	2b7f      	cmp	r3, #127	; 0x7f
 8000824:	dddf      	ble.n	80007e6 <main+0xea>
    }
    HAL_Delay(1500);
 8000826:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800082a:	f001 f861 	bl	80018f0 <HAL_Delay>
    // 矩形绘制
    OLED_ClearBuffer();
 800082e:	f000 fa11 	bl	8000c54 <OLED_ClearBuffer>
    for (int i = 0; i < 64; i+=8) {
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
 8000836:	e020      	b.n	800087a <main+0x17e>
      OLED_DrawRectangle(i, i/2, 127 - i, 63 - i/2, OLED_COLOR_NORMAL);
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	b2d8      	uxtb	r0, r3
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	0fda      	lsrs	r2, r3, #31
 8000840:	4413      	add	r3, r2
 8000842:	105b      	asrs	r3, r3, #1
 8000844:	b2d9      	uxtb	r1, r3
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	b2db      	uxtb	r3, r3
 800084a:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800084e:	b2dc      	uxtb	r4, r3
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	0fda      	lsrs	r2, r3, #31
 8000854:	4413      	add	r3, r2
 8000856:	105b      	asrs	r3, r3, #1
 8000858:	425b      	negs	r3, r3
 800085a:	b2db      	uxtb	r3, r3
 800085c:	333f      	adds	r3, #63	; 0x3f
 800085e:	b2db      	uxtb	r3, r3
 8000860:	2200      	movs	r2, #0
 8000862:	9200      	str	r2, [sp, #0]
 8000864:	4622      	mov	r2, r4
 8000866:	f000 fb0a 	bl	8000e7e <OLED_DrawRectangle>
      OLED_Refresh();
 800086a:	f000 f999 	bl	8000ba0 <OLED_Refresh>
      HAL_Delay(35);
 800086e:	2023      	movs	r0, #35	; 0x23
 8000870:	f001 f83e 	bl	80018f0 <HAL_Delay>
    for (int i = 0; i < 64; i+=8) {
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	3308      	adds	r3, #8
 8000878:	617b      	str	r3, [r7, #20]
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	2b3f      	cmp	r3, #63	; 0x3f
 800087e:	dddb      	ble.n	8000838 <main+0x13c>
    }
    HAL_Delay(1500);
 8000880:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000884:	f001 f834 	bl	80018f0 <HAL_Delay>
    // 矩形圆形
    OLED_ClearBuffer();
 8000888:	f000 f9e4 	bl	8000c54 <OLED_ClearBuffer>
    for (int i = 63; i > 0; i-=8) {
 800088c:	233f      	movs	r3, #63	; 0x3f
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	e013      	b.n	80008ba <main+0x1be>
      OLED_DrawCircle(64, 32, i/2, CIRCLE_ALL, OLED_COLOR_NORMAL);
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	0fda      	lsrs	r2, r3, #31
 8000896:	4413      	add	r3, r2
 8000898:	105b      	asrs	r3, r3, #1
 800089a:	b2da      	uxtb	r2, r3
 800089c:	2300      	movs	r3, #0
 800089e:	9300      	str	r3, [sp, #0]
 80008a0:	230f      	movs	r3, #15
 80008a2:	2120      	movs	r1, #32
 80008a4:	2040      	movs	r0, #64	; 0x40
 80008a6:	f000 fbb1 	bl	800100c <OLED_DrawCircle>
      OLED_Refresh();
 80008aa:	f000 f979 	bl	8000ba0 <OLED_Refresh>
      HAL_Delay(40);
 80008ae:	2028      	movs	r0, #40	; 0x28
 80008b0:	f001 f81e 	bl	80018f0 <HAL_Delay>
    for (int i = 63; i > 0; i-=8) {
 80008b4:	693b      	ldr	r3, [r7, #16]
 80008b6:	3b08      	subs	r3, #8
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	693b      	ldr	r3, [r7, #16]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	dce8      	bgt.n	8000892 <main+0x196>
    }
    HAL_Delay(1500);
 80008c0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80008c4:	f001 f814 	bl	80018f0 <HAL_Delay>
    // 图片显示1
    OLED_ClearBuffer();
 80008c8:	f000 f9c4 	bl	8000c54 <OLED_ClearBuffer>
    OLED_DrawPicture(40, 7, 48, 48, icon_IDE, OLED_COLOR_NORMAL);
 80008cc:	2300      	movs	r3, #0
 80008ce:	9301      	str	r3, [sp, #4]
 80008d0:	4b14      	ldr	r3, [pc, #80]	; (8000924 <main+0x228>)
 80008d2:	9300      	str	r3, [sp, #0]
 80008d4:	2330      	movs	r3, #48	; 0x30
 80008d6:	2230      	movs	r2, #48	; 0x30
 80008d8:	2107      	movs	r1, #7
 80008da:	2028      	movs	r0, #40	; 0x28
 80008dc:	f000 fe55 	bl	800158a <OLED_DrawPicture>
    OLED_Refresh();
 80008e0:	f000 f95e 	bl	8000ba0 <OLED_Refresh>
    HAL_Delay(1700);
 80008e4:	f240 60a4 	movw	r0, #1700	; 0x6a4
 80008e8:	f001 f802 	bl	80018f0 <HAL_Delay>
    // 图片显示2
    OLED_ClearBuffer();
 80008ec:	f000 f9b2 	bl	8000c54 <OLED_ClearBuffer>
    OLED_DrawPicture(33, 2, 61, 58, icon_Bili, OLED_COLOR_NORMAL);
 80008f0:	2300      	movs	r3, #0
 80008f2:	9301      	str	r3, [sp, #4]
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <main+0x22c>)
 80008f6:	9300      	str	r3, [sp, #0]
 80008f8:	233a      	movs	r3, #58	; 0x3a
 80008fa:	223d      	movs	r2, #61	; 0x3d
 80008fc:	2102      	movs	r1, #2
 80008fe:	2021      	movs	r0, #33	; 0x21
 8000900:	f000 fe43 	bl	800158a <OLED_DrawPicture>
    OLED_Refresh();
 8000904:	f000 f94c 	bl	8000ba0 <OLED_Refresh>
    HAL_Delay(1700);
 8000908:	f240 60a4 	movw	r0, #1700	; 0x6a4
 800090c:	f000 fff0 	bl	80018f0 <HAL_Delay>
  while (1) {
 8000910:	e70f      	b.n	8000732 <main+0x36>
 8000912:	bf00      	nop
 8000914:	080038f0 	.word	0x080038f0
 8000918:	08003900 	.word	0x08003900
 800091c:	08003910 	.word	0x08003910
 8000920:	08003918 	.word	0x08003918
 8000924:	080056a0 	.word	0x080056a0
 8000928:	080054b8 	.word	0x080054b8

0800092c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b094      	sub	sp, #80	; 0x50
 8000930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000932:	f107 0320 	add.w	r3, r7, #32
 8000936:	2230      	movs	r2, #48	; 0x30
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f002 fb48 	bl	8002fd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000940:	f107 030c 	add.w	r3, r7, #12
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000950:	2300      	movs	r3, #0
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	4b28      	ldr	r3, [pc, #160]	; (80009f8 <SystemClock_Config+0xcc>)
 8000956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000958:	4a27      	ldr	r2, [pc, #156]	; (80009f8 <SystemClock_Config+0xcc>)
 800095a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095e:	6413      	str	r3, [r2, #64]	; 0x40
 8000960:	4b25      	ldr	r3, [pc, #148]	; (80009f8 <SystemClock_Config+0xcc>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800096c:	2300      	movs	r3, #0
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	4b22      	ldr	r3, [pc, #136]	; (80009fc <SystemClock_Config+0xd0>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a21      	ldr	r2, [pc, #132]	; (80009fc <SystemClock_Config+0xd0>)
 8000976:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800097a:	6013      	str	r3, [r2, #0]
 800097c:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <SystemClock_Config+0xd0>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000988:	2301      	movs	r3, #1
 800098a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800098c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000992:	2302      	movs	r3, #2
 8000994:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000996:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800099a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 3;
 800099c:	2303      	movs	r3, #3
 800099e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009a0:	23a8      	movs	r3, #168	; 0xa8
 80009a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009a4:	2302      	movs	r3, #2
 80009a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009a8:	2304      	movs	r3, #4
 80009aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ac:	f107 0320 	add.w	r3, r7, #32
 80009b0:	4618      	mov	r0, r3
 80009b2:	f001 fea9 	bl	8002708 <HAL_RCC_OscConfig>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009bc:	f000 f820 	bl	8000a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c0:	230f      	movs	r3, #15
 80009c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c4:	2302      	movs	r3, #2
 80009c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009d8:	f107 030c 	add.w	r3, r7, #12
 80009dc:	2105      	movs	r1, #5
 80009de:	4618      	mov	r0, r3
 80009e0:	f002 f90a 	bl	8002bf8 <HAL_RCC_ClockConfig>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009ea:	f000 f809 	bl	8000a00 <Error_Handler>
  }
}
 80009ee:	bf00      	nop
 80009f0:	3750      	adds	r7, #80	; 0x50
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40007000 	.word	0x40007000

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a04:	b672      	cpsid	i
}
 8000a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <Error_Handler+0x8>
	...

08000a0c <OLED_TransmitByte>:
uint8_t OLED_GRAM[129][8];

/**
 * @brief 向OLED发送一个字节
*/
void OLED_TransmitByte(uint8_t data, OLED_TransmitMode mode) {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af02      	add	r7, sp, #8
 8000a12:	4603      	mov	r3, r0
 8000a14:	460a      	mov	r2, r1
 8000a16:	71fb      	strb	r3, [r7, #7]
 8000a18:	4613      	mov	r3, r2
 8000a1a:	71bb      	strb	r3, [r7, #6]
	uint8_t send_buf[2] = { 0 };
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	81bb      	strh	r3, [r7, #12]
	if (mode)
 8000a20:	79bb      	ldrb	r3, [r7, #6]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d002      	beq.n	8000a2c <OLED_TransmitByte+0x20>
		send_buf[0] = 0x40;
 8000a26:	2340      	movs	r3, #64	; 0x40
 8000a28:	733b      	strb	r3, [r7, #12]
 8000a2a:	e001      	b.n	8000a30 <OLED_TransmitByte+0x24>
	else
		send_buf[0] = 0x00;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	733b      	strb	r3, [r7, #12]
	send_buf[1] = data;
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, send_buf, 2, 1);
 8000a34:	f107 020c 	add.w	r2, r7, #12
 8000a38:	2301      	movs	r3, #1
 8000a3a:	9300      	str	r3, [sp, #0]
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	217a      	movs	r1, #122	; 0x7a
 8000a40:	4803      	ldr	r0, [pc, #12]	; (8000a50 <OLED_TransmitByte+0x44>)
 8000a42:	f001 fb59 	bl	80020f8 <HAL_I2C_Master_Transmit>
}
 8000a46:	bf00      	nop
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000078 	.word	0x20000078

08000a54 <OLED_Init>:

/**
 * @brief 初始化OLED屏幕
*/
void OLED_Init(void) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	OLED_TransmitByte(0xAE, OLED_TRANSMIT_CMD); /*display off*/
 8000a58:	2100      	movs	r1, #0
 8000a5a:	20ae      	movs	r0, #174	; 0xae
 8000a5c:	f7ff ffd6 	bl	8000a0c <OLED_TransmitByte>
	OLED_TransmitByte(0x02, OLED_TRANSMIT_CMD); /*set lower column address*/
 8000a60:	2100      	movs	r1, #0
 8000a62:	2002      	movs	r0, #2
 8000a64:	f7ff ffd2 	bl	8000a0c <OLED_TransmitByte>
	OLED_TransmitByte(0x10, OLED_TRANSMIT_CMD); /*set higher column address*/
 8000a68:	2100      	movs	r1, #0
 8000a6a:	2010      	movs	r0, #16
 8000a6c:	f7ff ffce 	bl	8000a0c <OLED_TransmitByte>
	OLED_TransmitByte(0x40, OLED_TRANSMIT_CMD); /*set display start line*/
 8000a70:	2100      	movs	r1, #0
 8000a72:	2040      	movs	r0, #64	; 0x40
 8000a74:	f7ff ffca 	bl	8000a0c <OLED_TransmitByte>
	OLED_TransmitByte(0xB0, OLED_TRANSMIT_CMD); /*set page address*/
 8000a78:	2100      	movs	r1, #0
 8000a7a:	20b0      	movs	r0, #176	; 0xb0
 8000a7c:	f7ff ffc6 	bl	8000a0c <OLED_TransmitByte>

	OLED_TransmitByte(0x81, OLED_TRANSMIT_CMD); /*contract control*/
 8000a80:	2100      	movs	r1, #0
 8000a82:	2081      	movs	r0, #129	; 0x81
 8000a84:	f7ff ffc2 	bl	8000a0c <OLED_TransmitByte>
	OLED_TransmitByte(0xcf, OLED_TRANSMIT_CMD); /*128*/
 8000a88:	2100      	movs	r1, #0
 8000a8a:	20cf      	movs	r0, #207	; 0xcf
 8000a8c:	f7ff ffbe 	bl	8000a0c <OLED_TransmitByte>

	OLED_TransmitByte(0xA1, OLED_TRANSMIT_CMD); /*set segment remap*/
 8000a90:	2100      	movs	r1, #0
 8000a92:	20a1      	movs	r0, #161	; 0xa1
 8000a94:	f7ff ffba 	bl	8000a0c <OLED_TransmitByte>
	OLED_TransmitByte(0xA6, OLED_TRANSMIT_CMD); /*normal / reverse*/
 8000a98:	2100      	movs	r1, #0
 8000a9a:	20a6      	movs	r0, #166	; 0xa6
 8000a9c:	f7ff ffb6 	bl	8000a0c <OLED_TransmitByte>
	OLED_TransmitByte(0xA8, OLED_TRANSMIT_CMD); /*multiplex ratio*/
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	20a8      	movs	r0, #168	; 0xa8
 8000aa4:	f7ff ffb2 	bl	8000a0c <OLED_TransmitByte>
	OLED_TransmitByte(0x3F, OLED_TRANSMIT_CMD); /*duty = 1/64*/
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	203f      	movs	r0, #63	; 0x3f
 8000aac:	f7ff ffae 	bl	8000a0c <OLED_TransmitByte>
	OLED_TransmitByte(0xad, OLED_TRANSMIT_CMD); /*set charge pump enable*/
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	20ad      	movs	r0, #173	; 0xad
 8000ab4:	f7ff ffaa 	bl	8000a0c <OLED_TransmitByte>
	OLED_TransmitByte(0x8b, OLED_TRANSMIT_CMD); /* 0x8B 内供 VCC */
 8000ab8:	2100      	movs	r1, #0
 8000aba:	208b      	movs	r0, #139	; 0x8b
 8000abc:	f7ff ffa6 	bl	8000a0c <OLED_TransmitByte>
	OLED_TransmitByte(0x33, OLED_TRANSMIT_CMD); /*0X30---0X33 set VPP 9V */
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	2033      	movs	r0, #51	; 0x33
 8000ac4:	f7ff ffa2 	bl	8000a0c <OLED_TransmitByte>
	OLED_TransmitByte(0xC8, OLED_TRANSMIT_CMD); /*Com scan direction*/
 8000ac8:	2100      	movs	r1, #0
 8000aca:	20c8      	movs	r0, #200	; 0xc8
 8000acc:	f7ff ff9e 	bl	8000a0c <OLED_TransmitByte>
	OLED_TransmitByte(0xD3, OLED_TRANSMIT_CMD); /*set display offset*/
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	20d3      	movs	r0, #211	; 0xd3
 8000ad4:	f7ff ff9a 	bl	8000a0c <OLED_TransmitByte>
	OLED_TransmitByte(0x00, OLED_TRANSMIT_CMD); /* 0x20 */
 8000ad8:	2100      	movs	r1, #0
 8000ada:	2000      	movs	r0, #0
 8000adc:	f7ff ff96 	bl	8000a0c <OLED_TransmitByte>

	OLED_TransmitByte(0xD5, OLED_TRANSMIT_CMD); /*set osc division*/
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	20d5      	movs	r0, #213	; 0xd5
 8000ae4:	f7ff ff92 	bl	8000a0c <OLED_TransmitByte>
	OLED_TransmitByte(0x80, OLED_TRANSMIT_CMD);
 8000ae8:	2100      	movs	r1, #0
 8000aea:	2080      	movs	r0, #128	; 0x80
 8000aec:	f7ff ff8e 	bl	8000a0c <OLED_TransmitByte>

	OLED_TransmitByte(0xD9, OLED_TRANSMIT_CMD); /*set pre-charge period*/
 8000af0:	2100      	movs	r1, #0
 8000af2:	20d9      	movs	r0, #217	; 0xd9
 8000af4:	f7ff ff8a 	bl	8000a0c <OLED_TransmitByte>
	OLED_TransmitByte(0x1f, OLED_TRANSMIT_CMD); /*0x22*/
 8000af8:	2100      	movs	r1, #0
 8000afa:	201f      	movs	r0, #31
 8000afc:	f7ff ff86 	bl	8000a0c <OLED_TransmitByte>

	OLED_TransmitByte(0xDA, OLED_TRANSMIT_CMD); /*set COM pins*/
 8000b00:	2100      	movs	r1, #0
 8000b02:	20da      	movs	r0, #218	; 0xda
 8000b04:	f7ff ff82 	bl	8000a0c <OLED_TransmitByte>
	OLED_TransmitByte(0x12, OLED_TRANSMIT_CMD);
 8000b08:	2100      	movs	r1, #0
 8000b0a:	2012      	movs	r0, #18
 8000b0c:	f7ff ff7e 	bl	8000a0c <OLED_TransmitByte>

	OLED_TransmitByte(0xdb, OLED_TRANSMIT_CMD); /*set vcomh*/
 8000b10:	2100      	movs	r1, #0
 8000b12:	20db      	movs	r0, #219	; 0xdb
 8000b14:	f7ff ff7a 	bl	8000a0c <OLED_TransmitByte>
	OLED_TransmitByte(0x40, OLED_TRANSMIT_CMD);
 8000b18:	2100      	movs	r1, #0
 8000b1a:	2040      	movs	r0, #64	; 0x40
 8000b1c:	f7ff ff76 	bl	8000a0c <OLED_TransmitByte>

	OLED_ClearBuffer();
 8000b20:	f000 f898 	bl	8000c54 <OLED_ClearBuffer>
	OLED_Refresh();
 8000b24:	f000 f83c 	bl	8000ba0 <OLED_Refresh>
	OLED_TransmitByte(0xAF, OLED_TRANSMIT_CMD); /*display ON*/
 8000b28:	2100      	movs	r1, #0
 8000b2a:	20af      	movs	r0, #175	; 0xaf
 8000b2c:	f7ff ff6e 	bl	8000a0c <OLED_TransmitByte>
}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <OLED_SetColorMode>:
 * @brief 设置颜色模式 黑底白字或白底黑字
 *
 * @param ColorMode 颜色模式COLOR_NORMAL/COLOR_REVERSED
 *
*/
void OLED_SetColorMode(OLED_ColorMode mode) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
	if (mode == OLED_COLOR_NORMAL) {
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d103      	bne.n	8000b4c <OLED_SetColorMode+0x18>
		OLED_TransmitByte(0xA6, OLED_TRANSMIT_CMD); //正常显示
 8000b44:	2100      	movs	r1, #0
 8000b46:	20a6      	movs	r0, #166	; 0xa6
 8000b48:	f7ff ff60 	bl	8000a0c <OLED_TransmitByte>
	}
	if (mode == OLED_COLOR_REVERSED) {
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d103      	bne.n	8000b5a <OLED_SetColorMode+0x26>
		OLED_TransmitByte(0xA7, OLED_TRANSMIT_CMD); //反色显示
 8000b52:	2100      	movs	r1, #0
 8000b54:	20a7      	movs	r0, #167	; 0xa7
 8000b56:	f7ff ff59 	bl	8000a0c <OLED_TransmitByte>
	}
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <OLED_SetOrientation>:
 * @brief 设置显示方向 0°或180°
 *
 * @param Orientation 显示方向
 *
*/
void OLED_SetOrientation(OLED_Orientation mode) {
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	4603      	mov	r3, r0
 8000b6a:	71fb      	strb	r3, [r7, #7]
	if (mode == OLED_Orientation_0) {
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d107      	bne.n	8000b82 <OLED_SetOrientation+0x20>
		OLED_TransmitByte(0xC8, OLED_TRANSMIT_CMD); //正常显示
 8000b72:	2100      	movs	r1, #0
 8000b74:	20c8      	movs	r0, #200	; 0xc8
 8000b76:	f7ff ff49 	bl	8000a0c <OLED_TransmitByte>
		OLED_TransmitByte(0xA1, OLED_TRANSMIT_CMD);
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	20a1      	movs	r0, #161	; 0xa1
 8000b7e:	f7ff ff45 	bl	8000a0c <OLED_TransmitByte>
	}
	if (mode == OLED_Orientation_180) {
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d107      	bne.n	8000b98 <OLED_SetOrientation+0x36>
		OLED_TransmitByte(0xC0, OLED_TRANSMIT_CMD); //反转显示
 8000b88:	2100      	movs	r1, #0
 8000b8a:	20c0      	movs	r0, #192	; 0xc0
 8000b8c:	f7ff ff3e 	bl	8000a0c <OLED_TransmitByte>
		OLED_TransmitByte(0xA0, OLED_TRANSMIT_CMD);
 8000b90:	2100      	movs	r1, #0
 8000b92:	20a0      	movs	r0, #160	; 0xa0
 8000b94:	f7ff ff3a 	bl	8000a0c <OLED_TransmitByte>
	}
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <OLED_Refresh>:
}

/**
 * @brief 将缓存内容更新到屏幕显示
*/
void OLED_Refresh(void) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b0a4      	sub	sp, #144	; 0x90
 8000ba4:	af02      	add	r7, sp, #8
	uint8_t i, n;
	uint8_t send_buf[129] = { 0 };
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	607b      	str	r3, [r7, #4]
 8000baa:	f107 0308 	add.w	r3, r7, #8
 8000bae:	227d      	movs	r2, #125	; 0x7d
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f002 fa0c 	bl	8002fd0 <memset>
	for (i = 0; i < 8; i++) {
 8000bb8:	2300      	movs	r3, #0
 8000bba:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8000bbe:	e03b      	b.n	8000c38 <OLED_Refresh+0x98>
		OLED_TransmitByte(0xb0 + i, OLED_TRANSMIT_CMD); //设置行起始地址
 8000bc0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000bc4:	3b50      	subs	r3, #80	; 0x50
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff ff1e 	bl	8000a0c <OLED_TransmitByte>
		OLED_TransmitByte(0x02, OLED_TRANSMIT_CMD);   //设置低列起始地址
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	2002      	movs	r0, #2
 8000bd4:	f7ff ff1a 	bl	8000a0c <OLED_TransmitByte>
		OLED_TransmitByte(0x10, OLED_TRANSMIT_CMD);   //设置高列起始地址
 8000bd8:	2100      	movs	r1, #0
 8000bda:	2010      	movs	r0, #16
 8000bdc:	f7ff ff16 	bl	8000a0c <OLED_TransmitByte>
		send_buf[0] = 0x40;
 8000be0:	2340      	movs	r3, #64	; 0x40
 8000be2:	713b      	strb	r3, [r7, #4]
		for (n = 0; n < 128; n++) {
 8000be4:	2300      	movs	r3, #0
 8000be6:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8000bea:	e014      	b.n	8000c16 <OLED_Refresh+0x76>
			send_buf[n + 1] = OLED_GRAM[n][i];
 8000bec:	f897 1086 	ldrb.w	r1, [r7, #134]	; 0x86
 8000bf0:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8000bf4:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	4814      	ldr	r0, [pc, #80]	; (8000c4c <OLED_Refresh+0xac>)
 8000bfc:	00c9      	lsls	r1, r1, #3
 8000bfe:	4401      	add	r1, r0
 8000c00:	440a      	add	r2, r1
 8000c02:	7812      	ldrb	r2, [r2, #0]
 8000c04:	3388      	adds	r3, #136	; 0x88
 8000c06:	443b      	add	r3, r7
 8000c08:	f803 2c84 	strb.w	r2, [r3, #-132]
		for (n = 0; n < 128; n++) {
 8000c0c:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000c10:	3301      	adds	r3, #1
 8000c12:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8000c16:	f997 3086 	ldrsb.w	r3, [r7, #134]	; 0x86
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	dae6      	bge.n	8000bec <OLED_Refresh+0x4c>
		}
		HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, send_buf, 129, 20);
 8000c1e:	1d3a      	adds	r2, r7, #4
 8000c20:	2314      	movs	r3, #20
 8000c22:	9300      	str	r3, [sp, #0]
 8000c24:	2381      	movs	r3, #129	; 0x81
 8000c26:	217a      	movs	r1, #122	; 0x7a
 8000c28:	4809      	ldr	r0, [pc, #36]	; (8000c50 <OLED_Refresh+0xb0>)
 8000c2a:	f001 fa65 	bl	80020f8 <HAL_I2C_Master_Transmit>
	for (i = 0; i < 8; i++) {
 8000c2e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000c32:	3301      	adds	r3, #1
 8000c34:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8000c38:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000c3c:	2b07      	cmp	r3, #7
 8000c3e:	d9bf      	bls.n	8000bc0 <OLED_Refresh+0x20>
	}
}
 8000c40:	bf00      	nop
 8000c42:	bf00      	nop
 8000c44:	3788      	adds	r7, #136	; 0x88
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	200000cc 	.word	0x200000cc
 8000c50:	20000078 	.word	0x20000078

08000c54 <OLED_ClearBuffer>:

/**
 * @brief 缓存清屏
*/
void OLED_ClearBuffer(void) {
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++) {
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	71fb      	strb	r3, [r7, #7]
 8000c5e:	e014      	b.n	8000c8a <OLED_ClearBuffer+0x36>
		for (n = 0; n < 128; n++) {
 8000c60:	2300      	movs	r3, #0
 8000c62:	71bb      	strb	r3, [r7, #6]
 8000c64:	e00a      	b.n	8000c7c <OLED_ClearBuffer+0x28>
			OLED_GRAM[n][i] = 0;   //清除所有数据
 8000c66:	79ba      	ldrb	r2, [r7, #6]
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	490d      	ldr	r1, [pc, #52]	; (8000ca0 <OLED_ClearBuffer+0x4c>)
 8000c6c:	00d2      	lsls	r2, r2, #3
 8000c6e:	440a      	add	r2, r1
 8000c70:	4413      	add	r3, r2
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
		for (n = 0; n < 128; n++) {
 8000c76:	79bb      	ldrb	r3, [r7, #6]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	71bb      	strb	r3, [r7, #6]
 8000c7c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	daf0      	bge.n	8000c66 <OLED_ClearBuffer+0x12>
	for (i = 0; i < 8; i++) {
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	3301      	adds	r3, #1
 8000c88:	71fb      	strb	r3, [r7, #7]
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	2b07      	cmp	r3, #7
 8000c8e:	d9e7      	bls.n	8000c60 <OLED_ClearBuffer+0xc>
		}
	}
//	OLED_Refresh();   //更新显示
}
 8000c90:	bf00      	nop
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	200000cc 	.word	0x200000cc

08000ca4 <OLED_DrawPixel>:
 *
 * @param x X坐标 [0,127]
 * @param y Y坐标 [0,63]
 * @param mode 颜色模式
*/
void OLED_DrawPixel(uint8_t x, uint8_t y, OLED_ColorMode mode) {
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
 8000cae:	460b      	mov	r3, r1
 8000cb0:	71bb      	strb	r3, [r7, #6]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	717b      	strb	r3, [r7, #5]
	uint8_t i, m, n;
	i = y / 8;
 8000cb6:	79bb      	ldrb	r3, [r7, #6]
 8000cb8:	08db      	lsrs	r3, r3, #3
 8000cba:	73fb      	strb	r3, [r7, #15]
	m = y % 8;
 8000cbc:	79bb      	ldrb	r3, [r7, #6]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	73bb      	strb	r3, [r7, #14]
	n = 1 << m;
 8000cc4:	7bbb      	ldrb	r3, [r7, #14]
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	737b      	strb	r3, [r7, #13]
	if (!mode)
 8000cce:	797b      	ldrb	r3, [r7, #5]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d112      	bne.n	8000cfa <OLED_DrawPixel+0x56>
		OLED_GRAM[x][i] |= n;
 8000cd4:	79fa      	ldrb	r2, [r7, #7]
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	4925      	ldr	r1, [pc, #148]	; (8000d70 <OLED_DrawPixel+0xcc>)
 8000cda:	00d2      	lsls	r2, r2, #3
 8000cdc:	440a      	add	r2, r1
 8000cde:	4413      	add	r3, r2
 8000ce0:	7818      	ldrb	r0, [r3, #0]
 8000ce2:	79fa      	ldrb	r2, [r7, #7]
 8000ce4:	7bfb      	ldrb	r3, [r7, #15]
 8000ce6:	7b79      	ldrb	r1, [r7, #13]
 8000ce8:	4301      	orrs	r1, r0
 8000cea:	b2c8      	uxtb	r0, r1
 8000cec:	4920      	ldr	r1, [pc, #128]	; (8000d70 <OLED_DrawPixel+0xcc>)
 8000cee:	00d2      	lsls	r2, r2, #3
 8000cf0:	440a      	add	r2, r1
 8000cf2:	4413      	add	r3, r2
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	701a      	strb	r2, [r3, #0]
	else {
		OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
		OLED_GRAM[x][i] |= n;
		OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
	}
}
 8000cf8:	e033      	b.n	8000d62 <OLED_DrawPixel+0xbe>
		OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 8000cfa:	79fa      	ldrb	r2, [r7, #7]
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
 8000cfe:	491c      	ldr	r1, [pc, #112]	; (8000d70 <OLED_DrawPixel+0xcc>)
 8000d00:	00d2      	lsls	r2, r2, #3
 8000d02:	440a      	add	r2, r1
 8000d04:	4413      	add	r3, r2
 8000d06:	7819      	ldrb	r1, [r3, #0]
 8000d08:	79fa      	ldrb	r2, [r7, #7]
 8000d0a:	7bfb      	ldrb	r3, [r7, #15]
 8000d0c:	43c9      	mvns	r1, r1
 8000d0e:	b2c8      	uxtb	r0, r1
 8000d10:	4917      	ldr	r1, [pc, #92]	; (8000d70 <OLED_DrawPixel+0xcc>)
 8000d12:	00d2      	lsls	r2, r2, #3
 8000d14:	440a      	add	r2, r1
 8000d16:	4413      	add	r3, r2
 8000d18:	4602      	mov	r2, r0
 8000d1a:	701a      	strb	r2, [r3, #0]
		OLED_GRAM[x][i] |= n;
 8000d1c:	79fa      	ldrb	r2, [r7, #7]
 8000d1e:	7bfb      	ldrb	r3, [r7, #15]
 8000d20:	4913      	ldr	r1, [pc, #76]	; (8000d70 <OLED_DrawPixel+0xcc>)
 8000d22:	00d2      	lsls	r2, r2, #3
 8000d24:	440a      	add	r2, r1
 8000d26:	4413      	add	r3, r2
 8000d28:	7818      	ldrb	r0, [r3, #0]
 8000d2a:	79fa      	ldrb	r2, [r7, #7]
 8000d2c:	7bfb      	ldrb	r3, [r7, #15]
 8000d2e:	7b79      	ldrb	r1, [r7, #13]
 8000d30:	4301      	orrs	r1, r0
 8000d32:	b2c8      	uxtb	r0, r1
 8000d34:	490e      	ldr	r1, [pc, #56]	; (8000d70 <OLED_DrawPixel+0xcc>)
 8000d36:	00d2      	lsls	r2, r2, #3
 8000d38:	440a      	add	r2, r1
 8000d3a:	4413      	add	r3, r2
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	701a      	strb	r2, [r3, #0]
		OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 8000d40:	79fa      	ldrb	r2, [r7, #7]
 8000d42:	7bfb      	ldrb	r3, [r7, #15]
 8000d44:	490a      	ldr	r1, [pc, #40]	; (8000d70 <OLED_DrawPixel+0xcc>)
 8000d46:	00d2      	lsls	r2, r2, #3
 8000d48:	440a      	add	r2, r1
 8000d4a:	4413      	add	r3, r2
 8000d4c:	7819      	ldrb	r1, [r3, #0]
 8000d4e:	79fa      	ldrb	r2, [r7, #7]
 8000d50:	7bfb      	ldrb	r3, [r7, #15]
 8000d52:	43c9      	mvns	r1, r1
 8000d54:	b2c8      	uxtb	r0, r1
 8000d56:	4906      	ldr	r1, [pc, #24]	; (8000d70 <OLED_DrawPixel+0xcc>)
 8000d58:	00d2      	lsls	r2, r2, #3
 8000d5a:	440a      	add	r2, r1
 8000d5c:	4413      	add	r3, r2
 8000d5e:	4602      	mov	r2, r0
 8000d60:	701a      	strb	r2, [r3, #0]
}
 8000d62:	bf00      	nop
 8000d64:	3714      	adds	r7, #20
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	200000cc 	.word	0x200000cc

08000d74 <OLED_DrawLine>:
 * @param y0 起点Y坐标 [0,63]
 * @param x1 终点X坐标 [0,127]
 * @param y1 终点Y坐标 [0,63]
 * @param mode 颜色模式
*/
void OLED_DrawLine(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, OLED_ColorMode mode) {
 8000d74:	b590      	push	{r4, r7, lr}
 8000d76:	b08d      	sub	sp, #52	; 0x34
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	4611      	mov	r1, r2
 8000d80:	461a      	mov	r2, r3
 8000d82:	4623      	mov	r3, r4
 8000d84:	71fb      	strb	r3, [r7, #7]
 8000d86:	4603      	mov	r3, r0
 8000d88:	71bb      	strb	r3, [r7, #6]
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	717b      	strb	r3, [r7, #5]
 8000d8e:	4613      	mov	r3, r2
 8000d90:	713b      	strb	r3, [r7, #4]
	int xerr = 0, yerr = 0, delta_x, delta_y, distance;
 8000d92:	2300      	movs	r3, #0
 8000d94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d96:	2300      	movs	r3, #0
 8000d98:	62bb      	str	r3, [r7, #40]	; 0x28
	int incx, incy, uRow, uCol;
	delta_x = x1 - x0; //计算坐标增量
 8000d9a:	797a      	ldrb	r2, [r7, #5]
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	1ad3      	subs	r3, r2, r3
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
	delta_y = y1 - y0;
 8000da2:	793a      	ldrb	r2, [r7, #4]
 8000da4:	79bb      	ldrb	r3, [r7, #6]
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	623b      	str	r3, [r7, #32]
	uRow = x0;//画线起点坐标
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	613b      	str	r3, [r7, #16]
	uCol = y0;
 8000dae:	79bb      	ldrb	r3, [r7, #6]
 8000db0:	60fb      	str	r3, [r7, #12]
	if (delta_x > 0) {
 8000db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	dd02      	ble.n	8000dbe <OLED_DrawLine+0x4a>
		incx = 1;
 8000db8:	2301      	movs	r3, #1
 8000dba:	61bb      	str	r3, [r7, #24]
 8000dbc:	e00b      	b.n	8000dd6 <OLED_DrawLine+0x62>
	}
	else if (delta_x == 0) {
 8000dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d102      	bne.n	8000dca <OLED_DrawLine+0x56>
		incx = 0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61bb      	str	r3, [r7, #24]
 8000dc8:	e005      	b.n	8000dd6 <OLED_DrawLine+0x62>
	}
	else {
		incx = -1;
 8000dca:	f04f 33ff 	mov.w	r3, #4294967295
 8000dce:	61bb      	str	r3, [r7, #24]
		delta_x = -delta_x;
 8000dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd2:	425b      	negs	r3, r3
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if (delta_y > 0) {
 8000dd6:	6a3b      	ldr	r3, [r7, #32]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	dd02      	ble.n	8000de2 <OLED_DrawLine+0x6e>
		incy = 1;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	e00b      	b.n	8000dfa <OLED_DrawLine+0x86>
	}
	else if (delta_y == 0) {
 8000de2:	6a3b      	ldr	r3, [r7, #32]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d102      	bne.n	8000dee <OLED_DrawLine+0x7a>
		incy = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	e005      	b.n	8000dfa <OLED_DrawLine+0x86>
	}
	else {
		incy = -1;
 8000dee:	f04f 33ff 	mov.w	r3, #4294967295
 8000df2:	617b      	str	r3, [r7, #20]
		delta_y = -delta_y;
 8000df4:	6a3b      	ldr	r3, [r7, #32]
 8000df6:	425b      	negs	r3, r3
 8000df8:	623b      	str	r3, [r7, #32]
	}
	if (delta_x > delta_y) {
 8000dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dfc:	6a3b      	ldr	r3, [r7, #32]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	dd02      	ble.n	8000e08 <OLED_DrawLine+0x94>
		distance = delta_x;
 8000e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e04:	61fb      	str	r3, [r7, #28]
 8000e06:	e001      	b.n	8000e0c <OLED_DrawLine+0x98>
	}
	else {
		distance = delta_y;
 8000e08:	6a3b      	ldr	r3, [r7, #32]
 8000e0a:	61fb      	str	r3, [r7, #28]
	}
	for (int t = 0; t <= distance + 1; t++) {
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	e02b      	b.n	8000e6a <OLED_DrawLine+0xf6>
		OLED_DrawPixel(uRow, uCol, mode);
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	68fa      	ldr	r2, [r7, #12]
 8000e18:	b2d1      	uxtb	r1, r2
 8000e1a:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff ff40 	bl	8000ca4 <OLED_DrawPixel>
		xerr += delta_x;
 8000e24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e28:	4413      	add	r3, r2
 8000e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
		yerr += delta_y;
 8000e2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e2e:	6a3b      	ldr	r3, [r7, #32]
 8000e30:	4413      	add	r3, r2
 8000e32:	62bb      	str	r3, [r7, #40]	; 0x28
		if (xerr > distance) {
 8000e34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	dd07      	ble.n	8000e4c <OLED_DrawLine+0xd8>
			xerr -= distance;
 8000e3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	62fb      	str	r3, [r7, #44]	; 0x2c
			uRow += incx;
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	4413      	add	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
		}
		if (yerr > distance) {
 8000e4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	dd07      	ble.n	8000e64 <OLED_DrawLine+0xf0>
			yerr -= distance;
 8000e54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	62bb      	str	r3, [r7, #40]	; 0x28
			uCol += incy;
 8000e5c:	68fa      	ldr	r2, [r7, #12]
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	4413      	add	r3, r2
 8000e62:	60fb      	str	r3, [r7, #12]
	for (int t = 0; t <= distance + 1; t++) {
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	3301      	adds	r3, #1
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	68ba      	ldr	r2, [r7, #8]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	ddce      	ble.n	8000e12 <OLED_DrawLine+0x9e>
		}
	}
}
 8000e74:	bf00      	nop
 8000e76:	bf00      	nop
 8000e78:	3734      	adds	r7, #52	; 0x34
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd90      	pop	{r4, r7, pc}

08000e7e <OLED_DrawRectangle>:
 * @param y0 上端点Y坐标 [0,63]
 * @param x1 右端点X坐标 [0,127]
 * @param y1 下端点Y坐标 [0,63]
 * @param mode 颜色模式
*/
void OLED_DrawRectangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, OLED_ColorMode mode) {
 8000e7e:	b590      	push	{r4, r7, lr}
 8000e80:	b085      	sub	sp, #20
 8000e82:	af02      	add	r7, sp, #8
 8000e84:	4604      	mov	r4, r0
 8000e86:	4608      	mov	r0, r1
 8000e88:	4611      	mov	r1, r2
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	4623      	mov	r3, r4
 8000e8e:	71fb      	strb	r3, [r7, #7]
 8000e90:	4603      	mov	r3, r0
 8000e92:	71bb      	strb	r3, [r7, #6]
 8000e94:	460b      	mov	r3, r1
 8000e96:	717b      	strb	r3, [r7, #5]
 8000e98:	4613      	mov	r3, r2
 8000e9a:	713b      	strb	r3, [r7, #4]
	// 判断输入参数是否合理
	if (x0 >= x1 || y0 >= y1) {
 8000e9c:	79fa      	ldrb	r2, [r7, #7]
 8000e9e:	797b      	ldrb	r3, [r7, #5]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d228      	bcs.n	8000ef6 <OLED_DrawRectangle+0x78>
 8000ea4:	79ba      	ldrb	r2, [r7, #6]
 8000ea6:	793b      	ldrb	r3, [r7, #4]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d224      	bcs.n	8000ef6 <OLED_DrawRectangle+0x78>
		return;
	}
	OLED_DrawLine(x0, y0, x1, y0, mode);
 8000eac:	79bc      	ldrb	r4, [r7, #6]
 8000eae:	797a      	ldrb	r2, [r7, #5]
 8000eb0:	79b9      	ldrb	r1, [r7, #6]
 8000eb2:	79f8      	ldrb	r0, [r7, #7]
 8000eb4:	7e3b      	ldrb	r3, [r7, #24]
 8000eb6:	9300      	str	r3, [sp, #0]
 8000eb8:	4623      	mov	r3, r4
 8000eba:	f7ff ff5b 	bl	8000d74 <OLED_DrawLine>
	OLED_DrawLine(x0, y1, x1, y1, mode);
 8000ebe:	793c      	ldrb	r4, [r7, #4]
 8000ec0:	797a      	ldrb	r2, [r7, #5]
 8000ec2:	7939      	ldrb	r1, [r7, #4]
 8000ec4:	79f8      	ldrb	r0, [r7, #7]
 8000ec6:	7e3b      	ldrb	r3, [r7, #24]
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	4623      	mov	r3, r4
 8000ecc:	f7ff ff52 	bl	8000d74 <OLED_DrawLine>
	OLED_DrawLine(x0, y0, x0, y1, mode);
 8000ed0:	793c      	ldrb	r4, [r7, #4]
 8000ed2:	79fa      	ldrb	r2, [r7, #7]
 8000ed4:	79b9      	ldrb	r1, [r7, #6]
 8000ed6:	79f8      	ldrb	r0, [r7, #7]
 8000ed8:	7e3b      	ldrb	r3, [r7, #24]
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	4623      	mov	r3, r4
 8000ede:	f7ff ff49 	bl	8000d74 <OLED_DrawLine>
	OLED_DrawLine(x1, y0, x1, y1, mode);
 8000ee2:	793c      	ldrb	r4, [r7, #4]
 8000ee4:	797a      	ldrb	r2, [r7, #5]
 8000ee6:	79b9      	ldrb	r1, [r7, #6]
 8000ee8:	7978      	ldrb	r0, [r7, #5]
 8000eea:	7e3b      	ldrb	r3, [r7, #24]
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	4623      	mov	r3, r4
 8000ef0:	f7ff ff40 	bl	8000d74 <OLED_DrawLine>
 8000ef4:	e000      	b.n	8000ef8 <OLED_DrawRectangle+0x7a>
		return;
 8000ef6:	bf00      	nop
}
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd90      	pop	{r4, r7, pc}

08000efe <_OLED_DrawCircleSection>:
 * @brief 空心圆辅助函数
 *
 * @note 参考开源图形库u8g2
 *
*/
void _OLED_DrawCircleSection(uint8_t x, uint8_t y, uint8_t x0, uint8_t y0, OLED_DrawCircleOption option, OLED_ColorMode mode) {
 8000efe:	b590      	push	{r4, r7, lr}
 8000f00:	b083      	sub	sp, #12
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	4604      	mov	r4, r0
 8000f06:	4608      	mov	r0, r1
 8000f08:	4611      	mov	r1, r2
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	4623      	mov	r3, r4
 8000f0e:	71fb      	strb	r3, [r7, #7]
 8000f10:	4603      	mov	r3, r0
 8000f12:	71bb      	strb	r3, [r7, #6]
 8000f14:	460b      	mov	r3, r1
 8000f16:	717b      	strb	r3, [r7, #5]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	713b      	strb	r3, [r7, #4]
    /* upper right */
    if ( option & CIRCLE_UPPER_RIGHT ) {
 8000f1c:	7e3b      	ldrb	r3, [r7, #24]
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d017      	beq.n	8000f56 <_OLED_DrawCircleSection+0x58>
	  OLED_DrawPixel(x0 + x, y0 - y, mode);
 8000f26:	797a      	ldrb	r2, [r7, #5]
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	b2d8      	uxtb	r0, r3
 8000f2e:	793a      	ldrb	r2, [r7, #4]
 8000f30:	79bb      	ldrb	r3, [r7, #6]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	7f3a      	ldrb	r2, [r7, #28]
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f7ff feb3 	bl	8000ca4 <OLED_DrawPixel>
      OLED_DrawPixel(x0 + y, y0 - x, mode);
 8000f3e:	797a      	ldrb	r2, [r7, #5]
 8000f40:	79bb      	ldrb	r3, [r7, #6]
 8000f42:	4413      	add	r3, r2
 8000f44:	b2d8      	uxtb	r0, r3
 8000f46:	793a      	ldrb	r2, [r7, #4]
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	7f3a      	ldrb	r2, [r7, #28]
 8000f50:	4619      	mov	r1, r3
 8000f52:	f7ff fea7 	bl	8000ca4 <OLED_DrawPixel>
    }

    /* upper left */
    if ( option & CIRCLE_UPPER_LEFT ) {
 8000f56:	7e3b      	ldrb	r3, [r7, #24]
 8000f58:	f003 0302 	and.w	r3, r3, #2
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d017      	beq.n	8000f90 <_OLED_DrawCircleSection+0x92>
      OLED_DrawPixel(x0 - x, y0 - y, mode);
 8000f60:	797a      	ldrb	r2, [r7, #5]
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	b2d8      	uxtb	r0, r3
 8000f68:	793a      	ldrb	r2, [r7, #4]
 8000f6a:	79bb      	ldrb	r3, [r7, #6]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	7f3a      	ldrb	r2, [r7, #28]
 8000f72:	4619      	mov	r1, r3
 8000f74:	f7ff fe96 	bl	8000ca4 <OLED_DrawPixel>
      OLED_DrawPixel(x0 - y, y0 - x, mode);
 8000f78:	797a      	ldrb	r2, [r7, #5]
 8000f7a:	79bb      	ldrb	r3, [r7, #6]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	b2d8      	uxtb	r0, r3
 8000f80:	793a      	ldrb	r2, [r7, #4]
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	7f3a      	ldrb	r2, [r7, #28]
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	f7ff fe8a 	bl	8000ca4 <OLED_DrawPixel>
    }

    /* lower right */
    if ( option & CIRCLE_LOWER_LEFT ) {
 8000f90:	7e3b      	ldrb	r3, [r7, #24]
 8000f92:	f003 0304 	and.w	r3, r3, #4
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d017      	beq.n	8000fca <_OLED_DrawCircleSection+0xcc>
      OLED_DrawPixel(x0 + x, y0 + y, mode);
 8000f9a:	797a      	ldrb	r2, [r7, #5]
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	b2d8      	uxtb	r0, r3
 8000fa2:	793a      	ldrb	r2, [r7, #4]
 8000fa4:	79bb      	ldrb	r3, [r7, #6]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	7f3a      	ldrb	r2, [r7, #28]
 8000fac:	4619      	mov	r1, r3
 8000fae:	f7ff fe79 	bl	8000ca4 <OLED_DrawPixel>
      OLED_DrawPixel(x0 + y, y0 + x, mode);
 8000fb2:	797a      	ldrb	r2, [r7, #5]
 8000fb4:	79bb      	ldrb	r3, [r7, #6]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	b2d8      	uxtb	r0, r3
 8000fba:	793a      	ldrb	r2, [r7, #4]
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	7f3a      	ldrb	r2, [r7, #28]
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f7ff fe6d 	bl	8000ca4 <OLED_DrawPixel>
    }

    /* lower left */
    if ( option & CIRCLE_LOWER_RIGHT ) {
 8000fca:	7e3b      	ldrb	r3, [r7, #24]
 8000fcc:	f003 0308 	and.w	r3, r3, #8
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d017      	beq.n	8001004 <_OLED_DrawCircleSection+0x106>
      OLED_DrawPixel(x0 - x, y0 + y, mode);
 8000fd4:	797a      	ldrb	r2, [r7, #5]
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	b2d8      	uxtb	r0, r3
 8000fdc:	793a      	ldrb	r2, [r7, #4]
 8000fde:	79bb      	ldrb	r3, [r7, #6]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	7f3a      	ldrb	r2, [r7, #28]
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	f7ff fe5c 	bl	8000ca4 <OLED_DrawPixel>
      OLED_DrawPixel(x0 - y, y0 + x, mode);
 8000fec:	797a      	ldrb	r2, [r7, #5]
 8000fee:	79bb      	ldrb	r3, [r7, #6]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	b2d8      	uxtb	r0, r3
 8000ff4:	793a      	ldrb	r2, [r7, #4]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	7f3a      	ldrb	r2, [r7, #28]
 8000ffe:	4619      	mov	r1, r3
 8001000:	f7ff fe50 	bl	8000ca4 <OLED_DrawPixel>
    }
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	bd90      	pop	{r4, r7, pc}

0800100c <OLED_DrawCircle>:
 * @param mode 颜色模式
 *
 * @note 参考开源图形库u8g2
 *
*/
void OLED_DrawCircle(uint8_t x0, uint8_t y0, uint8_t rad, OLED_DrawCircleOption option, OLED_ColorMode mode) {
 800100c:	b590      	push	{r4, r7, lr}
 800100e:	b089      	sub	sp, #36	; 0x24
 8001010:	af02      	add	r7, sp, #8
 8001012:	4604      	mov	r4, r0
 8001014:	4608      	mov	r0, r1
 8001016:	4611      	mov	r1, r2
 8001018:	461a      	mov	r2, r3
 800101a:	4623      	mov	r3, r4
 800101c:	71fb      	strb	r3, [r7, #7]
 800101e:	4603      	mov	r3, r0
 8001020:	71bb      	strb	r3, [r7, #6]
 8001022:	460b      	mov	r3, r1
 8001024:	717b      	strb	r3, [r7, #5]
 8001026:	4613      	mov	r3, r2
 8001028:	713b      	strb	r3, [r7, #4]
    int ddF_x;
    int ddF_y;
    uint16_t x;
    uint16_t y;

    f = 1;
 800102a:	2301      	movs	r3, #1
 800102c:	617b      	str	r3, [r7, #20]
    f -= rad;
 800102e:	797b      	ldrb	r3, [r7, #5]
 8001030:	697a      	ldr	r2, [r7, #20]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	617b      	str	r3, [r7, #20]
    ddF_x = 1;
 8001036:	2301      	movs	r3, #1
 8001038:	613b      	str	r3, [r7, #16]
    ddF_y = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
    ddF_y -= rad;
 800103e:	797b      	ldrb	r3, [r7, #5]
 8001040:	68fa      	ldr	r2, [r7, #12]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	60fb      	str	r3, [r7, #12]
    ddF_y *= 2;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	60fb      	str	r3, [r7, #12]
    x = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	817b      	strh	r3, [r7, #10]
    y = rad;
 8001050:	797b      	ldrb	r3, [r7, #5]
 8001052:	813b      	strh	r3, [r7, #8]

    _OLED_DrawCircleSection(x, y, x0, y0, option, mode);
 8001054:	897b      	ldrh	r3, [r7, #10]
 8001056:	b2d8      	uxtb	r0, r3
 8001058:	893b      	ldrh	r3, [r7, #8]
 800105a:	b2d9      	uxtb	r1, r3
 800105c:	79bc      	ldrb	r4, [r7, #6]
 800105e:	79fa      	ldrb	r2, [r7, #7]
 8001060:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001064:	9301      	str	r3, [sp, #4]
 8001066:	793b      	ldrb	r3, [r7, #4]
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	4623      	mov	r3, r4
 800106c:	f7ff ff47 	bl	8000efe <_OLED_DrawCircleSection>

    while ( x < y ) {
 8001070:	e024      	b.n	80010bc <OLED_DrawCircle+0xb0>
      if (f >= 0) {
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	2b00      	cmp	r3, #0
 8001076:	db09      	blt.n	800108c <OLED_DrawCircle+0x80>
        y--;
 8001078:	893b      	ldrh	r3, [r7, #8]
 800107a:	3b01      	subs	r3, #1
 800107c:	813b      	strh	r3, [r7, #8]
        ddF_y += 2;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	3302      	adds	r3, #2
 8001082:	60fb      	str	r3, [r7, #12]
        f += ddF_y;
 8001084:	697a      	ldr	r2, [r7, #20]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4413      	add	r3, r2
 800108a:	617b      	str	r3, [r7, #20]
      }
      x++;
 800108c:	897b      	ldrh	r3, [r7, #10]
 800108e:	3301      	adds	r3, #1
 8001090:	817b      	strh	r3, [r7, #10]
      ddF_x += 2;
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	3302      	adds	r3, #2
 8001096:	613b      	str	r3, [r7, #16]
      f += ddF_x;
 8001098:	697a      	ldr	r2, [r7, #20]
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	4413      	add	r3, r2
 800109e:	617b      	str	r3, [r7, #20]

      _OLED_DrawCircleSection(x, y, x0, y0, option, mode);
 80010a0:	897b      	ldrh	r3, [r7, #10]
 80010a2:	b2d8      	uxtb	r0, r3
 80010a4:	893b      	ldrh	r3, [r7, #8]
 80010a6:	b2d9      	uxtb	r1, r3
 80010a8:	79bc      	ldrb	r4, [r7, #6]
 80010aa:	79fa      	ldrb	r2, [r7, #7]
 80010ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80010b0:	9301      	str	r3, [sp, #4]
 80010b2:	793b      	ldrb	r3, [r7, #4]
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	4623      	mov	r3, r4
 80010b8:	f7ff ff21 	bl	8000efe <_OLED_DrawCircleSection>
    while ( x < y ) {
 80010bc:	897a      	ldrh	r2, [r7, #10]
 80010be:	893b      	ldrh	r3, [r7, #8]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d3d6      	bcc.n	8001072 <OLED_DrawCircle+0x66>
    }
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	371c      	adds	r7, #28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd90      	pop	{r4, r7, pc}
	...

080010d0 <OLED_PrintChar>:
 * @param c 要显示的字符
 * @param font 字体 8(6x8)/12(6x12)/16(8x16)/24(12x24)
 * @param mode 颜色模式
 *
 * */
void OLED_PrintChar(uint8_t x, uint8_t y, char c, uint8_t font, OLED_ColorMode mode) {
 80010d0:	b590      	push	{r4, r7, lr}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4604      	mov	r4, r0
 80010d8:	4608      	mov	r0, r1
 80010da:	4611      	mov	r1, r2
 80010dc:	461a      	mov	r2, r3
 80010de:	4623      	mov	r3, r4
 80010e0:	71fb      	strb	r3, [r7, #7]
 80010e2:	4603      	mov	r3, r0
 80010e4:	71bb      	strb	r3, [r7, #6]
 80010e6:	460b      	mov	r3, r1
 80010e8:	717b      	strb	r3, [r7, #5]
 80010ea:	4613      	mov	r3, r2
 80010ec:	713b      	strb	r3, [r7, #4]
	uint8_t i, m, temp, size2, chr1;
	uint8_t x0 = x, y0 = y;
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	72bb      	strb	r3, [r7, #10]
 80010f2:	79bb      	ldrb	r3, [r7, #6]
 80010f4:	72fb      	strb	r3, [r7, #11]
	if (font == 8)
 80010f6:	793b      	ldrb	r3, [r7, #4]
 80010f8:	2b08      	cmp	r3, #8
 80010fa:	d102      	bne.n	8001102 <OLED_PrintChar+0x32>
		size2 = 6;
 80010fc:	2306      	movs	r3, #6
 80010fe:	733b      	strb	r3, [r7, #12]
 8001100:	e014      	b.n	800112c <OLED_PrintChar+0x5c>
	else
		size2 = (font / 8 + ((font % 8) ? 1 : 0)) * (font / 2); //得到字体一个字符对应点阵集所占的字节数
 8001102:	793b      	ldrb	r3, [r7, #4]
 8001104:	08db      	lsrs	r3, r3, #3
 8001106:	b2db      	uxtb	r3, r3
 8001108:	461a      	mov	r2, r3
 800110a:	793b      	ldrb	r3, [r7, #4]
 800110c:	f003 0307 	and.w	r3, r3, #7
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	bf14      	ite	ne
 8001116:	2301      	movne	r3, #1
 8001118:	2300      	moveq	r3, #0
 800111a:	b2db      	uxtb	r3, r3
 800111c:	4413      	add	r3, r2
 800111e:	b2da      	uxtb	r2, r3
 8001120:	793b      	ldrb	r3, [r7, #4]
 8001122:	085b      	lsrs	r3, r3, #1
 8001124:	b2db      	uxtb	r3, r3
 8001126:	fb12 f303 	smulbb	r3, r2, r3
 800112a:	733b      	strb	r3, [r7, #12]
	chr1 = c - ' ';  //计算偏移后的值
 800112c:	797b      	ldrb	r3, [r7, #5]
 800112e:	3b20      	subs	r3, #32
 8001130:	727b      	strb	r3, [r7, #9]
	for (i = 0; i < size2; i++) {
 8001132:	2300      	movs	r3, #0
 8001134:	73fb      	strb	r3, [r7, #15]
 8001136:	e078      	b.n	800122a <OLED_PrintChar+0x15a>
		if (font == 8)
 8001138:	793b      	ldrb	r3, [r7, #4]
 800113a:	2b08      	cmp	r3, #8
 800113c:	d10b      	bne.n	8001156 <OLED_PrintChar+0x86>
			temp = asc2_0806[chr1][i]; //调用0806字体
 800113e:	7a7a      	ldrb	r2, [r7, #9]
 8001140:	7bf9      	ldrb	r1, [r7, #15]
 8001142:	483e      	ldr	r0, [pc, #248]	; (800123c <OLED_PrintChar+0x16c>)
 8001144:	4613      	mov	r3, r2
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	4413      	add	r3, r2
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	4403      	add	r3, r0
 800114e:	440b      	add	r3, r1
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	737b      	strb	r3, [r7, #13]
 8001154:	e028      	b.n	80011a8 <OLED_PrintChar+0xd8>
		else if (font == 12)
 8001156:	793b      	ldrb	r3, [r7, #4]
 8001158:	2b0c      	cmp	r3, #12
 800115a:	d10b      	bne.n	8001174 <OLED_PrintChar+0xa4>
			temp = asc2_1206[chr1][i]; //调用1206字体
 800115c:	7a7a      	ldrb	r2, [r7, #9]
 800115e:	7bf9      	ldrb	r1, [r7, #15]
 8001160:	4837      	ldr	r0, [pc, #220]	; (8001240 <OLED_PrintChar+0x170>)
 8001162:	4613      	mov	r3, r2
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	4413      	add	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4403      	add	r3, r0
 800116c:	440b      	add	r3, r1
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	737b      	strb	r3, [r7, #13]
 8001172:	e019      	b.n	80011a8 <OLED_PrintChar+0xd8>
		else if (font == 16)
 8001174:	793b      	ldrb	r3, [r7, #4]
 8001176:	2b10      	cmp	r3, #16
 8001178:	d108      	bne.n	800118c <OLED_PrintChar+0xbc>
			temp = asc2_1608[chr1][i]; //调用1608字体
 800117a:	7a7a      	ldrb	r2, [r7, #9]
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	4931      	ldr	r1, [pc, #196]	; (8001244 <OLED_PrintChar+0x174>)
 8001180:	0112      	lsls	r2, r2, #4
 8001182:	440a      	add	r2, r1
 8001184:	4413      	add	r3, r2
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	737b      	strb	r3, [r7, #13]
 800118a:	e00d      	b.n	80011a8 <OLED_PrintChar+0xd8>
		else if (font == 24)
 800118c:	793b      	ldrb	r3, [r7, #4]
 800118e:	2b18      	cmp	r3, #24
 8001190:	d150      	bne.n	8001234 <OLED_PrintChar+0x164>
			temp = asc2_2412[chr1][i]; //调用2412字体
 8001192:	7a7a      	ldrb	r2, [r7, #9]
 8001194:	7bf9      	ldrb	r1, [r7, #15]
 8001196:	482c      	ldr	r0, [pc, #176]	; (8001248 <OLED_PrintChar+0x178>)
 8001198:	4613      	mov	r3, r2
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	4413      	add	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4403      	add	r3, r0
 80011a2:	440b      	add	r3, r1
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	737b      	strb	r3, [r7, #13]
		else
			return;
		for (m = 0; m < 8; m++) {
 80011a8:	2300      	movs	r3, #0
 80011aa:	73bb      	strb	r3, [r7, #14]
 80011ac:	e022      	b.n	80011f4 <OLED_PrintChar+0x124>
			if (temp & 0x01)
 80011ae:	7b7b      	ldrb	r3, [r7, #13]
 80011b0:	f003 0301 	and.w	r3, r3, #1
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d007      	beq.n	80011c8 <OLED_PrintChar+0xf8>
				OLED_DrawPixel(x, y, mode);
 80011b8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80011bc:	79b9      	ldrb	r1, [r7, #6]
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fd6f 	bl	8000ca4 <OLED_DrawPixel>
 80011c6:	e00c      	b.n	80011e2 <OLED_PrintChar+0x112>
			else
				OLED_DrawPixel(x, y, !mode);
 80011c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	bf0c      	ite	eq
 80011d0:	2301      	moveq	r3, #1
 80011d2:	2300      	movne	r3, #0
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	461a      	mov	r2, r3
 80011d8:	79b9      	ldrb	r1, [r7, #6]
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff fd61 	bl	8000ca4 <OLED_DrawPixel>
			temp >>= 1;
 80011e2:	7b7b      	ldrb	r3, [r7, #13]
 80011e4:	085b      	lsrs	r3, r3, #1
 80011e6:	737b      	strb	r3, [r7, #13]
			y++;
 80011e8:	79bb      	ldrb	r3, [r7, #6]
 80011ea:	3301      	adds	r3, #1
 80011ec:	71bb      	strb	r3, [r7, #6]
		for (m = 0; m < 8; m++) {
 80011ee:	7bbb      	ldrb	r3, [r7, #14]
 80011f0:	3301      	adds	r3, #1
 80011f2:	73bb      	strb	r3, [r7, #14]
 80011f4:	7bbb      	ldrb	r3, [r7, #14]
 80011f6:	2b07      	cmp	r3, #7
 80011f8:	d9d9      	bls.n	80011ae <OLED_PrintChar+0xde>
		}
		x++;
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	3301      	adds	r3, #1
 80011fe:	71fb      	strb	r3, [r7, #7]
		if ((font != 8) && ((x - x0) == font / 2)) {
 8001200:	793b      	ldrb	r3, [r7, #4]
 8001202:	2b08      	cmp	r3, #8
 8001204:	d00c      	beq.n	8001220 <OLED_PrintChar+0x150>
 8001206:	79fa      	ldrb	r2, [r7, #7]
 8001208:	7abb      	ldrb	r3, [r7, #10]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	793a      	ldrb	r2, [r7, #4]
 800120e:	0852      	lsrs	r2, r2, #1
 8001210:	b2d2      	uxtb	r2, r2
 8001212:	4293      	cmp	r3, r2
 8001214:	d104      	bne.n	8001220 <OLED_PrintChar+0x150>
			x = x0;
 8001216:	7abb      	ldrb	r3, [r7, #10]
 8001218:	71fb      	strb	r3, [r7, #7]
			y0 = y0 + 8;
 800121a:	7afb      	ldrb	r3, [r7, #11]
 800121c:	3308      	adds	r3, #8
 800121e:	72fb      	strb	r3, [r7, #11]
		}
		y = y0;
 8001220:	7afb      	ldrb	r3, [r7, #11]
 8001222:	71bb      	strb	r3, [r7, #6]
	for (i = 0; i < size2; i++) {
 8001224:	7bfb      	ldrb	r3, [r7, #15]
 8001226:	3301      	adds	r3, #1
 8001228:	73fb      	strb	r3, [r7, #15]
 800122a:	7bfa      	ldrb	r2, [r7, #15]
 800122c:	7b3b      	ldrb	r3, [r7, #12]
 800122e:	429a      	cmp	r2, r3
 8001230:	d382      	bcc.n	8001138 <OLED_PrintChar+0x68>
 8001232:	e000      	b.n	8001236 <OLED_PrintChar+0x166>
			return;
 8001234:	bf00      	nop
	}
}
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	bd90      	pop	{r4, r7, pc}
 800123c:	08003920 	.word	0x08003920
 8001240:	08003b48 	.word	0x08003b48
 8001244:	08003fbc 	.word	0x08003fbc
 8001248:	080045ac 	.word	0x080045ac

0800124c <OLED_PrintChineseChar>:
 * @param mode 颜色模式
 *
 * @return 显示成功/失败
 *
 * */
OLED_Ret OLED_PrintChineseChar(uint8_t x, uint8_t y, char c[4], uint8_t font, OLED_ColorMode mode) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b088      	sub	sp, #32
 8001250:	af00      	add	r7, sp, #0
 8001252:	603a      	str	r2, [r7, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
 800125a:	460b      	mov	r3, r1
 800125c:	71bb      	strb	r3, [r7, #6]
 800125e:	4613      	mov	r3, r2
 8001260:	717b      	strb	r3, [r7, #5]
	uint8_t m, temp;
	int32_t font_len, char_index = -1;
 8001262:	f04f 33ff 	mov.w	r3, #4294967295
 8001266:	61bb      	str	r3, [r7, #24]
	uint8_t x0 = x, y0 = y;
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	73fb      	strb	r3, [r7, #15]
 800126c:	79bb      	ldrb	r3, [r7, #6]
 800126e:	75fb      	strb	r3, [r7, #23]
	uint16_t i, size3 = (font / 8 + ((font % 8) ? 1 : 0)) * font;  //得到字体一个字符对应点阵集所占的字节数
 8001270:	797b      	ldrb	r3, [r7, #5]
 8001272:	08db      	lsrs	r3, r3, #3
 8001274:	b2db      	uxtb	r3, r3
 8001276:	461a      	mov	r2, r3
 8001278:	797b      	ldrb	r3, [r7, #5]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	b2db      	uxtb	r3, r3
 8001280:	2b00      	cmp	r3, #0
 8001282:	bf14      	ite	ne
 8001284:	2301      	movne	r3, #1
 8001286:	2300      	moveq	r3, #0
 8001288:	b2db      	uxtb	r3, r3
 800128a:	4413      	add	r3, r2
 800128c:	b29a      	uxth	r2, r3
 800128e:	797b      	ldrb	r3, [r7, #5]
 8001290:	b29b      	uxth	r3, r3
 8001292:	fb12 f303 	smulbb	r3, r2, r3
 8001296:	81bb      	strh	r3, [r7, #12]
	// 在字库中寻找对应字符
	if (font == 16) {
 8001298:	797b      	ldrb	r3, [r7, #5]
 800129a:	2b10      	cmp	r3, #16
 800129c:	f040 809c 	bne.w	80013d8 <OLED_PrintChineseChar+0x18c>
		// 16*16字体
		font_len = sizeof(chs_font)/sizeof(struct font);
 80012a0:	230c      	movs	r3, #12
 80012a2:	60bb      	str	r3, [r7, #8]
		for (int j = 0; j < font_len; j++) {
 80012a4:	2300      	movs	r3, #0
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	e03b      	b.n	8001322 <OLED_PrintChineseChar+0xd6>
			if(chs_font[j].index[0] == c[0] && chs_font[j].index[1] == c[1] && chs_font[j].index[2] == c[2] && chs_font[j].index[3] == c[3]) {
 80012aa:	494e      	ldr	r1, [pc, #312]	; (80013e4 <OLED_PrintChineseChar+0x198>)
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	4613      	mov	r3, r2
 80012b0:	00db      	lsls	r3, r3, #3
 80012b2:	4413      	add	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	440b      	add	r3, r1
 80012b8:	781a      	ldrb	r2, [r3, #0]
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d12c      	bne.n	800131c <OLED_PrintChineseChar+0xd0>
 80012c2:	4948      	ldr	r1, [pc, #288]	; (80013e4 <OLED_PrintChineseChar+0x198>)
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	4613      	mov	r3, r2
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	4413      	add	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	440b      	add	r3, r1
 80012d0:	3301      	adds	r3, #1
 80012d2:	781a      	ldrb	r2, [r3, #0]
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	3301      	adds	r3, #1
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d11e      	bne.n	800131c <OLED_PrintChineseChar+0xd0>
 80012de:	4941      	ldr	r1, [pc, #260]	; (80013e4 <OLED_PrintChineseChar+0x198>)
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4613      	mov	r3, r2
 80012e4:	00db      	lsls	r3, r3, #3
 80012e6:	4413      	add	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	440b      	add	r3, r1
 80012ec:	3302      	adds	r3, #2
 80012ee:	781a      	ldrb	r2, [r3, #0]
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	3302      	adds	r3, #2
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d110      	bne.n	800131c <OLED_PrintChineseChar+0xd0>
 80012fa:	493a      	ldr	r1, [pc, #232]	; (80013e4 <OLED_PrintChineseChar+0x198>)
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	4613      	mov	r3, r2
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	4413      	add	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	440b      	add	r3, r1
 8001308:	3303      	adds	r3, #3
 800130a:	781a      	ldrb	r2, [r3, #0]
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	3303      	adds	r3, #3
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	429a      	cmp	r2, r3
 8001314:	d102      	bne.n	800131c <OLED_PrintChineseChar+0xd0>
				char_index = j;
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	61bb      	str	r3, [r7, #24]
				break;
 800131a:	e006      	b.n	800132a <OLED_PrintChineseChar+0xde>
		for (int j = 0; j < font_len; j++) {
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	3301      	adds	r3, #1
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	429a      	cmp	r2, r3
 8001328:	dbbf      	blt.n	80012aa <OLED_PrintChineseChar+0x5e>
			}
		}
		// 如果找不到该字符直接返回错误
		if (char_index == -1) {
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001330:	d101      	bne.n	8001336 <OLED_PrintChineseChar+0xea>
			return OLED_FAILED;
 8001332:	2301      	movs	r3, #1
 8001334:	e051      	b.n	80013da <OLED_PrintChineseChar+0x18e>
		}
		// 显示字符
		for (i = 0; i < size3; i++) {
 8001336:	2300      	movs	r3, #0
 8001338:	82bb      	strh	r3, [r7, #20]
 800133a:	e047      	b.n	80013cc <OLED_PrintChineseChar+0x180>
			temp = chs_font[char_index].typeface[i];
 800133c:	8ab9      	ldrh	r1, [r7, #20]
 800133e:	4829      	ldr	r0, [pc, #164]	; (80013e4 <OLED_PrintChineseChar+0x198>)
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4613      	mov	r3, r2
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	4413      	add	r3, r2
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	4403      	add	r3, r0
 800134c:	440b      	add	r3, r1
 800134e:	3304      	adds	r3, #4
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	77bb      	strb	r3, [r7, #30]
			for (m = 0; m < 8; m++) {
 8001354:	2300      	movs	r3, #0
 8001356:	77fb      	strb	r3, [r7, #31]
 8001358:	e022      	b.n	80013a0 <OLED_PrintChineseChar+0x154>
				if (temp & 0x01)
 800135a:	7fbb      	ldrb	r3, [r7, #30]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b00      	cmp	r3, #0
 8001362:	d00d      	beq.n	8001380 <OLED_PrintChineseChar+0x134>
					OLED_DrawPixel(x, y, !mode);
 8001364:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001368:	2b00      	cmp	r3, #0
 800136a:	bf0c      	ite	eq
 800136c:	2301      	moveq	r3, #1
 800136e:	2300      	movne	r3, #0
 8001370:	b2db      	uxtb	r3, r3
 8001372:	461a      	mov	r2, r3
 8001374:	79b9      	ldrb	r1, [r7, #6]
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fc93 	bl	8000ca4 <OLED_DrawPixel>
 800137e:	e006      	b.n	800138e <OLED_PrintChineseChar+0x142>
				else
					OLED_DrawPixel(x, y, mode);
 8001380:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001384:	79b9      	ldrb	r1, [r7, #6]
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fc8b 	bl	8000ca4 <OLED_DrawPixel>
				temp >>= 1;
 800138e:	7fbb      	ldrb	r3, [r7, #30]
 8001390:	085b      	lsrs	r3, r3, #1
 8001392:	77bb      	strb	r3, [r7, #30]
				y++;
 8001394:	79bb      	ldrb	r3, [r7, #6]
 8001396:	3301      	adds	r3, #1
 8001398:	71bb      	strb	r3, [r7, #6]
			for (m = 0; m < 8; m++) {
 800139a:	7ffb      	ldrb	r3, [r7, #31]
 800139c:	3301      	adds	r3, #1
 800139e:	77fb      	strb	r3, [r7, #31]
 80013a0:	7ffb      	ldrb	r3, [r7, #31]
 80013a2:	2b07      	cmp	r3, #7
 80013a4:	d9d9      	bls.n	800135a <OLED_PrintChineseChar+0x10e>
			}
			x++;
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	3301      	adds	r3, #1
 80013aa:	71fb      	strb	r3, [r7, #7]
			if ((x - x0) == font) {
 80013ac:	79fa      	ldrb	r2, [r7, #7]
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
 80013b0:	1ad2      	subs	r2, r2, r3
 80013b2:	797b      	ldrb	r3, [r7, #5]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d104      	bne.n	80013c2 <OLED_PrintChineseChar+0x176>
				x = x0;
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	71fb      	strb	r3, [r7, #7]
				y0 = y0 + 8;
 80013bc:	7dfb      	ldrb	r3, [r7, #23]
 80013be:	3308      	adds	r3, #8
 80013c0:	75fb      	strb	r3, [r7, #23]
			}
			y = y0;
 80013c2:	7dfb      	ldrb	r3, [r7, #23]
 80013c4:	71bb      	strb	r3, [r7, #6]
		for (i = 0; i < size3; i++) {
 80013c6:	8abb      	ldrh	r3, [r7, #20]
 80013c8:	3301      	adds	r3, #1
 80013ca:	82bb      	strh	r3, [r7, #20]
 80013cc:	8aba      	ldrh	r2, [r7, #20]
 80013ce:	89bb      	ldrh	r3, [r7, #12]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d3b3      	bcc.n	800133c <OLED_PrintChineseChar+0xf0>
		}
		return OLED_SUCCESS;
 80013d4:	2300      	movs	r3, #0
 80013d6:	e000      	b.n	80013da <OLED_PrintChineseChar+0x18e>
	}
	// 找不到指定字体，返回错误
	return OLED_FAILED;
 80013d8:	2301      	movs	r3, #1
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3720      	adds	r7, #32
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	08005308 	.word	0x08005308

080013e8 <OLED_PrintChinese>:
 * @param c 要显示的字符串，用双引号表达
 * @param font 字体 16(16x16)
 * @param mode 颜色模式
 *
*/
void OLED_PrintChinese(uint8_t x, uint8_t y, char *s, uint8_t font, OLED_ColorMode mode) {
 80013e8:	b590      	push	{r4, r7, lr}
 80013ea:	b087      	sub	sp, #28
 80013ec:	af02      	add	r7, sp, #8
 80013ee:	603a      	str	r2, [r7, #0]
 80013f0:	461a      	mov	r2, r3
 80013f2:	4603      	mov	r3, r0
 80013f4:	71fb      	strb	r3, [r7, #7]
 80013f6:	460b      	mov	r3, r1
 80013f8:	71bb      	strb	r3, [r7, #6]
 80013fa:	4613      	mov	r3, r2
 80013fc:	717b      	strb	r3, [r7, #5]
	char chr[4];
	int i = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
    while (s[i] != '\0') {
 8001402:	e0b6      	b.n	8001572 <OLED_PrintChinese+0x18a>
        if ((s[i] & 0x80) == 0x00) {
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	4413      	add	r3, r2
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	b25b      	sxtb	r3, r3
 800140e:	2b00      	cmp	r3, #0
 8001410:	db1d      	blt.n	800144e <OLED_PrintChinese+0x66>
            // 1字节字符，即ASCII字符
			OLED_PrintChar(x, y, s[i], font, mode);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	4413      	add	r3, r2
 8001418:	781a      	ldrb	r2, [r3, #0]
 800141a:	797c      	ldrb	r4, [r7, #5]
 800141c:	79b9      	ldrb	r1, [r7, #6]
 800141e:	79f8      	ldrb	r0, [r7, #7]
 8001420:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	4623      	mov	r3, r4
 8001428:	f7ff fe52 	bl	80010d0 <OLED_PrintChar>
			// 移动光标
			if (font == 8)
 800142c:	797b      	ldrb	r3, [r7, #5]
 800142e:	2b08      	cmp	r3, #8
 8001430:	d103      	bne.n	800143a <OLED_PrintChinese+0x52>
				x += 6;
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	3306      	adds	r3, #6
 8001436:	71fb      	strb	r3, [r7, #7]
 8001438:	e005      	b.n	8001446 <OLED_PrintChinese+0x5e>
			else
				x += font / 2;
 800143a:	797b      	ldrb	r3, [r7, #5]
 800143c:	085b      	lsrs	r3, r3, #1
 800143e:	b2da      	uxtb	r2, r3
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	4413      	add	r3, r2
 8001444:	71fb      	strb	r3, [r7, #7]
            i += 1;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	3301      	adds	r3, #1
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	e091      	b.n	8001572 <OLED_PrintChinese+0x18a>
        } else if ((s[i] & 0xE0) == 0xC0) {
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	4413      	add	r3, r2
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800145a:	2bc0      	cmp	r3, #192	; 0xc0
 800145c:	d124      	bne.n	80014a8 <OLED_PrintChinese+0xc0>
            // 2字节字符
			chr[0] = s[i];
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	4413      	add	r3, r2
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	723b      	strb	r3, [r7, #8]
			chr[1] = s[i + 1];
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	3301      	adds	r3, #1
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	4413      	add	r3, r2
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	727b      	strb	r3, [r7, #9]
			chr[2] = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	72bb      	strb	r3, [r7, #10]
			chr[3] = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	72fb      	strb	r3, [r7, #11]
			// 如果该字符成功显示，则移动光标
			if(!OLED_PrintChineseChar(x, y, chr, font, mode)){
 800147c:	797c      	ldrb	r4, [r7, #5]
 800147e:	f107 0208 	add.w	r2, r7, #8
 8001482:	79b9      	ldrb	r1, [r7, #6]
 8001484:	79f8      	ldrb	r0, [r7, #7]
 8001486:	f897 3020 	ldrb.w	r3, [r7, #32]
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	4623      	mov	r3, r4
 800148e:	f7ff fedd 	bl	800124c <OLED_PrintChineseChar>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d103      	bne.n	80014a0 <OLED_PrintChinese+0xb8>
				x += font;
 8001498:	79fa      	ldrb	r2, [r7, #7]
 800149a:	797b      	ldrb	r3, [r7, #5]
 800149c:	4413      	add	r3, r2
 800149e:	71fb      	strb	r3, [r7, #7]
			}
            i += 2;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	3302      	adds	r3, #2
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	e064      	b.n	8001572 <OLED_PrintChinese+0x18a>
        } else if ((s[i] & 0xF0) == 0xE0) {
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	683a      	ldr	r2, [r7, #0]
 80014ac:	4413      	add	r3, r2
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014b4:	2be0      	cmp	r3, #224	; 0xe0
 80014b6:	d128      	bne.n	800150a <OLED_PrintChinese+0x122>
            // 3字节字符
			chr[0] = s[i];
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	4413      	add	r3, r2
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	723b      	strb	r3, [r7, #8]
			chr[1] = s[i + 1];
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	3301      	adds	r3, #1
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	4413      	add	r3, r2
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	727b      	strb	r3, [r7, #9]
			chr[2] = s[i + 2];
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	3302      	adds	r3, #2
 80014d2:	683a      	ldr	r2, [r7, #0]
 80014d4:	4413      	add	r3, r2
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	72bb      	strb	r3, [r7, #10]
			chr[3] = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	72fb      	strb	r3, [r7, #11]
			// 如果该字符成功显示，则移动光标
			if(!OLED_PrintChineseChar(x, y, chr, font, mode)){
 80014de:	797c      	ldrb	r4, [r7, #5]
 80014e0:	f107 0208 	add.w	r2, r7, #8
 80014e4:	79b9      	ldrb	r1, [r7, #6]
 80014e6:	79f8      	ldrb	r0, [r7, #7]
 80014e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014ec:	9300      	str	r3, [sp, #0]
 80014ee:	4623      	mov	r3, r4
 80014f0:	f7ff feac 	bl	800124c <OLED_PrintChineseChar>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d103      	bne.n	8001502 <OLED_PrintChinese+0x11a>
				x += font;
 80014fa:	79fa      	ldrb	r2, [r7, #7]
 80014fc:	797b      	ldrb	r3, [r7, #5]
 80014fe:	4413      	add	r3, r2
 8001500:	71fb      	strb	r3, [r7, #7]
			}
            i += 3;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	3303      	adds	r3, #3
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	e033      	b.n	8001572 <OLED_PrintChinese+0x18a>
        } else if ((s[i] & 0xF8) == 0xF0) {
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	4413      	add	r3, r2
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8001516:	2bf0      	cmp	r3, #240	; 0xf0
 8001518:	d12b      	bne.n	8001572 <OLED_PrintChinese+0x18a>
            // 4字节字符
			chr[0] = s[i];
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	4413      	add	r3, r2
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	723b      	strb	r3, [r7, #8]
			chr[1] = s[i + 1];
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	3301      	adds	r3, #1
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	4413      	add	r3, r2
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	727b      	strb	r3, [r7, #9]
			chr[2] = s[i + 2];
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	3302      	adds	r3, #2
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	4413      	add	r3, r2
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	72bb      	strb	r3, [r7, #10]
			chr[3] = s[i + 3];
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	3303      	adds	r3, #3
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	4413      	add	r3, r2
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	72fb      	strb	r3, [r7, #11]
			// 如果该字符成功显示，则移动光标
			if(!OLED_PrintChineseChar(x, y, chr, font, mode)){
 8001548:	797c      	ldrb	r4, [r7, #5]
 800154a:	f107 0208 	add.w	r2, r7, #8
 800154e:	79b9      	ldrb	r1, [r7, #6]
 8001550:	79f8      	ldrb	r0, [r7, #7]
 8001552:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	4623      	mov	r3, r4
 800155a:	f7ff fe77 	bl	800124c <OLED_PrintChineseChar>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d103      	bne.n	800156c <OLED_PrintChinese+0x184>
				x += font;
 8001564:	79fa      	ldrb	r2, [r7, #7]
 8001566:	797b      	ldrb	r3, [r7, #5]
 8001568:	4413      	add	r3, r2
 800156a:	71fb      	strb	r3, [r7, #7]
			}
            i += 4;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	3304      	adds	r3, #4
 8001570:	60fb      	str	r3, [r7, #12]
    while (s[i] != '\0') {
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	4413      	add	r3, r2
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	f47f af42 	bne.w	8001404 <OLED_PrintChinese+0x1c>
        }
    }
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	bd90      	pop	{r4, r7, pc}

0800158a <OLED_DrawPicture>:
 * @param size_y 图像高度
 * @param pic 要显示的图像
 * @param mode 颜色模式
 *
*/
void OLED_DrawPicture(uint8_t x, uint8_t y, uint8_t size_x, uint8_t size_y, const unsigned char pic[], OLED_ColorMode mode) {
 800158a:	b590      	push	{r4, r7, lr}
 800158c:	b085      	sub	sp, #20
 800158e:	af00      	add	r7, sp, #0
 8001590:	4604      	mov	r4, r0
 8001592:	4608      	mov	r0, r1
 8001594:	4611      	mov	r1, r2
 8001596:	461a      	mov	r2, r3
 8001598:	4623      	mov	r3, r4
 800159a:	71fb      	strb	r3, [r7, #7]
 800159c:	4603      	mov	r3, r0
 800159e:	71bb      	strb	r3, [r7, #6]
 80015a0:	460b      	mov	r3, r1
 80015a2:	717b      	strb	r3, [r7, #5]
 80015a4:	4613      	mov	r3, r2
 80015a6:	713b      	strb	r3, [r7, #4]
	uint16_t j = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	81fb      	strh	r3, [r7, #14]
	uint8_t i, n, temp, m;
	uint8_t x0 = x, y0 = y;
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	723b      	strb	r3, [r7, #8]
 80015b0:	79bb      	ldrb	r3, [r7, #6]
 80015b2:	727b      	strb	r3, [r7, #9]
	size_y = size_y / 8 + ((size_y % 8) ? 1 : 0);
 80015b4:	793b      	ldrb	r3, [r7, #4]
 80015b6:	08db      	lsrs	r3, r3, #3
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	793a      	ldrb	r2, [r7, #4]
 80015bc:	f002 0207 	and.w	r2, r2, #7
 80015c0:	b2d2      	uxtb	r2, r2
 80015c2:	2a00      	cmp	r2, #0
 80015c4:	bf14      	ite	ne
 80015c6:	2201      	movne	r2, #1
 80015c8:	2200      	moveq	r2, #0
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	4413      	add	r3, r2
 80015ce:	713b      	strb	r3, [r7, #4]
	for(n = 0; n < size_y; n ++) {
 80015d0:	2300      	movs	r3, #0
 80015d2:	733b      	strb	r3, [r7, #12]
 80015d4:	e04d      	b.n	8001672 <OLED_DrawPicture+0xe8>
		for(i = 0; i < size_x; i ++) {
 80015d6:	2300      	movs	r3, #0
 80015d8:	737b      	strb	r3, [r7, #13]
 80015da:	e043      	b.n	8001664 <OLED_DrawPicture+0xda>
			temp = pic[j];
 80015dc:	89fb      	ldrh	r3, [r7, #14]
 80015de:	6a3a      	ldr	r2, [r7, #32]
 80015e0:	4413      	add	r3, r2
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	72fb      	strb	r3, [r7, #11]
			j ++;
 80015e6:	89fb      	ldrh	r3, [r7, #14]
 80015e8:	3301      	adds	r3, #1
 80015ea:	81fb      	strh	r3, [r7, #14]
			for(m = 0; m < 8; m ++) {
 80015ec:	2300      	movs	r3, #0
 80015ee:	72bb      	strb	r3, [r7, #10]
 80015f0:	e022      	b.n	8001638 <OLED_DrawPicture+0xae>
				if(temp & 0x01) {
 80015f2:	7afb      	ldrb	r3, [r7, #11]
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d00d      	beq.n	8001618 <OLED_DrawPicture+0x8e>
					OLED_DrawPixel(x, y, !mode);
 80015fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001600:	2b00      	cmp	r3, #0
 8001602:	bf0c      	ite	eq
 8001604:	2301      	moveq	r3, #1
 8001606:	2300      	movne	r3, #0
 8001608:	b2db      	uxtb	r3, r3
 800160a:	461a      	mov	r2, r3
 800160c:	79b9      	ldrb	r1, [r7, #6]
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fb47 	bl	8000ca4 <OLED_DrawPixel>
 8001616:	e006      	b.n	8001626 <OLED_DrawPicture+0x9c>
				}
				else {
					OLED_DrawPixel(x, y, mode);
 8001618:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800161c:	79b9      	ldrb	r1, [r7, #6]
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fb3f 	bl	8000ca4 <OLED_DrawPixel>
				}
				temp >>= 1;
 8001626:	7afb      	ldrb	r3, [r7, #11]
 8001628:	085b      	lsrs	r3, r3, #1
 800162a:	72fb      	strb	r3, [r7, #11]
				y ++;
 800162c:	79bb      	ldrb	r3, [r7, #6]
 800162e:	3301      	adds	r3, #1
 8001630:	71bb      	strb	r3, [r7, #6]
			for(m = 0; m < 8; m ++) {
 8001632:	7abb      	ldrb	r3, [r7, #10]
 8001634:	3301      	adds	r3, #1
 8001636:	72bb      	strb	r3, [r7, #10]
 8001638:	7abb      	ldrb	r3, [r7, #10]
 800163a:	2b07      	cmp	r3, #7
 800163c:	d9d9      	bls.n	80015f2 <OLED_DrawPicture+0x68>
			}
			x ++;
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	3301      	adds	r3, #1
 8001642:	71fb      	strb	r3, [r7, #7]
			if((x - x0) == size_x) {
 8001644:	79fa      	ldrb	r2, [r7, #7]
 8001646:	7a3b      	ldrb	r3, [r7, #8]
 8001648:	1ad2      	subs	r2, r2, r3
 800164a:	797b      	ldrb	r3, [r7, #5]
 800164c:	429a      	cmp	r2, r3
 800164e:	d104      	bne.n	800165a <OLED_DrawPicture+0xd0>
				x = x0;
 8001650:	7a3b      	ldrb	r3, [r7, #8]
 8001652:	71fb      	strb	r3, [r7, #7]
				y0 = y0 + 8;
 8001654:	7a7b      	ldrb	r3, [r7, #9]
 8001656:	3308      	adds	r3, #8
 8001658:	727b      	strb	r3, [r7, #9]
			}
			y = y0;
 800165a:	7a7b      	ldrb	r3, [r7, #9]
 800165c:	71bb      	strb	r3, [r7, #6]
		for(i = 0; i < size_x; i ++) {
 800165e:	7b7b      	ldrb	r3, [r7, #13]
 8001660:	3301      	adds	r3, #1
 8001662:	737b      	strb	r3, [r7, #13]
 8001664:	7b7a      	ldrb	r2, [r7, #13]
 8001666:	797b      	ldrb	r3, [r7, #5]
 8001668:	429a      	cmp	r2, r3
 800166a:	d3b7      	bcc.n	80015dc <OLED_DrawPicture+0x52>
	for(n = 0; n < size_y; n ++) {
 800166c:	7b3b      	ldrb	r3, [r7, #12]
 800166e:	3301      	adds	r3, #1
 8001670:	733b      	strb	r3, [r7, #12]
 8001672:	7b3a      	ldrb	r2, [r7, #12]
 8001674:	793b      	ldrb	r3, [r7, #4]
 8001676:	429a      	cmp	r2, r3
 8001678:	d3ad      	bcc.n	80015d6 <OLED_DrawPicture+0x4c>
     	}
	 }
}
 800167a:	bf00      	nop
 800167c:	bf00      	nop
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	bd90      	pop	{r4, r7, pc}

08001684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	607b      	str	r3, [r7, #4]
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <HAL_MspInit+0x4c>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	4a0f      	ldr	r2, [pc, #60]	; (80016d0 <HAL_MspInit+0x4c>)
 8001694:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001698:	6453      	str	r3, [r2, #68]	; 0x44
 800169a:	4b0d      	ldr	r3, [pc, #52]	; (80016d0 <HAL_MspInit+0x4c>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	603b      	str	r3, [r7, #0]
 80016aa:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <HAL_MspInit+0x4c>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	4a08      	ldr	r2, [pc, #32]	; (80016d0 <HAL_MspInit+0x4c>)
 80016b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b4:	6413      	str	r3, [r2, #64]	; 0x40
 80016b6:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_MspInit+0x4c>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	40023800 	.word	0x40023800

080016d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <NMI_Handler+0x4>

080016da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016de:	e7fe      	b.n	80016de <HardFault_Handler+0x4>

080016e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e4:	e7fe      	b.n	80016e4 <MemManage_Handler+0x4>

080016e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ea:	e7fe      	b.n	80016ea <BusFault_Handler+0x4>

080016ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <UsageFault_Handler+0x4>

080016f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001720:	f000 f8c6 	bl	80018b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}

08001728 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001730:	4a14      	ldr	r2, [pc, #80]	; (8001784 <_sbrk+0x5c>)
 8001732:	4b15      	ldr	r3, [pc, #84]	; (8001788 <_sbrk+0x60>)
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800173c:	4b13      	ldr	r3, [pc, #76]	; (800178c <_sbrk+0x64>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d102      	bne.n	800174a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001744:	4b11      	ldr	r3, [pc, #68]	; (800178c <_sbrk+0x64>)
 8001746:	4a12      	ldr	r2, [pc, #72]	; (8001790 <_sbrk+0x68>)
 8001748:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <_sbrk+0x64>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4413      	add	r3, r2
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	429a      	cmp	r2, r3
 8001756:	d207      	bcs.n	8001768 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001758:	f001 fc42 	bl	8002fe0 <__errno>
 800175c:	4603      	mov	r3, r0
 800175e:	220c      	movs	r2, #12
 8001760:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001762:	f04f 33ff 	mov.w	r3, #4294967295
 8001766:	e009      	b.n	800177c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001768:	4b08      	ldr	r3, [pc, #32]	; (800178c <_sbrk+0x64>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800176e:	4b07      	ldr	r3, [pc, #28]	; (800178c <_sbrk+0x64>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4413      	add	r3, r2
 8001776:	4a05      	ldr	r2, [pc, #20]	; (800178c <_sbrk+0x64>)
 8001778:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800177a:	68fb      	ldr	r3, [r7, #12]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20020000 	.word	0x20020000
 8001788:	00000400 	.word	0x00000400
 800178c:	200004d4 	.word	0x200004d4
 8001790:	20000628 	.word	0x20000628

08001794 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <SystemInit+0x20>)
 800179a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800179e:	4a05      	ldr	r2, [pc, #20]	; (80017b4 <SystemInit+0x20>)
 80017a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017bc:	480d      	ldr	r0, [pc, #52]	; (80017f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017be:	490e      	ldr	r1, [pc, #56]	; (80017f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017c0:	4a0e      	ldr	r2, [pc, #56]	; (80017fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017c4:	e002      	b.n	80017cc <LoopCopyDataInit>

080017c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ca:	3304      	adds	r3, #4

080017cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d0:	d3f9      	bcc.n	80017c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017d2:	4a0b      	ldr	r2, [pc, #44]	; (8001800 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017d4:	4c0b      	ldr	r4, [pc, #44]	; (8001804 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d8:	e001      	b.n	80017de <LoopFillZerobss>

080017da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017dc:	3204      	adds	r2, #4

080017de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e0:	d3fb      	bcc.n	80017da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017e2:	f7ff ffd7 	bl	8001794 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017e6:	f001 fc01 	bl	8002fec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ea:	f7fe ff87 	bl	80006fc <main>
  bx  lr    
 80017ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017f8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80017fc:	0800581c 	.word	0x0800581c
  ldr r2, =_sbss
 8001800:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001804:	20000624 	.word	0x20000624

08001808 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001808:	e7fe      	b.n	8001808 <ADC_IRQHandler>
	...

0800180c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001810:	4b0e      	ldr	r3, [pc, #56]	; (800184c <HAL_Init+0x40>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a0d      	ldr	r2, [pc, #52]	; (800184c <HAL_Init+0x40>)
 8001816:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800181a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800181c:	4b0b      	ldr	r3, [pc, #44]	; (800184c <HAL_Init+0x40>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a0a      	ldr	r2, [pc, #40]	; (800184c <HAL_Init+0x40>)
 8001822:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001826:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001828:	4b08      	ldr	r3, [pc, #32]	; (800184c <HAL_Init+0x40>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a07      	ldr	r2, [pc, #28]	; (800184c <HAL_Init+0x40>)
 800182e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001832:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001834:	2003      	movs	r0, #3
 8001836:	f000 f931 	bl	8001a9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800183a:	200f      	movs	r0, #15
 800183c:	f000 f808 	bl	8001850 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001840:	f7ff ff20 	bl	8001684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40023c00 	.word	0x40023c00

08001850 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001858:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <HAL_InitTick+0x54>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <HAL_InitTick+0x58>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	4619      	mov	r1, r3
 8001862:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001866:	fbb3 f3f1 	udiv	r3, r3, r1
 800186a:	fbb2 f3f3 	udiv	r3, r2, r3
 800186e:	4618      	mov	r0, r3
 8001870:	f000 f93b 	bl	8001aea <HAL_SYSTICK_Config>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e00e      	b.n	800189c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b0f      	cmp	r3, #15
 8001882:	d80a      	bhi.n	800189a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001884:	2200      	movs	r2, #0
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	f04f 30ff 	mov.w	r0, #4294967295
 800188c:	f000 f911 	bl	8001ab2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001890:	4a06      	ldr	r2, [pc, #24]	; (80018ac <HAL_InitTick+0x5c>)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001896:	2300      	movs	r3, #0
 8001898:	e000      	b.n	800189c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
}
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000000 	.word	0x20000000
 80018a8:	20000008 	.word	0x20000008
 80018ac:	20000004 	.word	0x20000004

080018b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018b4:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <HAL_IncTick+0x20>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	461a      	mov	r2, r3
 80018ba:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <HAL_IncTick+0x24>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4413      	add	r3, r2
 80018c0:	4a04      	ldr	r2, [pc, #16]	; (80018d4 <HAL_IncTick+0x24>)
 80018c2:	6013      	str	r3, [r2, #0]
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	20000008 	.word	0x20000008
 80018d4:	200004d8 	.word	0x200004d8

080018d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return uwTick;
 80018dc:	4b03      	ldr	r3, [pc, #12]	; (80018ec <HAL_GetTick+0x14>)
 80018de:	681b      	ldr	r3, [r3, #0]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	200004d8 	.word	0x200004d8

080018f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018f8:	f7ff ffee 	bl	80018d8 <HAL_GetTick>
 80018fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001908:	d005      	beq.n	8001916 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800190a:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <HAL_Delay+0x44>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	461a      	mov	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4413      	add	r3, r2
 8001914:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001916:	bf00      	nop
 8001918:	f7ff ffde 	bl	80018d8 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	429a      	cmp	r2, r3
 8001926:	d8f7      	bhi.n	8001918 <HAL_Delay+0x28>
  {
  }
}
 8001928:	bf00      	nop
 800192a:	bf00      	nop
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000008 	.word	0x20000008

08001938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001948:	4b0c      	ldr	r3, [pc, #48]	; (800197c <__NVIC_SetPriorityGrouping+0x44>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800194e:	68ba      	ldr	r2, [r7, #8]
 8001950:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001954:	4013      	ands	r3, r2
 8001956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001960:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800196a:	4a04      	ldr	r2, [pc, #16]	; (800197c <__NVIC_SetPriorityGrouping+0x44>)
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	60d3      	str	r3, [r2, #12]
}
 8001970:	bf00      	nop
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001984:	4b04      	ldr	r3, [pc, #16]	; (8001998 <__NVIC_GetPriorityGrouping+0x18>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	0a1b      	lsrs	r3, r3, #8
 800198a:	f003 0307 	and.w	r3, r3, #7
}
 800198e:	4618      	mov	r0, r3
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	6039      	str	r1, [r7, #0]
 80019a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	db0a      	blt.n	80019c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	490c      	ldr	r1, [pc, #48]	; (80019e8 <__NVIC_SetPriority+0x4c>)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	0112      	lsls	r2, r2, #4
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	440b      	add	r3, r1
 80019c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c4:	e00a      	b.n	80019dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	4908      	ldr	r1, [pc, #32]	; (80019ec <__NVIC_SetPriority+0x50>)
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	3b04      	subs	r3, #4
 80019d4:	0112      	lsls	r2, r2, #4
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	440b      	add	r3, r1
 80019da:	761a      	strb	r2, [r3, #24]
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000e100 	.word	0xe000e100
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b089      	sub	sp, #36	; 0x24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f1c3 0307 	rsb	r3, r3, #7
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	bf28      	it	cs
 8001a0e:	2304      	movcs	r3, #4
 8001a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3304      	adds	r3, #4
 8001a16:	2b06      	cmp	r3, #6
 8001a18:	d902      	bls.n	8001a20 <NVIC_EncodePriority+0x30>
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3b03      	subs	r3, #3
 8001a1e:	e000      	b.n	8001a22 <NVIC_EncodePriority+0x32>
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a24:	f04f 32ff 	mov.w	r2, #4294967295
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43da      	mvns	r2, r3
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	401a      	ands	r2, r3
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a38:	f04f 31ff 	mov.w	r1, #4294967295
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a42:	43d9      	mvns	r1, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a48:	4313      	orrs	r3, r2
         );
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3724      	adds	r7, #36	; 0x24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
	...

08001a58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a68:	d301      	bcc.n	8001a6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e00f      	b.n	8001a8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a6e:	4a0a      	ldr	r2, [pc, #40]	; (8001a98 <SysTick_Config+0x40>)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a76:	210f      	movs	r1, #15
 8001a78:	f04f 30ff 	mov.w	r0, #4294967295
 8001a7c:	f7ff ff8e 	bl	800199c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a80:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <SysTick_Config+0x40>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a86:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <SysTick_Config+0x40>)
 8001a88:	2207      	movs	r2, #7
 8001a8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	e000e010 	.word	0xe000e010

08001a9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff ff47 	bl	8001938 <__NVIC_SetPriorityGrouping>
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b086      	sub	sp, #24
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	4603      	mov	r3, r0
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	607a      	str	r2, [r7, #4]
 8001abe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac4:	f7ff ff5c 	bl	8001980 <__NVIC_GetPriorityGrouping>
 8001ac8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	68b9      	ldr	r1, [r7, #8]
 8001ace:	6978      	ldr	r0, [r7, #20]
 8001ad0:	f7ff ff8e 	bl	80019f0 <NVIC_EncodePriority>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ada:	4611      	mov	r1, r2
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ff5d 	bl	800199c <__NVIC_SetPriority>
}
 8001ae2:	bf00      	nop
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff ffb0 	bl	8001a58 <SysTick_Config>
 8001af8:	4603      	mov	r3, r0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b089      	sub	sp, #36	; 0x24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
 8001b1e:	e16b      	b.n	8001df8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b20:	2201      	movs	r2, #1
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	4013      	ands	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	f040 815a 	bne.w	8001df2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f003 0303 	and.w	r3, r3, #3
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d005      	beq.n	8001b56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d130      	bne.n	8001bb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	2203      	movs	r2, #3
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	68da      	ldr	r2, [r3, #12]
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	091b      	lsrs	r3, r3, #4
 8001ba2:	f003 0201 	and.w	r2, r3, #1
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 0303 	and.w	r3, r3, #3
 8001bc0:	2b03      	cmp	r3, #3
 8001bc2:	d017      	beq.n	8001bf4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	2203      	movs	r2, #3
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 0303 	and.w	r3, r3, #3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d123      	bne.n	8001c48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	08da      	lsrs	r2, r3, #3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3208      	adds	r2, #8
 8001c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	f003 0307 	and.w	r3, r3, #7
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	220f      	movs	r2, #15
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	691a      	ldr	r2, [r3, #16]
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	08da      	lsrs	r2, r3, #3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	3208      	adds	r2, #8
 8001c42:	69b9      	ldr	r1, [r7, #24]
 8001c44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	2203      	movs	r2, #3
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 0203 	and.w	r2, r3, #3
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f000 80b4 	beq.w	8001df2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	4b60      	ldr	r3, [pc, #384]	; (8001e10 <HAL_GPIO_Init+0x30c>)
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	4a5f      	ldr	r2, [pc, #380]	; (8001e10 <HAL_GPIO_Init+0x30c>)
 8001c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c98:	6453      	str	r3, [r2, #68]	; 0x44
 8001c9a:	4b5d      	ldr	r3, [pc, #372]	; (8001e10 <HAL_GPIO_Init+0x30c>)
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ca6:	4a5b      	ldr	r2, [pc, #364]	; (8001e14 <HAL_GPIO_Init+0x310>)
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	089b      	lsrs	r3, r3, #2
 8001cac:	3302      	adds	r3, #2
 8001cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	f003 0303 	and.w	r3, r3, #3
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	220f      	movs	r2, #15
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a52      	ldr	r2, [pc, #328]	; (8001e18 <HAL_GPIO_Init+0x314>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d02b      	beq.n	8001d2a <HAL_GPIO_Init+0x226>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a51      	ldr	r2, [pc, #324]	; (8001e1c <HAL_GPIO_Init+0x318>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d025      	beq.n	8001d26 <HAL_GPIO_Init+0x222>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a50      	ldr	r2, [pc, #320]	; (8001e20 <HAL_GPIO_Init+0x31c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d01f      	beq.n	8001d22 <HAL_GPIO_Init+0x21e>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a4f      	ldr	r2, [pc, #316]	; (8001e24 <HAL_GPIO_Init+0x320>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d019      	beq.n	8001d1e <HAL_GPIO_Init+0x21a>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a4e      	ldr	r2, [pc, #312]	; (8001e28 <HAL_GPIO_Init+0x324>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d013      	beq.n	8001d1a <HAL_GPIO_Init+0x216>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a4d      	ldr	r2, [pc, #308]	; (8001e2c <HAL_GPIO_Init+0x328>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d00d      	beq.n	8001d16 <HAL_GPIO_Init+0x212>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a4c      	ldr	r2, [pc, #304]	; (8001e30 <HAL_GPIO_Init+0x32c>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d007      	beq.n	8001d12 <HAL_GPIO_Init+0x20e>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a4b      	ldr	r2, [pc, #300]	; (8001e34 <HAL_GPIO_Init+0x330>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d101      	bne.n	8001d0e <HAL_GPIO_Init+0x20a>
 8001d0a:	2307      	movs	r3, #7
 8001d0c:	e00e      	b.n	8001d2c <HAL_GPIO_Init+0x228>
 8001d0e:	2308      	movs	r3, #8
 8001d10:	e00c      	b.n	8001d2c <HAL_GPIO_Init+0x228>
 8001d12:	2306      	movs	r3, #6
 8001d14:	e00a      	b.n	8001d2c <HAL_GPIO_Init+0x228>
 8001d16:	2305      	movs	r3, #5
 8001d18:	e008      	b.n	8001d2c <HAL_GPIO_Init+0x228>
 8001d1a:	2304      	movs	r3, #4
 8001d1c:	e006      	b.n	8001d2c <HAL_GPIO_Init+0x228>
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e004      	b.n	8001d2c <HAL_GPIO_Init+0x228>
 8001d22:	2302      	movs	r3, #2
 8001d24:	e002      	b.n	8001d2c <HAL_GPIO_Init+0x228>
 8001d26:	2301      	movs	r3, #1
 8001d28:	e000      	b.n	8001d2c <HAL_GPIO_Init+0x228>
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	69fa      	ldr	r2, [r7, #28]
 8001d2e:	f002 0203 	and.w	r2, r2, #3
 8001d32:	0092      	lsls	r2, r2, #2
 8001d34:	4093      	lsls	r3, r2
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d3c:	4935      	ldr	r1, [pc, #212]	; (8001e14 <HAL_GPIO_Init+0x310>)
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	089b      	lsrs	r3, r3, #2
 8001d42:	3302      	adds	r3, #2
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d4a:	4b3b      	ldr	r3, [pc, #236]	; (8001e38 <HAL_GPIO_Init+0x334>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d6e:	4a32      	ldr	r2, [pc, #200]	; (8001e38 <HAL_GPIO_Init+0x334>)
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d74:	4b30      	ldr	r3, [pc, #192]	; (8001e38 <HAL_GPIO_Init+0x334>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d98:	4a27      	ldr	r2, [pc, #156]	; (8001e38 <HAL_GPIO_Init+0x334>)
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d9e:	4b26      	ldr	r3, [pc, #152]	; (8001e38 <HAL_GPIO_Init+0x334>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	43db      	mvns	r3, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4013      	ands	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dc2:	4a1d      	ldr	r2, [pc, #116]	; (8001e38 <HAL_GPIO_Init+0x334>)
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dc8:	4b1b      	ldr	r3, [pc, #108]	; (8001e38 <HAL_GPIO_Init+0x334>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dec:	4a12      	ldr	r2, [pc, #72]	; (8001e38 <HAL_GPIO_Init+0x334>)
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	3301      	adds	r3, #1
 8001df6:	61fb      	str	r3, [r7, #28]
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	2b0f      	cmp	r3, #15
 8001dfc:	f67f ae90 	bls.w	8001b20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e00:	bf00      	nop
 8001e02:	bf00      	nop
 8001e04:	3724      	adds	r7, #36	; 0x24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40013800 	.word	0x40013800
 8001e18:	40020000 	.word	0x40020000
 8001e1c:	40020400 	.word	0x40020400
 8001e20:	40020800 	.word	0x40020800
 8001e24:	40020c00 	.word	0x40020c00
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	40021400 	.word	0x40021400
 8001e30:	40021800 	.word	0x40021800
 8001e34:	40021c00 	.word	0x40021c00
 8001e38:	40013c00 	.word	0x40013c00

08001e3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	807b      	strh	r3, [r7, #2]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e4c:	787b      	ldrb	r3, [r7, #1]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e52:	887a      	ldrh	r2, [r7, #2]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e58:	e003      	b.n	8001e62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e5a:	887b      	ldrh	r3, [r7, #2]
 8001e5c:	041a      	lsls	r2, r3, #16
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	619a      	str	r2, [r3, #24]
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
	...

08001e70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e12b      	b.n	80020da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d106      	bne.n	8001e9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7fe fbe8 	bl	800066c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2224      	movs	r2, #36	; 0x24
 8001ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 0201 	bic.w	r2, r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ec2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ed2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ed4:	f001 f848 	bl	8002f68 <HAL_RCC_GetPCLK1Freq>
 8001ed8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	4a81      	ldr	r2, [pc, #516]	; (80020e4 <HAL_I2C_Init+0x274>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d807      	bhi.n	8001ef4 <HAL_I2C_Init+0x84>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4a80      	ldr	r2, [pc, #512]	; (80020e8 <HAL_I2C_Init+0x278>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	bf94      	ite	ls
 8001eec:	2301      	movls	r3, #1
 8001eee:	2300      	movhi	r3, #0
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	e006      	b.n	8001f02 <HAL_I2C_Init+0x92>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4a7d      	ldr	r2, [pc, #500]	; (80020ec <HAL_I2C_Init+0x27c>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	bf94      	ite	ls
 8001efc:	2301      	movls	r3, #1
 8001efe:	2300      	movhi	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e0e7      	b.n	80020da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	4a78      	ldr	r2, [pc, #480]	; (80020f0 <HAL_I2C_Init+0x280>)
 8001f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f12:	0c9b      	lsrs	r3, r3, #18
 8001f14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68ba      	ldr	r2, [r7, #8]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	4a6a      	ldr	r2, [pc, #424]	; (80020e4 <HAL_I2C_Init+0x274>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d802      	bhi.n	8001f44 <HAL_I2C_Init+0xd4>
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	3301      	adds	r3, #1
 8001f42:	e009      	b.n	8001f58 <HAL_I2C_Init+0xe8>
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f4a:	fb02 f303 	mul.w	r3, r2, r3
 8001f4e:	4a69      	ldr	r2, [pc, #420]	; (80020f4 <HAL_I2C_Init+0x284>)
 8001f50:	fba2 2303 	umull	r2, r3, r2, r3
 8001f54:	099b      	lsrs	r3, r3, #6
 8001f56:	3301      	adds	r3, #1
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	6812      	ldr	r2, [r2, #0]
 8001f5c:	430b      	orrs	r3, r1
 8001f5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f6a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	495c      	ldr	r1, [pc, #368]	; (80020e4 <HAL_I2C_Init+0x274>)
 8001f74:	428b      	cmp	r3, r1
 8001f76:	d819      	bhi.n	8001fac <HAL_I2C_Init+0x13c>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	1e59      	subs	r1, r3, #1
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f86:	1c59      	adds	r1, r3, #1
 8001f88:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f8c:	400b      	ands	r3, r1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00a      	beq.n	8001fa8 <HAL_I2C_Init+0x138>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	1e59      	subs	r1, r3, #1
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fa6:	e051      	b.n	800204c <HAL_I2C_Init+0x1dc>
 8001fa8:	2304      	movs	r3, #4
 8001faa:	e04f      	b.n	800204c <HAL_I2C_Init+0x1dc>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d111      	bne.n	8001fd8 <HAL_I2C_Init+0x168>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	1e58      	subs	r0, r3, #1
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6859      	ldr	r1, [r3, #4]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	440b      	add	r3, r1
 8001fc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	bf0c      	ite	eq
 8001fd0:	2301      	moveq	r3, #1
 8001fd2:	2300      	movne	r3, #0
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	e012      	b.n	8001ffe <HAL_I2C_Init+0x18e>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	1e58      	subs	r0, r3, #1
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6859      	ldr	r1, [r3, #4]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	0099      	lsls	r1, r3, #2
 8001fe8:	440b      	add	r3, r1
 8001fea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fee:	3301      	adds	r3, #1
 8001ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	bf0c      	ite	eq
 8001ff8:	2301      	moveq	r3, #1
 8001ffa:	2300      	movne	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_I2C_Init+0x196>
 8002002:	2301      	movs	r3, #1
 8002004:	e022      	b.n	800204c <HAL_I2C_Init+0x1dc>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10e      	bne.n	800202c <HAL_I2C_Init+0x1bc>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	1e58      	subs	r0, r3, #1
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6859      	ldr	r1, [r3, #4]
 8002016:	460b      	mov	r3, r1
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	440b      	add	r3, r1
 800201c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002020:	3301      	adds	r3, #1
 8002022:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002026:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800202a:	e00f      	b.n	800204c <HAL_I2C_Init+0x1dc>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	1e58      	subs	r0, r3, #1
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6859      	ldr	r1, [r3, #4]
 8002034:	460b      	mov	r3, r1
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	0099      	lsls	r1, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002042:	3301      	adds	r3, #1
 8002044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002048:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	6809      	ldr	r1, [r1, #0]
 8002050:	4313      	orrs	r3, r2
 8002052:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	69da      	ldr	r2, [r3, #28]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	431a      	orrs	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	430a      	orrs	r2, r1
 800206e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800207a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	6911      	ldr	r1, [r2, #16]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	68d2      	ldr	r2, [r2, #12]
 8002086:	4311      	orrs	r1, r2
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6812      	ldr	r2, [r2, #0]
 800208c:	430b      	orrs	r3, r1
 800208e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	695a      	ldr	r2, [r3, #20]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	431a      	orrs	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 0201 	orr.w	r2, r2, #1
 80020ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2220      	movs	r2, #32
 80020c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	000186a0 	.word	0x000186a0
 80020e8:	001e847f 	.word	0x001e847f
 80020ec:	003d08ff 	.word	0x003d08ff
 80020f0:	431bde83 	.word	0x431bde83
 80020f4:	10624dd3 	.word	0x10624dd3

080020f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b088      	sub	sp, #32
 80020fc:	af02      	add	r7, sp, #8
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	607a      	str	r2, [r7, #4]
 8002102:	461a      	mov	r2, r3
 8002104:	460b      	mov	r3, r1
 8002106:	817b      	strh	r3, [r7, #10]
 8002108:	4613      	mov	r3, r2
 800210a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800210c:	f7ff fbe4 	bl	80018d8 <HAL_GetTick>
 8002110:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b20      	cmp	r3, #32
 800211c:	f040 80e0 	bne.w	80022e0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	2319      	movs	r3, #25
 8002126:	2201      	movs	r2, #1
 8002128:	4970      	ldr	r1, [pc, #448]	; (80022ec <HAL_I2C_Master_Transmit+0x1f4>)
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 f964 	bl	80023f8 <I2C_WaitOnFlagUntilTimeout>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002136:	2302      	movs	r3, #2
 8002138:	e0d3      	b.n	80022e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002140:	2b01      	cmp	r3, #1
 8002142:	d101      	bne.n	8002148 <HAL_I2C_Master_Transmit+0x50>
 8002144:	2302      	movs	r3, #2
 8002146:	e0cc      	b.n	80022e2 <HAL_I2C_Master_Transmit+0x1ea>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b01      	cmp	r3, #1
 800215c:	d007      	beq.n	800216e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f042 0201 	orr.w	r2, r2, #1
 800216c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800217c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2221      	movs	r2, #33	; 0x21
 8002182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2210      	movs	r2, #16
 800218a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2200      	movs	r2, #0
 8002192:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	893a      	ldrh	r2, [r7, #8]
 800219e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	4a50      	ldr	r2, [pc, #320]	; (80022f0 <HAL_I2C_Master_Transmit+0x1f8>)
 80021ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021b0:	8979      	ldrh	r1, [r7, #10]
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	6a3a      	ldr	r2, [r7, #32]
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 f89c 	bl	80022f4 <I2C_MasterRequestWrite>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e08d      	b.n	80022e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021c6:	2300      	movs	r3, #0
 80021c8:	613b      	str	r3, [r7, #16]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	695b      	ldr	r3, [r3, #20]
 80021d0:	613b      	str	r3, [r7, #16]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80021dc:	e066      	b.n	80022ac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	6a39      	ldr	r1, [r7, #32]
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f000 f9de 	bl	80025a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00d      	beq.n	800220a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	d107      	bne.n	8002206 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002204:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e06b      	b.n	80022e2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220e:	781a      	ldrb	r2, [r3, #0]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221a:	1c5a      	adds	r2, r3, #1
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002224:	b29b      	uxth	r3, r3
 8002226:	3b01      	subs	r3, #1
 8002228:	b29a      	uxth	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002232:	3b01      	subs	r3, #1
 8002234:	b29a      	uxth	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b04      	cmp	r3, #4
 8002246:	d11b      	bne.n	8002280 <HAL_I2C_Master_Transmit+0x188>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800224c:	2b00      	cmp	r3, #0
 800224e:	d017      	beq.n	8002280 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002254:	781a      	ldrb	r2, [r3, #0]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002260:	1c5a      	adds	r2, r3, #1
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800226a:	b29b      	uxth	r3, r3
 800226c:	3b01      	subs	r3, #1
 800226e:	b29a      	uxth	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002278:	3b01      	subs	r3, #1
 800227a:	b29a      	uxth	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	6a39      	ldr	r1, [r7, #32]
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	f000 f9ce 	bl	8002626 <I2C_WaitOnBTFFlagUntilTimeout>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00d      	beq.n	80022ac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002294:	2b04      	cmp	r3, #4
 8002296:	d107      	bne.n	80022a8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022a6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e01a      	b.n	80022e2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d194      	bne.n	80021de <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2220      	movs	r2, #32
 80022c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022dc:	2300      	movs	r3, #0
 80022de:	e000      	b.n	80022e2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80022e0:	2302      	movs	r3, #2
  }
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3718      	adds	r7, #24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	00100002 	.word	0x00100002
 80022f0:	ffff0000 	.word	0xffff0000

080022f4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b088      	sub	sp, #32
 80022f8:	af02      	add	r7, sp, #8
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	607a      	str	r2, [r7, #4]
 80022fe:	603b      	str	r3, [r7, #0]
 8002300:	460b      	mov	r3, r1
 8002302:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002308:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	2b08      	cmp	r3, #8
 800230e:	d006      	beq.n	800231e <I2C_MasterRequestWrite+0x2a>
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d003      	beq.n	800231e <I2C_MasterRequestWrite+0x2a>
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800231c:	d108      	bne.n	8002330 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	e00b      	b.n	8002348 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002334:	2b12      	cmp	r3, #18
 8002336:	d107      	bne.n	8002348 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002346:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f000 f84f 	bl	80023f8 <I2C_WaitOnFlagUntilTimeout>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00d      	beq.n	800237c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800236e:	d103      	bne.n	8002378 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002376:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e035      	b.n	80023e8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002384:	d108      	bne.n	8002398 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002386:	897b      	ldrh	r3, [r7, #10]
 8002388:	b2db      	uxtb	r3, r3
 800238a:	461a      	mov	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002394:	611a      	str	r2, [r3, #16]
 8002396:	e01b      	b.n	80023d0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002398:	897b      	ldrh	r3, [r7, #10]
 800239a:	11db      	asrs	r3, r3, #7
 800239c:	b2db      	uxtb	r3, r3
 800239e:	f003 0306 	and.w	r3, r3, #6
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	f063 030f 	orn	r3, r3, #15
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	490e      	ldr	r1, [pc, #56]	; (80023f0 <I2C_MasterRequestWrite+0xfc>)
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 f875 	bl	80024a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e010      	b.n	80023e8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80023c6:	897b      	ldrh	r3, [r7, #10]
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	4907      	ldr	r1, [pc, #28]	; (80023f4 <I2C_MasterRequestWrite+0x100>)
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f000 f865 	bl	80024a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	00010008 	.word	0x00010008
 80023f4:	00010002 	.word	0x00010002

080023f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	603b      	str	r3, [r7, #0]
 8002404:	4613      	mov	r3, r2
 8002406:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002408:	e025      	b.n	8002456 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002410:	d021      	beq.n	8002456 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002412:	f7ff fa61 	bl	80018d8 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	429a      	cmp	r2, r3
 8002420:	d302      	bcc.n	8002428 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d116      	bne.n	8002456 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2220      	movs	r2, #32
 8002432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	f043 0220 	orr.w	r2, r3, #32
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e023      	b.n	800249e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	0c1b      	lsrs	r3, r3, #16
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b01      	cmp	r3, #1
 800245e:	d10d      	bne.n	800247c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	43da      	mvns	r2, r3
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	4013      	ands	r3, r2
 800246c:	b29b      	uxth	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	bf0c      	ite	eq
 8002472:	2301      	moveq	r3, #1
 8002474:	2300      	movne	r3, #0
 8002476:	b2db      	uxtb	r3, r3
 8002478:	461a      	mov	r2, r3
 800247a:	e00c      	b.n	8002496 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	43da      	mvns	r2, r3
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	4013      	ands	r3, r2
 8002488:	b29b      	uxth	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	bf0c      	ite	eq
 800248e:	2301      	moveq	r3, #1
 8002490:	2300      	movne	r3, #0
 8002492:	b2db      	uxtb	r3, r3
 8002494:	461a      	mov	r2, r3
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	429a      	cmp	r2, r3
 800249a:	d0b6      	beq.n	800240a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b084      	sub	sp, #16
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	60f8      	str	r0, [r7, #12]
 80024ae:	60b9      	str	r1, [r7, #8]
 80024b0:	607a      	str	r2, [r7, #4]
 80024b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024b4:	e051      	b.n	800255a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024c4:	d123      	bne.n	800250e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2220      	movs	r2, #32
 80024ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	f043 0204 	orr.w	r2, r3, #4
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e046      	b.n	800259c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002514:	d021      	beq.n	800255a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002516:	f7ff f9df 	bl	80018d8 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	429a      	cmp	r2, r3
 8002524:	d302      	bcc.n	800252c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d116      	bne.n	800255a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2220      	movs	r2, #32
 8002536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	f043 0220 	orr.w	r2, r3, #32
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e020      	b.n	800259c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	0c1b      	lsrs	r3, r3, #16
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b01      	cmp	r3, #1
 8002562:	d10c      	bne.n	800257e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	43da      	mvns	r2, r3
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	4013      	ands	r3, r2
 8002570:	b29b      	uxth	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	bf14      	ite	ne
 8002576:	2301      	movne	r3, #1
 8002578:	2300      	moveq	r3, #0
 800257a:	b2db      	uxtb	r3, r3
 800257c:	e00b      	b.n	8002596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	43da      	mvns	r2, r3
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	4013      	ands	r3, r2
 800258a:	b29b      	uxth	r3, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	bf14      	ite	ne
 8002590:	2301      	movne	r3, #1
 8002592:	2300      	moveq	r3, #0
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d18d      	bne.n	80024b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025b0:	e02d      	b.n	800260e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f000 f878 	bl	80026a8 <I2C_IsAcknowledgeFailed>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e02d      	b.n	800261e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c8:	d021      	beq.n	800260e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ca:	f7ff f985 	bl	80018d8 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d302      	bcc.n	80025e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d116      	bne.n	800260e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2220      	movs	r2, #32
 80025ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	f043 0220 	orr.w	r2, r3, #32
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e007      	b.n	800261e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002618:	2b80      	cmp	r3, #128	; 0x80
 800261a:	d1ca      	bne.n	80025b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b084      	sub	sp, #16
 800262a:	af00      	add	r7, sp, #0
 800262c:	60f8      	str	r0, [r7, #12]
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002632:	e02d      	b.n	8002690 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 f837 	bl	80026a8 <I2C_IsAcknowledgeFailed>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e02d      	b.n	80026a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800264a:	d021      	beq.n	8002690 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800264c:	f7ff f944 	bl	80018d8 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	429a      	cmp	r2, r3
 800265a:	d302      	bcc.n	8002662 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d116      	bne.n	8002690 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2220      	movs	r2, #32
 800266c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267c:	f043 0220 	orr.w	r2, r3, #32
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e007      	b.n	80026a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	f003 0304 	and.w	r3, r3, #4
 800269a:	2b04      	cmp	r3, #4
 800269c:	d1ca      	bne.n	8002634 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026be:	d11b      	bne.n	80026f8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026c8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2220      	movs	r2, #32
 80026d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	f043 0204 	orr.w	r2, r3, #4
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e000      	b.n	80026fa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
	...

08002708 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e267      	b.n	8002bea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d075      	beq.n	8002812 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002726:	4b88      	ldr	r3, [pc, #544]	; (8002948 <HAL_RCC_OscConfig+0x240>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 030c 	and.w	r3, r3, #12
 800272e:	2b04      	cmp	r3, #4
 8002730:	d00c      	beq.n	800274c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002732:	4b85      	ldr	r3, [pc, #532]	; (8002948 <HAL_RCC_OscConfig+0x240>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800273a:	2b08      	cmp	r3, #8
 800273c:	d112      	bne.n	8002764 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800273e:	4b82      	ldr	r3, [pc, #520]	; (8002948 <HAL_RCC_OscConfig+0x240>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002746:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800274a:	d10b      	bne.n	8002764 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800274c:	4b7e      	ldr	r3, [pc, #504]	; (8002948 <HAL_RCC_OscConfig+0x240>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d05b      	beq.n	8002810 <HAL_RCC_OscConfig+0x108>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d157      	bne.n	8002810 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e242      	b.n	8002bea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800276c:	d106      	bne.n	800277c <HAL_RCC_OscConfig+0x74>
 800276e:	4b76      	ldr	r3, [pc, #472]	; (8002948 <HAL_RCC_OscConfig+0x240>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a75      	ldr	r2, [pc, #468]	; (8002948 <HAL_RCC_OscConfig+0x240>)
 8002774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002778:	6013      	str	r3, [r2, #0]
 800277a:	e01d      	b.n	80027b8 <HAL_RCC_OscConfig+0xb0>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002784:	d10c      	bne.n	80027a0 <HAL_RCC_OscConfig+0x98>
 8002786:	4b70      	ldr	r3, [pc, #448]	; (8002948 <HAL_RCC_OscConfig+0x240>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a6f      	ldr	r2, [pc, #444]	; (8002948 <HAL_RCC_OscConfig+0x240>)
 800278c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	4b6d      	ldr	r3, [pc, #436]	; (8002948 <HAL_RCC_OscConfig+0x240>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a6c      	ldr	r2, [pc, #432]	; (8002948 <HAL_RCC_OscConfig+0x240>)
 8002798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	e00b      	b.n	80027b8 <HAL_RCC_OscConfig+0xb0>
 80027a0:	4b69      	ldr	r3, [pc, #420]	; (8002948 <HAL_RCC_OscConfig+0x240>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a68      	ldr	r2, [pc, #416]	; (8002948 <HAL_RCC_OscConfig+0x240>)
 80027a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027aa:	6013      	str	r3, [r2, #0]
 80027ac:	4b66      	ldr	r3, [pc, #408]	; (8002948 <HAL_RCC_OscConfig+0x240>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a65      	ldr	r2, [pc, #404]	; (8002948 <HAL_RCC_OscConfig+0x240>)
 80027b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d013      	beq.n	80027e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c0:	f7ff f88a 	bl	80018d8 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027c8:	f7ff f886 	bl	80018d8 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b64      	cmp	r3, #100	; 0x64
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e207      	b.n	8002bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027da:	4b5b      	ldr	r3, [pc, #364]	; (8002948 <HAL_RCC_OscConfig+0x240>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0f0      	beq.n	80027c8 <HAL_RCC_OscConfig+0xc0>
 80027e6:	e014      	b.n	8002812 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e8:	f7ff f876 	bl	80018d8 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027f0:	f7ff f872 	bl	80018d8 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b64      	cmp	r3, #100	; 0x64
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e1f3      	b.n	8002bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002802:	4b51      	ldr	r3, [pc, #324]	; (8002948 <HAL_RCC_OscConfig+0x240>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f0      	bne.n	80027f0 <HAL_RCC_OscConfig+0xe8>
 800280e:	e000      	b.n	8002812 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002810:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d063      	beq.n	80028e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800281e:	4b4a      	ldr	r3, [pc, #296]	; (8002948 <HAL_RCC_OscConfig+0x240>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 030c 	and.w	r3, r3, #12
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00b      	beq.n	8002842 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800282a:	4b47      	ldr	r3, [pc, #284]	; (8002948 <HAL_RCC_OscConfig+0x240>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002832:	2b08      	cmp	r3, #8
 8002834:	d11c      	bne.n	8002870 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002836:	4b44      	ldr	r3, [pc, #272]	; (8002948 <HAL_RCC_OscConfig+0x240>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d116      	bne.n	8002870 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002842:	4b41      	ldr	r3, [pc, #260]	; (8002948 <HAL_RCC_OscConfig+0x240>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d005      	beq.n	800285a <HAL_RCC_OscConfig+0x152>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d001      	beq.n	800285a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e1c7      	b.n	8002bea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800285a:	4b3b      	ldr	r3, [pc, #236]	; (8002948 <HAL_RCC_OscConfig+0x240>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	4937      	ldr	r1, [pc, #220]	; (8002948 <HAL_RCC_OscConfig+0x240>)
 800286a:	4313      	orrs	r3, r2
 800286c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800286e:	e03a      	b.n	80028e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d020      	beq.n	80028ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002878:	4b34      	ldr	r3, [pc, #208]	; (800294c <HAL_RCC_OscConfig+0x244>)
 800287a:	2201      	movs	r2, #1
 800287c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287e:	f7ff f82b 	bl	80018d8 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002886:	f7ff f827 	bl	80018d8 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e1a8      	b.n	8002bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002898:	4b2b      	ldr	r3, [pc, #172]	; (8002948 <HAL_RCC_OscConfig+0x240>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0f0      	beq.n	8002886 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a4:	4b28      	ldr	r3, [pc, #160]	; (8002948 <HAL_RCC_OscConfig+0x240>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	4925      	ldr	r1, [pc, #148]	; (8002948 <HAL_RCC_OscConfig+0x240>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	600b      	str	r3, [r1, #0]
 80028b8:	e015      	b.n	80028e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ba:	4b24      	ldr	r3, [pc, #144]	; (800294c <HAL_RCC_OscConfig+0x244>)
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c0:	f7ff f80a 	bl	80018d8 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028c8:	f7ff f806 	bl	80018d8 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e187      	b.n	8002bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028da:	4b1b      	ldr	r3, [pc, #108]	; (8002948 <HAL_RCC_OscConfig+0x240>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1f0      	bne.n	80028c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0308 	and.w	r3, r3, #8
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d036      	beq.n	8002960 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d016      	beq.n	8002928 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028fa:	4b15      	ldr	r3, [pc, #84]	; (8002950 <HAL_RCC_OscConfig+0x248>)
 80028fc:	2201      	movs	r2, #1
 80028fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002900:	f7fe ffea 	bl	80018d8 <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002908:	f7fe ffe6 	bl	80018d8 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e167      	b.n	8002bea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800291a:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <HAL_RCC_OscConfig+0x240>)
 800291c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0f0      	beq.n	8002908 <HAL_RCC_OscConfig+0x200>
 8002926:	e01b      	b.n	8002960 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002928:	4b09      	ldr	r3, [pc, #36]	; (8002950 <HAL_RCC_OscConfig+0x248>)
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800292e:	f7fe ffd3 	bl	80018d8 <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002934:	e00e      	b.n	8002954 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002936:	f7fe ffcf 	bl	80018d8 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d907      	bls.n	8002954 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e150      	b.n	8002bea <HAL_RCC_OscConfig+0x4e2>
 8002948:	40023800 	.word	0x40023800
 800294c:	42470000 	.word	0x42470000
 8002950:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002954:	4b88      	ldr	r3, [pc, #544]	; (8002b78 <HAL_RCC_OscConfig+0x470>)
 8002956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1ea      	bne.n	8002936 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 8097 	beq.w	8002a9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800296e:	2300      	movs	r3, #0
 8002970:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002972:	4b81      	ldr	r3, [pc, #516]	; (8002b78 <HAL_RCC_OscConfig+0x470>)
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10f      	bne.n	800299e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800297e:	2300      	movs	r3, #0
 8002980:	60bb      	str	r3, [r7, #8]
 8002982:	4b7d      	ldr	r3, [pc, #500]	; (8002b78 <HAL_RCC_OscConfig+0x470>)
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	4a7c      	ldr	r2, [pc, #496]	; (8002b78 <HAL_RCC_OscConfig+0x470>)
 8002988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800298c:	6413      	str	r3, [r2, #64]	; 0x40
 800298e:	4b7a      	ldr	r3, [pc, #488]	; (8002b78 <HAL_RCC_OscConfig+0x470>)
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002996:	60bb      	str	r3, [r7, #8]
 8002998:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800299a:	2301      	movs	r3, #1
 800299c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800299e:	4b77      	ldr	r3, [pc, #476]	; (8002b7c <HAL_RCC_OscConfig+0x474>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d118      	bne.n	80029dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029aa:	4b74      	ldr	r3, [pc, #464]	; (8002b7c <HAL_RCC_OscConfig+0x474>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a73      	ldr	r2, [pc, #460]	; (8002b7c <HAL_RCC_OscConfig+0x474>)
 80029b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029b6:	f7fe ff8f 	bl	80018d8 <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029be:	f7fe ff8b 	bl	80018d8 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e10c      	b.n	8002bea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d0:	4b6a      	ldr	r3, [pc, #424]	; (8002b7c <HAL_RCC_OscConfig+0x474>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0f0      	beq.n	80029be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d106      	bne.n	80029f2 <HAL_RCC_OscConfig+0x2ea>
 80029e4:	4b64      	ldr	r3, [pc, #400]	; (8002b78 <HAL_RCC_OscConfig+0x470>)
 80029e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e8:	4a63      	ldr	r2, [pc, #396]	; (8002b78 <HAL_RCC_OscConfig+0x470>)
 80029ea:	f043 0301 	orr.w	r3, r3, #1
 80029ee:	6713      	str	r3, [r2, #112]	; 0x70
 80029f0:	e01c      	b.n	8002a2c <HAL_RCC_OscConfig+0x324>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	2b05      	cmp	r3, #5
 80029f8:	d10c      	bne.n	8002a14 <HAL_RCC_OscConfig+0x30c>
 80029fa:	4b5f      	ldr	r3, [pc, #380]	; (8002b78 <HAL_RCC_OscConfig+0x470>)
 80029fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fe:	4a5e      	ldr	r2, [pc, #376]	; (8002b78 <HAL_RCC_OscConfig+0x470>)
 8002a00:	f043 0304 	orr.w	r3, r3, #4
 8002a04:	6713      	str	r3, [r2, #112]	; 0x70
 8002a06:	4b5c      	ldr	r3, [pc, #368]	; (8002b78 <HAL_RCC_OscConfig+0x470>)
 8002a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0a:	4a5b      	ldr	r2, [pc, #364]	; (8002b78 <HAL_RCC_OscConfig+0x470>)
 8002a0c:	f043 0301 	orr.w	r3, r3, #1
 8002a10:	6713      	str	r3, [r2, #112]	; 0x70
 8002a12:	e00b      	b.n	8002a2c <HAL_RCC_OscConfig+0x324>
 8002a14:	4b58      	ldr	r3, [pc, #352]	; (8002b78 <HAL_RCC_OscConfig+0x470>)
 8002a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a18:	4a57      	ldr	r2, [pc, #348]	; (8002b78 <HAL_RCC_OscConfig+0x470>)
 8002a1a:	f023 0301 	bic.w	r3, r3, #1
 8002a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a20:	4b55      	ldr	r3, [pc, #340]	; (8002b78 <HAL_RCC_OscConfig+0x470>)
 8002a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a24:	4a54      	ldr	r2, [pc, #336]	; (8002b78 <HAL_RCC_OscConfig+0x470>)
 8002a26:	f023 0304 	bic.w	r3, r3, #4
 8002a2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d015      	beq.n	8002a60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a34:	f7fe ff50 	bl	80018d8 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a3a:	e00a      	b.n	8002a52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a3c:	f7fe ff4c 	bl	80018d8 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e0cb      	b.n	8002bea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a52:	4b49      	ldr	r3, [pc, #292]	; (8002b78 <HAL_RCC_OscConfig+0x470>)
 8002a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d0ee      	beq.n	8002a3c <HAL_RCC_OscConfig+0x334>
 8002a5e:	e014      	b.n	8002a8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a60:	f7fe ff3a 	bl	80018d8 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a66:	e00a      	b.n	8002a7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a68:	f7fe ff36 	bl	80018d8 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e0b5      	b.n	8002bea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a7e:	4b3e      	ldr	r3, [pc, #248]	; (8002b78 <HAL_RCC_OscConfig+0x470>)
 8002a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1ee      	bne.n	8002a68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a8a:	7dfb      	ldrb	r3, [r7, #23]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d105      	bne.n	8002a9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a90:	4b39      	ldr	r3, [pc, #228]	; (8002b78 <HAL_RCC_OscConfig+0x470>)
 8002a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a94:	4a38      	ldr	r2, [pc, #224]	; (8002b78 <HAL_RCC_OscConfig+0x470>)
 8002a96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 80a1 	beq.w	8002be8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002aa6:	4b34      	ldr	r3, [pc, #208]	; (8002b78 <HAL_RCC_OscConfig+0x470>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 030c 	and.w	r3, r3, #12
 8002aae:	2b08      	cmp	r3, #8
 8002ab0:	d05c      	beq.n	8002b6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d141      	bne.n	8002b3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aba:	4b31      	ldr	r3, [pc, #196]	; (8002b80 <HAL_RCC_OscConfig+0x478>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac0:	f7fe ff0a 	bl	80018d8 <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ac8:	f7fe ff06 	bl	80018d8 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e087      	b.n	8002bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ada:	4b27      	ldr	r3, [pc, #156]	; (8002b78 <HAL_RCC_OscConfig+0x470>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1f0      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	69da      	ldr	r2, [r3, #28]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	431a      	orrs	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	019b      	lsls	r3, r3, #6
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afc:	085b      	lsrs	r3, r3, #1
 8002afe:	3b01      	subs	r3, #1
 8002b00:	041b      	lsls	r3, r3, #16
 8002b02:	431a      	orrs	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b08:	061b      	lsls	r3, r3, #24
 8002b0a:	491b      	ldr	r1, [pc, #108]	; (8002b78 <HAL_RCC_OscConfig+0x470>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b10:	4b1b      	ldr	r3, [pc, #108]	; (8002b80 <HAL_RCC_OscConfig+0x478>)
 8002b12:	2201      	movs	r2, #1
 8002b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b16:	f7fe fedf 	bl	80018d8 <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b1c:	e008      	b.n	8002b30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b1e:	f7fe fedb 	bl	80018d8 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e05c      	b.n	8002bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b30:	4b11      	ldr	r3, [pc, #68]	; (8002b78 <HAL_RCC_OscConfig+0x470>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d0f0      	beq.n	8002b1e <HAL_RCC_OscConfig+0x416>
 8002b3c:	e054      	b.n	8002be8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b3e:	4b10      	ldr	r3, [pc, #64]	; (8002b80 <HAL_RCC_OscConfig+0x478>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b44:	f7fe fec8 	bl	80018d8 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b4c:	f7fe fec4 	bl	80018d8 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e045      	b.n	8002bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b5e:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <HAL_RCC_OscConfig+0x470>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f0      	bne.n	8002b4c <HAL_RCC_OscConfig+0x444>
 8002b6a:	e03d      	b.n	8002be8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d107      	bne.n	8002b84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e038      	b.n	8002bea <HAL_RCC_OscConfig+0x4e2>
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	40007000 	.word	0x40007000
 8002b80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b84:	4b1b      	ldr	r3, [pc, #108]	; (8002bf4 <HAL_RCC_OscConfig+0x4ec>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d028      	beq.n	8002be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d121      	bne.n	8002be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d11a      	bne.n	8002be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d111      	bne.n	8002be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bca:	085b      	lsrs	r3, r3, #1
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d107      	bne.n	8002be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d001      	beq.n	8002be8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e000      	b.n	8002bea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3718      	adds	r7, #24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40023800 	.word	0x40023800

08002bf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e0cc      	b.n	8002da6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c0c:	4b68      	ldr	r3, [pc, #416]	; (8002db0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0307 	and.w	r3, r3, #7
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d90c      	bls.n	8002c34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c1a:	4b65      	ldr	r3, [pc, #404]	; (8002db0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c22:	4b63      	ldr	r3, [pc, #396]	; (8002db0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d001      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e0b8      	b.n	8002da6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d020      	beq.n	8002c82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d005      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c4c:	4b59      	ldr	r3, [pc, #356]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	4a58      	ldr	r2, [pc, #352]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0308 	and.w	r3, r3, #8
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d005      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c64:	4b53      	ldr	r3, [pc, #332]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	4a52      	ldr	r2, [pc, #328]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c70:	4b50      	ldr	r3, [pc, #320]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	494d      	ldr	r1, [pc, #308]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d044      	beq.n	8002d18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d107      	bne.n	8002ca6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c96:	4b47      	ldr	r3, [pc, #284]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d119      	bne.n	8002cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e07f      	b.n	8002da6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d003      	beq.n	8002cb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cb2:	2b03      	cmp	r3, #3
 8002cb4:	d107      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cb6:	4b3f      	ldr	r3, [pc, #252]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d109      	bne.n	8002cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e06f      	b.n	8002da6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc6:	4b3b      	ldr	r3, [pc, #236]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e067      	b.n	8002da6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cd6:	4b37      	ldr	r3, [pc, #220]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f023 0203 	bic.w	r2, r3, #3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	4934      	ldr	r1, [pc, #208]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ce8:	f7fe fdf6 	bl	80018d8 <HAL_GetTick>
 8002cec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cee:	e00a      	b.n	8002d06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cf0:	f7fe fdf2 	bl	80018d8 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e04f      	b.n	8002da6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d06:	4b2b      	ldr	r3, [pc, #172]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 020c 	and.w	r2, r3, #12
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d1eb      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d18:	4b25      	ldr	r3, [pc, #148]	; (8002db0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d20c      	bcs.n	8002d40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d26:	4b22      	ldr	r3, [pc, #136]	; (8002db0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	b2d2      	uxtb	r2, r2
 8002d2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d2e:	4b20      	ldr	r3, [pc, #128]	; (8002db0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d001      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e032      	b.n	8002da6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0304 	and.w	r3, r3, #4
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d008      	beq.n	8002d5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d4c:	4b19      	ldr	r3, [pc, #100]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	4916      	ldr	r1, [pc, #88]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0308 	and.w	r3, r3, #8
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d009      	beq.n	8002d7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d6a:	4b12      	ldr	r3, [pc, #72]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	490e      	ldr	r1, [pc, #56]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d7e:	f000 f821 	bl	8002dc4 <HAL_RCC_GetSysClockFreq>
 8002d82:	4602      	mov	r2, r0
 8002d84:	4b0b      	ldr	r3, [pc, #44]	; (8002db4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	091b      	lsrs	r3, r3, #4
 8002d8a:	f003 030f 	and.w	r3, r3, #15
 8002d8e:	490a      	ldr	r1, [pc, #40]	; (8002db8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d90:	5ccb      	ldrb	r3, [r1, r3]
 8002d92:	fa22 f303 	lsr.w	r3, r2, r3
 8002d96:	4a09      	ldr	r2, [pc, #36]	; (8002dbc <HAL_RCC_ClockConfig+0x1c4>)
 8002d98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d9a:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fe fd56 	bl	8001850 <HAL_InitTick>

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	40023c00 	.word	0x40023c00
 8002db4:	40023800 	.word	0x40023800
 8002db8:	080057c0 	.word	0x080057c0
 8002dbc:	20000000 	.word	0x20000000
 8002dc0:	20000004 	.word	0x20000004

08002dc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dc8:	b090      	sub	sp, #64	; 0x40
 8002dca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	637b      	str	r3, [r7, #52]	; 0x34
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ddc:	4b59      	ldr	r3, [pc, #356]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f003 030c 	and.w	r3, r3, #12
 8002de4:	2b08      	cmp	r3, #8
 8002de6:	d00d      	beq.n	8002e04 <HAL_RCC_GetSysClockFreq+0x40>
 8002de8:	2b08      	cmp	r3, #8
 8002dea:	f200 80a1 	bhi.w	8002f30 <HAL_RCC_GetSysClockFreq+0x16c>
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d002      	beq.n	8002df8 <HAL_RCC_GetSysClockFreq+0x34>
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	d003      	beq.n	8002dfe <HAL_RCC_GetSysClockFreq+0x3a>
 8002df6:	e09b      	b.n	8002f30 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002df8:	4b53      	ldr	r3, [pc, #332]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x184>)
 8002dfa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002dfc:	e09b      	b.n	8002f36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dfe:	4b53      	ldr	r3, [pc, #332]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x188>)
 8002e00:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e02:	e098      	b.n	8002f36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e04:	4b4f      	ldr	r3, [pc, #316]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e0c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e0e:	4b4d      	ldr	r3, [pc, #308]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d028      	beq.n	8002e6c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e1a:	4b4a      	ldr	r3, [pc, #296]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	099b      	lsrs	r3, r3, #6
 8002e20:	2200      	movs	r2, #0
 8002e22:	623b      	str	r3, [r7, #32]
 8002e24:	627a      	str	r2, [r7, #36]	; 0x24
 8002e26:	6a3b      	ldr	r3, [r7, #32]
 8002e28:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	4b47      	ldr	r3, [pc, #284]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x188>)
 8002e30:	fb03 f201 	mul.w	r2, r3, r1
 8002e34:	2300      	movs	r3, #0
 8002e36:	fb00 f303 	mul.w	r3, r0, r3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	4a43      	ldr	r2, [pc, #268]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x188>)
 8002e3e:	fba0 1202 	umull	r1, r2, r0, r2
 8002e42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e44:	460a      	mov	r2, r1
 8002e46:	62ba      	str	r2, [r7, #40]	; 0x28
 8002e48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e4a:	4413      	add	r3, r2
 8002e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e50:	2200      	movs	r2, #0
 8002e52:	61bb      	str	r3, [r7, #24]
 8002e54:	61fa      	str	r2, [r7, #28]
 8002e56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e5a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002e5e:	f7fd fa07 	bl	8000270 <__aeabi_uldivmod>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	4613      	mov	r3, r2
 8002e68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e6a:	e053      	b.n	8002f14 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e6c:	4b35      	ldr	r3, [pc, #212]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	099b      	lsrs	r3, r3, #6
 8002e72:	2200      	movs	r2, #0
 8002e74:	613b      	str	r3, [r7, #16]
 8002e76:	617a      	str	r2, [r7, #20]
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002e7e:	f04f 0b00 	mov.w	fp, #0
 8002e82:	4652      	mov	r2, sl
 8002e84:	465b      	mov	r3, fp
 8002e86:	f04f 0000 	mov.w	r0, #0
 8002e8a:	f04f 0100 	mov.w	r1, #0
 8002e8e:	0159      	lsls	r1, r3, #5
 8002e90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e94:	0150      	lsls	r0, r2, #5
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	ebb2 080a 	subs.w	r8, r2, sl
 8002e9e:	eb63 090b 	sbc.w	r9, r3, fp
 8002ea2:	f04f 0200 	mov.w	r2, #0
 8002ea6:	f04f 0300 	mov.w	r3, #0
 8002eaa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002eae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002eb2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002eb6:	ebb2 0408 	subs.w	r4, r2, r8
 8002eba:	eb63 0509 	sbc.w	r5, r3, r9
 8002ebe:	f04f 0200 	mov.w	r2, #0
 8002ec2:	f04f 0300 	mov.w	r3, #0
 8002ec6:	00eb      	lsls	r3, r5, #3
 8002ec8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ecc:	00e2      	lsls	r2, r4, #3
 8002ece:	4614      	mov	r4, r2
 8002ed0:	461d      	mov	r5, r3
 8002ed2:	eb14 030a 	adds.w	r3, r4, sl
 8002ed6:	603b      	str	r3, [r7, #0]
 8002ed8:	eb45 030b 	adc.w	r3, r5, fp
 8002edc:	607b      	str	r3, [r7, #4]
 8002ede:	f04f 0200 	mov.w	r2, #0
 8002ee2:	f04f 0300 	mov.w	r3, #0
 8002ee6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002eea:	4629      	mov	r1, r5
 8002eec:	028b      	lsls	r3, r1, #10
 8002eee:	4621      	mov	r1, r4
 8002ef0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ef4:	4621      	mov	r1, r4
 8002ef6:	028a      	lsls	r2, r1, #10
 8002ef8:	4610      	mov	r0, r2
 8002efa:	4619      	mov	r1, r3
 8002efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002efe:	2200      	movs	r2, #0
 8002f00:	60bb      	str	r3, [r7, #8]
 8002f02:	60fa      	str	r2, [r7, #12]
 8002f04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f08:	f7fd f9b2 	bl	8000270 <__aeabi_uldivmod>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	460b      	mov	r3, r1
 8002f10:	4613      	mov	r3, r2
 8002f12:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f14:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	0c1b      	lsrs	r3, r3, #16
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	3301      	adds	r3, #1
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002f24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f2c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f2e:	e002      	b.n	8002f36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f30:	4b05      	ldr	r3, [pc, #20]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f32:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3740      	adds	r7, #64	; 0x40
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f42:	bf00      	nop
 8002f44:	40023800 	.word	0x40023800
 8002f48:	00f42400 	.word	0x00f42400
 8002f4c:	005b8d80 	.word	0x005b8d80

08002f50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f54:	4b03      	ldr	r3, [pc, #12]	; (8002f64 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f56:	681b      	ldr	r3, [r3, #0]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	20000000 	.word	0x20000000

08002f68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f6c:	f7ff fff0 	bl	8002f50 <HAL_RCC_GetHCLKFreq>
 8002f70:	4602      	mov	r2, r0
 8002f72:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	0a9b      	lsrs	r3, r3, #10
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	4903      	ldr	r1, [pc, #12]	; (8002f8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f7e:	5ccb      	ldrb	r3, [r1, r3]
 8002f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40023800 	.word	0x40023800
 8002f8c:	080057d0 	.word	0x080057d0

08002f90 <siprintf>:
 8002f90:	b40e      	push	{r1, r2, r3}
 8002f92:	b500      	push	{lr}
 8002f94:	b09c      	sub	sp, #112	; 0x70
 8002f96:	ab1d      	add	r3, sp, #116	; 0x74
 8002f98:	9002      	str	r0, [sp, #8]
 8002f9a:	9006      	str	r0, [sp, #24]
 8002f9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002fa0:	4809      	ldr	r0, [pc, #36]	; (8002fc8 <siprintf+0x38>)
 8002fa2:	9107      	str	r1, [sp, #28]
 8002fa4:	9104      	str	r1, [sp, #16]
 8002fa6:	4909      	ldr	r1, [pc, #36]	; (8002fcc <siprintf+0x3c>)
 8002fa8:	f853 2b04 	ldr.w	r2, [r3], #4
 8002fac:	9105      	str	r1, [sp, #20]
 8002fae:	6800      	ldr	r0, [r0, #0]
 8002fb0:	9301      	str	r3, [sp, #4]
 8002fb2:	a902      	add	r1, sp, #8
 8002fb4:	f000 f992 	bl	80032dc <_svfiprintf_r>
 8002fb8:	9b02      	ldr	r3, [sp, #8]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	701a      	strb	r2, [r3, #0]
 8002fbe:	b01c      	add	sp, #112	; 0x70
 8002fc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002fc4:	b003      	add	sp, #12
 8002fc6:	4770      	bx	lr
 8002fc8:	20000058 	.word	0x20000058
 8002fcc:	ffff0208 	.word	0xffff0208

08002fd0 <memset>:
 8002fd0:	4402      	add	r2, r0
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d100      	bne.n	8002fda <memset+0xa>
 8002fd8:	4770      	bx	lr
 8002fda:	f803 1b01 	strb.w	r1, [r3], #1
 8002fde:	e7f9      	b.n	8002fd4 <memset+0x4>

08002fe0 <__errno>:
 8002fe0:	4b01      	ldr	r3, [pc, #4]	; (8002fe8 <__errno+0x8>)
 8002fe2:	6818      	ldr	r0, [r3, #0]
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	20000058 	.word	0x20000058

08002fec <__libc_init_array>:
 8002fec:	b570      	push	{r4, r5, r6, lr}
 8002fee:	4d0d      	ldr	r5, [pc, #52]	; (8003024 <__libc_init_array+0x38>)
 8002ff0:	4c0d      	ldr	r4, [pc, #52]	; (8003028 <__libc_init_array+0x3c>)
 8002ff2:	1b64      	subs	r4, r4, r5
 8002ff4:	10a4      	asrs	r4, r4, #2
 8002ff6:	2600      	movs	r6, #0
 8002ff8:	42a6      	cmp	r6, r4
 8002ffa:	d109      	bne.n	8003010 <__libc_init_array+0x24>
 8002ffc:	4d0b      	ldr	r5, [pc, #44]	; (800302c <__libc_init_array+0x40>)
 8002ffe:	4c0c      	ldr	r4, [pc, #48]	; (8003030 <__libc_init_array+0x44>)
 8003000:	f000 fc6a 	bl	80038d8 <_init>
 8003004:	1b64      	subs	r4, r4, r5
 8003006:	10a4      	asrs	r4, r4, #2
 8003008:	2600      	movs	r6, #0
 800300a:	42a6      	cmp	r6, r4
 800300c:	d105      	bne.n	800301a <__libc_init_array+0x2e>
 800300e:	bd70      	pop	{r4, r5, r6, pc}
 8003010:	f855 3b04 	ldr.w	r3, [r5], #4
 8003014:	4798      	blx	r3
 8003016:	3601      	adds	r6, #1
 8003018:	e7ee      	b.n	8002ff8 <__libc_init_array+0xc>
 800301a:	f855 3b04 	ldr.w	r3, [r5], #4
 800301e:	4798      	blx	r3
 8003020:	3601      	adds	r6, #1
 8003022:	e7f2      	b.n	800300a <__libc_init_array+0x1e>
 8003024:	08005814 	.word	0x08005814
 8003028:	08005814 	.word	0x08005814
 800302c:	08005814 	.word	0x08005814
 8003030:	08005818 	.word	0x08005818

08003034 <__retarget_lock_acquire_recursive>:
 8003034:	4770      	bx	lr

08003036 <__retarget_lock_release_recursive>:
 8003036:	4770      	bx	lr

08003038 <_free_r>:
 8003038:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800303a:	2900      	cmp	r1, #0
 800303c:	d044      	beq.n	80030c8 <_free_r+0x90>
 800303e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003042:	9001      	str	r0, [sp, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	f1a1 0404 	sub.w	r4, r1, #4
 800304a:	bfb8      	it	lt
 800304c:	18e4      	addlt	r4, r4, r3
 800304e:	f000 f8df 	bl	8003210 <__malloc_lock>
 8003052:	4a1e      	ldr	r2, [pc, #120]	; (80030cc <_free_r+0x94>)
 8003054:	9801      	ldr	r0, [sp, #4]
 8003056:	6813      	ldr	r3, [r2, #0]
 8003058:	b933      	cbnz	r3, 8003068 <_free_r+0x30>
 800305a:	6063      	str	r3, [r4, #4]
 800305c:	6014      	str	r4, [r2, #0]
 800305e:	b003      	add	sp, #12
 8003060:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003064:	f000 b8da 	b.w	800321c <__malloc_unlock>
 8003068:	42a3      	cmp	r3, r4
 800306a:	d908      	bls.n	800307e <_free_r+0x46>
 800306c:	6825      	ldr	r5, [r4, #0]
 800306e:	1961      	adds	r1, r4, r5
 8003070:	428b      	cmp	r3, r1
 8003072:	bf01      	itttt	eq
 8003074:	6819      	ldreq	r1, [r3, #0]
 8003076:	685b      	ldreq	r3, [r3, #4]
 8003078:	1949      	addeq	r1, r1, r5
 800307a:	6021      	streq	r1, [r4, #0]
 800307c:	e7ed      	b.n	800305a <_free_r+0x22>
 800307e:	461a      	mov	r2, r3
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	b10b      	cbz	r3, 8003088 <_free_r+0x50>
 8003084:	42a3      	cmp	r3, r4
 8003086:	d9fa      	bls.n	800307e <_free_r+0x46>
 8003088:	6811      	ldr	r1, [r2, #0]
 800308a:	1855      	adds	r5, r2, r1
 800308c:	42a5      	cmp	r5, r4
 800308e:	d10b      	bne.n	80030a8 <_free_r+0x70>
 8003090:	6824      	ldr	r4, [r4, #0]
 8003092:	4421      	add	r1, r4
 8003094:	1854      	adds	r4, r2, r1
 8003096:	42a3      	cmp	r3, r4
 8003098:	6011      	str	r1, [r2, #0]
 800309a:	d1e0      	bne.n	800305e <_free_r+0x26>
 800309c:	681c      	ldr	r4, [r3, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	6053      	str	r3, [r2, #4]
 80030a2:	440c      	add	r4, r1
 80030a4:	6014      	str	r4, [r2, #0]
 80030a6:	e7da      	b.n	800305e <_free_r+0x26>
 80030a8:	d902      	bls.n	80030b0 <_free_r+0x78>
 80030aa:	230c      	movs	r3, #12
 80030ac:	6003      	str	r3, [r0, #0]
 80030ae:	e7d6      	b.n	800305e <_free_r+0x26>
 80030b0:	6825      	ldr	r5, [r4, #0]
 80030b2:	1961      	adds	r1, r4, r5
 80030b4:	428b      	cmp	r3, r1
 80030b6:	bf04      	itt	eq
 80030b8:	6819      	ldreq	r1, [r3, #0]
 80030ba:	685b      	ldreq	r3, [r3, #4]
 80030bc:	6063      	str	r3, [r4, #4]
 80030be:	bf04      	itt	eq
 80030c0:	1949      	addeq	r1, r1, r5
 80030c2:	6021      	streq	r1, [r4, #0]
 80030c4:	6054      	str	r4, [r2, #4]
 80030c6:	e7ca      	b.n	800305e <_free_r+0x26>
 80030c8:	b003      	add	sp, #12
 80030ca:	bd30      	pop	{r4, r5, pc}
 80030cc:	2000061c 	.word	0x2000061c

080030d0 <sbrk_aligned>:
 80030d0:	b570      	push	{r4, r5, r6, lr}
 80030d2:	4e0e      	ldr	r6, [pc, #56]	; (800310c <sbrk_aligned+0x3c>)
 80030d4:	460c      	mov	r4, r1
 80030d6:	6831      	ldr	r1, [r6, #0]
 80030d8:	4605      	mov	r5, r0
 80030da:	b911      	cbnz	r1, 80030e2 <sbrk_aligned+0x12>
 80030dc:	f000 fba6 	bl	800382c <_sbrk_r>
 80030e0:	6030      	str	r0, [r6, #0]
 80030e2:	4621      	mov	r1, r4
 80030e4:	4628      	mov	r0, r5
 80030e6:	f000 fba1 	bl	800382c <_sbrk_r>
 80030ea:	1c43      	adds	r3, r0, #1
 80030ec:	d00a      	beq.n	8003104 <sbrk_aligned+0x34>
 80030ee:	1cc4      	adds	r4, r0, #3
 80030f0:	f024 0403 	bic.w	r4, r4, #3
 80030f4:	42a0      	cmp	r0, r4
 80030f6:	d007      	beq.n	8003108 <sbrk_aligned+0x38>
 80030f8:	1a21      	subs	r1, r4, r0
 80030fa:	4628      	mov	r0, r5
 80030fc:	f000 fb96 	bl	800382c <_sbrk_r>
 8003100:	3001      	adds	r0, #1
 8003102:	d101      	bne.n	8003108 <sbrk_aligned+0x38>
 8003104:	f04f 34ff 	mov.w	r4, #4294967295
 8003108:	4620      	mov	r0, r4
 800310a:	bd70      	pop	{r4, r5, r6, pc}
 800310c:	20000620 	.word	0x20000620

08003110 <_malloc_r>:
 8003110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003114:	1ccd      	adds	r5, r1, #3
 8003116:	f025 0503 	bic.w	r5, r5, #3
 800311a:	3508      	adds	r5, #8
 800311c:	2d0c      	cmp	r5, #12
 800311e:	bf38      	it	cc
 8003120:	250c      	movcc	r5, #12
 8003122:	2d00      	cmp	r5, #0
 8003124:	4607      	mov	r7, r0
 8003126:	db01      	blt.n	800312c <_malloc_r+0x1c>
 8003128:	42a9      	cmp	r1, r5
 800312a:	d905      	bls.n	8003138 <_malloc_r+0x28>
 800312c:	230c      	movs	r3, #12
 800312e:	603b      	str	r3, [r7, #0]
 8003130:	2600      	movs	r6, #0
 8003132:	4630      	mov	r0, r6
 8003134:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003138:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800320c <_malloc_r+0xfc>
 800313c:	f000 f868 	bl	8003210 <__malloc_lock>
 8003140:	f8d8 3000 	ldr.w	r3, [r8]
 8003144:	461c      	mov	r4, r3
 8003146:	bb5c      	cbnz	r4, 80031a0 <_malloc_r+0x90>
 8003148:	4629      	mov	r1, r5
 800314a:	4638      	mov	r0, r7
 800314c:	f7ff ffc0 	bl	80030d0 <sbrk_aligned>
 8003150:	1c43      	adds	r3, r0, #1
 8003152:	4604      	mov	r4, r0
 8003154:	d155      	bne.n	8003202 <_malloc_r+0xf2>
 8003156:	f8d8 4000 	ldr.w	r4, [r8]
 800315a:	4626      	mov	r6, r4
 800315c:	2e00      	cmp	r6, #0
 800315e:	d145      	bne.n	80031ec <_malloc_r+0xdc>
 8003160:	2c00      	cmp	r4, #0
 8003162:	d048      	beq.n	80031f6 <_malloc_r+0xe6>
 8003164:	6823      	ldr	r3, [r4, #0]
 8003166:	4631      	mov	r1, r6
 8003168:	4638      	mov	r0, r7
 800316a:	eb04 0903 	add.w	r9, r4, r3
 800316e:	f000 fb5d 	bl	800382c <_sbrk_r>
 8003172:	4581      	cmp	r9, r0
 8003174:	d13f      	bne.n	80031f6 <_malloc_r+0xe6>
 8003176:	6821      	ldr	r1, [r4, #0]
 8003178:	1a6d      	subs	r5, r5, r1
 800317a:	4629      	mov	r1, r5
 800317c:	4638      	mov	r0, r7
 800317e:	f7ff ffa7 	bl	80030d0 <sbrk_aligned>
 8003182:	3001      	adds	r0, #1
 8003184:	d037      	beq.n	80031f6 <_malloc_r+0xe6>
 8003186:	6823      	ldr	r3, [r4, #0]
 8003188:	442b      	add	r3, r5
 800318a:	6023      	str	r3, [r4, #0]
 800318c:	f8d8 3000 	ldr.w	r3, [r8]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d038      	beq.n	8003206 <_malloc_r+0xf6>
 8003194:	685a      	ldr	r2, [r3, #4]
 8003196:	42a2      	cmp	r2, r4
 8003198:	d12b      	bne.n	80031f2 <_malloc_r+0xe2>
 800319a:	2200      	movs	r2, #0
 800319c:	605a      	str	r2, [r3, #4]
 800319e:	e00f      	b.n	80031c0 <_malloc_r+0xb0>
 80031a0:	6822      	ldr	r2, [r4, #0]
 80031a2:	1b52      	subs	r2, r2, r5
 80031a4:	d41f      	bmi.n	80031e6 <_malloc_r+0xd6>
 80031a6:	2a0b      	cmp	r2, #11
 80031a8:	d917      	bls.n	80031da <_malloc_r+0xca>
 80031aa:	1961      	adds	r1, r4, r5
 80031ac:	42a3      	cmp	r3, r4
 80031ae:	6025      	str	r5, [r4, #0]
 80031b0:	bf18      	it	ne
 80031b2:	6059      	strne	r1, [r3, #4]
 80031b4:	6863      	ldr	r3, [r4, #4]
 80031b6:	bf08      	it	eq
 80031b8:	f8c8 1000 	streq.w	r1, [r8]
 80031bc:	5162      	str	r2, [r4, r5]
 80031be:	604b      	str	r3, [r1, #4]
 80031c0:	4638      	mov	r0, r7
 80031c2:	f104 060b 	add.w	r6, r4, #11
 80031c6:	f000 f829 	bl	800321c <__malloc_unlock>
 80031ca:	f026 0607 	bic.w	r6, r6, #7
 80031ce:	1d23      	adds	r3, r4, #4
 80031d0:	1af2      	subs	r2, r6, r3
 80031d2:	d0ae      	beq.n	8003132 <_malloc_r+0x22>
 80031d4:	1b9b      	subs	r3, r3, r6
 80031d6:	50a3      	str	r3, [r4, r2]
 80031d8:	e7ab      	b.n	8003132 <_malloc_r+0x22>
 80031da:	42a3      	cmp	r3, r4
 80031dc:	6862      	ldr	r2, [r4, #4]
 80031de:	d1dd      	bne.n	800319c <_malloc_r+0x8c>
 80031e0:	f8c8 2000 	str.w	r2, [r8]
 80031e4:	e7ec      	b.n	80031c0 <_malloc_r+0xb0>
 80031e6:	4623      	mov	r3, r4
 80031e8:	6864      	ldr	r4, [r4, #4]
 80031ea:	e7ac      	b.n	8003146 <_malloc_r+0x36>
 80031ec:	4634      	mov	r4, r6
 80031ee:	6876      	ldr	r6, [r6, #4]
 80031f0:	e7b4      	b.n	800315c <_malloc_r+0x4c>
 80031f2:	4613      	mov	r3, r2
 80031f4:	e7cc      	b.n	8003190 <_malloc_r+0x80>
 80031f6:	230c      	movs	r3, #12
 80031f8:	603b      	str	r3, [r7, #0]
 80031fa:	4638      	mov	r0, r7
 80031fc:	f000 f80e 	bl	800321c <__malloc_unlock>
 8003200:	e797      	b.n	8003132 <_malloc_r+0x22>
 8003202:	6025      	str	r5, [r4, #0]
 8003204:	e7dc      	b.n	80031c0 <_malloc_r+0xb0>
 8003206:	605b      	str	r3, [r3, #4]
 8003208:	deff      	udf	#255	; 0xff
 800320a:	bf00      	nop
 800320c:	2000061c 	.word	0x2000061c

08003210 <__malloc_lock>:
 8003210:	4801      	ldr	r0, [pc, #4]	; (8003218 <__malloc_lock+0x8>)
 8003212:	f7ff bf0f 	b.w	8003034 <__retarget_lock_acquire_recursive>
 8003216:	bf00      	nop
 8003218:	20000618 	.word	0x20000618

0800321c <__malloc_unlock>:
 800321c:	4801      	ldr	r0, [pc, #4]	; (8003224 <__malloc_unlock+0x8>)
 800321e:	f7ff bf0a 	b.w	8003036 <__retarget_lock_release_recursive>
 8003222:	bf00      	nop
 8003224:	20000618 	.word	0x20000618

08003228 <__ssputs_r>:
 8003228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800322c:	688e      	ldr	r6, [r1, #8]
 800322e:	461f      	mov	r7, r3
 8003230:	42be      	cmp	r6, r7
 8003232:	680b      	ldr	r3, [r1, #0]
 8003234:	4682      	mov	sl, r0
 8003236:	460c      	mov	r4, r1
 8003238:	4690      	mov	r8, r2
 800323a:	d82c      	bhi.n	8003296 <__ssputs_r+0x6e>
 800323c:	898a      	ldrh	r2, [r1, #12]
 800323e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003242:	d026      	beq.n	8003292 <__ssputs_r+0x6a>
 8003244:	6965      	ldr	r5, [r4, #20]
 8003246:	6909      	ldr	r1, [r1, #16]
 8003248:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800324c:	eba3 0901 	sub.w	r9, r3, r1
 8003250:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003254:	1c7b      	adds	r3, r7, #1
 8003256:	444b      	add	r3, r9
 8003258:	106d      	asrs	r5, r5, #1
 800325a:	429d      	cmp	r5, r3
 800325c:	bf38      	it	cc
 800325e:	461d      	movcc	r5, r3
 8003260:	0553      	lsls	r3, r2, #21
 8003262:	d527      	bpl.n	80032b4 <__ssputs_r+0x8c>
 8003264:	4629      	mov	r1, r5
 8003266:	f7ff ff53 	bl	8003110 <_malloc_r>
 800326a:	4606      	mov	r6, r0
 800326c:	b360      	cbz	r0, 80032c8 <__ssputs_r+0xa0>
 800326e:	6921      	ldr	r1, [r4, #16]
 8003270:	464a      	mov	r2, r9
 8003272:	f000 faeb 	bl	800384c <memcpy>
 8003276:	89a3      	ldrh	r3, [r4, #12]
 8003278:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800327c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003280:	81a3      	strh	r3, [r4, #12]
 8003282:	6126      	str	r6, [r4, #16]
 8003284:	6165      	str	r5, [r4, #20]
 8003286:	444e      	add	r6, r9
 8003288:	eba5 0509 	sub.w	r5, r5, r9
 800328c:	6026      	str	r6, [r4, #0]
 800328e:	60a5      	str	r5, [r4, #8]
 8003290:	463e      	mov	r6, r7
 8003292:	42be      	cmp	r6, r7
 8003294:	d900      	bls.n	8003298 <__ssputs_r+0x70>
 8003296:	463e      	mov	r6, r7
 8003298:	6820      	ldr	r0, [r4, #0]
 800329a:	4632      	mov	r2, r6
 800329c:	4641      	mov	r1, r8
 800329e:	f000 faab 	bl	80037f8 <memmove>
 80032a2:	68a3      	ldr	r3, [r4, #8]
 80032a4:	1b9b      	subs	r3, r3, r6
 80032a6:	60a3      	str	r3, [r4, #8]
 80032a8:	6823      	ldr	r3, [r4, #0]
 80032aa:	4433      	add	r3, r6
 80032ac:	6023      	str	r3, [r4, #0]
 80032ae:	2000      	movs	r0, #0
 80032b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032b4:	462a      	mov	r2, r5
 80032b6:	f000 fad7 	bl	8003868 <_realloc_r>
 80032ba:	4606      	mov	r6, r0
 80032bc:	2800      	cmp	r0, #0
 80032be:	d1e0      	bne.n	8003282 <__ssputs_r+0x5a>
 80032c0:	6921      	ldr	r1, [r4, #16]
 80032c2:	4650      	mov	r0, sl
 80032c4:	f7ff feb8 	bl	8003038 <_free_r>
 80032c8:	230c      	movs	r3, #12
 80032ca:	f8ca 3000 	str.w	r3, [sl]
 80032ce:	89a3      	ldrh	r3, [r4, #12]
 80032d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032d4:	81a3      	strh	r3, [r4, #12]
 80032d6:	f04f 30ff 	mov.w	r0, #4294967295
 80032da:	e7e9      	b.n	80032b0 <__ssputs_r+0x88>

080032dc <_svfiprintf_r>:
 80032dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032e0:	4698      	mov	r8, r3
 80032e2:	898b      	ldrh	r3, [r1, #12]
 80032e4:	061b      	lsls	r3, r3, #24
 80032e6:	b09d      	sub	sp, #116	; 0x74
 80032e8:	4607      	mov	r7, r0
 80032ea:	460d      	mov	r5, r1
 80032ec:	4614      	mov	r4, r2
 80032ee:	d50e      	bpl.n	800330e <_svfiprintf_r+0x32>
 80032f0:	690b      	ldr	r3, [r1, #16]
 80032f2:	b963      	cbnz	r3, 800330e <_svfiprintf_r+0x32>
 80032f4:	2140      	movs	r1, #64	; 0x40
 80032f6:	f7ff ff0b 	bl	8003110 <_malloc_r>
 80032fa:	6028      	str	r0, [r5, #0]
 80032fc:	6128      	str	r0, [r5, #16]
 80032fe:	b920      	cbnz	r0, 800330a <_svfiprintf_r+0x2e>
 8003300:	230c      	movs	r3, #12
 8003302:	603b      	str	r3, [r7, #0]
 8003304:	f04f 30ff 	mov.w	r0, #4294967295
 8003308:	e0d0      	b.n	80034ac <_svfiprintf_r+0x1d0>
 800330a:	2340      	movs	r3, #64	; 0x40
 800330c:	616b      	str	r3, [r5, #20]
 800330e:	2300      	movs	r3, #0
 8003310:	9309      	str	r3, [sp, #36]	; 0x24
 8003312:	2320      	movs	r3, #32
 8003314:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003318:	f8cd 800c 	str.w	r8, [sp, #12]
 800331c:	2330      	movs	r3, #48	; 0x30
 800331e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80034c4 <_svfiprintf_r+0x1e8>
 8003322:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003326:	f04f 0901 	mov.w	r9, #1
 800332a:	4623      	mov	r3, r4
 800332c:	469a      	mov	sl, r3
 800332e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003332:	b10a      	cbz	r2, 8003338 <_svfiprintf_r+0x5c>
 8003334:	2a25      	cmp	r2, #37	; 0x25
 8003336:	d1f9      	bne.n	800332c <_svfiprintf_r+0x50>
 8003338:	ebba 0b04 	subs.w	fp, sl, r4
 800333c:	d00b      	beq.n	8003356 <_svfiprintf_r+0x7a>
 800333e:	465b      	mov	r3, fp
 8003340:	4622      	mov	r2, r4
 8003342:	4629      	mov	r1, r5
 8003344:	4638      	mov	r0, r7
 8003346:	f7ff ff6f 	bl	8003228 <__ssputs_r>
 800334a:	3001      	adds	r0, #1
 800334c:	f000 80a9 	beq.w	80034a2 <_svfiprintf_r+0x1c6>
 8003350:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003352:	445a      	add	r2, fp
 8003354:	9209      	str	r2, [sp, #36]	; 0x24
 8003356:	f89a 3000 	ldrb.w	r3, [sl]
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 80a1 	beq.w	80034a2 <_svfiprintf_r+0x1c6>
 8003360:	2300      	movs	r3, #0
 8003362:	f04f 32ff 	mov.w	r2, #4294967295
 8003366:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800336a:	f10a 0a01 	add.w	sl, sl, #1
 800336e:	9304      	str	r3, [sp, #16]
 8003370:	9307      	str	r3, [sp, #28]
 8003372:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003376:	931a      	str	r3, [sp, #104]	; 0x68
 8003378:	4654      	mov	r4, sl
 800337a:	2205      	movs	r2, #5
 800337c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003380:	4850      	ldr	r0, [pc, #320]	; (80034c4 <_svfiprintf_r+0x1e8>)
 8003382:	f7fc ff25 	bl	80001d0 <memchr>
 8003386:	9a04      	ldr	r2, [sp, #16]
 8003388:	b9d8      	cbnz	r0, 80033c2 <_svfiprintf_r+0xe6>
 800338a:	06d0      	lsls	r0, r2, #27
 800338c:	bf44      	itt	mi
 800338e:	2320      	movmi	r3, #32
 8003390:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003394:	0711      	lsls	r1, r2, #28
 8003396:	bf44      	itt	mi
 8003398:	232b      	movmi	r3, #43	; 0x2b
 800339a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800339e:	f89a 3000 	ldrb.w	r3, [sl]
 80033a2:	2b2a      	cmp	r3, #42	; 0x2a
 80033a4:	d015      	beq.n	80033d2 <_svfiprintf_r+0xf6>
 80033a6:	9a07      	ldr	r2, [sp, #28]
 80033a8:	4654      	mov	r4, sl
 80033aa:	2000      	movs	r0, #0
 80033ac:	f04f 0c0a 	mov.w	ip, #10
 80033b0:	4621      	mov	r1, r4
 80033b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033b6:	3b30      	subs	r3, #48	; 0x30
 80033b8:	2b09      	cmp	r3, #9
 80033ba:	d94d      	bls.n	8003458 <_svfiprintf_r+0x17c>
 80033bc:	b1b0      	cbz	r0, 80033ec <_svfiprintf_r+0x110>
 80033be:	9207      	str	r2, [sp, #28]
 80033c0:	e014      	b.n	80033ec <_svfiprintf_r+0x110>
 80033c2:	eba0 0308 	sub.w	r3, r0, r8
 80033c6:	fa09 f303 	lsl.w	r3, r9, r3
 80033ca:	4313      	orrs	r3, r2
 80033cc:	9304      	str	r3, [sp, #16]
 80033ce:	46a2      	mov	sl, r4
 80033d0:	e7d2      	b.n	8003378 <_svfiprintf_r+0x9c>
 80033d2:	9b03      	ldr	r3, [sp, #12]
 80033d4:	1d19      	adds	r1, r3, #4
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	9103      	str	r1, [sp, #12]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	bfbb      	ittet	lt
 80033de:	425b      	neglt	r3, r3
 80033e0:	f042 0202 	orrlt.w	r2, r2, #2
 80033e4:	9307      	strge	r3, [sp, #28]
 80033e6:	9307      	strlt	r3, [sp, #28]
 80033e8:	bfb8      	it	lt
 80033ea:	9204      	strlt	r2, [sp, #16]
 80033ec:	7823      	ldrb	r3, [r4, #0]
 80033ee:	2b2e      	cmp	r3, #46	; 0x2e
 80033f0:	d10c      	bne.n	800340c <_svfiprintf_r+0x130>
 80033f2:	7863      	ldrb	r3, [r4, #1]
 80033f4:	2b2a      	cmp	r3, #42	; 0x2a
 80033f6:	d134      	bne.n	8003462 <_svfiprintf_r+0x186>
 80033f8:	9b03      	ldr	r3, [sp, #12]
 80033fa:	1d1a      	adds	r2, r3, #4
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	9203      	str	r2, [sp, #12]
 8003400:	2b00      	cmp	r3, #0
 8003402:	bfb8      	it	lt
 8003404:	f04f 33ff 	movlt.w	r3, #4294967295
 8003408:	3402      	adds	r4, #2
 800340a:	9305      	str	r3, [sp, #20]
 800340c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80034d4 <_svfiprintf_r+0x1f8>
 8003410:	7821      	ldrb	r1, [r4, #0]
 8003412:	2203      	movs	r2, #3
 8003414:	4650      	mov	r0, sl
 8003416:	f7fc fedb 	bl	80001d0 <memchr>
 800341a:	b138      	cbz	r0, 800342c <_svfiprintf_r+0x150>
 800341c:	9b04      	ldr	r3, [sp, #16]
 800341e:	eba0 000a 	sub.w	r0, r0, sl
 8003422:	2240      	movs	r2, #64	; 0x40
 8003424:	4082      	lsls	r2, r0
 8003426:	4313      	orrs	r3, r2
 8003428:	3401      	adds	r4, #1
 800342a:	9304      	str	r3, [sp, #16]
 800342c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003430:	4825      	ldr	r0, [pc, #148]	; (80034c8 <_svfiprintf_r+0x1ec>)
 8003432:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003436:	2206      	movs	r2, #6
 8003438:	f7fc feca 	bl	80001d0 <memchr>
 800343c:	2800      	cmp	r0, #0
 800343e:	d038      	beq.n	80034b2 <_svfiprintf_r+0x1d6>
 8003440:	4b22      	ldr	r3, [pc, #136]	; (80034cc <_svfiprintf_r+0x1f0>)
 8003442:	bb1b      	cbnz	r3, 800348c <_svfiprintf_r+0x1b0>
 8003444:	9b03      	ldr	r3, [sp, #12]
 8003446:	3307      	adds	r3, #7
 8003448:	f023 0307 	bic.w	r3, r3, #7
 800344c:	3308      	adds	r3, #8
 800344e:	9303      	str	r3, [sp, #12]
 8003450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003452:	4433      	add	r3, r6
 8003454:	9309      	str	r3, [sp, #36]	; 0x24
 8003456:	e768      	b.n	800332a <_svfiprintf_r+0x4e>
 8003458:	fb0c 3202 	mla	r2, ip, r2, r3
 800345c:	460c      	mov	r4, r1
 800345e:	2001      	movs	r0, #1
 8003460:	e7a6      	b.n	80033b0 <_svfiprintf_r+0xd4>
 8003462:	2300      	movs	r3, #0
 8003464:	3401      	adds	r4, #1
 8003466:	9305      	str	r3, [sp, #20]
 8003468:	4619      	mov	r1, r3
 800346a:	f04f 0c0a 	mov.w	ip, #10
 800346e:	4620      	mov	r0, r4
 8003470:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003474:	3a30      	subs	r2, #48	; 0x30
 8003476:	2a09      	cmp	r2, #9
 8003478:	d903      	bls.n	8003482 <_svfiprintf_r+0x1a6>
 800347a:	2b00      	cmp	r3, #0
 800347c:	d0c6      	beq.n	800340c <_svfiprintf_r+0x130>
 800347e:	9105      	str	r1, [sp, #20]
 8003480:	e7c4      	b.n	800340c <_svfiprintf_r+0x130>
 8003482:	fb0c 2101 	mla	r1, ip, r1, r2
 8003486:	4604      	mov	r4, r0
 8003488:	2301      	movs	r3, #1
 800348a:	e7f0      	b.n	800346e <_svfiprintf_r+0x192>
 800348c:	ab03      	add	r3, sp, #12
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	462a      	mov	r2, r5
 8003492:	4b0f      	ldr	r3, [pc, #60]	; (80034d0 <_svfiprintf_r+0x1f4>)
 8003494:	a904      	add	r1, sp, #16
 8003496:	4638      	mov	r0, r7
 8003498:	f3af 8000 	nop.w
 800349c:	1c42      	adds	r2, r0, #1
 800349e:	4606      	mov	r6, r0
 80034a0:	d1d6      	bne.n	8003450 <_svfiprintf_r+0x174>
 80034a2:	89ab      	ldrh	r3, [r5, #12]
 80034a4:	065b      	lsls	r3, r3, #25
 80034a6:	f53f af2d 	bmi.w	8003304 <_svfiprintf_r+0x28>
 80034aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80034ac:	b01d      	add	sp, #116	; 0x74
 80034ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034b2:	ab03      	add	r3, sp, #12
 80034b4:	9300      	str	r3, [sp, #0]
 80034b6:	462a      	mov	r2, r5
 80034b8:	4b05      	ldr	r3, [pc, #20]	; (80034d0 <_svfiprintf_r+0x1f4>)
 80034ba:	a904      	add	r1, sp, #16
 80034bc:	4638      	mov	r0, r7
 80034be:	f000 f879 	bl	80035b4 <_printf_i>
 80034c2:	e7eb      	b.n	800349c <_svfiprintf_r+0x1c0>
 80034c4:	080057d8 	.word	0x080057d8
 80034c8:	080057e2 	.word	0x080057e2
 80034cc:	00000000 	.word	0x00000000
 80034d0:	08003229 	.word	0x08003229
 80034d4:	080057de 	.word	0x080057de

080034d8 <_printf_common>:
 80034d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034dc:	4616      	mov	r6, r2
 80034de:	4699      	mov	r9, r3
 80034e0:	688a      	ldr	r2, [r1, #8]
 80034e2:	690b      	ldr	r3, [r1, #16]
 80034e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80034e8:	4293      	cmp	r3, r2
 80034ea:	bfb8      	it	lt
 80034ec:	4613      	movlt	r3, r2
 80034ee:	6033      	str	r3, [r6, #0]
 80034f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80034f4:	4607      	mov	r7, r0
 80034f6:	460c      	mov	r4, r1
 80034f8:	b10a      	cbz	r2, 80034fe <_printf_common+0x26>
 80034fa:	3301      	adds	r3, #1
 80034fc:	6033      	str	r3, [r6, #0]
 80034fe:	6823      	ldr	r3, [r4, #0]
 8003500:	0699      	lsls	r1, r3, #26
 8003502:	bf42      	ittt	mi
 8003504:	6833      	ldrmi	r3, [r6, #0]
 8003506:	3302      	addmi	r3, #2
 8003508:	6033      	strmi	r3, [r6, #0]
 800350a:	6825      	ldr	r5, [r4, #0]
 800350c:	f015 0506 	ands.w	r5, r5, #6
 8003510:	d106      	bne.n	8003520 <_printf_common+0x48>
 8003512:	f104 0a19 	add.w	sl, r4, #25
 8003516:	68e3      	ldr	r3, [r4, #12]
 8003518:	6832      	ldr	r2, [r6, #0]
 800351a:	1a9b      	subs	r3, r3, r2
 800351c:	42ab      	cmp	r3, r5
 800351e:	dc26      	bgt.n	800356e <_printf_common+0x96>
 8003520:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003524:	1e13      	subs	r3, r2, #0
 8003526:	6822      	ldr	r2, [r4, #0]
 8003528:	bf18      	it	ne
 800352a:	2301      	movne	r3, #1
 800352c:	0692      	lsls	r2, r2, #26
 800352e:	d42b      	bmi.n	8003588 <_printf_common+0xb0>
 8003530:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003534:	4649      	mov	r1, r9
 8003536:	4638      	mov	r0, r7
 8003538:	47c0      	blx	r8
 800353a:	3001      	adds	r0, #1
 800353c:	d01e      	beq.n	800357c <_printf_common+0xa4>
 800353e:	6823      	ldr	r3, [r4, #0]
 8003540:	6922      	ldr	r2, [r4, #16]
 8003542:	f003 0306 	and.w	r3, r3, #6
 8003546:	2b04      	cmp	r3, #4
 8003548:	bf02      	ittt	eq
 800354a:	68e5      	ldreq	r5, [r4, #12]
 800354c:	6833      	ldreq	r3, [r6, #0]
 800354e:	1aed      	subeq	r5, r5, r3
 8003550:	68a3      	ldr	r3, [r4, #8]
 8003552:	bf0c      	ite	eq
 8003554:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003558:	2500      	movne	r5, #0
 800355a:	4293      	cmp	r3, r2
 800355c:	bfc4      	itt	gt
 800355e:	1a9b      	subgt	r3, r3, r2
 8003560:	18ed      	addgt	r5, r5, r3
 8003562:	2600      	movs	r6, #0
 8003564:	341a      	adds	r4, #26
 8003566:	42b5      	cmp	r5, r6
 8003568:	d11a      	bne.n	80035a0 <_printf_common+0xc8>
 800356a:	2000      	movs	r0, #0
 800356c:	e008      	b.n	8003580 <_printf_common+0xa8>
 800356e:	2301      	movs	r3, #1
 8003570:	4652      	mov	r2, sl
 8003572:	4649      	mov	r1, r9
 8003574:	4638      	mov	r0, r7
 8003576:	47c0      	blx	r8
 8003578:	3001      	adds	r0, #1
 800357a:	d103      	bne.n	8003584 <_printf_common+0xac>
 800357c:	f04f 30ff 	mov.w	r0, #4294967295
 8003580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003584:	3501      	adds	r5, #1
 8003586:	e7c6      	b.n	8003516 <_printf_common+0x3e>
 8003588:	18e1      	adds	r1, r4, r3
 800358a:	1c5a      	adds	r2, r3, #1
 800358c:	2030      	movs	r0, #48	; 0x30
 800358e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003592:	4422      	add	r2, r4
 8003594:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003598:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800359c:	3302      	adds	r3, #2
 800359e:	e7c7      	b.n	8003530 <_printf_common+0x58>
 80035a0:	2301      	movs	r3, #1
 80035a2:	4622      	mov	r2, r4
 80035a4:	4649      	mov	r1, r9
 80035a6:	4638      	mov	r0, r7
 80035a8:	47c0      	blx	r8
 80035aa:	3001      	adds	r0, #1
 80035ac:	d0e6      	beq.n	800357c <_printf_common+0xa4>
 80035ae:	3601      	adds	r6, #1
 80035b0:	e7d9      	b.n	8003566 <_printf_common+0x8e>
	...

080035b4 <_printf_i>:
 80035b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80035b8:	7e0f      	ldrb	r7, [r1, #24]
 80035ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80035bc:	2f78      	cmp	r7, #120	; 0x78
 80035be:	4691      	mov	r9, r2
 80035c0:	4680      	mov	r8, r0
 80035c2:	460c      	mov	r4, r1
 80035c4:	469a      	mov	sl, r3
 80035c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80035ca:	d807      	bhi.n	80035dc <_printf_i+0x28>
 80035cc:	2f62      	cmp	r7, #98	; 0x62
 80035ce:	d80a      	bhi.n	80035e6 <_printf_i+0x32>
 80035d0:	2f00      	cmp	r7, #0
 80035d2:	f000 80d4 	beq.w	800377e <_printf_i+0x1ca>
 80035d6:	2f58      	cmp	r7, #88	; 0x58
 80035d8:	f000 80c0 	beq.w	800375c <_printf_i+0x1a8>
 80035dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80035e4:	e03a      	b.n	800365c <_printf_i+0xa8>
 80035e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80035ea:	2b15      	cmp	r3, #21
 80035ec:	d8f6      	bhi.n	80035dc <_printf_i+0x28>
 80035ee:	a101      	add	r1, pc, #4	; (adr r1, 80035f4 <_printf_i+0x40>)
 80035f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80035f4:	0800364d 	.word	0x0800364d
 80035f8:	08003661 	.word	0x08003661
 80035fc:	080035dd 	.word	0x080035dd
 8003600:	080035dd 	.word	0x080035dd
 8003604:	080035dd 	.word	0x080035dd
 8003608:	080035dd 	.word	0x080035dd
 800360c:	08003661 	.word	0x08003661
 8003610:	080035dd 	.word	0x080035dd
 8003614:	080035dd 	.word	0x080035dd
 8003618:	080035dd 	.word	0x080035dd
 800361c:	080035dd 	.word	0x080035dd
 8003620:	08003765 	.word	0x08003765
 8003624:	0800368d 	.word	0x0800368d
 8003628:	0800371f 	.word	0x0800371f
 800362c:	080035dd 	.word	0x080035dd
 8003630:	080035dd 	.word	0x080035dd
 8003634:	08003787 	.word	0x08003787
 8003638:	080035dd 	.word	0x080035dd
 800363c:	0800368d 	.word	0x0800368d
 8003640:	080035dd 	.word	0x080035dd
 8003644:	080035dd 	.word	0x080035dd
 8003648:	08003727 	.word	0x08003727
 800364c:	682b      	ldr	r3, [r5, #0]
 800364e:	1d1a      	adds	r2, r3, #4
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	602a      	str	r2, [r5, #0]
 8003654:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003658:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800365c:	2301      	movs	r3, #1
 800365e:	e09f      	b.n	80037a0 <_printf_i+0x1ec>
 8003660:	6820      	ldr	r0, [r4, #0]
 8003662:	682b      	ldr	r3, [r5, #0]
 8003664:	0607      	lsls	r7, r0, #24
 8003666:	f103 0104 	add.w	r1, r3, #4
 800366a:	6029      	str	r1, [r5, #0]
 800366c:	d501      	bpl.n	8003672 <_printf_i+0xbe>
 800366e:	681e      	ldr	r6, [r3, #0]
 8003670:	e003      	b.n	800367a <_printf_i+0xc6>
 8003672:	0646      	lsls	r6, r0, #25
 8003674:	d5fb      	bpl.n	800366e <_printf_i+0xba>
 8003676:	f9b3 6000 	ldrsh.w	r6, [r3]
 800367a:	2e00      	cmp	r6, #0
 800367c:	da03      	bge.n	8003686 <_printf_i+0xd2>
 800367e:	232d      	movs	r3, #45	; 0x2d
 8003680:	4276      	negs	r6, r6
 8003682:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003686:	485a      	ldr	r0, [pc, #360]	; (80037f0 <_printf_i+0x23c>)
 8003688:	230a      	movs	r3, #10
 800368a:	e012      	b.n	80036b2 <_printf_i+0xfe>
 800368c:	682b      	ldr	r3, [r5, #0]
 800368e:	6820      	ldr	r0, [r4, #0]
 8003690:	1d19      	adds	r1, r3, #4
 8003692:	6029      	str	r1, [r5, #0]
 8003694:	0605      	lsls	r5, r0, #24
 8003696:	d501      	bpl.n	800369c <_printf_i+0xe8>
 8003698:	681e      	ldr	r6, [r3, #0]
 800369a:	e002      	b.n	80036a2 <_printf_i+0xee>
 800369c:	0641      	lsls	r1, r0, #25
 800369e:	d5fb      	bpl.n	8003698 <_printf_i+0xe4>
 80036a0:	881e      	ldrh	r6, [r3, #0]
 80036a2:	4853      	ldr	r0, [pc, #332]	; (80037f0 <_printf_i+0x23c>)
 80036a4:	2f6f      	cmp	r7, #111	; 0x6f
 80036a6:	bf0c      	ite	eq
 80036a8:	2308      	moveq	r3, #8
 80036aa:	230a      	movne	r3, #10
 80036ac:	2100      	movs	r1, #0
 80036ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80036b2:	6865      	ldr	r5, [r4, #4]
 80036b4:	60a5      	str	r5, [r4, #8]
 80036b6:	2d00      	cmp	r5, #0
 80036b8:	bfa2      	ittt	ge
 80036ba:	6821      	ldrge	r1, [r4, #0]
 80036bc:	f021 0104 	bicge.w	r1, r1, #4
 80036c0:	6021      	strge	r1, [r4, #0]
 80036c2:	b90e      	cbnz	r6, 80036c8 <_printf_i+0x114>
 80036c4:	2d00      	cmp	r5, #0
 80036c6:	d04b      	beq.n	8003760 <_printf_i+0x1ac>
 80036c8:	4615      	mov	r5, r2
 80036ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80036ce:	fb03 6711 	mls	r7, r3, r1, r6
 80036d2:	5dc7      	ldrb	r7, [r0, r7]
 80036d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80036d8:	4637      	mov	r7, r6
 80036da:	42bb      	cmp	r3, r7
 80036dc:	460e      	mov	r6, r1
 80036de:	d9f4      	bls.n	80036ca <_printf_i+0x116>
 80036e0:	2b08      	cmp	r3, #8
 80036e2:	d10b      	bne.n	80036fc <_printf_i+0x148>
 80036e4:	6823      	ldr	r3, [r4, #0]
 80036e6:	07de      	lsls	r6, r3, #31
 80036e8:	d508      	bpl.n	80036fc <_printf_i+0x148>
 80036ea:	6923      	ldr	r3, [r4, #16]
 80036ec:	6861      	ldr	r1, [r4, #4]
 80036ee:	4299      	cmp	r1, r3
 80036f0:	bfde      	ittt	le
 80036f2:	2330      	movle	r3, #48	; 0x30
 80036f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80036f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80036fc:	1b52      	subs	r2, r2, r5
 80036fe:	6122      	str	r2, [r4, #16]
 8003700:	f8cd a000 	str.w	sl, [sp]
 8003704:	464b      	mov	r3, r9
 8003706:	aa03      	add	r2, sp, #12
 8003708:	4621      	mov	r1, r4
 800370a:	4640      	mov	r0, r8
 800370c:	f7ff fee4 	bl	80034d8 <_printf_common>
 8003710:	3001      	adds	r0, #1
 8003712:	d14a      	bne.n	80037aa <_printf_i+0x1f6>
 8003714:	f04f 30ff 	mov.w	r0, #4294967295
 8003718:	b004      	add	sp, #16
 800371a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800371e:	6823      	ldr	r3, [r4, #0]
 8003720:	f043 0320 	orr.w	r3, r3, #32
 8003724:	6023      	str	r3, [r4, #0]
 8003726:	4833      	ldr	r0, [pc, #204]	; (80037f4 <_printf_i+0x240>)
 8003728:	2778      	movs	r7, #120	; 0x78
 800372a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800372e:	6823      	ldr	r3, [r4, #0]
 8003730:	6829      	ldr	r1, [r5, #0]
 8003732:	061f      	lsls	r7, r3, #24
 8003734:	f851 6b04 	ldr.w	r6, [r1], #4
 8003738:	d402      	bmi.n	8003740 <_printf_i+0x18c>
 800373a:	065f      	lsls	r7, r3, #25
 800373c:	bf48      	it	mi
 800373e:	b2b6      	uxthmi	r6, r6
 8003740:	07df      	lsls	r7, r3, #31
 8003742:	bf48      	it	mi
 8003744:	f043 0320 	orrmi.w	r3, r3, #32
 8003748:	6029      	str	r1, [r5, #0]
 800374a:	bf48      	it	mi
 800374c:	6023      	strmi	r3, [r4, #0]
 800374e:	b91e      	cbnz	r6, 8003758 <_printf_i+0x1a4>
 8003750:	6823      	ldr	r3, [r4, #0]
 8003752:	f023 0320 	bic.w	r3, r3, #32
 8003756:	6023      	str	r3, [r4, #0]
 8003758:	2310      	movs	r3, #16
 800375a:	e7a7      	b.n	80036ac <_printf_i+0xf8>
 800375c:	4824      	ldr	r0, [pc, #144]	; (80037f0 <_printf_i+0x23c>)
 800375e:	e7e4      	b.n	800372a <_printf_i+0x176>
 8003760:	4615      	mov	r5, r2
 8003762:	e7bd      	b.n	80036e0 <_printf_i+0x12c>
 8003764:	682b      	ldr	r3, [r5, #0]
 8003766:	6826      	ldr	r6, [r4, #0]
 8003768:	6961      	ldr	r1, [r4, #20]
 800376a:	1d18      	adds	r0, r3, #4
 800376c:	6028      	str	r0, [r5, #0]
 800376e:	0635      	lsls	r5, r6, #24
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	d501      	bpl.n	8003778 <_printf_i+0x1c4>
 8003774:	6019      	str	r1, [r3, #0]
 8003776:	e002      	b.n	800377e <_printf_i+0x1ca>
 8003778:	0670      	lsls	r0, r6, #25
 800377a:	d5fb      	bpl.n	8003774 <_printf_i+0x1c0>
 800377c:	8019      	strh	r1, [r3, #0]
 800377e:	2300      	movs	r3, #0
 8003780:	6123      	str	r3, [r4, #16]
 8003782:	4615      	mov	r5, r2
 8003784:	e7bc      	b.n	8003700 <_printf_i+0x14c>
 8003786:	682b      	ldr	r3, [r5, #0]
 8003788:	1d1a      	adds	r2, r3, #4
 800378a:	602a      	str	r2, [r5, #0]
 800378c:	681d      	ldr	r5, [r3, #0]
 800378e:	6862      	ldr	r2, [r4, #4]
 8003790:	2100      	movs	r1, #0
 8003792:	4628      	mov	r0, r5
 8003794:	f7fc fd1c 	bl	80001d0 <memchr>
 8003798:	b108      	cbz	r0, 800379e <_printf_i+0x1ea>
 800379a:	1b40      	subs	r0, r0, r5
 800379c:	6060      	str	r0, [r4, #4]
 800379e:	6863      	ldr	r3, [r4, #4]
 80037a0:	6123      	str	r3, [r4, #16]
 80037a2:	2300      	movs	r3, #0
 80037a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037a8:	e7aa      	b.n	8003700 <_printf_i+0x14c>
 80037aa:	6923      	ldr	r3, [r4, #16]
 80037ac:	462a      	mov	r2, r5
 80037ae:	4649      	mov	r1, r9
 80037b0:	4640      	mov	r0, r8
 80037b2:	47d0      	blx	sl
 80037b4:	3001      	adds	r0, #1
 80037b6:	d0ad      	beq.n	8003714 <_printf_i+0x160>
 80037b8:	6823      	ldr	r3, [r4, #0]
 80037ba:	079b      	lsls	r3, r3, #30
 80037bc:	d413      	bmi.n	80037e6 <_printf_i+0x232>
 80037be:	68e0      	ldr	r0, [r4, #12]
 80037c0:	9b03      	ldr	r3, [sp, #12]
 80037c2:	4298      	cmp	r0, r3
 80037c4:	bfb8      	it	lt
 80037c6:	4618      	movlt	r0, r3
 80037c8:	e7a6      	b.n	8003718 <_printf_i+0x164>
 80037ca:	2301      	movs	r3, #1
 80037cc:	4632      	mov	r2, r6
 80037ce:	4649      	mov	r1, r9
 80037d0:	4640      	mov	r0, r8
 80037d2:	47d0      	blx	sl
 80037d4:	3001      	adds	r0, #1
 80037d6:	d09d      	beq.n	8003714 <_printf_i+0x160>
 80037d8:	3501      	adds	r5, #1
 80037da:	68e3      	ldr	r3, [r4, #12]
 80037dc:	9903      	ldr	r1, [sp, #12]
 80037de:	1a5b      	subs	r3, r3, r1
 80037e0:	42ab      	cmp	r3, r5
 80037e2:	dcf2      	bgt.n	80037ca <_printf_i+0x216>
 80037e4:	e7eb      	b.n	80037be <_printf_i+0x20a>
 80037e6:	2500      	movs	r5, #0
 80037e8:	f104 0619 	add.w	r6, r4, #25
 80037ec:	e7f5      	b.n	80037da <_printf_i+0x226>
 80037ee:	bf00      	nop
 80037f0:	080057e9 	.word	0x080057e9
 80037f4:	080057fa 	.word	0x080057fa

080037f8 <memmove>:
 80037f8:	4288      	cmp	r0, r1
 80037fa:	b510      	push	{r4, lr}
 80037fc:	eb01 0402 	add.w	r4, r1, r2
 8003800:	d902      	bls.n	8003808 <memmove+0x10>
 8003802:	4284      	cmp	r4, r0
 8003804:	4623      	mov	r3, r4
 8003806:	d807      	bhi.n	8003818 <memmove+0x20>
 8003808:	1e43      	subs	r3, r0, #1
 800380a:	42a1      	cmp	r1, r4
 800380c:	d008      	beq.n	8003820 <memmove+0x28>
 800380e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003812:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003816:	e7f8      	b.n	800380a <memmove+0x12>
 8003818:	4402      	add	r2, r0
 800381a:	4601      	mov	r1, r0
 800381c:	428a      	cmp	r2, r1
 800381e:	d100      	bne.n	8003822 <memmove+0x2a>
 8003820:	bd10      	pop	{r4, pc}
 8003822:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003826:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800382a:	e7f7      	b.n	800381c <memmove+0x24>

0800382c <_sbrk_r>:
 800382c:	b538      	push	{r3, r4, r5, lr}
 800382e:	4d06      	ldr	r5, [pc, #24]	; (8003848 <_sbrk_r+0x1c>)
 8003830:	2300      	movs	r3, #0
 8003832:	4604      	mov	r4, r0
 8003834:	4608      	mov	r0, r1
 8003836:	602b      	str	r3, [r5, #0]
 8003838:	f7fd ff76 	bl	8001728 <_sbrk>
 800383c:	1c43      	adds	r3, r0, #1
 800383e:	d102      	bne.n	8003846 <_sbrk_r+0x1a>
 8003840:	682b      	ldr	r3, [r5, #0]
 8003842:	b103      	cbz	r3, 8003846 <_sbrk_r+0x1a>
 8003844:	6023      	str	r3, [r4, #0]
 8003846:	bd38      	pop	{r3, r4, r5, pc}
 8003848:	20000614 	.word	0x20000614

0800384c <memcpy>:
 800384c:	440a      	add	r2, r1
 800384e:	4291      	cmp	r1, r2
 8003850:	f100 33ff 	add.w	r3, r0, #4294967295
 8003854:	d100      	bne.n	8003858 <memcpy+0xc>
 8003856:	4770      	bx	lr
 8003858:	b510      	push	{r4, lr}
 800385a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800385e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003862:	4291      	cmp	r1, r2
 8003864:	d1f9      	bne.n	800385a <memcpy+0xe>
 8003866:	bd10      	pop	{r4, pc}

08003868 <_realloc_r>:
 8003868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800386c:	4680      	mov	r8, r0
 800386e:	4614      	mov	r4, r2
 8003870:	460e      	mov	r6, r1
 8003872:	b921      	cbnz	r1, 800387e <_realloc_r+0x16>
 8003874:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003878:	4611      	mov	r1, r2
 800387a:	f7ff bc49 	b.w	8003110 <_malloc_r>
 800387e:	b92a      	cbnz	r2, 800388c <_realloc_r+0x24>
 8003880:	f7ff fbda 	bl	8003038 <_free_r>
 8003884:	4625      	mov	r5, r4
 8003886:	4628      	mov	r0, r5
 8003888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800388c:	f000 f81b 	bl	80038c6 <_malloc_usable_size_r>
 8003890:	4284      	cmp	r4, r0
 8003892:	4607      	mov	r7, r0
 8003894:	d802      	bhi.n	800389c <_realloc_r+0x34>
 8003896:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800389a:	d812      	bhi.n	80038c2 <_realloc_r+0x5a>
 800389c:	4621      	mov	r1, r4
 800389e:	4640      	mov	r0, r8
 80038a0:	f7ff fc36 	bl	8003110 <_malloc_r>
 80038a4:	4605      	mov	r5, r0
 80038a6:	2800      	cmp	r0, #0
 80038a8:	d0ed      	beq.n	8003886 <_realloc_r+0x1e>
 80038aa:	42bc      	cmp	r4, r7
 80038ac:	4622      	mov	r2, r4
 80038ae:	4631      	mov	r1, r6
 80038b0:	bf28      	it	cs
 80038b2:	463a      	movcs	r2, r7
 80038b4:	f7ff ffca 	bl	800384c <memcpy>
 80038b8:	4631      	mov	r1, r6
 80038ba:	4640      	mov	r0, r8
 80038bc:	f7ff fbbc 	bl	8003038 <_free_r>
 80038c0:	e7e1      	b.n	8003886 <_realloc_r+0x1e>
 80038c2:	4635      	mov	r5, r6
 80038c4:	e7df      	b.n	8003886 <_realloc_r+0x1e>

080038c6 <_malloc_usable_size_r>:
 80038c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038ca:	1f18      	subs	r0, r3, #4
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	bfbc      	itt	lt
 80038d0:	580b      	ldrlt	r3, [r1, r0]
 80038d2:	18c0      	addlt	r0, r0, r3
 80038d4:	4770      	bx	lr
	...

080038d8 <_init>:
 80038d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038da:	bf00      	nop
 80038dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038de:	bc08      	pop	{r3}
 80038e0:	469e      	mov	lr, r3
 80038e2:	4770      	bx	lr

080038e4 <_fini>:
 80038e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038e6:	bf00      	nop
 80038e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ea:	bc08      	pop	{r3}
 80038ec:	469e      	mov	lr, r3
 80038ee:	4770      	bx	lr
