
STM32F407_MENU_U8G2_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da2c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003448  0800dbc0  0800dbc0  0001dbc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011008  08011008  000300c8  2**0
                  CONTENTS
  4 .ARM          00000008  08011008  08011008  00021008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011010  08011010  000300c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011010  08011010  00021010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011014  08011014  00021014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08011018  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300c8  2**0
                  CONTENTS
 10 .bss          000007c8  200000c8  200000c8  000300c8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000890  20000890  000300c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300c8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000300f8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00033e8e  00000000  00000000  0003013b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000053cf  00000000  00000000  00063fc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001688  00000000  00000000  00069398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000010e7  00000000  00000000  0006aa20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027470  00000000  00000000  0006bb07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f93c  00000000  00000000  00092f77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e4ebb  00000000  00000000  000b28b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006a34  00000000  00000000  00197770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000084  00000000  00000000  0019e1a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c8 	.word	0x200000c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dba4 	.word	0x0800dba4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000cc 	.word	0x200000cc
 80001cc:	0800dba4 	.word	0x0800dba4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__gedf2>:
 800084c:	f04f 3cff 	mov.w	ip, #4294967295
 8000850:	e006      	b.n	8000860 <__cmpdf2+0x4>
 8000852:	bf00      	nop

08000854 <__ledf2>:
 8000854:	f04f 0c01 	mov.w	ip, #1
 8000858:	e002      	b.n	8000860 <__cmpdf2+0x4>
 800085a:	bf00      	nop

0800085c <__cmpdf2>:
 800085c:	f04f 0c01 	mov.w	ip, #1
 8000860:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000864:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000868:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800086c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000870:	bf18      	it	ne
 8000872:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000876:	d01b      	beq.n	80008b0 <__cmpdf2+0x54>
 8000878:	b001      	add	sp, #4
 800087a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800087e:	bf0c      	ite	eq
 8000880:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000884:	ea91 0f03 	teqne	r1, r3
 8000888:	bf02      	ittt	eq
 800088a:	ea90 0f02 	teqeq	r0, r2
 800088e:	2000      	moveq	r0, #0
 8000890:	4770      	bxeq	lr
 8000892:	f110 0f00 	cmn.w	r0, #0
 8000896:	ea91 0f03 	teq	r1, r3
 800089a:	bf58      	it	pl
 800089c:	4299      	cmppl	r1, r3
 800089e:	bf08      	it	eq
 80008a0:	4290      	cmpeq	r0, r2
 80008a2:	bf2c      	ite	cs
 80008a4:	17d8      	asrcs	r0, r3, #31
 80008a6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008aa:	f040 0001 	orr.w	r0, r0, #1
 80008ae:	4770      	bx	lr
 80008b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008b8:	d102      	bne.n	80008c0 <__cmpdf2+0x64>
 80008ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008be:	d107      	bne.n	80008d0 <__cmpdf2+0x74>
 80008c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008c8:	d1d6      	bne.n	8000878 <__cmpdf2+0x1c>
 80008ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008ce:	d0d3      	beq.n	8000878 <__cmpdf2+0x1c>
 80008d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop

080008d8 <__aeabi_cdrcmple>:
 80008d8:	4684      	mov	ip, r0
 80008da:	4610      	mov	r0, r2
 80008dc:	4662      	mov	r2, ip
 80008de:	468c      	mov	ip, r1
 80008e0:	4619      	mov	r1, r3
 80008e2:	4663      	mov	r3, ip
 80008e4:	e000      	b.n	80008e8 <__aeabi_cdcmpeq>
 80008e6:	bf00      	nop

080008e8 <__aeabi_cdcmpeq>:
 80008e8:	b501      	push	{r0, lr}
 80008ea:	f7ff ffb7 	bl	800085c <__cmpdf2>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	bf48      	it	mi
 80008f2:	f110 0f00 	cmnmi.w	r0, #0
 80008f6:	bd01      	pop	{r0, pc}

080008f8 <__aeabi_dcmpeq>:
 80008f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008fc:	f7ff fff4 	bl	80008e8 <__aeabi_cdcmpeq>
 8000900:	bf0c      	ite	eq
 8000902:	2001      	moveq	r0, #1
 8000904:	2000      	movne	r0, #0
 8000906:	f85d fb08 	ldr.w	pc, [sp], #8
 800090a:	bf00      	nop

0800090c <__aeabi_dcmplt>:
 800090c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000910:	f7ff ffea 	bl	80008e8 <__aeabi_cdcmpeq>
 8000914:	bf34      	ite	cc
 8000916:	2001      	movcc	r0, #1
 8000918:	2000      	movcs	r0, #0
 800091a:	f85d fb08 	ldr.w	pc, [sp], #8
 800091e:	bf00      	nop

08000920 <__aeabi_dcmple>:
 8000920:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000924:	f7ff ffe0 	bl	80008e8 <__aeabi_cdcmpeq>
 8000928:	bf94      	ite	ls
 800092a:	2001      	movls	r0, #1
 800092c:	2000      	movhi	r0, #0
 800092e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000932:	bf00      	nop

08000934 <__aeabi_dcmpge>:
 8000934:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000938:	f7ff ffce 	bl	80008d8 <__aeabi_cdrcmple>
 800093c:	bf94      	ite	ls
 800093e:	2001      	movls	r0, #1
 8000940:	2000      	movhi	r0, #0
 8000942:	f85d fb08 	ldr.w	pc, [sp], #8
 8000946:	bf00      	nop

08000948 <__aeabi_dcmpgt>:
 8000948:	f84d ed08 	str.w	lr, [sp, #-8]!
 800094c:	f7ff ffc4 	bl	80008d8 <__aeabi_cdrcmple>
 8000950:	bf34      	ite	cc
 8000952:	2001      	movcc	r0, #1
 8000954:	2000      	movcs	r0, #0
 8000956:	f85d fb08 	ldr.w	pc, [sp], #8
 800095a:	bf00      	nop

0800095c <__aeabi_d2iz>:
 800095c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000960:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000964:	d215      	bcs.n	8000992 <__aeabi_d2iz+0x36>
 8000966:	d511      	bpl.n	800098c <__aeabi_d2iz+0x30>
 8000968:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800096c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000970:	d912      	bls.n	8000998 <__aeabi_d2iz+0x3c>
 8000972:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000976:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800097a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800097e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000982:	fa23 f002 	lsr.w	r0, r3, r2
 8000986:	bf18      	it	ne
 8000988:	4240      	negne	r0, r0
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d105      	bne.n	80009a4 <__aeabi_d2iz+0x48>
 8000998:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800099c:	bf08      	it	eq
 800099e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop

080009ac <__aeabi_d2uiz>:
 80009ac:	004a      	lsls	r2, r1, #1
 80009ae:	d211      	bcs.n	80009d4 <__aeabi_d2uiz+0x28>
 80009b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009b4:	d211      	bcs.n	80009da <__aeabi_d2uiz+0x2e>
 80009b6:	d50d      	bpl.n	80009d4 <__aeabi_d2uiz+0x28>
 80009b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c0:	d40e      	bmi.n	80009e0 <__aeabi_d2uiz+0x34>
 80009c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ce:	fa23 f002 	lsr.w	r0, r3, r2
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009de:	d102      	bne.n	80009e6 <__aeabi_d2uiz+0x3a>
 80009e0:	f04f 30ff 	mov.w	r0, #4294967295
 80009e4:	4770      	bx	lr
 80009e6:	f04f 0000 	mov.w	r0, #0
 80009ea:	4770      	bx	lr

080009ec <__aeabi_d2f>:
 80009ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009f4:	bf24      	itt	cs
 80009f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009fe:	d90d      	bls.n	8000a1c <__aeabi_d2f+0x30>
 8000a00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a14:	bf08      	it	eq
 8000a16:	f020 0001 	biceq.w	r0, r0, #1
 8000a1a:	4770      	bx	lr
 8000a1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a20:	d121      	bne.n	8000a66 <__aeabi_d2f+0x7a>
 8000a22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a26:	bfbc      	itt	lt
 8000a28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a2c:	4770      	bxlt	lr
 8000a2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a36:	f1c2 0218 	rsb	r2, r2, #24
 8000a3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a42:	fa20 f002 	lsr.w	r0, r0, r2
 8000a46:	bf18      	it	ne
 8000a48:	f040 0001 	orrne.w	r0, r0, #1
 8000a4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a58:	ea40 000c 	orr.w	r0, r0, ip
 8000a5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a64:	e7cc      	b.n	8000a00 <__aeabi_d2f+0x14>
 8000a66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a6a:	d107      	bne.n	8000a7c <__aeabi_d2f+0x90>
 8000a6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a70:	bf1e      	ittt	ne
 8000a72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a7a:	4770      	bxne	lr
 8000a7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b970 	b.w	8000d84 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9e08      	ldr	r6, [sp, #32]
 8000ac2:	460d      	mov	r5, r1
 8000ac4:	4604      	mov	r4, r0
 8000ac6:	460f      	mov	r7, r1
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d14a      	bne.n	8000b62 <__udivmoddi4+0xa6>
 8000acc:	428a      	cmp	r2, r1
 8000ace:	4694      	mov	ip, r2
 8000ad0:	d965      	bls.n	8000b9e <__udivmoddi4+0xe2>
 8000ad2:	fab2 f382 	clz	r3, r2
 8000ad6:	b143      	cbz	r3, 8000aea <__udivmoddi4+0x2e>
 8000ad8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000adc:	f1c3 0220 	rsb	r2, r3, #32
 8000ae0:	409f      	lsls	r7, r3
 8000ae2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ae6:	4317      	orrs	r7, r2
 8000ae8:	409c      	lsls	r4, r3
 8000aea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000aee:	fa1f f58c 	uxth.w	r5, ip
 8000af2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000af6:	0c22      	lsrs	r2, r4, #16
 8000af8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000afc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b00:	fb01 f005 	mul.w	r0, r1, r5
 8000b04:	4290      	cmp	r0, r2
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x62>
 8000b08:	eb1c 0202 	adds.w	r2, ip, r2
 8000b0c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b10:	f080 811c 	bcs.w	8000d4c <__udivmoddi4+0x290>
 8000b14:	4290      	cmp	r0, r2
 8000b16:	f240 8119 	bls.w	8000d4c <__udivmoddi4+0x290>
 8000b1a:	3902      	subs	r1, #2
 8000b1c:	4462      	add	r2, ip
 8000b1e:	1a12      	subs	r2, r2, r0
 8000b20:	b2a4      	uxth	r4, r4
 8000b22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b2a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b2e:	fb00 f505 	mul.w	r5, r0, r5
 8000b32:	42a5      	cmp	r5, r4
 8000b34:	d90a      	bls.n	8000b4c <__udivmoddi4+0x90>
 8000b36:	eb1c 0404 	adds.w	r4, ip, r4
 8000b3a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b3e:	f080 8107 	bcs.w	8000d50 <__udivmoddi4+0x294>
 8000b42:	42a5      	cmp	r5, r4
 8000b44:	f240 8104 	bls.w	8000d50 <__udivmoddi4+0x294>
 8000b48:	4464      	add	r4, ip
 8000b4a:	3802      	subs	r0, #2
 8000b4c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b50:	1b64      	subs	r4, r4, r5
 8000b52:	2100      	movs	r1, #0
 8000b54:	b11e      	cbz	r6, 8000b5e <__udivmoddi4+0xa2>
 8000b56:	40dc      	lsrs	r4, r3
 8000b58:	2300      	movs	r3, #0
 8000b5a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d908      	bls.n	8000b78 <__udivmoddi4+0xbc>
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	f000 80ed 	beq.w	8000d46 <__udivmoddi4+0x28a>
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b72:	4608      	mov	r0, r1
 8000b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b78:	fab3 f183 	clz	r1, r3
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	d149      	bne.n	8000c14 <__udivmoddi4+0x158>
 8000b80:	42ab      	cmp	r3, r5
 8000b82:	d302      	bcc.n	8000b8a <__udivmoddi4+0xce>
 8000b84:	4282      	cmp	r2, r0
 8000b86:	f200 80f8 	bhi.w	8000d7a <__udivmoddi4+0x2be>
 8000b8a:	1a84      	subs	r4, r0, r2
 8000b8c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b90:	2001      	movs	r0, #1
 8000b92:	4617      	mov	r7, r2
 8000b94:	2e00      	cmp	r6, #0
 8000b96:	d0e2      	beq.n	8000b5e <__udivmoddi4+0xa2>
 8000b98:	e9c6 4700 	strd	r4, r7, [r6]
 8000b9c:	e7df      	b.n	8000b5e <__udivmoddi4+0xa2>
 8000b9e:	b902      	cbnz	r2, 8000ba2 <__udivmoddi4+0xe6>
 8000ba0:	deff      	udf	#255	; 0xff
 8000ba2:	fab2 f382 	clz	r3, r2
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f040 8090 	bne.w	8000ccc <__udivmoddi4+0x210>
 8000bac:	1a8a      	subs	r2, r1, r2
 8000bae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bb2:	fa1f fe8c 	uxth.w	lr, ip
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bbc:	fb07 2015 	mls	r0, r7, r5, r2
 8000bc0:	0c22      	lsrs	r2, r4, #16
 8000bc2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bc6:	fb0e f005 	mul.w	r0, lr, r5
 8000bca:	4290      	cmp	r0, r2
 8000bcc:	d908      	bls.n	8000be0 <__udivmoddi4+0x124>
 8000bce:	eb1c 0202 	adds.w	r2, ip, r2
 8000bd2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x122>
 8000bd8:	4290      	cmp	r0, r2
 8000bda:	f200 80cb 	bhi.w	8000d74 <__udivmoddi4+0x2b8>
 8000bde:	4645      	mov	r5, r8
 8000be0:	1a12      	subs	r2, r2, r0
 8000be2:	b2a4      	uxth	r4, r4
 8000be4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000be8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bf0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bf4:	45a6      	cmp	lr, r4
 8000bf6:	d908      	bls.n	8000c0a <__udivmoddi4+0x14e>
 8000bf8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bfc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c00:	d202      	bcs.n	8000c08 <__udivmoddi4+0x14c>
 8000c02:	45a6      	cmp	lr, r4
 8000c04:	f200 80bb 	bhi.w	8000d7e <__udivmoddi4+0x2c2>
 8000c08:	4610      	mov	r0, r2
 8000c0a:	eba4 040e 	sub.w	r4, r4, lr
 8000c0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c12:	e79f      	b.n	8000b54 <__udivmoddi4+0x98>
 8000c14:	f1c1 0720 	rsb	r7, r1, #32
 8000c18:	408b      	lsls	r3, r1
 8000c1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c22:	fa05 f401 	lsl.w	r4, r5, r1
 8000c26:	fa20 f307 	lsr.w	r3, r0, r7
 8000c2a:	40fd      	lsrs	r5, r7
 8000c2c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c30:	4323      	orrs	r3, r4
 8000c32:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c36:	fa1f fe8c 	uxth.w	lr, ip
 8000c3a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c3e:	0c1c      	lsrs	r4, r3, #16
 8000c40:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c44:	fb08 f50e 	mul.w	r5, r8, lr
 8000c48:	42a5      	cmp	r5, r4
 8000c4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c52:	d90b      	bls.n	8000c6c <__udivmoddi4+0x1b0>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c5c:	f080 8088 	bcs.w	8000d70 <__udivmoddi4+0x2b4>
 8000c60:	42a5      	cmp	r5, r4
 8000c62:	f240 8085 	bls.w	8000d70 <__udivmoddi4+0x2b4>
 8000c66:	f1a8 0802 	sub.w	r8, r8, #2
 8000c6a:	4464      	add	r4, ip
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	b29d      	uxth	r5, r3
 8000c70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c74:	fb09 4413 	mls	r4, r9, r3, r4
 8000c78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c80:	45a6      	cmp	lr, r4
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x1da>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c8c:	d26c      	bcs.n	8000d68 <__udivmoddi4+0x2ac>
 8000c8e:	45a6      	cmp	lr, r4
 8000c90:	d96a      	bls.n	8000d68 <__udivmoddi4+0x2ac>
 8000c92:	3b02      	subs	r3, #2
 8000c94:	4464      	add	r4, ip
 8000c96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c9a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c9e:	eba4 040e 	sub.w	r4, r4, lr
 8000ca2:	42ac      	cmp	r4, r5
 8000ca4:	46c8      	mov	r8, r9
 8000ca6:	46ae      	mov	lr, r5
 8000ca8:	d356      	bcc.n	8000d58 <__udivmoddi4+0x29c>
 8000caa:	d053      	beq.n	8000d54 <__udivmoddi4+0x298>
 8000cac:	b156      	cbz	r6, 8000cc4 <__udivmoddi4+0x208>
 8000cae:	ebb0 0208 	subs.w	r2, r0, r8
 8000cb2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cb6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cba:	40ca      	lsrs	r2, r1
 8000cbc:	40cc      	lsrs	r4, r1
 8000cbe:	4317      	orrs	r7, r2
 8000cc0:	e9c6 7400 	strd	r7, r4, [r6]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ccc:	f1c3 0120 	rsb	r1, r3, #32
 8000cd0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cd8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cdc:	409d      	lsls	r5, r3
 8000cde:	432a      	orrs	r2, r5
 8000ce0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce4:	fa1f fe8c 	uxth.w	lr, ip
 8000ce8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cec:	fb07 1510 	mls	r5, r7, r0, r1
 8000cf0:	0c11      	lsrs	r1, r2, #16
 8000cf2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cf6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cfa:	428d      	cmp	r5, r1
 8000cfc:	fa04 f403 	lsl.w	r4, r4, r3
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x258>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d0a:	d22f      	bcs.n	8000d6c <__udivmoddi4+0x2b0>
 8000d0c:	428d      	cmp	r5, r1
 8000d0e:	d92d      	bls.n	8000d6c <__udivmoddi4+0x2b0>
 8000d10:	3802      	subs	r0, #2
 8000d12:	4461      	add	r1, ip
 8000d14:	1b49      	subs	r1, r1, r5
 8000d16:	b292      	uxth	r2, r2
 8000d18:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d1c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d24:	fb05 f10e 	mul.w	r1, r5, lr
 8000d28:	4291      	cmp	r1, r2
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x282>
 8000d2c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d30:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d34:	d216      	bcs.n	8000d64 <__udivmoddi4+0x2a8>
 8000d36:	4291      	cmp	r1, r2
 8000d38:	d914      	bls.n	8000d64 <__udivmoddi4+0x2a8>
 8000d3a:	3d02      	subs	r5, #2
 8000d3c:	4462      	add	r2, ip
 8000d3e:	1a52      	subs	r2, r2, r1
 8000d40:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d44:	e738      	b.n	8000bb8 <__udivmoddi4+0xfc>
 8000d46:	4631      	mov	r1, r6
 8000d48:	4630      	mov	r0, r6
 8000d4a:	e708      	b.n	8000b5e <__udivmoddi4+0xa2>
 8000d4c:	4639      	mov	r1, r7
 8000d4e:	e6e6      	b.n	8000b1e <__udivmoddi4+0x62>
 8000d50:	4610      	mov	r0, r2
 8000d52:	e6fb      	b.n	8000b4c <__udivmoddi4+0x90>
 8000d54:	4548      	cmp	r0, r9
 8000d56:	d2a9      	bcs.n	8000cac <__udivmoddi4+0x1f0>
 8000d58:	ebb9 0802 	subs.w	r8, r9, r2
 8000d5c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d60:	3b01      	subs	r3, #1
 8000d62:	e7a3      	b.n	8000cac <__udivmoddi4+0x1f0>
 8000d64:	4645      	mov	r5, r8
 8000d66:	e7ea      	b.n	8000d3e <__udivmoddi4+0x282>
 8000d68:	462b      	mov	r3, r5
 8000d6a:	e794      	b.n	8000c96 <__udivmoddi4+0x1da>
 8000d6c:	4640      	mov	r0, r8
 8000d6e:	e7d1      	b.n	8000d14 <__udivmoddi4+0x258>
 8000d70:	46d0      	mov	r8, sl
 8000d72:	e77b      	b.n	8000c6c <__udivmoddi4+0x1b0>
 8000d74:	3d02      	subs	r5, #2
 8000d76:	4462      	add	r2, ip
 8000d78:	e732      	b.n	8000be0 <__udivmoddi4+0x124>
 8000d7a:	4608      	mov	r0, r1
 8000d7c:	e70a      	b.n	8000b94 <__udivmoddi4+0xd8>
 8000d7e:	4464      	add	r4, ip
 8000d80:	3802      	subs	r0, #2
 8000d82:	e742      	b.n	8000c0a <__udivmoddi4+0x14e>

08000d84 <__aeabi_idiv0>:
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d8e:	463b      	mov	r3, r7
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d9a:	4b21      	ldr	r3, [pc, #132]	; (8000e20 <MX_ADC1_Init+0x98>)
 8000d9c:	4a21      	ldr	r2, [pc, #132]	; (8000e24 <MX_ADC1_Init+0x9c>)
 8000d9e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000da0:	4b1f      	ldr	r3, [pc, #124]	; (8000e20 <MX_ADC1_Init+0x98>)
 8000da2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000da6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000da8:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <MX_ADC1_Init+0x98>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000dae:	4b1c      	ldr	r3, [pc, #112]	; (8000e20 <MX_ADC1_Init+0x98>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000db4:	4b1a      	ldr	r3, [pc, #104]	; (8000e20 <MX_ADC1_Init+0x98>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dba:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <MX_ADC1_Init+0x98>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dc2:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <MX_ADC1_Init+0x98>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dc8:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <MX_ADC1_Init+0x98>)
 8000dca:	4a17      	ldr	r2, [pc, #92]	; (8000e28 <MX_ADC1_Init+0xa0>)
 8000dcc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dce:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <MX_ADC1_Init+0x98>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000dd4:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <MX_ADC1_Init+0x98>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dda:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <MX_ADC1_Init+0x98>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000de2:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <MX_ADC1_Init+0x98>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000de8:	480d      	ldr	r0, [pc, #52]	; (8000e20 <MX_ADC1_Init+0x98>)
 8000dea:	f001 fdbf 	bl	800296c <HAL_ADC_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000df4:	f001 fbea 	bl	80025cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000df8:	2305      	movs	r3, #5
 8000dfa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000e00:	2303      	movs	r3, #3
 8000e02:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e04:	463b      	mov	r3, r7
 8000e06:	4619      	mov	r1, r3
 8000e08:	4805      	ldr	r0, [pc, #20]	; (8000e20 <MX_ADC1_Init+0x98>)
 8000e0a:	f001 fed3 	bl	8002bb4 <HAL_ADC_ConfigChannel>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e14:	f001 fbda 	bl	80025cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e18:	bf00      	nop
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	200000e4 	.word	0x200000e4
 8000e24:	40012000 	.word	0x40012000
 8000e28:	0f000001 	.word	0x0f000001

08000e2c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08a      	sub	sp, #40	; 0x28
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a17      	ldr	r2, [pc, #92]	; (8000ea8 <HAL_ADC_MspInit+0x7c>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d127      	bne.n	8000e9e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]
 8000e52:	4b16      	ldr	r3, [pc, #88]	; (8000eac <HAL_ADC_MspInit+0x80>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e56:	4a15      	ldr	r2, [pc, #84]	; (8000eac <HAL_ADC_MspInit+0x80>)
 8000e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e5e:	4b13      	ldr	r3, [pc, #76]	; (8000eac <HAL_ADC_MspInit+0x80>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <HAL_ADC_MspInit+0x80>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a0e      	ldr	r2, [pc, #56]	; (8000eac <HAL_ADC_MspInit+0x80>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <HAL_ADC_MspInit+0x80>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e86:	2320      	movs	r3, #32
 8000e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e92:	f107 0314 	add.w	r3, r7, #20
 8000e96:	4619      	mov	r1, r3
 8000e98:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <HAL_ADC_MspInit+0x84>)
 8000e9a:	f002 f98f 	bl	80031bc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e9e:	bf00      	nop
 8000ea0:	3728      	adds	r7, #40	; 0x28
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40012000 	.word	0x40012000
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40020000 	.word	0x40020000

08000eb4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08a      	sub	sp, #40	; 0x28
 8000eb8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
 8000ec8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	4b2d      	ldr	r3, [pc, #180]	; (8000f84 <MX_GPIO_Init+0xd0>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4a2c      	ldr	r2, [pc, #176]	; (8000f84 <MX_GPIO_Init+0xd0>)
 8000ed4:	f043 0310 	orr.w	r3, r3, #16
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eda:	4b2a      	ldr	r3, [pc, #168]	; (8000f84 <MX_GPIO_Init+0xd0>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	f003 0310 	and.w	r3, r3, #16
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	4b26      	ldr	r3, [pc, #152]	; (8000f84 <MX_GPIO_Init+0xd0>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a25      	ldr	r2, [pc, #148]	; (8000f84 <MX_GPIO_Init+0xd0>)
 8000ef0:	f043 0320 	orr.w	r3, r3, #32
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b23      	ldr	r3, [pc, #140]	; (8000f84 <MX_GPIO_Init+0xd0>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0320 	and.w	r3, r3, #32
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	4b1f      	ldr	r3, [pc, #124]	; (8000f84 <MX_GPIO_Init+0xd0>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a1e      	ldr	r2, [pc, #120]	; (8000f84 <MX_GPIO_Init+0xd0>)
 8000f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b1c      	ldr	r3, [pc, #112]	; (8000f84 <MX_GPIO_Init+0xd0>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <MX_GPIO_Init+0xd0>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a17      	ldr	r2, [pc, #92]	; (8000f84 <MX_GPIO_Init+0xd0>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <MX_GPIO_Init+0xd0>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, BEEP_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000f40:	4811      	ldr	r0, [pc, #68]	; (8000f88 <MX_GPIO_Init+0xd4>)
 8000f42:	f002 faef 	bl	8003524 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = KEY_C3_Pin|KEY_C1_Pin|KEY_C2_Pin;
 8000f46:	231c      	movs	r3, #28
 8000f48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	480c      	ldr	r0, [pc, #48]	; (8000f8c <MX_GPIO_Init+0xd8>)
 8000f5a:	f002 f92f 	bl	80031bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = BEEP_Pin|LED1_Pin;
 8000f5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f64:	2301      	movs	r3, #1
 8000f66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	4619      	mov	r1, r3
 8000f76:	4804      	ldr	r0, [pc, #16]	; (8000f88 <MX_GPIO_Init+0xd4>)
 8000f78:	f002 f920 	bl	80031bc <HAL_GPIO_Init>

}
 8000f7c:	bf00      	nop
 8000f7e:	3728      	adds	r7, #40	; 0x28
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40021400 	.word	0x40021400
 8000f8c:	40021000 	.word	0x40021000

08000f90 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <MX_I2C2_Init+0x50>)
 8000f96:	4a13      	ldr	r2, [pc, #76]	; (8000fe4 <MX_I2C2_Init+0x54>)
 8000f98:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000f9a:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <MX_I2C2_Init+0x50>)
 8000f9c:	4a12      	ldr	r2, [pc, #72]	; (8000fe8 <MX_I2C2_Init+0x58>)
 8000f9e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <MX_I2C2_Init+0x50>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <MX_I2C2_Init+0x50>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <MX_I2C2_Init+0x50>)
 8000fae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fb2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <MX_I2C2_Init+0x50>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000fba:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <MX_I2C2_Init+0x50>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fc0:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <MX_I2C2_Init+0x50>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <MX_I2C2_Init+0x50>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000fcc:	4804      	ldr	r0, [pc, #16]	; (8000fe0 <MX_I2C2_Init+0x50>)
 8000fce:	f002 fadd 	bl	800358c <HAL_I2C_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000fd8:	f001 faf8 	bl	80025cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	2000012c 	.word	0x2000012c
 8000fe4:	40005800 	.word	0x40005800
 8000fe8:	00061a80 	.word	0x00061a80

08000fec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08a      	sub	sp, #40	; 0x28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a19      	ldr	r2, [pc, #100]	; (8001070 <HAL_I2C_MspInit+0x84>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d12b      	bne.n	8001066 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	4b18      	ldr	r3, [pc, #96]	; (8001074 <HAL_I2C_MspInit+0x88>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a17      	ldr	r2, [pc, #92]	; (8001074 <HAL_I2C_MspInit+0x88>)
 8001018:	f043 0320 	orr.w	r3, r3, #32
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b15      	ldr	r3, [pc, #84]	; (8001074 <HAL_I2C_MspInit+0x88>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0320 	and.w	r3, r3, #32
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800102a:	2303      	movs	r3, #3
 800102c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800102e:	2312      	movs	r3, #18
 8001030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001036:	2303      	movs	r3, #3
 8001038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800103a:	2304      	movs	r3, #4
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	4619      	mov	r1, r3
 8001044:	480c      	ldr	r0, [pc, #48]	; (8001078 <HAL_I2C_MspInit+0x8c>)
 8001046:	f002 f8b9 	bl	80031bc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <HAL_I2C_MspInit+0x88>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	4a08      	ldr	r2, [pc, #32]	; (8001074 <HAL_I2C_MspInit+0x88>)
 8001054:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001058:	6413      	str	r3, [r2, #64]	; 0x40
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_I2C_MspInit+0x88>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001066:	bf00      	nop
 8001068:	3728      	adds	r7, #40	; 0x28
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40005800 	.word	0x40005800
 8001074:	40023800 	.word	0x40023800
 8001078:	40021400 	.word	0x40021400

0800107c <_draw_rotated_rect>:
#define _draw_circle(x, y, r, md)                   u8g2_DrawCircle(&u8g2, x, y, r, md);
#define _draw_circle_full(x, y, r)                  u8g2_DrawCircle(&u8g2, x, y, r, U8G2_DRAW_ALL);
#define _draw_circle_full_at_screen_center(x, y, r) _draw_circle_full(64 + x, 32 + y, r);

static void _draw_rotated_rect(float x0 /*xcenter*/, float y0 /*ycenter*/, float w, float h, float rad)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08c      	sub	sp, #48	; 0x30
 8001080:	af00      	add	r7, sp, #0
 8001082:	ed87 0a05 	vstr	s0, [r7, #20]
 8001086:	edc7 0a04 	vstr	s1, [r7, #16]
 800108a:	ed87 1a03 	vstr	s2, [r7, #12]
 800108e:	edc7 1a02 	vstr	s3, [r7, #8]
 8001092:	ed87 2a01 	vstr	s4, [r7, #4]
    float c = cos(rad), s = sin(rad);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff fb80 	bl	800079c <__aeabi_f2d>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	ec43 2b10 	vmov	d0, r2, r3
 80010a4:	f00a fbfc 	bl	800b8a0 <cos>
 80010a8:	ec53 2b10 	vmov	r2, r3, d0
 80010ac:	4610      	mov	r0, r2
 80010ae:	4619      	mov	r1, r3
 80010b0:	f7ff fc9c 	bl	80009ec <__aeabi_d2f>
 80010b4:	4603      	mov	r3, r0
 80010b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f7ff fb6f 	bl	800079c <__aeabi_f2d>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	ec43 2b10 	vmov	d0, r2, r3
 80010c6:	f00a fc3f 	bl	800b948 <sin>
 80010ca:	ec53 2b10 	vmov	r2, r3, d0
 80010ce:	4610      	mov	r0, r2
 80010d0:	4619      	mov	r1, r3
 80010d2:	f7ff fc8b 	bl	80009ec <__aeabi_d2f>
 80010d6:	4603      	mov	r3, r0
 80010d8:	62bb      	str	r3, [r7, #40]	; 0x28
    float ws = w * s, wc = w * c, hs = h * s, hc = h * c;
 80010da:	ed97 7a03 	vldr	s14, [r7, #12]
 80010de:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80010e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010e6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 80010ea:	ed97 7a03 	vldr	s14, [r7, #12]
 80010ee:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f6:	edc7 7a08 	vstr	s15, [r7, #32]
 80010fa:	ed97 7a02 	vldr	s14, [r7, #8]
 80010fe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001106:	edc7 7a07 	vstr	s15, [r7, #28]
 800110a:	ed97 7a02 	vldr	s14, [r7, #8]
 800110e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001116:	edc7 7a06 	vstr	s15, [r7, #24]
    u8g2_ClearPolygonXY();
 800111a:	f008 fcef 	bl	8009afc <u8g2_ClearPolygonXY>
    u8g2_AddPolygonXY(&u8g2, -wc + hs + x0, -ws - hc + y0);
 800111e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001122:	edd7 7a08 	vldr	s15, [r7, #32]
 8001126:	ee37 7a67 	vsub.f32	s14, s14, s15
 800112a:	edd7 7a05 	vldr	s15, [r7, #20]
 800112e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001132:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001136:	ee17 3a90 	vmov	r3, s15
 800113a:	b21b      	sxth	r3, r3
 800113c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001140:	eeb1 7a67 	vneg.f32	s14, s15
 8001144:	edd7 7a06 	vldr	s15, [r7, #24]
 8001148:	ee37 7a67 	vsub.f32	s14, s14, s15
 800114c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001150:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001154:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001158:	ee17 2a90 	vmov	r2, s15
 800115c:	b212      	sxth	r2, r2
 800115e:	4619      	mov	r1, r3
 8001160:	4838      	ldr	r0, [pc, #224]	; (8001244 <_draw_rotated_rect+0x1c8>)
 8001162:	f008 fcd5 	bl	8009b10 <u8g2_AddPolygonXY>
    u8g2_AddPolygonXY(&u8g2, +wc + hs + x0, +ws - hc + y0);
 8001166:	ed97 7a08 	vldr	s14, [r7, #32]
 800116a:	edd7 7a07 	vldr	s15, [r7, #28]
 800116e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001172:	edd7 7a05 	vldr	s15, [r7, #20]
 8001176:	ee77 7a27 	vadd.f32	s15, s14, s15
 800117a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800117e:	ee17 3a90 	vmov	r3, s15
 8001182:	b21b      	sxth	r3, r3
 8001184:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001188:	edd7 7a06 	vldr	s15, [r7, #24]
 800118c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001190:	edd7 7a04 	vldr	s15, [r7, #16]
 8001194:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001198:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800119c:	ee17 2a90 	vmov	r2, s15
 80011a0:	b212      	sxth	r2, r2
 80011a2:	4619      	mov	r1, r3
 80011a4:	4827      	ldr	r0, [pc, #156]	; (8001244 <_draw_rotated_rect+0x1c8>)
 80011a6:	f008 fcb3 	bl	8009b10 <u8g2_AddPolygonXY>
    u8g2_AddPolygonXY(&u8g2, +wc - hs + x0, +ws + hc + y0);
 80011aa:	ed97 7a08 	vldr	s14, [r7, #32]
 80011ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80011b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80011ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011c2:	ee17 3a90 	vmov	r3, s15
 80011c6:	b21b      	sxth	r3, r3
 80011c8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80011cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80011d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80011d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011e0:	ee17 2a90 	vmov	r2, s15
 80011e4:	b212      	sxth	r2, r2
 80011e6:	4619      	mov	r1, r3
 80011e8:	4816      	ldr	r0, [pc, #88]	; (8001244 <_draw_rotated_rect+0x1c8>)
 80011ea:	f008 fc91 	bl	8009b10 <u8g2_AddPolygonXY>
    u8g2_AddPolygonXY(&u8g2, -wc - hs + x0, -ws + hc + y0);
 80011ee:	edd7 7a08 	vldr	s15, [r7, #32]
 80011f2:	eeb1 7a67 	vneg.f32	s14, s15
 80011f6:	edd7 7a07 	vldr	s15, [r7, #28]
 80011fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001202:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001206:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800120a:	ee17 3a90 	vmov	r3, s15
 800120e:	b21b      	sxth	r3, r3
 8001210:	ed97 7a06 	vldr	s14, [r7, #24]
 8001214:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001218:	ee37 7a67 	vsub.f32	s14, s14, s15
 800121c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001220:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001224:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001228:	ee17 2a90 	vmov	r2, s15
 800122c:	b212      	sxth	r2, r2
 800122e:	4619      	mov	r1, r3
 8001230:	4804      	ldr	r0, [pc, #16]	; (8001244 <_draw_rotated_rect+0x1c8>)
 8001232:	f008 fc6d 	bl	8009b10 <u8g2_AddPolygonXY>
    u8g2_DrawPolygon(&u8g2);
 8001236:	4803      	ldr	r0, [pc, #12]	; (8001244 <_draw_rotated_rect+0x1c8>)
 8001238:	f008 fc80 	bl	8009b3c <u8g2_DrawPolygon>
}
 800123c:	bf00      	nop
 800123e:	3730      	adds	r7, #48	; 0x30
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	200001d0 	.word	0x200001d0

08001248 <_painter_logo>:
    }

///

void _painter_logo(page_t* p)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
    _clear();
 8001250:	4813      	ldr	r0, [pc, #76]	; (80012a0 <_painter_logo+0x58>)
 8001252:	f006 fce0 	bl	8007c16 <u8g2_ClearBuffer>
    _set_color(0);
 8001256:	2100      	movs	r1, #0
 8001258:	4811      	ldr	r0, [pc, #68]	; (80012a0 <_painter_logo+0x58>)
 800125a:	f007 ff90 	bl	800917e <u8g2_SetDrawColor>
    _draw_str(CONFIG_PADDING_X, 12, "Hello World");
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <_painter_logo+0x5c>)
 8001260:	220c      	movs	r2, #12
 8001262:	2104      	movs	r1, #4
 8001264:	480e      	ldr	r0, [pc, #56]	; (80012a0 <_painter_logo+0x58>)
 8001266:	f007 fcf7 	bl	8008c58 <u8g2_DrawStr>
    _set_color(1);
 800126a:	2101      	movs	r1, #1
 800126c:	480c      	ldr	r0, [pc, #48]	; (80012a0 <_painter_logo+0x58>)
 800126e:	f007 ff86 	bl	800917e <u8g2_SetDrawColor>
    _draw_str(CONFIG_PADDING_X, 24, "Hello World");
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <_painter_logo+0x5c>)
 8001274:	2218      	movs	r2, #24
 8001276:	2104      	movs	r1, #4
 8001278:	4809      	ldr	r0, [pc, #36]	; (80012a0 <_painter_logo+0x58>)
 800127a:	f007 fced 	bl	8008c58 <u8g2_DrawStr>
    _set_color(2);
 800127e:	2102      	movs	r1, #2
 8001280:	4807      	ldr	r0, [pc, #28]	; (80012a0 <_painter_logo+0x58>)
 8001282:	f007 ff7c 	bl	800917e <u8g2_SetDrawColor>
    _draw_str(CONFIG_PADDING_X, 36, "Hello World");
 8001286:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <_painter_logo+0x5c>)
 8001288:	2224      	movs	r2, #36	; 0x24
 800128a:	2104      	movs	r1, #4
 800128c:	4804      	ldr	r0, [pc, #16]	; (80012a0 <_painter_logo+0x58>)
 800128e:	f007 fce3 	bl	8008c58 <u8g2_DrawStr>
    _update();
 8001292:	4803      	ldr	r0, [pc, #12]	; (80012a0 <_painter_logo+0x58>)
 8001294:	f006 fd32 	bl	8007cfc <u8g2_SendBuffer>
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	200001d0 	.word	0x200001d0
 80012a4:	0800dbc4 	.word	0x0800dbc4

080012a8 <_handler_logo>:

void _handler_logo(page_t* p)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
    switch (key_scan()) {
 80012b0:	f006 f836 	bl	8007320 <key_scan>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d010      	beq.n	80012dc <_handler_logo+0x34>
        case KEY_ID_NONE:
            break;
        default:
            effect_disappear();
 80012ba:	f003 fc01 	bl	8004ac0 <effect_disappear>
            PAGE_SWITCH(PAGE_ID_MAIN_MENULIST);
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <_handler_logo+0x44>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	701a      	strb	r2, [r3, #0]
 80012c4:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <_handler_logo+0x48>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d009      	beq.n	80012e0 <_handler_logo+0x38>
 80012cc:	4b07      	ldr	r3, [pc, #28]	; (80012ec <_handler_logo+0x44>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	701a      	strb	r2, [r3, #0]
 80012d2:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <_handler_logo+0x48>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2201      	movs	r2, #1
 80012d8:	701a      	strb	r2, [r3, #0]
            break;
 80012da:	e001      	b.n	80012e0 <_handler_logo+0x38>
            break;
 80012dc:	bf00      	nop
 80012de:	e000      	b.n	80012e2 <_handler_logo+0x3a>
            break;
 80012e0:	bf00      	nop
    }
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200001b4 	.word	0x200001b4
 80012f0:	20000190 	.word	0x20000190

080012f4 <_handler_chart>:

void _handler_chart(adc_chart_t* p)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
    println("cus");
 80012fc:	4811      	ldr	r0, [pc, #68]	; (8001344 <_handler_chart+0x50>)
 80012fe:	f009 fa8d 	bl	800a81c <puts>

    switch (key_scan()) {
 8001302:	f006 f80d 	bl	8007320 <key_scan>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d013      	beq.n	8001334 <_handler_chart+0x40>
        case KEY_ID_NONE:
            break;
        default:
            adcchart_repaint_border(p);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f003 fa5d 	bl	80047cc <adcchart_repaint_border>
            effect_disappear();
 8001312:	f003 fbd5 	bl	8004ac0 <effect_disappear>
            PAGE_SWITCH(PAGE_ID_MAIN_MENULIST);
 8001316:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <_handler_chart+0x54>)
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
 800131c:	4b0b      	ldr	r3, [pc, #44]	; (800134c <_handler_chart+0x58>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d009      	beq.n	8001338 <_handler_chart+0x44>
 8001324:	4b08      	ldr	r3, [pc, #32]	; (8001348 <_handler_chart+0x54>)
 8001326:	2200      	movs	r2, #0
 8001328:	701a      	strb	r2, [r3, #0]
 800132a:	4b08      	ldr	r3, [pc, #32]	; (800134c <_handler_chart+0x58>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2201      	movs	r2, #1
 8001330:	701a      	strb	r2, [r3, #0]
            break;
 8001332:	e001      	b.n	8001338 <_handler_chart+0x44>
            break;
 8001334:	bf00      	nop
 8001336:	e000      	b.n	800133a <_handler_chart+0x46>
            break;
 8001338:	bf00      	nop
    }
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	0800dbd0 	.word	0x0800dbd0
 8001348:	200001b4 	.word	0x200001b4
 800134c:	20000190 	.word	0x20000190

08001350 <_handler_textedit>:

void _handler_textedit(texteditor_t* p)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
    switch (key_scan()) {
 8001358:	f005 ffe2 	bl	8007320 <key_scan>
 800135c:	4603      	mov	r3, r0
 800135e:	2b03      	cmp	r3, #3
 8001360:	d82f      	bhi.n	80013c2 <_handler_textedit+0x72>
 8001362:	a201      	add	r2, pc, #4	; (adr r2, 8001368 <_handler_textedit+0x18>)
 8001364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001368:	080013bd 	.word	0x080013bd
 800136c:	08001379 	.word	0x08001379
 8001370:	08001389 	.word	0x08001389
 8001374:	08001381 	.word	0x08001381
        case KEY_ID_NONE: break;
        case KEY_ID_PREV: {
            texteditor_callback_handle_set_prevchar(p);
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f004 fcbb 	bl	8005cf4 <texteditor_callback_handle_set_prevchar>
            break;
 800137e:	e020      	b.n	80013c2 <_handler_textedit+0x72>
        }
        case KEY_ID_NEXT: {
            texteditor_callback_handle_set_nextchar(p);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f004 fd09 	bl	8005d98 <texteditor_callback_handle_set_nextchar>
            break;
 8001386:	e01c      	b.n	80013c2 <_handler_textedit+0x72>
        }
        case KEY_ID_OK: {
            if (!texteditor_callback_handle_switch_editmode(p)) {
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f004 fd58 	bl	8005e3e <texteditor_callback_handle_switch_editmode>
 800138e:	4603      	mov	r3, r0
 8001390:	f083 0301 	eor.w	r3, r3, #1
 8001394:	b2db      	uxtb	r3, r3
 8001396:	2b00      	cmp	r3, #0
 8001398:	d012      	beq.n	80013c0 <_handler_textedit+0x70>
                effect_disappear();
 800139a:	f003 fb91 	bl	8004ac0 <effect_disappear>
                PAGE_SWITCH(PAGE_ID_MAIN_MENULIST);
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <_handler_textedit+0x7c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]
 80013a4:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <_handler_textedit+0x80>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d009      	beq.n	80013c0 <_handler_textedit+0x70>
 80013ac:	4b07      	ldr	r3, [pc, #28]	; (80013cc <_handler_textedit+0x7c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	701a      	strb	r2, [r3, #0]
 80013b2:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <_handler_textedit+0x80>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2201      	movs	r2, #1
 80013b8:	701a      	strb	r2, [r3, #0]
            }
            break;
 80013ba:	e001      	b.n	80013c0 <_handler_textedit+0x70>
        case KEY_ID_NONE: break;
 80013bc:	bf00      	nop
 80013be:	e000      	b.n	80013c2 <_handler_textedit+0x72>
            break;
 80013c0:	bf00      	nop
        }
    }
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	200001b4 	.word	0x200001b4
 80013d0:	20000190 	.word	0x20000190

080013d4 <_painter_about>:

void _painter_about(page_t* p)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
    _clear();
 80013dc:	4812      	ldr	r0, [pc, #72]	; (8001428 <_painter_about+0x54>)
 80013de:	f006 fc1a 	bl	8007c16 <u8g2_ClearBuffer>
    _set_color(1);
 80013e2:	2101      	movs	r1, #1
 80013e4:	4810      	ldr	r0, [pc, #64]	; (8001428 <_painter_about+0x54>)
 80013e6:	f007 feca 	bl	800917e <u8g2_SetDrawColor>
    _draw_str(2, 12, "MCU : STM32");
 80013ea:	4b10      	ldr	r3, [pc, #64]	; (800142c <_painter_about+0x58>)
 80013ec:	220c      	movs	r2, #12
 80013ee:	2102      	movs	r1, #2
 80013f0:	480d      	ldr	r0, [pc, #52]	; (8001428 <_painter_about+0x54>)
 80013f2:	f007 fc31 	bl	8008c58 <u8g2_DrawStr>
    _draw_str(2, 28, "FLASH : 512KB");
 80013f6:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <_painter_about+0x5c>)
 80013f8:	221c      	movs	r2, #28
 80013fa:	2102      	movs	r1, #2
 80013fc:	480a      	ldr	r0, [pc, #40]	; (8001428 <_painter_about+0x54>)
 80013fe:	f007 fc2b 	bl	8008c58 <u8g2_DrawStr>
    _draw_str(2, 44, "SRAM : 256KB");
 8001402:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <_painter_about+0x60>)
 8001404:	222c      	movs	r2, #44	; 0x2c
 8001406:	2102      	movs	r1, #2
 8001408:	4807      	ldr	r0, [pc, #28]	; (8001428 <_painter_about+0x54>)
 800140a:	f007 fc25 	bl	8008c58 <u8g2_DrawStr>
    _draw_str(2, 60, "RTC SRAM : 16KB");
 800140e:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <_painter_about+0x64>)
 8001410:	223c      	movs	r2, #60	; 0x3c
 8001412:	2102      	movs	r1, #2
 8001414:	4804      	ldr	r0, [pc, #16]	; (8001428 <_painter_about+0x54>)
 8001416:	f007 fc1f 	bl	8008c58 <u8g2_DrawStr>
    _update();
 800141a:	4803      	ldr	r0, [pc, #12]	; (8001428 <_painter_about+0x54>)
 800141c:	f006 fc6e 	bl	8007cfc <u8g2_SendBuffer>
}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	200001d0 	.word	0x200001d0
 800142c:	0800dbd8 	.word	0x0800dbd8
 8001430:	0800dbe4 	.word	0x0800dbe4
 8001434:	0800dbf4 	.word	0x0800dbf4
 8001438:	0800dc04 	.word	0x0800dc04

0800143c <_handler_about>:

void _handler_about(page_t* p)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
    switch (key_scan()) {
 8001444:	f005 ff6c 	bl	8007320 <key_scan>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d010      	beq.n	8001470 <_handler_about+0x34>
        case KEY_ID_NONE:
            break;
        default:
            effect_disappear();
 800144e:	f003 fb37 	bl	8004ac0 <effect_disappear>
            PAGE_SWITCH(PAGE_ID_MAIN_MENULIST);
 8001452:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <_handler_about+0x44>)
 8001454:	2200      	movs	r2, #0
 8001456:	701a      	strb	r2, [r3, #0]
 8001458:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <_handler_about+0x48>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d009      	beq.n	8001474 <_handler_about+0x38>
 8001460:	4b07      	ldr	r3, [pc, #28]	; (8001480 <_handler_about+0x44>)
 8001462:	2200      	movs	r2, #0
 8001464:	701a      	strb	r2, [r3, #0]
 8001466:	4b07      	ldr	r3, [pc, #28]	; (8001484 <_handler_about+0x48>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2201      	movs	r2, #1
 800146c:	701a      	strb	r2, [r3, #0]
            break;
 800146e:	e001      	b.n	8001474 <_handler_about+0x38>
            break;
 8001470:	bf00      	nop
 8001472:	e000      	b.n	8001476 <_handler_about+0x3a>
            break;
 8001474:	bf00      	nop
    }
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200001b4 	.word	0x200001b4
 8001484:	20000190 	.word	0x20000190

08001488 <effect_win10_loading>:
#define _PI2 1.57
#define _PI  3.14
#define _2PI 6.28

void effect_win10_loading()
{
 8001488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800148a:	b093      	sub	sp, #76	; 0x4c
 800148c:	af02      	add	r7, sp, #8
    uint8_t r   = 16;
 800148e:	2310      	movs	r3, #16
 8001490:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint8_t cnt = 6;  // number of points
 8001494:	2306      	movs	r3, #6
 8001496:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    easing_t e = easing_create(EASING_MODE_NTIMES(2) | EASING_DIR_FORWARD, _easing_calc_Linear, 0, 15, 30);
 800149a:	4638      	mov	r0, r7
 800149c:	231e      	movs	r3, #30
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	230f      	movs	r3, #15
 80014a2:	ed9f 0a75 	vldr	s0, [pc, #468]	; 8001678 <effect_win10_loading+0x1f0>
 80014a6:	4a75      	ldr	r2, [pc, #468]	; (800167c <effect_win10_loading+0x1f4>)
 80014a8:	2121      	movs	r1, #33	; 0x21
 80014aa:	f005 fd15 	bl	8006ed8 <easing_create>

    easing_start_absolute(&e, 0, 1);  // generate linear time order
 80014ae:	463b      	mov	r3, r7
 80014b0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80014b4:	ed9f 0a70 	vldr	s0, [pc, #448]	; 8001678 <effect_win10_loading+0x1f0>
 80014b8:	4618      	mov	r0, r3
 80014ba:	f005 fd5f 	bl	8006f7c <easing_start_absolute>

    while (!easing_isok(&e)) {
 80014be:	e0be      	b.n	800163e <effect_win10_loading+0x1b6>
        easing_update(&e);
 80014c0:	463b      	mov	r3, r7
 80014c2:	4618      	mov	r0, r3
 80014c4:	f005 fdd1 	bl	800706a <easing_update>
        _clear();
 80014c8:	486d      	ldr	r0, [pc, #436]	; (8001680 <effect_win10_loading+0x1f8>)
 80014ca:	f006 fba4 	bl	8007c16 <u8g2_ClearBuffer>
        for (uint8_t i = 0; i < cnt; ++i) {
 80014ce:	2300      	movs	r3, #0
 80014d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80014d4:	e0a9      	b.n	800162a <effect_win10_loading+0x1a2>
            float t = e.nCurrent - i * 0.05;
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff f95f 	bl	800079c <__aeabi_f2d>
 80014de:	4604      	mov	r4, r0
 80014e0:	460d      	mov	r5, r1
 80014e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff f946 	bl	8000778 <__aeabi_i2d>
 80014ec:	a35c      	add	r3, pc, #368	; (adr r3, 8001660 <effect_win10_loading+0x1d8>)
 80014ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f2:	f7fe fec5 	bl	8000280 <__aeabi_dmul>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	4620      	mov	r0, r4
 80014fc:	4629      	mov	r1, r5
 80014fe:	f7fe ffed 	bl	80004dc <__aeabi_dsub>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4610      	mov	r0, r2
 8001508:	4619      	mov	r1, r3
 800150a:	f7ff fa6f 	bl	80009ec <__aeabi_d2f>
 800150e:	4603      	mov	r3, r0
 8001510:	63bb      	str	r3, [r7, #56]	; 0x38
            if (t < 0) t += 1;
 8001512:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001516:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800151a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800151e:	d507      	bpl.n	8001530 <effect_win10_loading+0xa8>
 8001520:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001524:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001528:	ee77 7a87 	vadd.f32	s15, s15, s14
 800152c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            float rad = -_easing_calc_InOutCubic(t) * _2PI + _PI;  // angle (rad, 3.14rad -> 180°)
 8001530:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8001534:	f004 ff8c 	bl	8006450 <_easing_calc_InOutCubic>
 8001538:	eef0 7a40 	vmov.f32	s15, s0
 800153c:	eef1 7a67 	vneg.f32	s15, s15
 8001540:	ee17 3a90 	vmov	r3, s15
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff f929 	bl	800079c <__aeabi_f2d>
 800154a:	a347      	add	r3, pc, #284	; (adr r3, 8001668 <effect_win10_loading+0x1e0>)
 800154c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001550:	f7fe fe96 	bl	8000280 <__aeabi_dmul>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4610      	mov	r0, r2
 800155a:	4619      	mov	r1, r3
 800155c:	a344      	add	r3, pc, #272	; (adr r3, 8001670 <effect_win10_loading+0x1e8>)
 800155e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001562:	f7fe ffbd 	bl	80004e0 <__adddf3>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	f7ff fa3d 	bl	80009ec <__aeabi_d2f>
 8001572:	4603      	mov	r3, r0
 8001574:	633b      	str	r3, [r7, #48]	; 0x30
            _draw_circle_full_at_screen_center(r * sin(rad), r * cos(rad), 1);
 8001576:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff f8fc 	bl	8000778 <__aeabi_i2d>
 8001580:	4604      	mov	r4, r0
 8001582:	460d      	mov	r5, r1
 8001584:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001586:	f7ff f909 	bl	800079c <__aeabi_f2d>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	ec43 2b10 	vmov	d0, r2, r3
 8001592:	f00a f9d9 	bl	800b948 <sin>
 8001596:	ec53 2b10 	vmov	r2, r3, d0
 800159a:	4620      	mov	r0, r4
 800159c:	4629      	mov	r1, r5
 800159e:	f7fe fe6f 	bl	8000280 <__aeabi_dmul>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4610      	mov	r0, r2
 80015a8:	4619      	mov	r1, r3
 80015aa:	f04f 0200 	mov.w	r2, #0
 80015ae:	4b35      	ldr	r3, [pc, #212]	; (8001684 <effect_win10_loading+0x1fc>)
 80015b0:	f7fe ff96 	bl	80004e0 <__adddf3>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	f7ff f9f6 	bl	80009ac <__aeabi_d2uiz>
 80015c0:	4603      	mov	r3, r0
 80015c2:	b29e      	uxth	r6, r3
 80015c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff f8d5 	bl	8000778 <__aeabi_i2d>
 80015ce:	4604      	mov	r4, r0
 80015d0:	460d      	mov	r5, r1
 80015d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80015d4:	f7ff f8e2 	bl	800079c <__aeabi_f2d>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	ec43 2b10 	vmov	d0, r2, r3
 80015e0:	f00a f95e 	bl	800b8a0 <cos>
 80015e4:	ec53 2b10 	vmov	r2, r3, d0
 80015e8:	4620      	mov	r0, r4
 80015ea:	4629      	mov	r1, r5
 80015ec:	f7fe fe48 	bl	8000280 <__aeabi_dmul>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	f04f 0200 	mov.w	r2, #0
 80015fc:	4b22      	ldr	r3, [pc, #136]	; (8001688 <effect_win10_loading+0x200>)
 80015fe:	f7fe ff6f 	bl	80004e0 <__adddf3>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4610      	mov	r0, r2
 8001608:	4619      	mov	r1, r3
 800160a:	f7ff f9cf 	bl	80009ac <__aeabi_d2uiz>
 800160e:	4603      	mov	r3, r0
 8001610:	b29a      	uxth	r2, r3
 8001612:	230f      	movs	r3, #15
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	2301      	movs	r3, #1
 8001618:	4631      	mov	r1, r6
 800161a:	4819      	ldr	r0, [pc, #100]	; (8001680 <effect_win10_loading+0x1f8>)
 800161c:	f006 fc64 	bl	8007ee8 <u8g2_DrawCircle>
        for (uint8_t i = 0; i < cnt; ++i) {
 8001620:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001624:	3301      	adds	r3, #1
 8001626:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800162a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800162e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001632:	429a      	cmp	r2, r3
 8001634:	f4ff af4f 	bcc.w	80014d6 <effect_win10_loading+0x4e>
        }
        _update();
 8001638:	4811      	ldr	r0, [pc, #68]	; (8001680 <effect_win10_loading+0x1f8>)
 800163a:	f006 fb5f 	bl	8007cfc <u8g2_SendBuffer>
    while (!easing_isok(&e)) {
 800163e:	463b      	mov	r3, r7
 8001640:	4618      	mov	r0, r3
 8001642:	f005 fdd3 	bl	80071ec <easing_isok>
 8001646:	4603      	mov	r3, r0
 8001648:	f083 0301 	eor.w	r3, r3, #1
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	f47f af36 	bne.w	80014c0 <effect_win10_loading+0x38>
    }
}
 8001654:	bf00      	nop
 8001656:	bf00      	nop
 8001658:	3744      	adds	r7, #68	; 0x44
 800165a:	46bd      	mov	sp, r7
 800165c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800165e:	bf00      	nop
 8001660:	9999999a 	.word	0x9999999a
 8001664:	3fa99999 	.word	0x3fa99999
 8001668:	51eb851f 	.word	0x51eb851f
 800166c:	40191eb8 	.word	0x40191eb8
 8001670:	51eb851f 	.word	0x51eb851f
 8001674:	40091eb8 	.word	0x40091eb8
 8001678:	00000000 	.word	0x00000000
 800167c:	0800681d 	.word	0x0800681d
 8001680:	200001d0 	.word	0x200001d0
 8001684:	40500000 	.word	0x40500000
 8001688:	40400000 	.word	0x40400000
 800168c:	00000000 	.word	0x00000000

08001690 <effect_rotating_rect>:

void effect_rotating_rect()
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b090      	sub	sp, #64	; 0x40
 8001694:	af02      	add	r7, sp, #8
    easing_t e = easing_create(EASING_MODE_NTIMES(2) | EASING_DIR_BACKANDFORTH, _easing_calc_OutQuart, 0, 15, 50);
 8001696:	4638      	mov	r0, r7
 8001698:	2332      	movs	r3, #50	; 0x32
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	230f      	movs	r3, #15
 800169e:	ed9f 0a44 	vldr	s0, [pc, #272]	; 80017b0 <effect_rotating_rect+0x120>
 80016a2:	4a44      	ldr	r2, [pc, #272]	; (80017b4 <effect_rotating_rect+0x124>)
 80016a4:	2129      	movs	r1, #41	; 0x29
 80016a6:	f005 fc17 	bl	8006ed8 <easing_create>

    easing_start_absolute(&e, 0, 1);  // generate linear time order
 80016aa:	463b      	mov	r3, r7
 80016ac:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80016b0:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 80017b0 <effect_rotating_rect+0x120>
 80016b4:	4618      	mov	r0, r3
 80016b6:	f005 fc61 	bl	8006f7c <easing_start_absolute>

    float w, h;

    while (!easing_isok(&e)) {
 80016ba:	e062      	b.n	8001782 <effect_rotating_rect+0xf2>
        easing_update(&e);
 80016bc:	463b      	mov	r3, r7
 80016be:	4618      	mov	r0, r3
 80016c0:	f005 fcd3 	bl	800706a <easing_update>
        _clear();
 80016c4:	483c      	ldr	r0, [pc, #240]	; (80017b8 <effect_rotating_rect+0x128>)
 80016c6:	f006 faa6 	bl	8007c16 <u8g2_ClearBuffer>
        w = h = easing_curpos(&e) * 10,
 80016ca:	463b      	mov	r3, r7
 80016cc:	4618      	mov	r0, r3
 80016ce:	f005 fdb1 	bl	8007234 <easing_curpos>
 80016d2:	eef0 7a40 	vmov.f32	s15, s0
 80016d6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80016da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016de:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 80016e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016e4:	633b      	str	r3, [r7, #48]	; 0x30
        _set_color(1);
        _draw_rotated_rect(64, 32, w, h, easing_curpos(&e) * _PI2);
        _set_color(2);
        _draw_rotated_rect(64, 32, w, h, (easing_curpos(&e) + 0.5) * _PI2);
#else
        _draw_rotated_rect(64, 32, w, h, easing_curpos(&e) * _PI2);
 80016e6:	463b      	mov	r3, r7
 80016e8:	4618      	mov	r0, r3
 80016ea:	f005 fda3 	bl	8007234 <easing_curpos>
 80016ee:	ee10 3a10 	vmov	r3, s0
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff f852 	bl	800079c <__aeabi_f2d>
 80016f8:	a32b      	add	r3, pc, #172	; (adr r3, 80017a8 <effect_rotating_rect+0x118>)
 80016fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fe:	f7fe fdbf 	bl	8000280 <__aeabi_dmul>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	4610      	mov	r0, r2
 8001708:	4619      	mov	r1, r3
 800170a:	f7ff f96f 	bl	80009ec <__aeabi_d2f>
 800170e:	4603      	mov	r3, r0
 8001710:	ee02 3a10 	vmov	s4, r3
 8001714:	edd7 1a0d 	vldr	s3, [r7, #52]	; 0x34
 8001718:	ed97 1a0c 	vldr	s2, [r7, #48]	; 0x30
 800171c:	eddf 0a27 	vldr	s1, [pc, #156]	; 80017bc <effect_rotating_rect+0x12c>
 8001720:	ed9f 0a27 	vldr	s0, [pc, #156]	; 80017c0 <effect_rotating_rect+0x130>
 8001724:	f7ff fcaa 	bl	800107c <_draw_rotated_rect>
        _draw_rotated_rect(64, 32, w, h, easing_curpos(&e) * _PI2 * 1.5);
 8001728:	463b      	mov	r3, r7
 800172a:	4618      	mov	r0, r3
 800172c:	f005 fd82 	bl	8007234 <easing_curpos>
 8001730:	ee10 3a10 	vmov	r3, s0
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff f831 	bl	800079c <__aeabi_f2d>
 800173a:	a31b      	add	r3, pc, #108	; (adr r3, 80017a8 <effect_rotating_rect+0x118>)
 800173c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001740:	f7fe fd9e 	bl	8000280 <__aeabi_dmul>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4610      	mov	r0, r2
 800174a:	4619      	mov	r1, r3
 800174c:	f04f 0200 	mov.w	r2, #0
 8001750:	4b1c      	ldr	r3, [pc, #112]	; (80017c4 <effect_rotating_rect+0x134>)
 8001752:	f7fe fd95 	bl	8000280 <__aeabi_dmul>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	4610      	mov	r0, r2
 800175c:	4619      	mov	r1, r3
 800175e:	f7ff f945 	bl	80009ec <__aeabi_d2f>
 8001762:	4603      	mov	r3, r0
 8001764:	ee02 3a10 	vmov	s4, r3
 8001768:	edd7 1a0d 	vldr	s3, [r7, #52]	; 0x34
 800176c:	ed97 1a0c 	vldr	s2, [r7, #48]	; 0x30
 8001770:	eddf 0a12 	vldr	s1, [pc, #72]	; 80017bc <effect_rotating_rect+0x12c>
 8001774:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80017c0 <effect_rotating_rect+0x130>
 8001778:	f7ff fc80 	bl	800107c <_draw_rotated_rect>
#endif
        _update();
 800177c:	480e      	ldr	r0, [pc, #56]	; (80017b8 <effect_rotating_rect+0x128>)
 800177e:	f006 fabd 	bl	8007cfc <u8g2_SendBuffer>
    while (!easing_isok(&e)) {
 8001782:	463b      	mov	r3, r7
 8001784:	4618      	mov	r0, r3
 8001786:	f005 fd31 	bl	80071ec <easing_isok>
 800178a:	4603      	mov	r3, r0
 800178c:	f083 0301 	eor.w	r3, r3, #1
 8001790:	b2db      	uxtb	r3, r3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d192      	bne.n	80016bc <effect_rotating_rect+0x2c>
    }
    _set_color(1);
 8001796:	2101      	movs	r1, #1
 8001798:	4807      	ldr	r0, [pc, #28]	; (80017b8 <effect_rotating_rect+0x128>)
 800179a:	f007 fcf0 	bl	800917e <u8g2_SetDrawColor>
}
 800179e:	bf00      	nop
 80017a0:	3738      	adds	r7, #56	; 0x38
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	51eb851f 	.word	0x51eb851f
 80017ac:	3ff91eb8 	.word	0x3ff91eb8
 80017b0:	00000000 	.word	0x00000000
 80017b4:	080069a5 	.word	0x080069a5
 80017b8:	200001d0 	.word	0x200001d0
 80017bc:	42000000 	.word	0x42000000
 80017c0:	42800000 	.word	0x42800000
 80017c4:	3ff80000 	.word	0x3ff80000

080017c8 <_hander_main>:
    {PAGE_ID_NONE, "-Play Video"},
    {PAGE_ID_ABOUT, "{ About }"},
};

void _hander_main(menulist_t* p)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
    switch (key_scan()) {
 80017d0:	f005 fda6 	bl	8007320 <key_scan>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b03      	cmp	r3, #3
 80017d8:	f200 80de 	bhi.w	8001998 <_hander_main+0x1d0>
 80017dc:	a201      	add	r2, pc, #4	; (adr r2, 80017e4 <_hander_main+0x1c>)
 80017de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e2:	bf00      	nop
 80017e4:	08001997 	.word	0x08001997
 80017e8:	080017f5 	.word	0x080017f5
 80017ec:	08001805 	.word	0x08001805
 80017f0:	080017fd 	.word	0x080017fd
        case KEY_ID_NONE: break;
        case KEY_ID_PREV: menulist_callback_handler_switch_prev(p); break;
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f003 fea7 	bl	8005548 <menulist_callback_handler_switch_prev>
 80017fa:	e0cd      	b.n	8001998 <_hander_main+0x1d0>
        case KEY_ID_NEXT: menulist_callback_handler_switch_next(p); break;
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f003 ff19 	bl	8005634 <menulist_callback_handler_switch_next>
 8001802:	e0c9      	b.n	8001998 <_hander_main+0x1d0>
        case KEY_ID_OK:

            switch (p->pItems[p->nSelectedIndex].ID) {
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	691a      	ldr	r2, [r3, #16]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800180e:	4619      	mov	r1, r3
 8001810:	460b      	mov	r3, r1
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	440b      	add	r3, r1
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	3b01      	subs	r3, #1
 800181e:	2b07      	cmp	r3, #7
 8001820:	f200 80ae 	bhi.w	8001980 <_hander_main+0x1b8>
 8001824:	a201      	add	r2, pc, #4	; (adr r2, 800182c <_hander_main+0x64>)
 8001826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800182a:	bf00      	nop
 800182c:	0800191b 	.word	0x0800191b
 8001830:	0800191b 	.word	0x0800191b
 8001834:	0800191b 	.word	0x0800191b
 8001838:	0800184d 	.word	0x0800184d
 800183c:	080018b5 	.word	0x080018b5
 8001840:	080018b5 	.word	0x080018b5
 8001844:	0800184d 	.word	0x0800184d
 8001848:	0800184d 	.word	0x0800184d
                case PAGE_ID_LOGO:
                case PAGE_ID_EASING_CHART:
                case PAGE_ID_ABOUT: {
                    effect_disappear();
 800184c:	f003 f938 	bl	8004ac0 <effect_disappear>
                    PAGE_SWITCH(p->pItems[p->nSelectedIndex].ID);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	691a      	ldr	r2, [r3, #16]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800185a:	4619      	mov	r1, r3
 800185c:	460b      	mov	r3, r1
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	440b      	add	r3, r1
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	b25a      	sxtb	r2, r3
 800186a:	4b4d      	ldr	r3, [pc, #308]	; (80019a0 <_hander_main+0x1d8>)
 800186c:	701a      	strb	r2, [r3, #0]
 800186e:	4b4c      	ldr	r3, [pc, #304]	; (80019a0 <_hander_main+0x1d8>)
 8001870:	f993 3000 	ldrsb.w	r3, [r3]
 8001874:	461a      	mov	r2, r3
 8001876:	4b4b      	ldr	r3, [pc, #300]	; (80019a4 <_hander_main+0x1dc>)
 8001878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800187c:	2b00      	cmp	r3, #0
 800187e:	f000 8081 	beq.w	8001984 <_hander_main+0x1bc>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	691a      	ldr	r2, [r3, #16]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800188c:	4619      	mov	r1, r3
 800188e:	460b      	mov	r3, r1
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	440b      	add	r3, r1
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	b25a      	sxtb	r2, r3
 800189c:	4b40      	ldr	r3, [pc, #256]	; (80019a0 <_hander_main+0x1d8>)
 800189e:	701a      	strb	r2, [r3, #0]
 80018a0:	4b3f      	ldr	r3, [pc, #252]	; (80019a0 <_hander_main+0x1d8>)
 80018a2:	f993 3000 	ldrsb.w	r3, [r3]
 80018a6:	461a      	mov	r2, r3
 80018a8:	4b3e      	ldr	r3, [pc, #248]	; (80019a4 <_hander_main+0x1dc>)
 80018aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ae:	2201      	movs	r2, #1
 80018b0:	701a      	strb	r2, [r3, #0]
                    break;
 80018b2:	e067      	b.n	8001984 <_hander_main+0x1bc>
                }
                case PAGE_ID_ADC_CHART:
                case PAGE_ID_TEXTEDIT: {
                    effect_rotating_rect();
 80018b4:	f7ff feec 	bl	8001690 <effect_rotating_rect>
                    PAGE_SWITCH(p->pItems[p->nSelectedIndex].ID);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	691a      	ldr	r2, [r3, #16]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018c2:	4619      	mov	r1, r3
 80018c4:	460b      	mov	r3, r1
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	440b      	add	r3, r1
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	b25a      	sxtb	r2, r3
 80018d2:	4b33      	ldr	r3, [pc, #204]	; (80019a0 <_hander_main+0x1d8>)
 80018d4:	701a      	strb	r2, [r3, #0]
 80018d6:	4b32      	ldr	r3, [pc, #200]	; (80019a0 <_hander_main+0x1d8>)
 80018d8:	f993 3000 	ldrsb.w	r3, [r3]
 80018dc:	461a      	mov	r2, r3
 80018de:	4b31      	ldr	r3, [pc, #196]	; (80019a4 <_hander_main+0x1dc>)
 80018e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d04f      	beq.n	8001988 <_hander_main+0x1c0>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	691a      	ldr	r2, [r3, #16]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018f2:	4619      	mov	r1, r3
 80018f4:	460b      	mov	r3, r1
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	440b      	add	r3, r1
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	b25a      	sxtb	r2, r3
 8001902:	4b27      	ldr	r3, [pc, #156]	; (80019a0 <_hander_main+0x1d8>)
 8001904:	701a      	strb	r2, [r3, #0]
 8001906:	4b26      	ldr	r3, [pc, #152]	; (80019a0 <_hander_main+0x1d8>)
 8001908:	f993 3000 	ldrsb.w	r3, [r3]
 800190c:	461a      	mov	r2, r3
 800190e:	4b25      	ldr	r3, [pc, #148]	; (80019a4 <_hander_main+0x1dc>)
 8001910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001914:	2201      	movs	r2, #1
 8001916:	701a      	strb	r2, [r3, #0]
                    break;
 8001918:	e036      	b.n	8001988 <_hander_main+0x1c0>
                }
                case PAGE_ID_PID_MENULIST:
                case PAGE_ID_DEVS_MENULIST:
                case PAGE_ID_ICON_ICONLIST: {
                    effect_win10_loading();
 800191a:	f7ff fdb5 	bl	8001488 <effect_win10_loading>
                    PAGE_SWITCH(p->pItems[p->nSelectedIndex].ID);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	691a      	ldr	r2, [r3, #16]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001928:	4619      	mov	r1, r3
 800192a:	460b      	mov	r3, r1
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	440b      	add	r3, r1
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	b25a      	sxtb	r2, r3
 8001938:	4b19      	ldr	r3, [pc, #100]	; (80019a0 <_hander_main+0x1d8>)
 800193a:	701a      	strb	r2, [r3, #0]
 800193c:	4b18      	ldr	r3, [pc, #96]	; (80019a0 <_hander_main+0x1d8>)
 800193e:	f993 3000 	ldrsb.w	r3, [r3]
 8001942:	461a      	mov	r2, r3
 8001944:	4b17      	ldr	r3, [pc, #92]	; (80019a4 <_hander_main+0x1dc>)
 8001946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d01e      	beq.n	800198c <_hander_main+0x1c4>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	691a      	ldr	r2, [r3, #16]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001958:	4619      	mov	r1, r3
 800195a:	460b      	mov	r3, r1
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	440b      	add	r3, r1
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	b25a      	sxtb	r2, r3
 8001968:	4b0d      	ldr	r3, [pc, #52]	; (80019a0 <_hander_main+0x1d8>)
 800196a:	701a      	strb	r2, [r3, #0]
 800196c:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <_hander_main+0x1d8>)
 800196e:	f993 3000 	ldrsb.w	r3, [r3]
 8001972:	461a      	mov	r2, r3
 8001974:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <_hander_main+0x1dc>)
 8001976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800197a:	2201      	movs	r2, #1
 800197c:	701a      	strb	r2, [r3, #0]
                    break;
 800197e:	e005      	b.n	800198c <_hander_main+0x1c4>
                }

                default:
                    break;
 8001980:	bf00      	nop
 8001982:	e004      	b.n	800198e <_hander_main+0x1c6>
                    break;
 8001984:	bf00      	nop
 8001986:	e002      	b.n	800198e <_hander_main+0x1c6>
                    break;
 8001988:	bf00      	nop
 800198a:	e000      	b.n	800198e <_hander_main+0x1c6>
                    break;
 800198c:	bf00      	nop
            }

            p->bRepaint = true;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2201      	movs	r2, #1
 8001992:	701a      	strb	r2, [r3, #0]

            break;
 8001994:	e000      	b.n	8001998 <_hander_main+0x1d0>
        case KEY_ID_NONE: break;
 8001996:	bf00      	nop
    }
}
 8001998:	bf00      	nop
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	200001b4 	.word	0x200001b4
 80019a4:	20000190 	.word	0x20000190

080019a8 <_hander_pid>:
    {FUNC_ID_EDIT_KD, "-Derivative", &kd},
    {FUNC_ID_RETURN, "Return"},
};

void _hander_pid(menulist_t* p)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af02      	add	r7, sp, #8
 80019ae:	6078      	str	r0, [r7, #4]
    switch (key_scan()) {
 80019b0:	f005 fcb6 	bl	8007320 <key_scan>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b03      	cmp	r3, #3
 80019b8:	f200 8147 	bhi.w	8001c4a <_hander_pid+0x2a2>
 80019bc:	a201      	add	r2, pc, #4	; (adr r2, 80019c4 <_hander_pid+0x1c>)
 80019be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c2:	bf00      	nop
 80019c4:	08001c4b 	.word	0x08001c4b
 80019c8:	080019d5 	.word	0x080019d5
 80019cc:	080019e5 	.word	0x080019e5
 80019d0:	080019dd 	.word	0x080019dd
        case KEY_ID_NONE: break;
        case KEY_ID_PREV: menulist_callback_handler_switch_prev(p); break;
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f003 fdb7 	bl	8005548 <menulist_callback_handler_switch_prev>
 80019da:	e136      	b.n	8001c4a <_hander_pid+0x2a2>
        case KEY_ID_NEXT: menulist_callback_handler_switch_next(p); break;
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f003 fe29 	bl	8005634 <menulist_callback_handler_switch_next>
 80019e2:	e132      	b.n	8001c4a <_hander_pid+0x2a2>
        case KEY_ID_OK:

            switch (p->pItems[p->nSelectedIndex].ID) {
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	691a      	ldr	r2, [r3, #16]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019ee:	4619      	mov	r1, r3
 80019f0:	460b      	mov	r3, r1
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	440b      	add	r3, r1
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b0a      	cmp	r3, #10
 80019fe:	f000 8113 	beq.w	8001c28 <_hander_pid+0x280>
 8001a02:	2b0a      	cmp	r3, #10
 8001a04:	f2c0 8121 	blt.w	8001c4a <_hander_pid+0x2a2>
 8001a08:	3b0b      	subs	r3, #11
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	f200 811d 	bhi.w	8001c4a <_hander_pid+0x2a2>
                case FUNC_ID_EDIT_KP:
                case FUNC_ID_EDIT_KD:
                case FUNC_ID_EDIT_KI: {
                    bool bRepaint = true;
 8001a10:	2301      	movs	r3, #1
 8001a12:	73fb      	strb	r3, [r7, #15]
                    for (uint16_t i = 0; i < buf_len; ++i)
 8001a14:	2300      	movs	r3, #0
 8001a16:	81bb      	strh	r3, [r7, #12]
 8001a18:	e01a      	b.n	8001a50 <_hander_pid+0xa8>
                        buf_ptr[i] &= (i % 2 == 0 ? 0x55 : 0xAA);
 8001a1a:	4b8d      	ldr	r3, [pc, #564]	; (8001c50 <_hander_pid+0x2a8>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	89bb      	ldrh	r3, [r7, #12]
 8001a20:	4413      	add	r3, r2
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	b25b      	sxtb	r3, r3
 8001a26:	89ba      	ldrh	r2, [r7, #12]
 8001a28:	f002 0201 	and.w	r2, r2, #1
 8001a2c:	b292      	uxth	r2, r2
 8001a2e:	2a00      	cmp	r2, #0
 8001a30:	d101      	bne.n	8001a36 <_hander_pid+0x8e>
 8001a32:	2255      	movs	r2, #85	; 0x55
 8001a34:	e001      	b.n	8001a3a <_hander_pid+0x92>
 8001a36:	f06f 0255 	mvn.w	r2, #85	; 0x55
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	b259      	sxtb	r1, r3
 8001a3e:	4b84      	ldr	r3, [pc, #528]	; (8001c50 <_hander_pid+0x2a8>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	89bb      	ldrh	r3, [r7, #12]
 8001a44:	4413      	add	r3, r2
 8001a46:	b2ca      	uxtb	r2, r1
 8001a48:	701a      	strb	r2, [r3, #0]
                    for (uint16_t i = 0; i < buf_len; ++i)
 8001a4a:	89bb      	ldrh	r3, [r7, #12]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	81bb      	strh	r3, [r7, #12]
 8001a50:	4b80      	ldr	r3, [pc, #512]	; (8001c54 <_hander_pid+0x2ac>)
 8001a52:	881b      	ldrh	r3, [r3, #0]
 8001a54:	89ba      	ldrh	r2, [r7, #12]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d3df      	bcc.n	8001a1a <_hander_pid+0x72>
                    _update();
 8001a5a:	487f      	ldr	r0, [pc, #508]	; (8001c58 <_hander_pid+0x2b0>)
 8001a5c:	f006 f94e 	bl	8007cfc <u8g2_SendBuffer>
                    range_f* range;
                    while (1) {
                        switch (key_scan()) {
 8001a60:	f005 fc5e 	bl	8007320 <key_scan>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b03      	cmp	r3, #3
 8001a68:	d86e      	bhi.n	8001b48 <_hander_pid+0x1a0>
 8001a6a:	a201      	add	r2, pc, #4	; (adr r2, 8001a70 <_hander_pid+0xc8>)
 8001a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a70:	08001b49 	.word	0x08001b49
 8001a74:	08001a81 	.word	0x08001a81
 8001a78:	08001b41 	.word	0x08001b41
 8001a7c:	08001ae1 	.word	0x08001ae1
                            case KEY_ID_NONE: break;
                            case KEY_ID_PREV:
                                range = (range_f*)(p->pItems[p->nSelectedIndex].arg);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	691a      	ldr	r2, [r3, #16]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	440b      	add	r3, r1
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	60bb      	str	r3, [r7, #8]
                                if (range->cur > (range->min + range->step)) {
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	edd3 6a01 	vldr	s13, [r3, #4]
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	edd3 7a04 	vldr	s15, [r3, #16]
 8001aac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ab0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab8:	dd0b      	ble.n	8001ad2 <_hander_pid+0x12a>
                                    range->cur -= range->step;
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	ed93 7a03 	vldr	s14, [r3, #12]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ac6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	edc3 7a03 	vstr	s15, [r3, #12]
 8001ad0:	e003      	b.n	8001ada <_hander_pid+0x132>
                                } else {
                                    range->cur = range->min;
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
                                }
                                bRepaint = true;
 8001ada:	2301      	movs	r3, #1
 8001adc:	73fb      	strb	r3, [r7, #15]
                                break;
 8001ade:	e033      	b.n	8001b48 <_hander_pid+0x1a0>
                            case KEY_ID_NEXT:
                                range = (range_f*)(p->pItems[p->nSelectedIndex].arg);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	691a      	ldr	r2, [r3, #16]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001aea:	4619      	mov	r1, r3
 8001aec:	460b      	mov	r3, r1
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	440b      	add	r3, r1
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4413      	add	r3, r2
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	60bb      	str	r3, [r7, #8]
                                if (range->cur < (range->max - range->step)) {
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	edd3 6a02 	vldr	s13, [r3, #8]
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b0c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001b10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b18:	d50b      	bpl.n	8001b32 <_hander_pid+0x18a>
                                    range->cur += range->step;
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	edc3 7a03 	vstr	s15, [r3, #12]
 8001b30:	e003      	b.n	8001b3a <_hander_pid+0x192>
                                } else {
                                    range->cur = range->max;
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	689a      	ldr	r2, [r3, #8]
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	60da      	str	r2, [r3, #12]
                                }
                                bRepaint = true;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	73fb      	strb	r3, [r7, #15]
                                break;
 8001b3e:	e003      	b.n	8001b48 <_hander_pid+0x1a0>
                            case KEY_ID_OK:
                                p->bRepaint = true;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	701a      	strb	r2, [r3, #0]
                                return;
 8001b46:	e080      	b.n	8001c4a <_hander_pid+0x2a2>
                        }

                        if (bRepaint) {
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d088      	beq.n	8001a60 <_hander_pid+0xb8>
                            bRepaint = false;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	73fb      	strb	r3, [r7, #15]

                            _draw_rect(16, 16, 96, 31);
 8001b52:	231f      	movs	r3, #31
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	2360      	movs	r3, #96	; 0x60
 8001b58:	2210      	movs	r2, #16
 8001b5a:	2110      	movs	r1, #16
 8001b5c:	483e      	ldr	r0, [pc, #248]	; (8001c58 <_hander_pid+0x2b0>)
 8001b5e:	f005 fe62 	bl	8007826 <u8g2_DrawBox>
                            _set_color(2);
 8001b62:	2102      	movs	r1, #2
 8001b64:	483c      	ldr	r0, [pc, #240]	; (8001c58 <_hander_pid+0x2b0>)
 8001b66:	f007 fb0a 	bl	800917e <u8g2_SetDrawColor>
                            _draw_rect(17, 17, 94, 29);
 8001b6a:	231d      	movs	r3, #29
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	235e      	movs	r3, #94	; 0x5e
 8001b70:	2211      	movs	r2, #17
 8001b72:	2111      	movs	r1, #17
 8001b74:	4838      	ldr	r0, [pc, #224]	; (8001c58 <_hander_pid+0x2b0>)
 8001b76:	f005 fe56 	bl	8007826 <u8g2_DrawBox>
                            _set_color(1);
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	4836      	ldr	r0, [pc, #216]	; (8001c58 <_hander_pid+0x2b0>)
 8001b7e:	f007 fafe 	bl	800917e <u8g2_SetDrawColor>

                            _fiil_rect(18, 36, 60, 8);
 8001b82:	2308      	movs	r3, #8
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	233c      	movs	r3, #60	; 0x3c
 8001b88:	2224      	movs	r2, #36	; 0x24
 8001b8a:	2112      	movs	r1, #18
 8001b8c:	4832      	ldr	r0, [pc, #200]	; (8001c58 <_hander_pid+0x2b0>)
 8001b8e:	f005 fe80 	bl	8007892 <u8g2_DrawFrame>

                            range = (range_f*)(p->pItems[p->nSelectedIndex].arg);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	691a      	ldr	r2, [r3, #16]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	440b      	add	r3, r1
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	60bb      	str	r3, [r7, #8]

                            _draw_rect(20, 38, (range->cur - range->min) / (range->max - range->min) * 56, 4);
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	ed93 7a03 	vldr	s14, [r3, #12]
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bb8:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	ed93 7a02 	vldr	s14, [r3, #8]
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bc8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bd0:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001c5c <_hander_pid+0x2b4>
 8001bd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bdc:	ee17 3a90 	vmov	r3, s15
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	2204      	movs	r2, #4
 8001be4:	9200      	str	r2, [sp, #0]
 8001be6:	2226      	movs	r2, #38	; 0x26
 8001be8:	2114      	movs	r1, #20
 8001bea:	481b      	ldr	r0, [pc, #108]	; (8001c58 <_hander_pid+0x2b0>)
 8001bec:	f005 fe1b 	bl	8007826 <u8g2_DrawBox>

                            _draw_str(22, 30, range->desc);
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	221e      	movs	r2, #30
 8001bf6:	2116      	movs	r1, #22
 8001bf8:	4817      	ldr	r0, [pc, #92]	; (8001c58 <_hander_pid+0x2b0>)
 8001bfa:	f007 f82d 	bl	8008c58 <u8g2_DrawStr>

                            _draw_num(81, 44, "%.2f", range->cur);
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe fdca 	bl	800079c <__aeabi_f2d>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4914      	ldr	r1, [pc, #80]	; (8001c60 <_hander_pid+0x2b8>)
 8001c0e:	4815      	ldr	r0, [pc, #84]	; (8001c64 <_hander_pid+0x2bc>)
 8001c10:	f008 fe0c 	bl	800a82c <siprintf>
 8001c14:	4b13      	ldr	r3, [pc, #76]	; (8001c64 <_hander_pid+0x2bc>)
 8001c16:	222c      	movs	r2, #44	; 0x2c
 8001c18:	2151      	movs	r1, #81	; 0x51
 8001c1a:	480f      	ldr	r0, [pc, #60]	; (8001c58 <_hander_pid+0x2b0>)
 8001c1c:	f007 f81c 	bl	8008c58 <u8g2_DrawStr>

                            _update();
 8001c20:	480d      	ldr	r0, [pc, #52]	; (8001c58 <_hander_pid+0x2b0>)
 8001c22:	f006 f86b 	bl	8007cfc <u8g2_SendBuffer>
                        switch (key_scan()) {
 8001c26:	e71b      	b.n	8001a60 <_hander_pid+0xb8>
                        }
                    }
                    break;
                }
                case FUNC_ID_RETURN: {
                    effect_disappear();
 8001c28:	f002 ff4a 	bl	8004ac0 <effect_disappear>
                    PAGE_SWITCH(PAGE_ID_MAIN_MENULIST);
 8001c2c:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <_hander_pid+0x2c0>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	701a      	strb	r2, [r3, #0]
 8001c32:	4b0e      	ldr	r3, [pc, #56]	; (8001c6c <_hander_pid+0x2c4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d006      	beq.n	8001c48 <_hander_pid+0x2a0>
 8001c3a:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <_hander_pid+0x2c0>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	701a      	strb	r2, [r3, #0]
 8001c40:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <_hander_pid+0x2c4>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2201      	movs	r2, #1
 8001c46:	701a      	strb	r2, [r3, #0]
                    break;
 8001c48:	bf00      	nop
                }
            }
    }
}
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20000264 	.word	0x20000264
 8001c54:	20000268 	.word	0x20000268
 8001c58:	200001d0 	.word	0x200001d0
 8001c5c:	42600000 	.word	0x42600000
 8001c60:	0800dcd4 	.word	0x0800dcd4
 8001c64:	20000180 	.word	0x20000180
 8001c68:	200001b4 	.word	0x200001b4
 8001c6c:	20000190 	.word	0x20000190

08001c70 <_hander_icon>:
    {FUNC_ID_ANIMATION2, "Slot", 36, 36, res_coin},
    {FUNC_ID_RETURN, "Share", 36, 36, res_share},
};

void _hander_icon(iconlist_t* p)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
    switch (key_scan()) {
 8001c78:	f005 fb52 	bl	8007320 <key_scan>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b03      	cmp	r3, #3
 8001c80:	d83f      	bhi.n	8001d02 <_hander_icon+0x92>
 8001c82:	a201      	add	r2, pc, #4	; (adr r2, 8001c88 <_hander_icon+0x18>)
 8001c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c88:	08001cf9 	.word	0x08001cf9
 8001c8c:	08001c99 	.word	0x08001c99
 8001c90:	08001ca9 	.word	0x08001ca9
 8001c94:	08001ca1 	.word	0x08001ca1
        case KEY_ID_NONE: break;
        case KEY_ID_PREV: iconlist_callback_handler_switch_prev(p); break;
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f003 f883 	bl	8004da4 <iconlist_callback_handler_switch_prev>
 8001c9e:	e030      	b.n	8001d02 <_hander_icon+0x92>
        case KEY_ID_NEXT: iconlist_callback_handler_switch_next(p); break;
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f003 f8c5 	bl	8004e30 <iconlist_callback_handler_switch_next>
 8001ca6:	e02c      	b.n	8001d02 <_hander_icon+0x92>
        case KEY_ID_OK:
            switch (p->pItems[p->nSelectedIndex].ID) {
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	691a      	ldr	r2, [r3, #16]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	7d5b      	ldrb	r3, [r3, #21]
 8001cb0:	011b      	lsls	r3, r3, #4
 8001cb2:	4413      	add	r3, r2
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b0c      	cmp	r3, #12
 8001cb8:	d009      	beq.n	8001cce <_hander_icon+0x5e>
 8001cba:	2b0c      	cmp	r3, #12
 8001cbc:	dc1e      	bgt.n	8001cfc <_hander_icon+0x8c>
 8001cbe:	2b0a      	cmp	r3, #10
 8001cc0:	d009      	beq.n	8001cd6 <_hander_icon+0x66>
 8001cc2:	2b0b      	cmp	r3, #11
 8001cc4:	d11a      	bne.n	8001cfc <_hander_icon+0x8c>
                case FUNC_ID_ANIMATION1:
                    iconlist_callback_handler_shake_selected(p);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f003 f8fa 	bl	8004ec0 <iconlist_callback_handler_shake_selected>
                    break;
 8001ccc:	e019      	b.n	8001d02 <_hander_icon+0x92>
                case FUNC_ID_ANIMATION2:
                    iconlist_callback_handler_updown_selected(p);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f003 f908 	bl	8004ee4 <iconlist_callback_handler_updown_selected>
                    break;
 8001cd4:	e015      	b.n	8001d02 <_hander_icon+0x92>
                case FUNC_ID_RETURN: {
                    effect_disappear();
 8001cd6:	f002 fef3 	bl	8004ac0 <effect_disappear>
                    PAGE_SWITCH(PAGE_ID_MAIN_MENULIST);
 8001cda:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <_hander_icon+0x9c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	701a      	strb	r2, [r3, #0]
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <_hander_icon+0xa0>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d00b      	beq.n	8001d00 <_hander_icon+0x90>
 8001ce8:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <_hander_icon+0x9c>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	701a      	strb	r2, [r3, #0]
 8001cee:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <_hander_icon+0xa0>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	701a      	strb	r2, [r3, #0]
                    break;
 8001cf6:	e003      	b.n	8001d00 <_hander_icon+0x90>
        case KEY_ID_NONE: break;
 8001cf8:	bf00      	nop
 8001cfa:	e002      	b.n	8001d02 <_hander_icon+0x92>
                }
                default: break;
 8001cfc:	bf00      	nop
 8001cfe:	e000      	b.n	8001d02 <_hander_icon+0x92>
                    break;
 8001d00:	bf00      	nop
            }
    }
}
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	200001b4 	.word	0x200001b4
 8001d10:	20000190 	.word	0x20000190

08001d14 <_handler_devicelist>:
    {FUNC_ID_DEV_BUZZER, "-Buzzer", 0},
    {FUNC_ID_RETURN, "Return"},
};

void _handler_devicelist(menulist_t* p)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
    switch (key_scan()) {
 8001d1c:	f005 fb00 	bl	8007320 <key_scan>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b03      	cmp	r3, #3
 8001d24:	f200 8089 	bhi.w	8001e3a <_handler_devicelist+0x126>
 8001d28:	a201      	add	r2, pc, #4	; (adr r2, 8001d30 <_handler_devicelist+0x1c>)
 8001d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d2e:	bf00      	nop
 8001d30:	08001e35 	.word	0x08001e35
 8001d34:	08001d41 	.word	0x08001d41
 8001d38:	08001d51 	.word	0x08001d51
 8001d3c:	08001d49 	.word	0x08001d49
        case KEY_ID_NONE: break;
        case KEY_ID_PREV: menulist_callback_handler_switch_prev(p); break;
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f003 fc01 	bl	8005548 <menulist_callback_handler_switch_prev>
 8001d46:	e078      	b.n	8001e3a <_handler_devicelist+0x126>
        case KEY_ID_NEXT: menulist_callback_handler_switch_next(p); break;
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f003 fc73 	bl	8005634 <menulist_callback_handler_switch_next>
 8001d4e:	e074      	b.n	8001e3a <_handler_devicelist+0x126>
        case KEY_ID_OK: {
            switch (p->pItems[p->nSelectedIndex].ID) {
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	691a      	ldr	r2, [r3, #16]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	440b      	add	r3, r1
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b0c      	cmp	r3, #12
 8001d6a:	d02b      	beq.n	8001dc4 <_handler_devicelist+0xb0>
 8001d6c:	2b0c      	cmp	r3, #12
 8001d6e:	dc63      	bgt.n	8001e38 <_handler_devicelist+0x124>
 8001d70:	2b0a      	cmp	r3, #10
 8001d72:	d04d      	beq.n	8001e10 <_handler_devicelist+0xfc>
 8001d74:	2b0b      	cmp	r3, #11
 8001d76:	d15f      	bne.n	8001e38 <_handler_devicelist+0x124>
                case FUNC_ID_DEV_LED:
                	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001d78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d7c:	4831      	ldr	r0, [pc, #196]	; (8001e44 <_handler_devicelist+0x130>)
 8001d7e:	f001 fbea 	bl	8003556 <HAL_GPIO_TogglePin>
                    p->pItems[p->nSelectedIndex].arg = !!!(bool)(p->pItems[p->nSelectedIndex].arg);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	691a      	ldr	r2, [r3, #16]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	460b      	mov	r3, r1
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	440b      	add	r3, r1
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <_handler_devicelist+0x8e>
 8001d9e:	2201      	movs	r2, #1
 8001da0:	e000      	b.n	8001da4 <_handler_devicelist+0x90>
 8001da2:	2200      	movs	r2, #0
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6919      	ldr	r1, [r3, #16]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001dae:	4618      	mov	r0, r3
 8001db0:	4603      	mov	r3, r0
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	4403      	add	r3, r0
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	440b      	add	r3, r1
 8001dba:	609a      	str	r2, [r3, #8]
                    // repaint
                    p->bRepaint = true;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	701a      	strb	r2, [r3, #0]
                	break;
 8001dc2:	e036      	b.n	8001e32 <_handler_devicelist+0x11e>
                case FUNC_ID_DEV_BUZZER: {
                    // 取反(3个！把值限制为0和1)
                	HAL_GPIO_TogglePin(BEEP_GPIO_Port,BEEP_Pin);
 8001dc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dc8:	481e      	ldr	r0, [pc, #120]	; (8001e44 <_handler_devicelist+0x130>)
 8001dca:	f001 fbc4 	bl	8003556 <HAL_GPIO_TogglePin>
                    p->pItems[p->nSelectedIndex].arg = !!!(bool)(p->pItems[p->nSelectedIndex].arg);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	691a      	ldr	r2, [r3, #16]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001dd8:	4619      	mov	r1, r3
 8001dda:	460b      	mov	r3, r1
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	440b      	add	r3, r1
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4413      	add	r3, r2
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <_handler_devicelist+0xda>
 8001dea:	2201      	movs	r2, #1
 8001dec:	e000      	b.n	8001df0 <_handler_devicelist+0xdc>
 8001dee:	2200      	movs	r2, #0
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6919      	ldr	r1, [r3, #16]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	4403      	add	r3, r0
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	440b      	add	r3, r1
 8001e06:	609a      	str	r2, [r3, #8]
                    // repaint
                    p->bRepaint = true;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	701a      	strb	r2, [r3, #0]

                    break;
 8001e0e:	e010      	b.n	8001e32 <_handler_devicelist+0x11e>
                }
                case FUNC_ID_RETURN: {
                    effect_disappear();
 8001e10:	f002 fe56 	bl	8004ac0 <effect_disappear>
                    PAGE_SWITCH(PAGE_ID_MAIN_MENULIST);
 8001e14:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <_handler_devicelist+0x134>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	701a      	strb	r2, [r3, #0]
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <_handler_devicelist+0x138>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d006      	beq.n	8001e30 <_handler_devicelist+0x11c>
 8001e22:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <_handler_devicelist+0x134>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	701a      	strb	r2, [r3, #0]
 8001e28:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <_handler_devicelist+0x138>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	701a      	strb	r2, [r3, #0]
                    break;
 8001e30:	bf00      	nop
                }
            }
            break;
 8001e32:	e001      	b.n	8001e38 <_handler_devicelist+0x124>
        case KEY_ID_NONE: break;
 8001e34:	bf00      	nop
 8001e36:	e000      	b.n	8001e3a <_handler_devicelist+0x126>
            break;
 8001e38:	bf00      	nop
        }
    }
}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40021400 	.word	0x40021400
 8001e48:	200001b4 	.word	0x200001b4
 8001e4c:	20000190 	.word	0x20000190

08001e50 <_painter_devicelist>:

void _painter_devicelist(menulist_t* p)
{
 8001e50:	b590      	push	{r4, r7, lr}
 8001e52:	ed2d 8b02 	vpush	{d8}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
    // easing
    menulist_callback_painter_update_easing(p);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f003 fc61 	bl	8005724 <menulist_callback_painter_update_easing>
    // new frame
    _clear();
 8001e62:	4874      	ldr	r0, [pc, #464]	; (8002034 <_painter_devicelist+0x1e4>)
 8001e64:	f005 fed7 	bl	8007c16 <u8g2_ClearBuffer>
    // title

    static uint8_t w_on  = 0;
    static uint8_t w_off = 0;
    if (w_on == 0) w_on = _str_w_("[on]");
 8001e68:	4b73      	ldr	r3, [pc, #460]	; (8002038 <_painter_devicelist+0x1e8>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d107      	bne.n	8001e80 <_painter_devicelist+0x30>
 8001e70:	4972      	ldr	r1, [pc, #456]	; (800203c <_painter_devicelist+0x1ec>)
 8001e72:	4870      	ldr	r0, [pc, #448]	; (8002034 <_painter_devicelist+0x1e4>)
 8001e74:	f007 f810 	bl	8008e98 <u8g2_GetStrWidth>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	4b6e      	ldr	r3, [pc, #440]	; (8002038 <_painter_devicelist+0x1e8>)
 8001e7e:	701a      	strb	r2, [r3, #0]
    if (w_off == 0) w_off = _str_w_("[off]");
 8001e80:	4b6f      	ldr	r3, [pc, #444]	; (8002040 <_painter_devicelist+0x1f0>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d107      	bne.n	8001e98 <_painter_devicelist+0x48>
 8001e88:	496e      	ldr	r1, [pc, #440]	; (8002044 <_painter_devicelist+0x1f4>)
 8001e8a:	486a      	ldr	r0, [pc, #424]	; (8002034 <_painter_devicelist+0x1e4>)
 8001e8c:	f007 f804 	bl	8008e98 <u8g2_GetStrWidth>
 8001e90:	4603      	mov	r3, r0
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	4b6a      	ldr	r3, [pc, #424]	; (8002040 <_painter_devicelist+0x1f0>)
 8001e96:	701a      	strb	r2, [r3, #0]

    uint8_t      index    = easing_curpos(&p->yTitleOffset) / p->hLine;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	33bc      	adds	r3, #188	; 0xbc
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f005 f9c9 	bl	8007234 <easing_curpos>
 8001ea2:	eef0 6a40 	vmov.f32	s13, s0
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	ed93 7a06 	vldr	s14, [r3, #24]
 8001eac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001eb4:	edc7 7a00 	vstr	s15, [r7]
 8001eb8:	783b      	ldrb	r3, [r7, #0]
 8001eba:	73fb      	strb	r3, [r7, #15]
    easing_pos_t y_offset = index * p->hLine - easing_curpos(&p->yTitleOffset);
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
 8001ebe:	ee07 3a90 	vmov	s15, r3
 8001ec2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	edd3 7a06 	vldr	s15, [r3, #24]
 8001ecc:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	33bc      	adds	r3, #188	; 0xbc
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f005 f9ad 	bl	8007234 <easing_curpos>
 8001eda:	eef0 7a40 	vmov.f32	s15, s0
 8001ede:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001ee2:	edc7 7a02 	vstr	s15, [r7, #8]
    while (index < p->nSize && y_offset < p->nHeight) {
 8001ee6:	e082      	b.n	8001fee <_painter_devicelist+0x19e>
        _draw_str(p->xPadding, y_offset + p->yPadding, p->pItems[index].title);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001eee:	b298      	uxth	r0, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001ef6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001efa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001efe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f02:	ee17 3a90 	vmov	r3, s15
 8001f06:	b29c      	uxth	r4, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6919      	ldr	r1, [r3, #16]
 8001f0c:	7bfa      	ldrb	r2, [r7, #15]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	4413      	add	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	440b      	add	r3, r1
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	4622      	mov	r2, r4
 8001f1c:	4601      	mov	r1, r0
 8001f1e:	4845      	ldr	r0, [pc, #276]	; (8002034 <_painter_devicelist+0x1e4>)
 8001f20:	f006 fe9a 	bl	8008c58 <u8g2_DrawStr>
        if (p->pItems[index].ID > FUNC_ID_RETURN) {
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6919      	ldr	r1, [r3, #16]
 8001f28:	7bfa      	ldrb	r2, [r7, #15]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	4413      	add	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	440b      	add	r3, r1
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b0a      	cmp	r3, #10
 8001f38:	d94d      	bls.n	8001fd6 <_painter_devicelist+0x186>
            if ((bool)(p->pItems[index].arg)) {
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6919      	ldr	r1, [r3, #16]
 8001f3e:	7bfa      	ldrb	r2, [r7, #15]
 8001f40:	4613      	mov	r3, r2
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	4413      	add	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	440b      	add	r3, r1
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d021      	beq.n	8001f94 <_painter_devicelist+0x144>
                _draw_str(p->xSlider - p->xPadding * 2 - w_on, y_offset + p->yPadding, "[on]");
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	4b33      	ldr	r3, [pc, #204]	; (8002038 <_painter_devicelist+0x1e8>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	b299      	uxth	r1, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001f78:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f84:	ee17 3a90 	vmov	r3, s15
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	4b2c      	ldr	r3, [pc, #176]	; (800203c <_painter_devicelist+0x1ec>)
 8001f8c:	4829      	ldr	r0, [pc, #164]	; (8002034 <_painter_devicelist+0x1e4>)
 8001f8e:	f006 fe63 	bl	8008c58 <u8g2_DrawStr>
 8001f92:	e020      	b.n	8001fd6 <_painter_devicelist+0x186>
            } else {
                _draw_str(p->xSlider - p->xPadding * 2 - w_off, y_offset + p->yPadding, "[off]");
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	4b24      	ldr	r3, [pc, #144]	; (8002040 <_painter_devicelist+0x1f0>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	b299      	uxth	r1, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001fbc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fc8:	ee17 3a90 	vmov	r3, s15
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	4b1d      	ldr	r3, [pc, #116]	; (8002044 <_painter_devicelist+0x1f4>)
 8001fd0:	4818      	ldr	r0, [pc, #96]	; (8002034 <_painter_devicelist+0x1e4>)
 8001fd2:	f006 fe41 	bl	8008c58 <u8g2_DrawStr>
            }
        }
        ++index, y_offset += p->hLine;
 8001fd6:	7bfb      	ldrb	r3, [r7, #15]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	73fb      	strb	r3, [r7, #15]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	edd3 7a06 	vldr	s15, [r3, #24]
 8001fe2:	ed97 7a02 	vldr	s14, [r7, #8]
 8001fe6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fea:	edc7 7a02 	vstr	s15, [r7, #8]
    while (index < p->nSize && y_offset < p->nHeight) {
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	7d1b      	ldrb	r3, [r3, #20]
 8001ff2:	7bfa      	ldrb	r2, [r7, #15]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d20d      	bcs.n	8002014 <_painter_devicelist+0x1c4>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	89db      	ldrh	r3, [r3, #14]
 8001ffc:	ee07 3a90 	vmov	s15, r3
 8002000:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002004:	ed97 7a02 	vldr	s14, [r7, #8]
 8002008:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800200c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002010:	f53f af6a 	bmi.w	8001ee8 <_painter_devicelist+0x98>
    }

    // scroll
    menulist_callback_painter_draw_scroll(p);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f003 fc47 	bl	80058a8 <menulist_callback_painter_draw_scroll>
    // mask
    menulist_callback_painter_draw_item_mask(p);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f003 fd1a 	bl	8005a54 <menulist_callback_painter_draw_item_mask>
    // update screen
    _update();
 8002020:	4804      	ldr	r0, [pc, #16]	; (8002034 <_painter_devicelist+0x1e4>)
 8002022:	f005 fe6b 	bl	8007cfc <u8g2_SendBuffer>
}
 8002026:	bf00      	nop
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	ecbd 8b02 	vpop	{d8}
 8002030:	bd90      	pop	{r4, r7, pc}
 8002032:	bf00      	nop
 8002034:	200001d0 	.word	0x200001d0
 8002038:	200001b5 	.word	0x200001b5
 800203c:	0800dd10 	.word	0x0800dd10
 8002040:	200001b6 	.word	0x200001b6
 8002044:	0800dd18 	.word	0x0800dd18

08002048 <_easing_calc_Custom>:
enum {
    FUNC_ID_EASING = FUNC_ID_RETURN + 1,
};

float _easing_calc_Custom(const float t)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	ed87 0a01 	vstr	s0, [r7, #4]
    if (t < 0.3) return t;
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7fe fba2 	bl	800079c <__aeabi_f2d>
 8002058:	a311      	add	r3, pc, #68	; (adr r3, 80020a0 <_easing_calc_Custom+0x58>)
 800205a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205e:	f7fe fc55 	bl	800090c <__aeabi_dcmplt>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d002      	beq.n	800206e <_easing_calc_Custom+0x26>
 8002068:	edd7 7a01 	vldr	s15, [r7, #4]
 800206c:	e011      	b.n	8002092 <_easing_calc_Custom+0x4a>
    if (t < 0.6) return t * t;
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7fe fb94 	bl	800079c <__aeabi_f2d>
 8002074:	a30c      	add	r3, pc, #48	; (adr r3, 80020a8 <_easing_calc_Custom+0x60>)
 8002076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207a:	f7fe fc47 	bl	800090c <__aeabi_dcmplt>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d004      	beq.n	800208e <_easing_calc_Custom+0x46>
 8002084:	edd7 7a01 	vldr	s15, [r7, #4]
 8002088:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800208c:	e001      	b.n	8002092 <_easing_calc_Custom+0x4a>
    return t;
 800208e:	edd7 7a01 	vldr	s15, [r7, #4]
}
 8002092:	eeb0 0a67 	vmov.f32	s0, s15
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	f3af 8000 	nop.w
 80020a0:	33333333 	.word	0x33333333
 80020a4:	3fd33333 	.word	0x3fd33333
 80020a8:	33333333 	.word	0x33333333
 80020ac:	3fe33333 	.word	0x3fe33333

080020b0 <_handler_easing_chart>:
    {FUNC_ID_EASING, "- InOutBounce", _easing_calc_InOutBounce},
    {FUNC_ID_RETURN, "Return", 0},
};

void _handler_easing_chart(menulist_t* p)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b096      	sub	sp, #88	; 0x58
 80020b4:	af02      	add	r7, sp, #8
 80020b6:	6078      	str	r0, [r7, #4]
    switch (key_scan()) {
 80020b8:	f005 f932 	bl	8007320 <key_scan>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b03      	cmp	r3, #3
 80020c0:	f200 80f2 	bhi.w	80022a8 <_handler_easing_chart+0x1f8>
 80020c4:	a201      	add	r2, pc, #4	; (adr r2, 80020cc <_handler_easing_chart+0x1c>)
 80020c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ca:	bf00      	nop
 80020cc:	080022a3 	.word	0x080022a3
 80020d0:	080020dd 	.word	0x080020dd
 80020d4:	080020ed 	.word	0x080020ed
 80020d8:	080020e5 	.word	0x080020e5
        case KEY_ID_NONE: break;
        case KEY_ID_PREV: menulist_callback_handler_switch_prev(p); break;
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f003 fa33 	bl	8005548 <menulist_callback_handler_switch_prev>
 80020e2:	e0e1      	b.n	80022a8 <_handler_easing_chart+0x1f8>
        case KEY_ID_NEXT: menulist_callback_handler_switch_next(p); break;
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f003 faa5 	bl	8005634 <menulist_callback_handler_switch_next>
 80020ea:	e0dd      	b.n	80022a8 <_handler_easing_chart+0x1f8>
        case KEY_ID_OK: {
            switch (p->pItems[p->nSelectedIndex].ID) {
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	691a      	ldr	r2, [r3, #16]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020f6:	4619      	mov	r1, r3
 80020f8:	460b      	mov	r3, r1
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	440b      	add	r3, r1
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b0a      	cmp	r3, #10
 8002106:	f000 80ba 	beq.w	800227e <_handler_easing_chart+0x1ce>
 800210a:	2b0b      	cmp	r3, #11
 800210c:	f040 80cb 	bne.w	80022a6 <_handler_easing_chart+0x1f6>
                case FUNC_ID_EASING: {
                    easing_t e = easing_create(EASING_MODE_DEFAULT, p->pItems[p->nSelectedIndex].arg, 0, 36, 0);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691a      	ldr	r2, [r3, #16]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800211a:	4619      	mov	r1, r3
 800211c:	460b      	mov	r3, r1
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	440b      	add	r3, r1
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	461a      	mov	r2, r3
 800212a:	f107 0008 	add.w	r0, r7, #8
 800212e:	2300      	movs	r3, #0
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	2324      	movs	r3, #36	; 0x24
 8002134:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 80022b0 <_handler_easing_chart+0x200>
 8002138:	2100      	movs	r1, #0
 800213a:	f004 fecd 	bl	8006ed8 <easing_create>

                    easing_start_relative(&e, e.nFrameCount);
 800213e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002140:	ee07 3a90 	vmov	s15, r3
 8002144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002148:	f107 0308 	add.w	r3, r7, #8
 800214c:	eeb0 0a67 	vmov.f32	s0, s15
 8002150:	4618      	mov	r0, r3
 8002152:	f004 ff6f 	bl	8007034 <easing_start_relative>
                    float xoffset = (CONFIG_SCREEN_WIDTH - e.nStop) / 2, yoffset = (CONFIG_SCREEN_HEIGHT - e.nStop) / 2 + e.nStop;
 8002156:	edd7 7a05 	vldr	s15, [r7, #20]
 800215a:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80022b4 <_handler_easing_chart+0x204>
 800215e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002162:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002166:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800216a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 800216e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002172:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80022b8 <_handler_easing_chart+0x208>
 8002176:	ee77 7a67 	vsub.f32	s15, s14, s15
 800217a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800217e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002182:	edd7 7a05 	vldr	s15, [r7, #20]
 8002186:	ee77 7a27 	vadd.f32	s15, s14, s15
 800218a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

                    _clear();
 800218e:	484b      	ldr	r0, [pc, #300]	; (80022bc <_handler_easing_chart+0x20c>)
 8002190:	f005 fd41 	bl	8007c16 <u8g2_ClearBuffer>
                    float x1 = -1, y1 = -1, x2, y2;
 8002194:	4b4a      	ldr	r3, [pc, #296]	; (80022c0 <_handler_easing_chart+0x210>)
 8002196:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002198:	4b49      	ldr	r3, [pc, #292]	; (80022c0 <_handler_easing_chart+0x210>)
 800219a:	64bb      	str	r3, [r7, #72]	; 0x48
                    while (!easing_isok(&e)) {
 800219c:	e057      	b.n	800224e <_handler_easing_chart+0x19e>
                        easing_update(&e);
 800219e:	f107 0308 	add.w	r3, r7, #8
 80021a2:	4618      	mov	r0, r3
 80021a4:	f004 ff61 	bl	800706a <easing_update>
                        x2 = xoffset + e.nFrameIndex;
 80021a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80021aa:	ee07 3a90 	vmov	s15, r3
 80021ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021b2:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80021b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ba:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
                        y2 = yoffset - easing_curpos(&e);
 80021be:	f107 0308 	add.w	r3, r7, #8
 80021c2:	4618      	mov	r0, r3
 80021c4:	f005 f836 	bl	8007234 <easing_curpos>
 80021c8:	eeb0 7a40 	vmov.f32	s14, s0
 80021cc:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80021d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80021d4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                        if (x1 == -1) x1 = x2;
 80021d8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80021dc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80021e0:	eef4 7a47 	vcmp.f32	s15, s14
 80021e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e8:	d101      	bne.n	80021ee <_handler_easing_chart+0x13e>
 80021ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021ec:	64fb      	str	r3, [r7, #76]	; 0x4c
                        if (y1 == -1) y1 = y2;
 80021ee:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80021f2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80021f6:	eef4 7a47 	vcmp.f32	s15, s14
 80021fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021fe:	d101      	bne.n	8002204 <_handler_easing_chart+0x154>
 8002200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002202:	64bb      	str	r3, [r7, #72]	; 0x48
                        _draw_line(x1, y1, x2, y2);
 8002204:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002208:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800220c:	ee17 3a90 	vmov	r3, s15
 8002210:	b299      	uxth	r1, r3
 8002212:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002216:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800221a:	ee17 3a90 	vmov	r3, s15
 800221e:	b29a      	uxth	r2, r3
 8002220:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002224:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002228:	ee17 3a90 	vmov	r3, s15
 800222c:	b298      	uxth	r0, r3
 800222e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002232:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002236:	ee17 3a90 	vmov	r3, s15
 800223a:	b29b      	uxth	r3, r3
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	4603      	mov	r3, r0
 8002240:	481e      	ldr	r0, [pc, #120]	; (80022bc <_handler_easing_chart+0x20c>)
 8002242:	f007 f811 	bl	8009268 <u8g2_DrawLine>
                        x1 = x2;
 8002246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002248:	64fb      	str	r3, [r7, #76]	; 0x4c
                        y1 = y2;
 800224a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800224c:	64bb      	str	r3, [r7, #72]	; 0x48
                    while (!easing_isok(&e)) {
 800224e:	f107 0308 	add.w	r3, r7, #8
 8002252:	4618      	mov	r0, r3
 8002254:	f004 ffca 	bl	80071ec <easing_isok>
 8002258:	4603      	mov	r3, r0
 800225a:	f083 0301 	eor.w	r3, r3, #1
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b00      	cmp	r3, #0
 8002262:	d19c      	bne.n	800219e <_handler_easing_chart+0xee>
                    }
                    _update();
 8002264:	4815      	ldr	r0, [pc, #84]	; (80022bc <_handler_easing_chart+0x20c>)
 8002266:	f005 fd49 	bl	8007cfc <u8g2_SendBuffer>

                    while (key_scan() == KEY_ID_NONE) {}
 800226a:	bf00      	nop
 800226c:	f005 f858 	bl	8007320 <key_scan>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d0fa      	beq.n	800226c <_handler_easing_chart+0x1bc>

                    // repaint
                    p->bRepaint = true;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	701a      	strb	r2, [r3, #0]

                    break;
 800227c:	e010      	b.n	80022a0 <_handler_easing_chart+0x1f0>
                }
                case FUNC_ID_RETURN: {
                    effect_disappear();
 800227e:	f002 fc1f 	bl	8004ac0 <effect_disappear>
                    PAGE_SWITCH(PAGE_ID_MAIN_MENULIST);
 8002282:	4b10      	ldr	r3, [pc, #64]	; (80022c4 <_handler_easing_chart+0x214>)
 8002284:	2200      	movs	r2, #0
 8002286:	701a      	strb	r2, [r3, #0]
 8002288:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <_handler_easing_chart+0x218>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d006      	beq.n	800229e <_handler_easing_chart+0x1ee>
 8002290:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <_handler_easing_chart+0x214>)
 8002292:	2200      	movs	r2, #0
 8002294:	701a      	strb	r2, [r3, #0]
 8002296:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <_handler_easing_chart+0x218>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2201      	movs	r2, #1
 800229c:	701a      	strb	r2, [r3, #0]
                    break;
 800229e:	bf00      	nop
                }
            }
            break;
 80022a0:	e001      	b.n	80022a6 <_handler_easing_chart+0x1f6>
        case KEY_ID_NONE: break;
 80022a2:	bf00      	nop
 80022a4:	e000      	b.n	80022a8 <_handler_easing_chart+0x1f8>
            break;
 80022a6:	bf00      	nop
        }
    }
}
 80022a8:	bf00      	nop
 80022aa:	3750      	adds	r7, #80	; 0x50
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	00000000 	.word	0x00000000
 80022b4:	43000000 	.word	0x43000000
 80022b8:	42800000 	.word	0x42800000
 80022bc:	200001d0 	.word	0x200001d0
 80022c0:	bf800000 	.word	0xbf800000
 80022c4:	200001b4 	.word	0x200001b4
 80022c8:	20000190 	.word	0x20000190

080022cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	f5ad 6da1 	sub.w	sp, sp, #1288	; 0x508
 80022d2:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022d4:	f000 fab4 	bl	8002840 <HAL_Init>

  /* USER CODE BEGIN Init */
    HAL_Delay(500);
 80022d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022dc:	f000 fb22 	bl	8002924 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022e0:	f000 f90a 	bl	80024f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022e4:	f7fe fde6 	bl	8000eb4 <MX_GPIO_Init>
  MX_I2C2_Init();
 80022e8:	f7fe fe52 	bl	8000f90 <MX_I2C2_Init>
  MX_ADC1_Init();
 80022ec:	f7fe fd4c 	bl	8000d88 <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


    key_init();
 80022f0:	f004 ffec 	bl	80072cc <key_init>
    u8g2_init();
 80022f4:	f002 fbbe 	bl	8004a74 <u8g2_init>

    page_t page_logo  = page_new(_painter_logo, _handler_logo);
 80022f8:	4a6c      	ldr	r2, [pc, #432]	; (80024ac <main+0x1e0>)
 80022fa:	f207 43f4 	addw	r3, r7, #1268	; 0x4f4
 80022fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8002300:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    page_t page_about = page_new(_painter_about, _handler_about);
 8002304:	4a6a      	ldr	r2, [pc, #424]	; (80024b0 <main+0x1e4>)
 8002306:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800230a:	ca07      	ldmia	r2, {r0, r1, r2}
 800230c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    PAGE_REGISTER(PAGE_ID_LOGO, page_logo);
 8002310:	4a68      	ldr	r2, [pc, #416]	; (80024b4 <main+0x1e8>)
 8002312:	f207 43f4 	addw	r3, r7, #1268	; 0x4f4
 8002316:	6113      	str	r3, [r2, #16]
    PAGE_REGISTER(PAGE_ID_ABOUT, page_about);
 8002318:	4a66      	ldr	r2, [pc, #408]	; (80024b4 <main+0x1e8>)
 800231a:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800231e:	61d3      	str	r3, [r2, #28]

    menulist_t menulist_main   = menulist_initialize(menu_main, ARRAY_SIZE(menu_main), 4, 0, _hander_main);
 8002320:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8002324:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 8002328:	4b63      	ldr	r3, [pc, #396]	; (80024b8 <main+0x1ec>)
 800232a:	9301      	str	r3, [sp, #4]
 800232c:	2300      	movs	r3, #0
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	2304      	movs	r3, #4
 8002332:	2209      	movs	r2, #9
 8002334:	4961      	ldr	r1, [pc, #388]	; (80024bc <main+0x1f0>)
 8002336:	f002 ffad 	bl	8005294 <menulist_initialize>
    menulist_t menulist_pid    = menulist_initialize(menu_pid, ARRAY_SIZE(menu_pid), 4, 0, _hander_pid);
 800233a:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 800233e:	f5a3 70f8 	sub.w	r0, r3, #496	; 0x1f0
 8002342:	4b5f      	ldr	r3, [pc, #380]	; (80024c0 <main+0x1f4>)
 8002344:	9301      	str	r3, [sp, #4]
 8002346:	2300      	movs	r3, #0
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	2304      	movs	r3, #4
 800234c:	2204      	movs	r2, #4
 800234e:	495d      	ldr	r1, [pc, #372]	; (80024c4 <main+0x1f8>)
 8002350:	f002 ffa0 	bl	8005294 <menulist_initialize>
    menulist_t menulist_easing = menulist_initialize(menu_easing, ARRAY_SIZE(menu_easing), 5, 0, _handler_easing_chart);
 8002354:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8002358:	f5a3 7037 	sub.w	r0, r3, #732	; 0x2dc
 800235c:	4b5a      	ldr	r3, [pc, #360]	; (80024c8 <main+0x1fc>)
 800235e:	9301      	str	r3, [sp, #4]
 8002360:	2300      	movs	r3, #0
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	2305      	movs	r3, #5
 8002366:	2221      	movs	r2, #33	; 0x21
 8002368:	4958      	ldr	r1, [pc, #352]	; (80024cc <main+0x200>)
 800236a:	f002 ff93 	bl	8005294 <menulist_initialize>
    menulist_t menulist_devs   = menulist_initialize(menu_device, ARRAY_SIZE(menu_device), 3, _painter_devicelist, _handler_devicelist);
 800236e:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8002372:	f5a3 7072 	sub.w	r0, r3, #968	; 0x3c8
 8002376:	4b56      	ldr	r3, [pc, #344]	; (80024d0 <main+0x204>)
 8002378:	9301      	str	r3, [sp, #4]
 800237a:	4b56      	ldr	r3, [pc, #344]	; (80024d4 <main+0x208>)
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	2303      	movs	r3, #3
 8002380:	2203      	movs	r2, #3
 8002382:	4955      	ldr	r1, [pc, #340]	; (80024d8 <main+0x20c>)
 8002384:	f002 ff86 	bl	8005294 <menulist_initialize>

    PAGE_REGISTER(PAGE_ID_MAIN_MENULIST, menulist_main);
 8002388:	4a4a      	ldr	r2, [pc, #296]	; (80024b4 <main+0x1e8>)
 800238a:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 800238e:	6013      	str	r3, [r2, #0]
    PAGE_REGISTER(PAGE_ID_PID_MENULIST, menulist_pid);
 8002390:	4a48      	ldr	r2, [pc, #288]	; (80024b4 <main+0x1e8>)
 8002392:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8002396:	6053      	str	r3, [r2, #4]
    PAGE_REGISTER(PAGE_ID_EASING_CHART, menulist_easing);
 8002398:	4a46      	ldr	r2, [pc, #280]	; (80024b4 <main+0x1e8>)
 800239a:	f507 7309 	add.w	r3, r7, #548	; 0x224
 800239e:	6213      	str	r3, [r2, #32]
    PAGE_REGISTER(PAGE_ID_DEVS_MENULIST, menulist_devs);
 80023a0:	4a44      	ldr	r2, [pc, #272]	; (80024b4 <main+0x1e8>)
 80023a2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80023a6:	6093      	str	r3, [r2, #8]

    iconlist_t iconlist_icon = iconlist_initialize(menu_icon, ARRAY_SIZE(menu_icon), 0, _hander_icon);
 80023a8:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 80023ac:	f5a3 6095 	sub.w	r0, r3, #1192	; 0x4a8
 80023b0:	4b4a      	ldr	r3, [pc, #296]	; (80024dc <main+0x210>)
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	2300      	movs	r3, #0
 80023b6:	2204      	movs	r2, #4
 80023b8:	4949      	ldr	r1, [pc, #292]	; (80024e0 <main+0x214>)
 80023ba:	f002 fbed 	bl	8004b98 <iconlist_initialize>

    PAGE_REGISTER(PAGE_ID_ICON_ICONLIST, iconlist_icon);
 80023be:	4a3d      	ldr	r2, [pc, #244]	; (80024b4 <main+0x1e8>)
 80023c0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80023c4:	60d3      	str	r3, [r2, #12]

    adc_chart_t page_adcchart = adcchart_initialize(0, _handler_chart);
 80023c6:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 80023ca:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 80023ce:	4a45      	ldr	r2, [pc, #276]	; (80024e4 <main+0x218>)
 80023d0:	2100      	movs	r1, #0
 80023d2:	4618      	mov	r0, r3
 80023d4:	f002 f9aa 	bl	800472c <adcchart_initialize>

    PAGE_REGISTER(PAGE_ID_ADC_CHART, page_adcchart);
 80023d8:	4a36      	ldr	r2, [pc, #216]	; (80024b4 <main+0x1e8>)
 80023da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023de:	6153      	str	r3, [r2, #20]

    char         strbuf[]      = "AZaz World ";
 80023e0:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 80023e4:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 80023e8:	4a3f      	ldr	r2, [pc, #252]	; (80024e8 <main+0x21c>)
 80023ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80023ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    texteditor_t page_textedit = textedit_initialize(0, _handler_textedit, strbuf, strlen(strbuf));
 80023f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7fd feeb 	bl	80001d0 <strlen>
 80023fa:	4603      	mov	r3, r0
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 8002402:	f5a2 60a0 	sub.w	r0, r2, #1280	; 0x500
 8002406:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	4613      	mov	r3, r2
 800240e:	4a37      	ldr	r2, [pc, #220]	; (80024ec <main+0x220>)
 8002410:	2100      	movs	r1, #0
 8002412:	f003 fbaf 	bl	8005b74 <textedit_initialize>

    PAGE_REGISTER(PAGE_ID_TEXTEDIT, page_textedit);
 8002416:	4a27      	ldr	r2, [pc, #156]	; (80024b4 <main+0x1e8>)
 8002418:	463b      	mov	r3, r7
 800241a:	6193      	str	r3, [r2, #24]

    PAGE_SWITCH(PAGE_ID_FIRST);
 800241c:	4b34      	ldr	r3, [pc, #208]	; (80024f0 <main+0x224>)
 800241e:	2200      	movs	r2, #0
 8002420:	701a      	strb	r2, [r3, #0]
 8002422:	4b24      	ldr	r3, [pc, #144]	; (80024b4 <main+0x1e8>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d006      	beq.n	8002438 <main+0x16c>
 800242a:	4b31      	ldr	r3, [pc, #196]	; (80024f0 <main+0x224>)
 800242c:	2200      	movs	r2, #0
 800242e:	701a      	strb	r2, [r3, #0]
 8002430:	4b20      	ldr	r3, [pc, #128]	; (80024b4 <main+0x1e8>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2201      	movs	r2, #1
 8002436:	701a      	strb	r2, [r3, #0]

    while (1) {
        PAGE_RENDER();
 8002438:	4b2d      	ldr	r3, [pc, #180]	; (80024f0 <main+0x224>)
 800243a:	f993 3000 	ldrsb.w	r3, [r3]
 800243e:	461a      	mov	r2, r3
 8002440:	4b1c      	ldr	r3, [pc, #112]	; (80024b4 <main+0x1e8>)
 8002442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	4a29      	ldr	r2, [pc, #164]	; (80024f0 <main+0x224>)
 800244a:	f992 2000 	ldrsb.w	r2, [r2]
 800244e:	4611      	mov	r1, r2
 8002450:	4a18      	ldr	r2, [pc, #96]	; (80024b4 <main+0x1e8>)
 8002452:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002456:	4610      	mov	r0, r2
 8002458:	4798      	blx	r3
 800245a:	4b25      	ldr	r3, [pc, #148]	; (80024f0 <main+0x224>)
 800245c:	f993 3000 	ldrsb.w	r3, [r3]
 8002460:	461a      	mov	r2, r3
 8002462:	4b14      	ldr	r3, [pc, #80]	; (80024b4 <main+0x1e8>)
 8002464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0e4      	beq.n	8002438 <main+0x16c>
 800246e:	4821      	ldr	r0, [pc, #132]	; (80024f4 <main+0x228>)
 8002470:	f008 f9d4 	bl	800a81c <puts>
 8002474:	4b1e      	ldr	r3, [pc, #120]	; (80024f0 <main+0x224>)
 8002476:	f993 3000 	ldrsb.w	r3, [r3]
 800247a:	461a      	mov	r2, r3
 800247c:	4b0d      	ldr	r3, [pc, #52]	; (80024b4 <main+0x1e8>)
 800247e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002482:	2200      	movs	r2, #0
 8002484:	701a      	strb	r2, [r3, #0]
 8002486:	4b1a      	ldr	r3, [pc, #104]	; (80024f0 <main+0x224>)
 8002488:	f993 3000 	ldrsb.w	r3, [r3]
 800248c:	461a      	mov	r2, r3
 800248e:	4b09      	ldr	r3, [pc, #36]	; (80024b4 <main+0x1e8>)
 8002490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	4a16      	ldr	r2, [pc, #88]	; (80024f0 <main+0x224>)
 8002498:	f992 2000 	ldrsb.w	r2, [r2]
 800249c:	4611      	mov	r1, r2
 800249e:	4a05      	ldr	r2, [pc, #20]	; (80024b4 <main+0x1e8>)
 80024a0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80024a4:	4610      	mov	r0, r2
 80024a6:	4798      	blx	r3
 80024a8:	e7c6      	b.n	8002438 <main+0x16c>
 80024aa:	bf00      	nop
 80024ac:	0800decc 	.word	0x0800decc
 80024b0:	0800ded8 	.word	0x0800ded8
 80024b4:	20000190 	.word	0x20000190
 80024b8:	080017c9 	.word	0x080017c9
 80024bc:	0800e258 	.word	0x0800e258
 80024c0:	080019a9 	.word	0x080019a9
 80024c4:	0800e2c4 	.word	0x0800e2c4
 80024c8:	080020b1 	.word	0x080020b1
 80024cc:	0800e334 	.word	0x0800e334
 80024d0:	08001d15 	.word	0x08001d15
 80024d4:	08001e51 	.word	0x08001e51
 80024d8:	2000003c 	.word	0x2000003c
 80024dc:	08001c71 	.word	0x08001c71
 80024e0:	0800e2f4 	.word	0x0800e2f4
 80024e4:	080012f5 	.word	0x080012f5
 80024e8:	0800dee4 	.word	0x0800dee4
 80024ec:	08001351 	.word	0x08001351
 80024f0:	200001b4 	.word	0x200001b4
 80024f4:	0800dec0 	.word	0x0800dec0

080024f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b094      	sub	sp, #80	; 0x50
 80024fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024fe:	f107 0320 	add.w	r3, r7, #32
 8002502:	2230      	movs	r2, #48	; 0x30
 8002504:	2100      	movs	r1, #0
 8002506:	4618      	mov	r0, r3
 8002508:	f008 fa88 	bl	800aa1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800250c:	f107 030c 	add.w	r3, r7, #12
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	605a      	str	r2, [r3, #4]
 8002516:	609a      	str	r2, [r3, #8]
 8002518:	60da      	str	r2, [r3, #12]
 800251a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800251c:	2300      	movs	r3, #0
 800251e:	60bb      	str	r3, [r7, #8]
 8002520:	4b28      	ldr	r3, [pc, #160]	; (80025c4 <SystemClock_Config+0xcc>)
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	4a27      	ldr	r2, [pc, #156]	; (80025c4 <SystemClock_Config+0xcc>)
 8002526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800252a:	6413      	str	r3, [r2, #64]	; 0x40
 800252c:	4b25      	ldr	r3, [pc, #148]	; (80025c4 <SystemClock_Config+0xcc>)
 800252e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002538:	2300      	movs	r3, #0
 800253a:	607b      	str	r3, [r7, #4]
 800253c:	4b22      	ldr	r3, [pc, #136]	; (80025c8 <SystemClock_Config+0xd0>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a21      	ldr	r2, [pc, #132]	; (80025c8 <SystemClock_Config+0xd0>)
 8002542:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002546:	6013      	str	r3, [r2, #0]
 8002548:	4b1f      	ldr	r3, [pc, #124]	; (80025c8 <SystemClock_Config+0xd0>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002550:	607b      	str	r3, [r7, #4]
 8002552:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002554:	2301      	movs	r3, #1
 8002556:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002558:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800255e:	2302      	movs	r3, #2
 8002560:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002562:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002566:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002568:	2304      	movs	r3, #4
 800256a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800256c:	23a8      	movs	r3, #168	; 0xa8
 800256e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002570:	2302      	movs	r3, #2
 8002572:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002574:	2304      	movs	r3, #4
 8002576:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002578:	f107 0320 	add.w	r3, r7, #32
 800257c:	4618      	mov	r0, r3
 800257e:	f001 fc51 	bl	8003e24 <HAL_RCC_OscConfig>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002588:	f000 f820 	bl	80025cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800258c:	230f      	movs	r3, #15
 800258e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002590:	2302      	movs	r3, #2
 8002592:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002594:	2300      	movs	r3, #0
 8002596:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002598:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800259c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800259e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80025a4:	f107 030c 	add.w	r3, r7, #12
 80025a8:	2105      	movs	r1, #5
 80025aa:	4618      	mov	r0, r3
 80025ac:	f001 feb2 	bl	8004314 <HAL_RCC_ClockConfig>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80025b6:	f000 f809 	bl	80025cc <Error_Handler>
  }
}
 80025ba:	bf00      	nop
 80025bc:	3750      	adds	r7, #80	; 0x50
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40023800 	.word	0x40023800
 80025c8:	40007000 	.word	0x40007000

080025cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80025d0:	bf00      	nop
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
	...

080025dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	607b      	str	r3, [r7, #4]
 80025e6:	4b10      	ldr	r3, [pc, #64]	; (8002628 <HAL_MspInit+0x4c>)
 80025e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ea:	4a0f      	ldr	r2, [pc, #60]	; (8002628 <HAL_MspInit+0x4c>)
 80025ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025f0:	6453      	str	r3, [r2, #68]	; 0x44
 80025f2:	4b0d      	ldr	r3, [pc, #52]	; (8002628 <HAL_MspInit+0x4c>)
 80025f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025fa:	607b      	str	r3, [r7, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	603b      	str	r3, [r7, #0]
 8002602:	4b09      	ldr	r3, [pc, #36]	; (8002628 <HAL_MspInit+0x4c>)
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	4a08      	ldr	r2, [pc, #32]	; (8002628 <HAL_MspInit+0x4c>)
 8002608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800260c:	6413      	str	r3, [r2, #64]	; 0x40
 800260e:	4b06      	ldr	r3, [pc, #24]	; (8002628 <HAL_MspInit+0x4c>)
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002616:	603b      	str	r3, [r7, #0]
 8002618:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	40023800 	.word	0x40023800

0800262c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002630:	e7fe      	b.n	8002630 <NMI_Handler+0x4>

08002632 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002632:	b480      	push	{r7}
 8002634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002636:	e7fe      	b.n	8002636 <HardFault_Handler+0x4>

08002638 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800263c:	e7fe      	b.n	800263c <MemManage_Handler+0x4>

0800263e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800263e:	b480      	push	{r7}
 8002640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002642:	e7fe      	b.n	8002642 <BusFault_Handler+0x4>

08002644 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002648:	e7fe      	b.n	8002648 <UsageFault_Handler+0x4>

0800264a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800264a:	b480      	push	{r7}
 800264c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800264e:	bf00      	nop
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800265c:	bf00      	nop
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002666:	b480      	push	{r7}
 8002668:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002678:	f000 f934 	bl	80028e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800267c:	bf00      	nop
 800267e:	bd80      	pop	{r7, pc}

08002680 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	e00a      	b.n	80026a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002692:	f3af 8000 	nop.w
 8002696:	4601      	mov	r1, r0
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	1c5a      	adds	r2, r3, #1
 800269c:	60ba      	str	r2, [r7, #8]
 800269e:	b2ca      	uxtb	r2, r1
 80026a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	3301      	adds	r3, #1
 80026a6:	617b      	str	r3, [r7, #20]
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	dbf0      	blt.n	8002692 <_read+0x12>
  }

  return len;
 80026b0:	687b      	ldr	r3, [r7, #4]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b086      	sub	sp, #24
 80026be:	af00      	add	r7, sp, #0
 80026c0:	60f8      	str	r0, [r7, #12]
 80026c2:	60b9      	str	r1, [r7, #8]
 80026c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026c6:	2300      	movs	r3, #0
 80026c8:	617b      	str	r3, [r7, #20]
 80026ca:	e009      	b.n	80026e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	1c5a      	adds	r2, r3, #1
 80026d0:	60ba      	str	r2, [r7, #8]
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	3301      	adds	r3, #1
 80026de:	617b      	str	r3, [r7, #20]
 80026e0:	697a      	ldr	r2, [r7, #20]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	dbf1      	blt.n	80026cc <_write+0x12>
  }
  return len;
 80026e8:	687b      	ldr	r3, [r7, #4]
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3718      	adds	r7, #24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <_close>:

int _close(int file)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026fe:	4618      	mov	r0, r3
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
 8002712:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800271a:	605a      	str	r2, [r3, #4]
  return 0;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <_isatty>:

int _isatty(int file)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002732:	2301      	movs	r3, #1
}
 8002734:	4618      	mov	r0, r3
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
	...

0800275c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002764:	4a14      	ldr	r2, [pc, #80]	; (80027b8 <_sbrk+0x5c>)
 8002766:	4b15      	ldr	r3, [pc, #84]	; (80027bc <_sbrk+0x60>)
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002770:	4b13      	ldr	r3, [pc, #76]	; (80027c0 <_sbrk+0x64>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d102      	bne.n	800277e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002778:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <_sbrk+0x64>)
 800277a:	4a12      	ldr	r2, [pc, #72]	; (80027c4 <_sbrk+0x68>)
 800277c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800277e:	4b10      	ldr	r3, [pc, #64]	; (80027c0 <_sbrk+0x64>)
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4413      	add	r3, r2
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	429a      	cmp	r2, r3
 800278a:	d207      	bcs.n	800279c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800278c:	f008 f994 	bl	800aab8 <__errno>
 8002790:	4603      	mov	r3, r0
 8002792:	220c      	movs	r2, #12
 8002794:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002796:	f04f 33ff 	mov.w	r3, #4294967295
 800279a:	e009      	b.n	80027b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800279c:	4b08      	ldr	r3, [pc, #32]	; (80027c0 <_sbrk+0x64>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027a2:	4b07      	ldr	r3, [pc, #28]	; (80027c0 <_sbrk+0x64>)
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4413      	add	r3, r2
 80027aa:	4a05      	ldr	r2, [pc, #20]	; (80027c0 <_sbrk+0x64>)
 80027ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027ae:	68fb      	ldr	r3, [r7, #12]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3718      	adds	r7, #24
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	20020000 	.word	0x20020000
 80027bc:	00000400 	.word	0x00000400
 80027c0:	200001b8 	.word	0x200001b8
 80027c4:	20000890 	.word	0x20000890

080027c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027cc:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <SystemInit+0x20>)
 80027ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d2:	4a05      	ldr	r2, [pc, #20]	; (80027e8 <SystemInit+0x20>)
 80027d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027dc:	bf00      	nop
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	e000ed00 	.word	0xe000ed00

080027ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80027ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002824 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027f0:	480d      	ldr	r0, [pc, #52]	; (8002828 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80027f2:	490e      	ldr	r1, [pc, #56]	; (800282c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80027f4:	4a0e      	ldr	r2, [pc, #56]	; (8002830 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027f8:	e002      	b.n	8002800 <LoopCopyDataInit>

080027fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027fe:	3304      	adds	r3, #4

08002800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002804:	d3f9      	bcc.n	80027fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002806:	4a0b      	ldr	r2, [pc, #44]	; (8002834 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002808:	4c0b      	ldr	r4, [pc, #44]	; (8002838 <LoopFillZerobss+0x26>)
  movs r3, #0
 800280a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800280c:	e001      	b.n	8002812 <LoopFillZerobss>

0800280e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800280e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002810:	3204      	adds	r2, #4

08002812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002814:	d3fb      	bcc.n	800280e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002816:	f7ff ffd7 	bl	80027c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800281a:	f008 f953 	bl	800aac4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800281e:	f7ff fd55 	bl	80022cc <main>
  bx  lr    
 8002822:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002824:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800282c:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8002830:	08011018 	.word	0x08011018
  ldr r2, =_sbss
 8002834:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8002838:	20000890 	.word	0x20000890

0800283c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800283c:	e7fe      	b.n	800283c <ADC_IRQHandler>
	...

08002840 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002844:	4b0e      	ldr	r3, [pc, #56]	; (8002880 <HAL_Init+0x40>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a0d      	ldr	r2, [pc, #52]	; (8002880 <HAL_Init+0x40>)
 800284a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800284e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <HAL_Init+0x40>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a0a      	ldr	r2, [pc, #40]	; (8002880 <HAL_Init+0x40>)
 8002856:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800285a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800285c:	4b08      	ldr	r3, [pc, #32]	; (8002880 <HAL_Init+0x40>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a07      	ldr	r2, [pc, #28]	; (8002880 <HAL_Init+0x40>)
 8002862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002866:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002868:	2003      	movs	r0, #3
 800286a:	f000 fc73 	bl	8003154 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800286e:	200f      	movs	r0, #15
 8002870:	f000 f808 	bl	8002884 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002874:	f7ff feb2 	bl	80025dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40023c00 	.word	0x40023c00

08002884 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800288c:	4b12      	ldr	r3, [pc, #72]	; (80028d8 <HAL_InitTick+0x54>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	4b12      	ldr	r3, [pc, #72]	; (80028dc <HAL_InitTick+0x58>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	4619      	mov	r1, r3
 8002896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800289a:	fbb3 f3f1 	udiv	r3, r3, r1
 800289e:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 fc7d 	bl	80031a2 <HAL_SYSTICK_Config>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e00e      	b.n	80028d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2b0f      	cmp	r3, #15
 80028b6:	d80a      	bhi.n	80028ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028b8:	2200      	movs	r2, #0
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	f04f 30ff 	mov.w	r0, #4294967295
 80028c0:	f000 fc53 	bl	800316a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028c4:	4a06      	ldr	r2, [pc, #24]	; (80028e0 <HAL_InitTick+0x5c>)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
 80028cc:	e000      	b.n	80028d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	20000060 	.word	0x20000060
 80028dc:	20000068 	.word	0x20000068
 80028e0:	20000064 	.word	0x20000064

080028e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028e8:	4b06      	ldr	r3, [pc, #24]	; (8002904 <HAL_IncTick+0x20>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	461a      	mov	r2, r3
 80028ee:	4b06      	ldr	r3, [pc, #24]	; (8002908 <HAL_IncTick+0x24>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4413      	add	r3, r2
 80028f4:	4a04      	ldr	r2, [pc, #16]	; (8002908 <HAL_IncTick+0x24>)
 80028f6:	6013      	str	r3, [r2, #0]
}
 80028f8:	bf00      	nop
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	20000068 	.word	0x20000068
 8002908:	200001bc 	.word	0x200001bc

0800290c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  return uwTick;
 8002910:	4b03      	ldr	r3, [pc, #12]	; (8002920 <HAL_GetTick+0x14>)
 8002912:	681b      	ldr	r3, [r3, #0]
}
 8002914:	4618      	mov	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	200001bc 	.word	0x200001bc

08002924 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800292c:	f7ff ffee 	bl	800290c <HAL_GetTick>
 8002930:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800293c:	d005      	beq.n	800294a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800293e:	4b0a      	ldr	r3, [pc, #40]	; (8002968 <HAL_Delay+0x44>)
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	461a      	mov	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4413      	add	r3, r2
 8002948:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800294a:	bf00      	nop
 800294c:	f7ff ffde 	bl	800290c <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	429a      	cmp	r2, r3
 800295a:	d8f7      	bhi.n	800294c <HAL_Delay+0x28>
  {
  }
}
 800295c:	bf00      	nop
 800295e:	bf00      	nop
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	20000068 	.word	0x20000068

0800296c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002974:	2300      	movs	r3, #0
 8002976:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e033      	b.n	80029ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	2b00      	cmp	r3, #0
 8002988:	d109      	bne.n	800299e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7fe fa4e 	bl	8000e2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	f003 0310 	and.w	r3, r3, #16
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d118      	bne.n	80029dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80029b2:	f023 0302 	bic.w	r3, r3, #2
 80029b6:	f043 0202 	orr.w	r2, r3, #2
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 fa1a 	bl	8002df8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	f023 0303 	bic.w	r3, r3, #3
 80029d2:	f043 0201 	orr.w	r2, r3, #1
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	641a      	str	r2, [r3, #64]	; 0x40
 80029da:	e001      	b.n	80029e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80029e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
	...

080029f4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d101      	bne.n	8002a0e <HAL_ADC_Start+0x1a>
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	e0b2      	b.n	8002b74 <HAL_ADC_Start+0x180>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d018      	beq.n	8002a56 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f042 0201 	orr.w	r2, r2, #1
 8002a32:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a34:	4b52      	ldr	r3, [pc, #328]	; (8002b80 <HAL_ADC_Start+0x18c>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a52      	ldr	r2, [pc, #328]	; (8002b84 <HAL_ADC_Start+0x190>)
 8002a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3e:	0c9a      	lsrs	r2, r3, #18
 8002a40:	4613      	mov	r3, r2
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	4413      	add	r3, r2
 8002a46:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002a48:	e002      	b.n	8002a50 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f9      	bne.n	8002a4a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d17a      	bne.n	8002b5a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002a6c:	f023 0301 	bic.w	r3, r3, #1
 8002a70:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d007      	beq.n	8002a96 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a8e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aa2:	d106      	bne.n	8002ab2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa8:	f023 0206 	bic.w	r2, r3, #6
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	645a      	str	r2, [r3, #68]	; 0x44
 8002ab0:	e002      	b.n	8002ab8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ac0:	4b31      	ldr	r3, [pc, #196]	; (8002b88 <HAL_ADC_Start+0x194>)
 8002ac2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002acc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f003 031f 	and.w	r3, r3, #31
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d12a      	bne.n	8002b30 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a2b      	ldr	r2, [pc, #172]	; (8002b8c <HAL_ADC_Start+0x198>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d015      	beq.n	8002b10 <HAL_ADC_Start+0x11c>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a29      	ldr	r2, [pc, #164]	; (8002b90 <HAL_ADC_Start+0x19c>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d105      	bne.n	8002afa <HAL_ADC_Start+0x106>
 8002aee:	4b26      	ldr	r3, [pc, #152]	; (8002b88 <HAL_ADC_Start+0x194>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f003 031f 	and.w	r3, r3, #31
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00a      	beq.n	8002b10 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a25      	ldr	r2, [pc, #148]	; (8002b94 <HAL_ADC_Start+0x1a0>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d136      	bne.n	8002b72 <HAL_ADC_Start+0x17e>
 8002b04:	4b20      	ldr	r3, [pc, #128]	; (8002b88 <HAL_ADC_Start+0x194>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f003 0310 	and.w	r3, r3, #16
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d130      	bne.n	8002b72 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d129      	bne.n	8002b72 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b2c:	609a      	str	r2, [r3, #8]
 8002b2e:	e020      	b.n	8002b72 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a15      	ldr	r2, [pc, #84]	; (8002b8c <HAL_ADC_Start+0x198>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d11b      	bne.n	8002b72 <HAL_ADC_Start+0x17e>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d114      	bne.n	8002b72 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689a      	ldr	r2, [r3, #8]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	e00b      	b.n	8002b72 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	f043 0210 	orr.w	r2, r3, #16
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6a:	f043 0201 	orr.w	r2, r3, #1
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	20000060 	.word	0x20000060
 8002b84:	431bde83 	.word	0x431bde83
 8002b88:	40012300 	.word	0x40012300
 8002b8c:	40012000 	.word	0x40012000
 8002b90:	40012100 	.word	0x40012100
 8002b94:	40012200 	.word	0x40012200

08002b98 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
	...

08002bb4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d101      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x1c>
 8002bcc:	2302      	movs	r3, #2
 8002bce:	e105      	b.n	8002ddc <HAL_ADC_ConfigChannel+0x228>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b09      	cmp	r3, #9
 8002bde:	d925      	bls.n	8002c2c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68d9      	ldr	r1, [r3, #12]
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	461a      	mov	r2, r3
 8002bee:	4613      	mov	r3, r2
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	4413      	add	r3, r2
 8002bf4:	3b1e      	subs	r3, #30
 8002bf6:	2207      	movs	r2, #7
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	43da      	mvns	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	400a      	ands	r2, r1
 8002c04:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68d9      	ldr	r1, [r3, #12]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	4618      	mov	r0, r3
 8002c18:	4603      	mov	r3, r0
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	4403      	add	r3, r0
 8002c1e:	3b1e      	subs	r3, #30
 8002c20:	409a      	lsls	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	60da      	str	r2, [r3, #12]
 8002c2a:	e022      	b.n	8002c72 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6919      	ldr	r1, [r3, #16]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	461a      	mov	r2, r3
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	4413      	add	r3, r2
 8002c40:	2207      	movs	r2, #7
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	43da      	mvns	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	400a      	ands	r2, r1
 8002c4e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6919      	ldr	r1, [r3, #16]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	689a      	ldr	r2, [r3, #8]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	4618      	mov	r0, r3
 8002c62:	4603      	mov	r3, r0
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	4403      	add	r3, r0
 8002c68:	409a      	lsls	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b06      	cmp	r3, #6
 8002c78:	d824      	bhi.n	8002cc4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	4613      	mov	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	3b05      	subs	r3, #5
 8002c8c:	221f      	movs	r2, #31
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	43da      	mvns	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	400a      	ands	r2, r1
 8002c9a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	4618      	mov	r0, r3
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3b05      	subs	r3, #5
 8002cb6:	fa00 f203 	lsl.w	r2, r0, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	635a      	str	r2, [r3, #52]	; 0x34
 8002cc2:	e04c      	b.n	8002d5e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	2b0c      	cmp	r3, #12
 8002cca:	d824      	bhi.n	8002d16 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4413      	add	r3, r2
 8002cdc:	3b23      	subs	r3, #35	; 0x23
 8002cde:	221f      	movs	r2, #31
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	43da      	mvns	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	400a      	ands	r2, r1
 8002cec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	4613      	mov	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	3b23      	subs	r3, #35	; 0x23
 8002d08:	fa00 f203 	lsl.w	r2, r0, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	430a      	orrs	r2, r1
 8002d12:	631a      	str	r2, [r3, #48]	; 0x30
 8002d14:	e023      	b.n	8002d5e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685a      	ldr	r2, [r3, #4]
 8002d20:	4613      	mov	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	3b41      	subs	r3, #65	; 0x41
 8002d28:	221f      	movs	r2, #31
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	43da      	mvns	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	400a      	ands	r2, r1
 8002d36:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	4618      	mov	r0, r3
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	3b41      	subs	r3, #65	; 0x41
 8002d52:	fa00 f203 	lsl.w	r2, r0, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d5e:	4b22      	ldr	r3, [pc, #136]	; (8002de8 <HAL_ADC_ConfigChannel+0x234>)
 8002d60:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a21      	ldr	r2, [pc, #132]	; (8002dec <HAL_ADC_ConfigChannel+0x238>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d109      	bne.n	8002d80 <HAL_ADC_ConfigChannel+0x1cc>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2b12      	cmp	r3, #18
 8002d72:	d105      	bne.n	8002d80 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a19      	ldr	r2, [pc, #100]	; (8002dec <HAL_ADC_ConfigChannel+0x238>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d123      	bne.n	8002dd2 <HAL_ADC_ConfigChannel+0x21e>
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2b10      	cmp	r3, #16
 8002d90:	d003      	beq.n	8002d9a <HAL_ADC_ConfigChannel+0x1e6>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2b11      	cmp	r3, #17
 8002d98:	d11b      	bne.n	8002dd2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2b10      	cmp	r3, #16
 8002dac:	d111      	bne.n	8002dd2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002dae:	4b10      	ldr	r3, [pc, #64]	; (8002df0 <HAL_ADC_ConfigChannel+0x23c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a10      	ldr	r2, [pc, #64]	; (8002df4 <HAL_ADC_ConfigChannel+0x240>)
 8002db4:	fba2 2303 	umull	r2, r3, r2, r3
 8002db8:	0c9a      	lsrs	r2, r3, #18
 8002dba:	4613      	mov	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002dc4:	e002      	b.n	8002dcc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1f9      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	40012300 	.word	0x40012300
 8002dec:	40012000 	.word	0x40012000
 8002df0:	20000060 	.word	0x20000060
 8002df4:	431bde83 	.word	0x431bde83

08002df8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e00:	4b79      	ldr	r3, [pc, #484]	; (8002fe8 <ADC_Init+0x1f0>)
 8002e02:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6859      	ldr	r1, [r3, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	021a      	lsls	r2, r3, #8
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6859      	ldr	r1, [r3, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	430a      	orrs	r2, r1
 8002e62:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689a      	ldr	r2, [r3, #8]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6899      	ldr	r1, [r3, #8]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	68da      	ldr	r2, [r3, #12]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8a:	4a58      	ldr	r2, [pc, #352]	; (8002fec <ADC_Init+0x1f4>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d022      	beq.n	8002ed6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e9e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6899      	ldr	r1, [r3, #8]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689a      	ldr	r2, [r3, #8]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ec0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	6899      	ldr	r1, [r3, #8]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	609a      	str	r2, [r3, #8]
 8002ed4:	e00f      	b.n	8002ef6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ee4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689a      	ldr	r2, [r3, #8]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ef4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0202 	bic.w	r2, r2, #2
 8002f04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6899      	ldr	r1, [r3, #8]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	7e1b      	ldrb	r3, [r3, #24]
 8002f10:	005a      	lsls	r2, r3, #1
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d01b      	beq.n	8002f5c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f32:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f42:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6859      	ldr	r1, [r3, #4]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	035a      	lsls	r2, r3, #13
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	605a      	str	r2, [r3, #4]
 8002f5a:	e007      	b.n	8002f6c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f6a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	3b01      	subs	r3, #1
 8002f88:	051a      	lsls	r2, r3, #20
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002fa0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6899      	ldr	r1, [r3, #8]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002fae:	025a      	lsls	r2, r3, #9
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689a      	ldr	r2, [r3, #8]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6899      	ldr	r1, [r3, #8]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	029a      	lsls	r2, r3, #10
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	609a      	str	r2, [r3, #8]
}
 8002fdc:	bf00      	nop
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	40012300 	.word	0x40012300
 8002fec:	0f000001 	.word	0x0f000001

08002ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003000:	4b0c      	ldr	r3, [pc, #48]	; (8003034 <__NVIC_SetPriorityGrouping+0x44>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800300c:	4013      	ands	r3, r2
 800300e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003018:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800301c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003022:	4a04      	ldr	r2, [pc, #16]	; (8003034 <__NVIC_SetPriorityGrouping+0x44>)
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	60d3      	str	r3, [r2, #12]
}
 8003028:	bf00      	nop
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	e000ed00 	.word	0xe000ed00

08003038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800303c:	4b04      	ldr	r3, [pc, #16]	; (8003050 <__NVIC_GetPriorityGrouping+0x18>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	0a1b      	lsrs	r3, r3, #8
 8003042:	f003 0307 	and.w	r3, r3, #7
}
 8003046:	4618      	mov	r0, r3
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	e000ed00 	.word	0xe000ed00

08003054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	6039      	str	r1, [r7, #0]
 800305e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003064:	2b00      	cmp	r3, #0
 8003066:	db0a      	blt.n	800307e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	b2da      	uxtb	r2, r3
 800306c:	490c      	ldr	r1, [pc, #48]	; (80030a0 <__NVIC_SetPriority+0x4c>)
 800306e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003072:	0112      	lsls	r2, r2, #4
 8003074:	b2d2      	uxtb	r2, r2
 8003076:	440b      	add	r3, r1
 8003078:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800307c:	e00a      	b.n	8003094 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	b2da      	uxtb	r2, r3
 8003082:	4908      	ldr	r1, [pc, #32]	; (80030a4 <__NVIC_SetPriority+0x50>)
 8003084:	79fb      	ldrb	r3, [r7, #7]
 8003086:	f003 030f 	and.w	r3, r3, #15
 800308a:	3b04      	subs	r3, #4
 800308c:	0112      	lsls	r2, r2, #4
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	440b      	add	r3, r1
 8003092:	761a      	strb	r2, [r3, #24]
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr
 80030a0:	e000e100 	.word	0xe000e100
 80030a4:	e000ed00 	.word	0xe000ed00

080030a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b089      	sub	sp, #36	; 0x24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	f1c3 0307 	rsb	r3, r3, #7
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	bf28      	it	cs
 80030c6:	2304      	movcs	r3, #4
 80030c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	3304      	adds	r3, #4
 80030ce:	2b06      	cmp	r3, #6
 80030d0:	d902      	bls.n	80030d8 <NVIC_EncodePriority+0x30>
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	3b03      	subs	r3, #3
 80030d6:	e000      	b.n	80030da <NVIC_EncodePriority+0x32>
 80030d8:	2300      	movs	r3, #0
 80030da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030dc:	f04f 32ff 	mov.w	r2, #4294967295
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	fa02 f303 	lsl.w	r3, r2, r3
 80030e6:	43da      	mvns	r2, r3
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	401a      	ands	r2, r3
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030f0:	f04f 31ff 	mov.w	r1, #4294967295
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	fa01 f303 	lsl.w	r3, r1, r3
 80030fa:	43d9      	mvns	r1, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003100:	4313      	orrs	r3, r2
         );
}
 8003102:	4618      	mov	r0, r3
 8003104:	3724      	adds	r7, #36	; 0x24
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
	...

08003110 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3b01      	subs	r3, #1
 800311c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003120:	d301      	bcc.n	8003126 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003122:	2301      	movs	r3, #1
 8003124:	e00f      	b.n	8003146 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003126:	4a0a      	ldr	r2, [pc, #40]	; (8003150 <SysTick_Config+0x40>)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3b01      	subs	r3, #1
 800312c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800312e:	210f      	movs	r1, #15
 8003130:	f04f 30ff 	mov.w	r0, #4294967295
 8003134:	f7ff ff8e 	bl	8003054 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003138:	4b05      	ldr	r3, [pc, #20]	; (8003150 <SysTick_Config+0x40>)
 800313a:	2200      	movs	r2, #0
 800313c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800313e:	4b04      	ldr	r3, [pc, #16]	; (8003150 <SysTick_Config+0x40>)
 8003140:	2207      	movs	r2, #7
 8003142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	e000e010 	.word	0xe000e010

08003154 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f7ff ff47 	bl	8002ff0 <__NVIC_SetPriorityGrouping>
}
 8003162:	bf00      	nop
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800316a:	b580      	push	{r7, lr}
 800316c:	b086      	sub	sp, #24
 800316e:	af00      	add	r7, sp, #0
 8003170:	4603      	mov	r3, r0
 8003172:	60b9      	str	r1, [r7, #8]
 8003174:	607a      	str	r2, [r7, #4]
 8003176:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003178:	2300      	movs	r3, #0
 800317a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800317c:	f7ff ff5c 	bl	8003038 <__NVIC_GetPriorityGrouping>
 8003180:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	68b9      	ldr	r1, [r7, #8]
 8003186:	6978      	ldr	r0, [r7, #20]
 8003188:	f7ff ff8e 	bl	80030a8 <NVIC_EncodePriority>
 800318c:	4602      	mov	r2, r0
 800318e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003192:	4611      	mov	r1, r2
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff ff5d 	bl	8003054 <__NVIC_SetPriority>
}
 800319a:	bf00      	nop
 800319c:	3718      	adds	r7, #24
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b082      	sub	sp, #8
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7ff ffb0 	bl	8003110 <SysTick_Config>
 80031b0:	4603      	mov	r3, r0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
	...

080031bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031bc:	b480      	push	{r7}
 80031be:	b089      	sub	sp, #36	; 0x24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031ce:	2300      	movs	r3, #0
 80031d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031d2:	2300      	movs	r3, #0
 80031d4:	61fb      	str	r3, [r7, #28]
 80031d6:	e16b      	b.n	80034b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031d8:	2201      	movs	r2, #1
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	4013      	ands	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	f040 815a 	bne.w	80034aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f003 0303 	and.w	r3, r3, #3
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d005      	beq.n	800320e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800320a:	2b02      	cmp	r3, #2
 800320c:	d130      	bne.n	8003270 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	2203      	movs	r2, #3
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	43db      	mvns	r3, r3
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	4013      	ands	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	68da      	ldr	r2, [r3, #12]
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	fa02 f303 	lsl.w	r3, r2, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4313      	orrs	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003244:	2201      	movs	r2, #1
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	43db      	mvns	r3, r3
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	4013      	ands	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	091b      	lsrs	r3, r3, #4
 800325a:	f003 0201 	and.w	r2, r3, #1
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	4313      	orrs	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 0303 	and.w	r3, r3, #3
 8003278:	2b03      	cmp	r3, #3
 800327a:	d017      	beq.n	80032ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	2203      	movs	r2, #3
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	43db      	mvns	r3, r3
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	4013      	ands	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f003 0303 	and.w	r3, r3, #3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d123      	bne.n	8003300 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	08da      	lsrs	r2, r3, #3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	3208      	adds	r2, #8
 80032c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	220f      	movs	r2, #15
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	43db      	mvns	r3, r3
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	4013      	ands	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	691a      	ldr	r2, [r3, #16]
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	08da      	lsrs	r2, r3, #3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	3208      	adds	r2, #8
 80032fa:	69b9      	ldr	r1, [r7, #24]
 80032fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	2203      	movs	r2, #3
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	43db      	mvns	r3, r3
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	4013      	ands	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f003 0203 	and.w	r2, r3, #3
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	4313      	orrs	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 80b4 	beq.w	80034aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003342:	2300      	movs	r3, #0
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	4b60      	ldr	r3, [pc, #384]	; (80034c8 <HAL_GPIO_Init+0x30c>)
 8003348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334a:	4a5f      	ldr	r2, [pc, #380]	; (80034c8 <HAL_GPIO_Init+0x30c>)
 800334c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003350:	6453      	str	r3, [r2, #68]	; 0x44
 8003352:	4b5d      	ldr	r3, [pc, #372]	; (80034c8 <HAL_GPIO_Init+0x30c>)
 8003354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800335a:	60fb      	str	r3, [r7, #12]
 800335c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800335e:	4a5b      	ldr	r2, [pc, #364]	; (80034cc <HAL_GPIO_Init+0x310>)
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	089b      	lsrs	r3, r3, #2
 8003364:	3302      	adds	r3, #2
 8003366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800336a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	220f      	movs	r2, #15
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	43db      	mvns	r3, r3
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	4013      	ands	r3, r2
 8003380:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a52      	ldr	r2, [pc, #328]	; (80034d0 <HAL_GPIO_Init+0x314>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d02b      	beq.n	80033e2 <HAL_GPIO_Init+0x226>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a51      	ldr	r2, [pc, #324]	; (80034d4 <HAL_GPIO_Init+0x318>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d025      	beq.n	80033de <HAL_GPIO_Init+0x222>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a50      	ldr	r2, [pc, #320]	; (80034d8 <HAL_GPIO_Init+0x31c>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d01f      	beq.n	80033da <HAL_GPIO_Init+0x21e>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a4f      	ldr	r2, [pc, #316]	; (80034dc <HAL_GPIO_Init+0x320>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d019      	beq.n	80033d6 <HAL_GPIO_Init+0x21a>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a4e      	ldr	r2, [pc, #312]	; (80034e0 <HAL_GPIO_Init+0x324>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d013      	beq.n	80033d2 <HAL_GPIO_Init+0x216>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a4d      	ldr	r2, [pc, #308]	; (80034e4 <HAL_GPIO_Init+0x328>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d00d      	beq.n	80033ce <HAL_GPIO_Init+0x212>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a4c      	ldr	r2, [pc, #304]	; (80034e8 <HAL_GPIO_Init+0x32c>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d007      	beq.n	80033ca <HAL_GPIO_Init+0x20e>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a4b      	ldr	r2, [pc, #300]	; (80034ec <HAL_GPIO_Init+0x330>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d101      	bne.n	80033c6 <HAL_GPIO_Init+0x20a>
 80033c2:	2307      	movs	r3, #7
 80033c4:	e00e      	b.n	80033e4 <HAL_GPIO_Init+0x228>
 80033c6:	2308      	movs	r3, #8
 80033c8:	e00c      	b.n	80033e4 <HAL_GPIO_Init+0x228>
 80033ca:	2306      	movs	r3, #6
 80033cc:	e00a      	b.n	80033e4 <HAL_GPIO_Init+0x228>
 80033ce:	2305      	movs	r3, #5
 80033d0:	e008      	b.n	80033e4 <HAL_GPIO_Init+0x228>
 80033d2:	2304      	movs	r3, #4
 80033d4:	e006      	b.n	80033e4 <HAL_GPIO_Init+0x228>
 80033d6:	2303      	movs	r3, #3
 80033d8:	e004      	b.n	80033e4 <HAL_GPIO_Init+0x228>
 80033da:	2302      	movs	r3, #2
 80033dc:	e002      	b.n	80033e4 <HAL_GPIO_Init+0x228>
 80033de:	2301      	movs	r3, #1
 80033e0:	e000      	b.n	80033e4 <HAL_GPIO_Init+0x228>
 80033e2:	2300      	movs	r3, #0
 80033e4:	69fa      	ldr	r2, [r7, #28]
 80033e6:	f002 0203 	and.w	r2, r2, #3
 80033ea:	0092      	lsls	r2, r2, #2
 80033ec:	4093      	lsls	r3, r2
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033f4:	4935      	ldr	r1, [pc, #212]	; (80034cc <HAL_GPIO_Init+0x310>)
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	089b      	lsrs	r3, r3, #2
 80033fa:	3302      	adds	r3, #2
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003402:	4b3b      	ldr	r3, [pc, #236]	; (80034f0 <HAL_GPIO_Init+0x334>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	43db      	mvns	r3, r3
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	4013      	ands	r3, r2
 8003410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	4313      	orrs	r3, r2
 8003424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003426:	4a32      	ldr	r2, [pc, #200]	; (80034f0 <HAL_GPIO_Init+0x334>)
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800342c:	4b30      	ldr	r3, [pc, #192]	; (80034f0 <HAL_GPIO_Init+0x334>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	43db      	mvns	r3, r3
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	4013      	ands	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d003      	beq.n	8003450 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	4313      	orrs	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003450:	4a27      	ldr	r2, [pc, #156]	; (80034f0 <HAL_GPIO_Init+0x334>)
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003456:	4b26      	ldr	r3, [pc, #152]	; (80034f0 <HAL_GPIO_Init+0x334>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	43db      	mvns	r3, r3
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	4013      	ands	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	4313      	orrs	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800347a:	4a1d      	ldr	r2, [pc, #116]	; (80034f0 <HAL_GPIO_Init+0x334>)
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003480:	4b1b      	ldr	r3, [pc, #108]	; (80034f0 <HAL_GPIO_Init+0x334>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	43db      	mvns	r3, r3
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	4013      	ands	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034a4:	4a12      	ldr	r2, [pc, #72]	; (80034f0 <HAL_GPIO_Init+0x334>)
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	3301      	adds	r3, #1
 80034ae:	61fb      	str	r3, [r7, #28]
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	2b0f      	cmp	r3, #15
 80034b4:	f67f ae90 	bls.w	80031d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034b8:	bf00      	nop
 80034ba:	bf00      	nop
 80034bc:	3724      	adds	r7, #36	; 0x24
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	40023800 	.word	0x40023800
 80034cc:	40013800 	.word	0x40013800
 80034d0:	40020000 	.word	0x40020000
 80034d4:	40020400 	.word	0x40020400
 80034d8:	40020800 	.word	0x40020800
 80034dc:	40020c00 	.word	0x40020c00
 80034e0:	40021000 	.word	0x40021000
 80034e4:	40021400 	.word	0x40021400
 80034e8:	40021800 	.word	0x40021800
 80034ec:	40021c00 	.word	0x40021c00
 80034f0:	40013c00 	.word	0x40013c00

080034f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	460b      	mov	r3, r1
 80034fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	691a      	ldr	r2, [r3, #16]
 8003504:	887b      	ldrh	r3, [r7, #2]
 8003506:	4013      	ands	r3, r2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d002      	beq.n	8003512 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800350c:	2301      	movs	r3, #1
 800350e:	73fb      	strb	r3, [r7, #15]
 8003510:	e001      	b.n	8003516 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003512:	2300      	movs	r3, #0
 8003514:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003516:	7bfb      	ldrb	r3, [r7, #15]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3714      	adds	r7, #20
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	460b      	mov	r3, r1
 800352e:	807b      	strh	r3, [r7, #2]
 8003530:	4613      	mov	r3, r2
 8003532:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003534:	787b      	ldrb	r3, [r7, #1]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800353a:	887a      	ldrh	r2, [r7, #2]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003540:	e003      	b.n	800354a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003542:	887b      	ldrh	r3, [r7, #2]
 8003544:	041a      	lsls	r2, r3, #16
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	619a      	str	r2, [r3, #24]
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003556:	b480      	push	{r7}
 8003558:	b085      	sub	sp, #20
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
 800355e:	460b      	mov	r3, r1
 8003560:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003568:	887a      	ldrh	r2, [r7, #2]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	4013      	ands	r3, r2
 800356e:	041a      	lsls	r2, r3, #16
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	43d9      	mvns	r1, r3
 8003574:	887b      	ldrh	r3, [r7, #2]
 8003576:	400b      	ands	r3, r1
 8003578:	431a      	orrs	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	619a      	str	r2, [r3, #24]
}
 800357e:	bf00      	nop
 8003580:	3714      	adds	r7, #20
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
	...

0800358c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e12b      	b.n	80037f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d106      	bne.n	80035b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7fd fd1a 	bl	8000fec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2224      	movs	r2, #36	; 0x24
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 0201 	bic.w	r2, r2, #1
 80035ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035f0:	f001 f888 	bl	8004704 <HAL_RCC_GetPCLK1Freq>
 80035f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	4a81      	ldr	r2, [pc, #516]	; (8003800 <HAL_I2C_Init+0x274>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d807      	bhi.n	8003610 <HAL_I2C_Init+0x84>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	4a80      	ldr	r2, [pc, #512]	; (8003804 <HAL_I2C_Init+0x278>)
 8003604:	4293      	cmp	r3, r2
 8003606:	bf94      	ite	ls
 8003608:	2301      	movls	r3, #1
 800360a:	2300      	movhi	r3, #0
 800360c:	b2db      	uxtb	r3, r3
 800360e:	e006      	b.n	800361e <HAL_I2C_Init+0x92>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	4a7d      	ldr	r2, [pc, #500]	; (8003808 <HAL_I2C_Init+0x27c>)
 8003614:	4293      	cmp	r3, r2
 8003616:	bf94      	ite	ls
 8003618:	2301      	movls	r3, #1
 800361a:	2300      	movhi	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e0e7      	b.n	80037f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	4a78      	ldr	r2, [pc, #480]	; (800380c <HAL_I2C_Init+0x280>)
 800362a:	fba2 2303 	umull	r2, r3, r2, r3
 800362e:	0c9b      	lsrs	r3, r3, #18
 8003630:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68ba      	ldr	r2, [r7, #8]
 8003642:	430a      	orrs	r2, r1
 8003644:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	4a6a      	ldr	r2, [pc, #424]	; (8003800 <HAL_I2C_Init+0x274>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d802      	bhi.n	8003660 <HAL_I2C_Init+0xd4>
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	3301      	adds	r3, #1
 800365e:	e009      	b.n	8003674 <HAL_I2C_Init+0xe8>
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003666:	fb02 f303 	mul.w	r3, r2, r3
 800366a:	4a69      	ldr	r2, [pc, #420]	; (8003810 <HAL_I2C_Init+0x284>)
 800366c:	fba2 2303 	umull	r2, r3, r2, r3
 8003670:	099b      	lsrs	r3, r3, #6
 8003672:	3301      	adds	r3, #1
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	6812      	ldr	r2, [r2, #0]
 8003678:	430b      	orrs	r3, r1
 800367a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	69db      	ldr	r3, [r3, #28]
 8003682:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003686:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	495c      	ldr	r1, [pc, #368]	; (8003800 <HAL_I2C_Init+0x274>)
 8003690:	428b      	cmp	r3, r1
 8003692:	d819      	bhi.n	80036c8 <HAL_I2C_Init+0x13c>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	1e59      	subs	r1, r3, #1
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	fbb1 f3f3 	udiv	r3, r1, r3
 80036a2:	1c59      	adds	r1, r3, #1
 80036a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80036a8:	400b      	ands	r3, r1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00a      	beq.n	80036c4 <HAL_I2C_Init+0x138>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	1e59      	subs	r1, r3, #1
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	005b      	lsls	r3, r3, #1
 80036b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80036bc:	3301      	adds	r3, #1
 80036be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c2:	e051      	b.n	8003768 <HAL_I2C_Init+0x1dc>
 80036c4:	2304      	movs	r3, #4
 80036c6:	e04f      	b.n	8003768 <HAL_I2C_Init+0x1dc>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d111      	bne.n	80036f4 <HAL_I2C_Init+0x168>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	1e58      	subs	r0, r3, #1
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6859      	ldr	r1, [r3, #4]
 80036d8:	460b      	mov	r3, r1
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	440b      	add	r3, r1
 80036de:	fbb0 f3f3 	udiv	r3, r0, r3
 80036e2:	3301      	adds	r3, #1
 80036e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	bf0c      	ite	eq
 80036ec:	2301      	moveq	r3, #1
 80036ee:	2300      	movne	r3, #0
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	e012      	b.n	800371a <HAL_I2C_Init+0x18e>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	1e58      	subs	r0, r3, #1
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6859      	ldr	r1, [r3, #4]
 80036fc:	460b      	mov	r3, r1
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	440b      	add	r3, r1
 8003702:	0099      	lsls	r1, r3, #2
 8003704:	440b      	add	r3, r1
 8003706:	fbb0 f3f3 	udiv	r3, r0, r3
 800370a:	3301      	adds	r3, #1
 800370c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003710:	2b00      	cmp	r3, #0
 8003712:	bf0c      	ite	eq
 8003714:	2301      	moveq	r3, #1
 8003716:	2300      	movne	r3, #0
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <HAL_I2C_Init+0x196>
 800371e:	2301      	movs	r3, #1
 8003720:	e022      	b.n	8003768 <HAL_I2C_Init+0x1dc>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10e      	bne.n	8003748 <HAL_I2C_Init+0x1bc>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	1e58      	subs	r0, r3, #1
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6859      	ldr	r1, [r3, #4]
 8003732:	460b      	mov	r3, r1
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	440b      	add	r3, r1
 8003738:	fbb0 f3f3 	udiv	r3, r0, r3
 800373c:	3301      	adds	r3, #1
 800373e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003742:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003746:	e00f      	b.n	8003768 <HAL_I2C_Init+0x1dc>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	1e58      	subs	r0, r3, #1
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6859      	ldr	r1, [r3, #4]
 8003750:	460b      	mov	r3, r1
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	440b      	add	r3, r1
 8003756:	0099      	lsls	r1, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	fbb0 f3f3 	udiv	r3, r0, r3
 800375e:	3301      	adds	r3, #1
 8003760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003764:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003768:	6879      	ldr	r1, [r7, #4]
 800376a:	6809      	ldr	r1, [r1, #0]
 800376c:	4313      	orrs	r3, r2
 800376e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	69da      	ldr	r2, [r3, #28]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	431a      	orrs	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	430a      	orrs	r2, r1
 800378a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003796:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	6911      	ldr	r1, [r2, #16]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	68d2      	ldr	r2, [r2, #12]
 80037a2:	4311      	orrs	r1, r2
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	6812      	ldr	r2, [r2, #0]
 80037a8:	430b      	orrs	r3, r1
 80037aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	695a      	ldr	r2, [r3, #20]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0201 	orr.w	r2, r2, #1
 80037d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2220      	movs	r2, #32
 80037e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	000186a0 	.word	0x000186a0
 8003804:	001e847f 	.word	0x001e847f
 8003808:	003d08ff 	.word	0x003d08ff
 800380c:	431bde83 	.word	0x431bde83
 8003810:	10624dd3 	.word	0x10624dd3

08003814 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b088      	sub	sp, #32
 8003818:	af02      	add	r7, sp, #8
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	607a      	str	r2, [r7, #4]
 800381e:	461a      	mov	r2, r3
 8003820:	460b      	mov	r3, r1
 8003822:	817b      	strh	r3, [r7, #10]
 8003824:	4613      	mov	r3, r2
 8003826:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003828:	f7ff f870 	bl	800290c <HAL_GetTick>
 800382c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b20      	cmp	r3, #32
 8003838:	f040 80e0 	bne.w	80039fc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	9300      	str	r3, [sp, #0]
 8003840:	2319      	movs	r3, #25
 8003842:	2201      	movs	r2, #1
 8003844:	4970      	ldr	r1, [pc, #448]	; (8003a08 <HAL_I2C_Master_Transmit+0x1f4>)
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f000 f964 	bl	8003b14 <I2C_WaitOnFlagUntilTimeout>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003852:	2302      	movs	r3, #2
 8003854:	e0d3      	b.n	80039fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <HAL_I2C_Master_Transmit+0x50>
 8003860:	2302      	movs	r3, #2
 8003862:	e0cc      	b.n	80039fe <HAL_I2C_Master_Transmit+0x1ea>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b01      	cmp	r3, #1
 8003878:	d007      	beq.n	800388a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f042 0201 	orr.w	r2, r2, #1
 8003888:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003898:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2221      	movs	r2, #33	; 0x21
 800389e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2210      	movs	r2, #16
 80038a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	893a      	ldrh	r2, [r7, #8]
 80038ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	4a50      	ldr	r2, [pc, #320]	; (8003a0c <HAL_I2C_Master_Transmit+0x1f8>)
 80038ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80038cc:	8979      	ldrh	r1, [r7, #10]
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	6a3a      	ldr	r2, [r7, #32]
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f000 f89c 	bl	8003a10 <I2C_MasterRequestWrite>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e08d      	b.n	80039fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038e2:	2300      	movs	r3, #0
 80038e4:	613b      	str	r3, [r7, #16]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	695b      	ldr	r3, [r3, #20]
 80038ec:	613b      	str	r3, [r7, #16]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	613b      	str	r3, [r7, #16]
 80038f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80038f8:	e066      	b.n	80039c8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	6a39      	ldr	r1, [r7, #32]
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f000 f9de 	bl	8003cc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00d      	beq.n	8003926 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	2b04      	cmp	r3, #4
 8003910:	d107      	bne.n	8003922 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003920:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e06b      	b.n	80039fe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392a:	781a      	ldrb	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	1c5a      	adds	r2, r3, #1
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003940:	b29b      	uxth	r3, r3
 8003942:	3b01      	subs	r3, #1
 8003944:	b29a      	uxth	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800394e:	3b01      	subs	r3, #1
 8003950:	b29a      	uxth	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b04      	cmp	r3, #4
 8003962:	d11b      	bne.n	800399c <HAL_I2C_Master_Transmit+0x188>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003968:	2b00      	cmp	r3, #0
 800396a:	d017      	beq.n	800399c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003970:	781a      	ldrb	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	1c5a      	adds	r2, r3, #1
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003986:	b29b      	uxth	r3, r3
 8003988:	3b01      	subs	r3, #1
 800398a:	b29a      	uxth	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003994:	3b01      	subs	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	6a39      	ldr	r1, [r7, #32]
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f000 f9ce 	bl	8003d42 <I2C_WaitOnBTFFlagUntilTimeout>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00d      	beq.n	80039c8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b0:	2b04      	cmp	r3, #4
 80039b2:	d107      	bne.n	80039c4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e01a      	b.n	80039fe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d194      	bne.n	80038fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2220      	movs	r2, #32
 80039e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039f8:	2300      	movs	r3, #0
 80039fa:	e000      	b.n	80039fe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80039fc:	2302      	movs	r3, #2
  }
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3718      	adds	r7, #24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	00100002 	.word	0x00100002
 8003a0c:	ffff0000 	.word	0xffff0000

08003a10 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b088      	sub	sp, #32
 8003a14:	af02      	add	r7, sp, #8
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	607a      	str	r2, [r7, #4]
 8003a1a:	603b      	str	r3, [r7, #0]
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a24:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	d006      	beq.n	8003a3a <I2C_MasterRequestWrite+0x2a>
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d003      	beq.n	8003a3a <I2C_MasterRequestWrite+0x2a>
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a38:	d108      	bne.n	8003a4c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	e00b      	b.n	8003a64 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a50:	2b12      	cmp	r3, #18
 8003a52:	d107      	bne.n	8003a64 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	9300      	str	r3, [sp, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f000 f84f 	bl	8003b14 <I2C_WaitOnFlagUntilTimeout>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00d      	beq.n	8003a98 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a8a:	d103      	bne.n	8003a94 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e035      	b.n	8003b04 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003aa0:	d108      	bne.n	8003ab4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003aa2:	897b      	ldrh	r3, [r7, #10]
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ab0:	611a      	str	r2, [r3, #16]
 8003ab2:	e01b      	b.n	8003aec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ab4:	897b      	ldrh	r3, [r7, #10]
 8003ab6:	11db      	asrs	r3, r3, #7
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	f003 0306 	and.w	r3, r3, #6
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	f063 030f 	orn	r3, r3, #15
 8003ac4:	b2da      	uxtb	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	490e      	ldr	r1, [pc, #56]	; (8003b0c <I2C_MasterRequestWrite+0xfc>)
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 f875 	bl	8003bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e010      	b.n	8003b04 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003ae2:	897b      	ldrh	r3, [r7, #10]
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	4907      	ldr	r1, [pc, #28]	; (8003b10 <I2C_MasterRequestWrite+0x100>)
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f000 f865 	bl	8003bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e000      	b.n	8003b04 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3718      	adds	r7, #24
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	00010008 	.word	0x00010008
 8003b10:	00010002 	.word	0x00010002

08003b14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	603b      	str	r3, [r7, #0]
 8003b20:	4613      	mov	r3, r2
 8003b22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b24:	e025      	b.n	8003b72 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b2c:	d021      	beq.n	8003b72 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b2e:	f7fe feed 	bl	800290c <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d302      	bcc.n	8003b44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d116      	bne.n	8003b72 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	f043 0220 	orr.w	r2, r3, #32
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e023      	b.n	8003bba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	0c1b      	lsrs	r3, r3, #16
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d10d      	bne.n	8003b98 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	43da      	mvns	r2, r3
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	4013      	ands	r3, r2
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	bf0c      	ite	eq
 8003b8e:	2301      	moveq	r3, #1
 8003b90:	2300      	movne	r3, #0
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	461a      	mov	r2, r3
 8003b96:	e00c      	b.n	8003bb2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	43da      	mvns	r2, r3
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	bf0c      	ite	eq
 8003baa:	2301      	moveq	r3, #1
 8003bac:	2300      	movne	r3, #0
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	79fb      	ldrb	r3, [r7, #7]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d0b6      	beq.n	8003b26 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b084      	sub	sp, #16
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	60f8      	str	r0, [r7, #12]
 8003bca:	60b9      	str	r1, [r7, #8]
 8003bcc:	607a      	str	r2, [r7, #4]
 8003bce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bd0:	e051      	b.n	8003c76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003be0:	d123      	bne.n	8003c2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bf0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bfa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2220      	movs	r2, #32
 8003c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	f043 0204 	orr.w	r2, r3, #4
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e046      	b.n	8003cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c30:	d021      	beq.n	8003c76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c32:	f7fe fe6b 	bl	800290c <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d302      	bcc.n	8003c48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d116      	bne.n	8003c76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2220      	movs	r2, #32
 8003c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	f043 0220 	orr.w	r2, r3, #32
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e020      	b.n	8003cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	0c1b      	lsrs	r3, r3, #16
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d10c      	bne.n	8003c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	43da      	mvns	r2, r3
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	bf14      	ite	ne
 8003c92:	2301      	movne	r3, #1
 8003c94:	2300      	moveq	r3, #0
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	e00b      	b.n	8003cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	43da      	mvns	r2, r3
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	bf14      	ite	ne
 8003cac:	2301      	movne	r3, #1
 8003cae:	2300      	moveq	r3, #0
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d18d      	bne.n	8003bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ccc:	e02d      	b.n	8003d2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 f878 	bl	8003dc4 <I2C_IsAcknowledgeFailed>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e02d      	b.n	8003d3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce4:	d021      	beq.n	8003d2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ce6:	f7fe fe11 	bl	800290c <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d302      	bcc.n	8003cfc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d116      	bne.n	8003d2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2220      	movs	r2, #32
 8003d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	f043 0220 	orr.w	r2, r3, #32
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e007      	b.n	8003d3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d34:	2b80      	cmp	r3, #128	; 0x80
 8003d36:	d1ca      	bne.n	8003cce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b084      	sub	sp, #16
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	60f8      	str	r0, [r7, #12]
 8003d4a:	60b9      	str	r1, [r7, #8]
 8003d4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d4e:	e02d      	b.n	8003dac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f000 f837 	bl	8003dc4 <I2C_IsAcknowledgeFailed>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e02d      	b.n	8003dbc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d66:	d021      	beq.n	8003dac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d68:	f7fe fdd0 	bl	800290c <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	68ba      	ldr	r2, [r7, #8]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d302      	bcc.n	8003d7e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d116      	bne.n	8003dac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2220      	movs	r2, #32
 8003d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d98:	f043 0220 	orr.w	r2, r3, #32
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e007      	b.n	8003dbc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	f003 0304 	and.w	r3, r3, #4
 8003db6:	2b04      	cmp	r3, #4
 8003db8:	d1ca      	bne.n	8003d50 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3710      	adds	r7, #16
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dda:	d11b      	bne.n	8003e14 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003de4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2220      	movs	r2, #32
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e00:	f043 0204 	orr.w	r2, r3, #4
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e000      	b.n	8003e16 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
	...

08003e24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e267      	b.n	8004306 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d075      	beq.n	8003f2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e42:	4b88      	ldr	r3, [pc, #544]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 030c 	and.w	r3, r3, #12
 8003e4a:	2b04      	cmp	r3, #4
 8003e4c:	d00c      	beq.n	8003e68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e4e:	4b85      	ldr	r3, [pc, #532]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e56:	2b08      	cmp	r3, #8
 8003e58:	d112      	bne.n	8003e80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e5a:	4b82      	ldr	r3, [pc, #520]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e66:	d10b      	bne.n	8003e80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e68:	4b7e      	ldr	r3, [pc, #504]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d05b      	beq.n	8003f2c <HAL_RCC_OscConfig+0x108>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d157      	bne.n	8003f2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e242      	b.n	8004306 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e88:	d106      	bne.n	8003e98 <HAL_RCC_OscConfig+0x74>
 8003e8a:	4b76      	ldr	r3, [pc, #472]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a75      	ldr	r2, [pc, #468]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e94:	6013      	str	r3, [r2, #0]
 8003e96:	e01d      	b.n	8003ed4 <HAL_RCC_OscConfig+0xb0>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ea0:	d10c      	bne.n	8003ebc <HAL_RCC_OscConfig+0x98>
 8003ea2:	4b70      	ldr	r3, [pc, #448]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a6f      	ldr	r2, [pc, #444]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003ea8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003eac:	6013      	str	r3, [r2, #0]
 8003eae:	4b6d      	ldr	r3, [pc, #436]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a6c      	ldr	r2, [pc, #432]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb8:	6013      	str	r3, [r2, #0]
 8003eba:	e00b      	b.n	8003ed4 <HAL_RCC_OscConfig+0xb0>
 8003ebc:	4b69      	ldr	r3, [pc, #420]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a68      	ldr	r2, [pc, #416]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003ec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ec6:	6013      	str	r3, [r2, #0]
 8003ec8:	4b66      	ldr	r3, [pc, #408]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a65      	ldr	r2, [pc, #404]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003ece:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ed2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d013      	beq.n	8003f04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003edc:	f7fe fd16 	bl	800290c <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ee4:	f7fe fd12 	bl	800290c <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b64      	cmp	r3, #100	; 0x64
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e207      	b.n	8004306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ef6:	4b5b      	ldr	r3, [pc, #364]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d0f0      	beq.n	8003ee4 <HAL_RCC_OscConfig+0xc0>
 8003f02:	e014      	b.n	8003f2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f04:	f7fe fd02 	bl	800290c <HAL_GetTick>
 8003f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f0c:	f7fe fcfe 	bl	800290c <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b64      	cmp	r3, #100	; 0x64
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e1f3      	b.n	8004306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f1e:	4b51      	ldr	r3, [pc, #324]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1f0      	bne.n	8003f0c <HAL_RCC_OscConfig+0xe8>
 8003f2a:	e000      	b.n	8003f2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d063      	beq.n	8004002 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f3a:	4b4a      	ldr	r3, [pc, #296]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f003 030c 	and.w	r3, r3, #12
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00b      	beq.n	8003f5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f46:	4b47      	ldr	r3, [pc, #284]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f4e:	2b08      	cmp	r3, #8
 8003f50:	d11c      	bne.n	8003f8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f52:	4b44      	ldr	r3, [pc, #272]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d116      	bne.n	8003f8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f5e:	4b41      	ldr	r3, [pc, #260]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d005      	beq.n	8003f76 <HAL_RCC_OscConfig+0x152>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d001      	beq.n	8003f76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e1c7      	b.n	8004306 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f76:	4b3b      	ldr	r3, [pc, #236]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	4937      	ldr	r1, [pc, #220]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f8a:	e03a      	b.n	8004002 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d020      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f94:	4b34      	ldr	r3, [pc, #208]	; (8004068 <HAL_RCC_OscConfig+0x244>)
 8003f96:	2201      	movs	r2, #1
 8003f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9a:	f7fe fcb7 	bl	800290c <HAL_GetTick>
 8003f9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fa2:	f7fe fcb3 	bl	800290c <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e1a8      	b.n	8004306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fb4:	4b2b      	ldr	r3, [pc, #172]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0f0      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fc0:	4b28      	ldr	r3, [pc, #160]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	4925      	ldr	r1, [pc, #148]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	600b      	str	r3, [r1, #0]
 8003fd4:	e015      	b.n	8004002 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fd6:	4b24      	ldr	r3, [pc, #144]	; (8004068 <HAL_RCC_OscConfig+0x244>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fdc:	f7fe fc96 	bl	800290c <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fe4:	f7fe fc92 	bl	800290c <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e187      	b.n	8004306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ff6:	4b1b      	ldr	r3, [pc, #108]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1f0      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0308 	and.w	r3, r3, #8
 800400a:	2b00      	cmp	r3, #0
 800400c:	d036      	beq.n	800407c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d016      	beq.n	8004044 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004016:	4b15      	ldr	r3, [pc, #84]	; (800406c <HAL_RCC_OscConfig+0x248>)
 8004018:	2201      	movs	r2, #1
 800401a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800401c:	f7fe fc76 	bl	800290c <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004024:	f7fe fc72 	bl	800290c <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e167      	b.n	8004306 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004036:	4b0b      	ldr	r3, [pc, #44]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8004038:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d0f0      	beq.n	8004024 <HAL_RCC_OscConfig+0x200>
 8004042:	e01b      	b.n	800407c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004044:	4b09      	ldr	r3, [pc, #36]	; (800406c <HAL_RCC_OscConfig+0x248>)
 8004046:	2200      	movs	r2, #0
 8004048:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800404a:	f7fe fc5f 	bl	800290c <HAL_GetTick>
 800404e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004050:	e00e      	b.n	8004070 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004052:	f7fe fc5b 	bl	800290c <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	2b02      	cmp	r3, #2
 800405e:	d907      	bls.n	8004070 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e150      	b.n	8004306 <HAL_RCC_OscConfig+0x4e2>
 8004064:	40023800 	.word	0x40023800
 8004068:	42470000 	.word	0x42470000
 800406c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004070:	4b88      	ldr	r3, [pc, #544]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 8004072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1ea      	bne.n	8004052 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0304 	and.w	r3, r3, #4
 8004084:	2b00      	cmp	r3, #0
 8004086:	f000 8097 	beq.w	80041b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800408a:	2300      	movs	r3, #0
 800408c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800408e:	4b81      	ldr	r3, [pc, #516]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10f      	bne.n	80040ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800409a:	2300      	movs	r3, #0
 800409c:	60bb      	str	r3, [r7, #8]
 800409e:	4b7d      	ldr	r3, [pc, #500]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	4a7c      	ldr	r2, [pc, #496]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 80040a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040a8:	6413      	str	r3, [r2, #64]	; 0x40
 80040aa:	4b7a      	ldr	r3, [pc, #488]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 80040ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b2:	60bb      	str	r3, [r7, #8]
 80040b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040b6:	2301      	movs	r3, #1
 80040b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ba:	4b77      	ldr	r3, [pc, #476]	; (8004298 <HAL_RCC_OscConfig+0x474>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d118      	bne.n	80040f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040c6:	4b74      	ldr	r3, [pc, #464]	; (8004298 <HAL_RCC_OscConfig+0x474>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a73      	ldr	r2, [pc, #460]	; (8004298 <HAL_RCC_OscConfig+0x474>)
 80040cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040d2:	f7fe fc1b 	bl	800290c <HAL_GetTick>
 80040d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040d8:	e008      	b.n	80040ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040da:	f7fe fc17 	bl	800290c <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e10c      	b.n	8004306 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ec:	4b6a      	ldr	r3, [pc, #424]	; (8004298 <HAL_RCC_OscConfig+0x474>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0f0      	beq.n	80040da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d106      	bne.n	800410e <HAL_RCC_OscConfig+0x2ea>
 8004100:	4b64      	ldr	r3, [pc, #400]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 8004102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004104:	4a63      	ldr	r2, [pc, #396]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 8004106:	f043 0301 	orr.w	r3, r3, #1
 800410a:	6713      	str	r3, [r2, #112]	; 0x70
 800410c:	e01c      	b.n	8004148 <HAL_RCC_OscConfig+0x324>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	2b05      	cmp	r3, #5
 8004114:	d10c      	bne.n	8004130 <HAL_RCC_OscConfig+0x30c>
 8004116:	4b5f      	ldr	r3, [pc, #380]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 8004118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800411a:	4a5e      	ldr	r2, [pc, #376]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 800411c:	f043 0304 	orr.w	r3, r3, #4
 8004120:	6713      	str	r3, [r2, #112]	; 0x70
 8004122:	4b5c      	ldr	r3, [pc, #368]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 8004124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004126:	4a5b      	ldr	r2, [pc, #364]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 8004128:	f043 0301 	orr.w	r3, r3, #1
 800412c:	6713      	str	r3, [r2, #112]	; 0x70
 800412e:	e00b      	b.n	8004148 <HAL_RCC_OscConfig+0x324>
 8004130:	4b58      	ldr	r3, [pc, #352]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 8004132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004134:	4a57      	ldr	r2, [pc, #348]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 8004136:	f023 0301 	bic.w	r3, r3, #1
 800413a:	6713      	str	r3, [r2, #112]	; 0x70
 800413c:	4b55      	ldr	r3, [pc, #340]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 800413e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004140:	4a54      	ldr	r2, [pc, #336]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 8004142:	f023 0304 	bic.w	r3, r3, #4
 8004146:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d015      	beq.n	800417c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004150:	f7fe fbdc 	bl	800290c <HAL_GetTick>
 8004154:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004156:	e00a      	b.n	800416e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004158:	f7fe fbd8 	bl	800290c <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	f241 3288 	movw	r2, #5000	; 0x1388
 8004166:	4293      	cmp	r3, r2
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e0cb      	b.n	8004306 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800416e:	4b49      	ldr	r3, [pc, #292]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 8004170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d0ee      	beq.n	8004158 <HAL_RCC_OscConfig+0x334>
 800417a:	e014      	b.n	80041a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800417c:	f7fe fbc6 	bl	800290c <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004182:	e00a      	b.n	800419a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004184:	f7fe fbc2 	bl	800290c <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004192:	4293      	cmp	r3, r2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e0b5      	b.n	8004306 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800419a:	4b3e      	ldr	r3, [pc, #248]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 800419c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1ee      	bne.n	8004184 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041a6:	7dfb      	ldrb	r3, [r7, #23]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d105      	bne.n	80041b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041ac:	4b39      	ldr	r3, [pc, #228]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 80041ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b0:	4a38      	ldr	r2, [pc, #224]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 80041b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 80a1 	beq.w	8004304 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041c2:	4b34      	ldr	r3, [pc, #208]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f003 030c 	and.w	r3, r3, #12
 80041ca:	2b08      	cmp	r3, #8
 80041cc:	d05c      	beq.n	8004288 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d141      	bne.n	800425a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041d6:	4b31      	ldr	r3, [pc, #196]	; (800429c <HAL_RCC_OscConfig+0x478>)
 80041d8:	2200      	movs	r2, #0
 80041da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041dc:	f7fe fb96 	bl	800290c <HAL_GetTick>
 80041e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041e2:	e008      	b.n	80041f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041e4:	f7fe fb92 	bl	800290c <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e087      	b.n	8004306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041f6:	4b27      	ldr	r3, [pc, #156]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1f0      	bne.n	80041e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	69da      	ldr	r2, [r3, #28]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	431a      	orrs	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	019b      	lsls	r3, r3, #6
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004218:	085b      	lsrs	r3, r3, #1
 800421a:	3b01      	subs	r3, #1
 800421c:	041b      	lsls	r3, r3, #16
 800421e:	431a      	orrs	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004224:	061b      	lsls	r3, r3, #24
 8004226:	491b      	ldr	r1, [pc, #108]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 8004228:	4313      	orrs	r3, r2
 800422a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800422c:	4b1b      	ldr	r3, [pc, #108]	; (800429c <HAL_RCC_OscConfig+0x478>)
 800422e:	2201      	movs	r2, #1
 8004230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004232:	f7fe fb6b 	bl	800290c <HAL_GetTick>
 8004236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004238:	e008      	b.n	800424c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800423a:	f7fe fb67 	bl	800290c <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	2b02      	cmp	r3, #2
 8004246:	d901      	bls.n	800424c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e05c      	b.n	8004306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800424c:	4b11      	ldr	r3, [pc, #68]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d0f0      	beq.n	800423a <HAL_RCC_OscConfig+0x416>
 8004258:	e054      	b.n	8004304 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800425a:	4b10      	ldr	r3, [pc, #64]	; (800429c <HAL_RCC_OscConfig+0x478>)
 800425c:	2200      	movs	r2, #0
 800425e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004260:	f7fe fb54 	bl	800290c <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004268:	f7fe fb50 	bl	800290c <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e045      	b.n	8004306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800427a:	4b06      	ldr	r3, [pc, #24]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1f0      	bne.n	8004268 <HAL_RCC_OscConfig+0x444>
 8004286:	e03d      	b.n	8004304 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d107      	bne.n	80042a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e038      	b.n	8004306 <HAL_RCC_OscConfig+0x4e2>
 8004294:	40023800 	.word	0x40023800
 8004298:	40007000 	.word	0x40007000
 800429c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042a0:	4b1b      	ldr	r3, [pc, #108]	; (8004310 <HAL_RCC_OscConfig+0x4ec>)
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d028      	beq.n	8004300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d121      	bne.n	8004300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d11a      	bne.n	8004300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042d0:	4013      	ands	r3, r2
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042d8:	4293      	cmp	r3, r2
 80042da:	d111      	bne.n	8004300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e6:	085b      	lsrs	r3, r3, #1
 80042e8:	3b01      	subs	r3, #1
 80042ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d107      	bne.n	8004300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d001      	beq.n	8004304 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e000      	b.n	8004306 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3718      	adds	r7, #24
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	40023800 	.word	0x40023800

08004314 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e0cc      	b.n	80044c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004328:	4b68      	ldr	r3, [pc, #416]	; (80044cc <HAL_RCC_ClockConfig+0x1b8>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0307 	and.w	r3, r3, #7
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	429a      	cmp	r2, r3
 8004334:	d90c      	bls.n	8004350 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004336:	4b65      	ldr	r3, [pc, #404]	; (80044cc <HAL_RCC_ClockConfig+0x1b8>)
 8004338:	683a      	ldr	r2, [r7, #0]
 800433a:	b2d2      	uxtb	r2, r2
 800433c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800433e:	4b63      	ldr	r3, [pc, #396]	; (80044cc <HAL_RCC_ClockConfig+0x1b8>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0307 	and.w	r3, r3, #7
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	429a      	cmp	r2, r3
 800434a:	d001      	beq.n	8004350 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e0b8      	b.n	80044c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d020      	beq.n	800439e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0304 	and.w	r3, r3, #4
 8004364:	2b00      	cmp	r3, #0
 8004366:	d005      	beq.n	8004374 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004368:	4b59      	ldr	r3, [pc, #356]	; (80044d0 <HAL_RCC_ClockConfig+0x1bc>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	4a58      	ldr	r2, [pc, #352]	; (80044d0 <HAL_RCC_ClockConfig+0x1bc>)
 800436e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004372:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0308 	and.w	r3, r3, #8
 800437c:	2b00      	cmp	r3, #0
 800437e:	d005      	beq.n	800438c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004380:	4b53      	ldr	r3, [pc, #332]	; (80044d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	4a52      	ldr	r2, [pc, #328]	; (80044d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004386:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800438a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800438c:	4b50      	ldr	r3, [pc, #320]	; (80044d0 <HAL_RCC_ClockConfig+0x1bc>)
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	494d      	ldr	r1, [pc, #308]	; (80044d0 <HAL_RCC_ClockConfig+0x1bc>)
 800439a:	4313      	orrs	r3, r2
 800439c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d044      	beq.n	8004434 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d107      	bne.n	80043c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043b2:	4b47      	ldr	r3, [pc, #284]	; (80044d0 <HAL_RCC_ClockConfig+0x1bc>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d119      	bne.n	80043f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e07f      	b.n	80044c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d003      	beq.n	80043d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043ce:	2b03      	cmp	r3, #3
 80043d0:	d107      	bne.n	80043e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043d2:	4b3f      	ldr	r3, [pc, #252]	; (80044d0 <HAL_RCC_ClockConfig+0x1bc>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d109      	bne.n	80043f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e06f      	b.n	80044c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043e2:	4b3b      	ldr	r3, [pc, #236]	; (80044d0 <HAL_RCC_ClockConfig+0x1bc>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e067      	b.n	80044c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043f2:	4b37      	ldr	r3, [pc, #220]	; (80044d0 <HAL_RCC_ClockConfig+0x1bc>)
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f023 0203 	bic.w	r2, r3, #3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	4934      	ldr	r1, [pc, #208]	; (80044d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004400:	4313      	orrs	r3, r2
 8004402:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004404:	f7fe fa82 	bl	800290c <HAL_GetTick>
 8004408:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800440a:	e00a      	b.n	8004422 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800440c:	f7fe fa7e 	bl	800290c <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	f241 3288 	movw	r2, #5000	; 0x1388
 800441a:	4293      	cmp	r3, r2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e04f      	b.n	80044c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004422:	4b2b      	ldr	r3, [pc, #172]	; (80044d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f003 020c 	and.w	r2, r3, #12
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	429a      	cmp	r2, r3
 8004432:	d1eb      	bne.n	800440c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004434:	4b25      	ldr	r3, [pc, #148]	; (80044cc <HAL_RCC_ClockConfig+0x1b8>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0307 	and.w	r3, r3, #7
 800443c:	683a      	ldr	r2, [r7, #0]
 800443e:	429a      	cmp	r2, r3
 8004440:	d20c      	bcs.n	800445c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004442:	4b22      	ldr	r3, [pc, #136]	; (80044cc <HAL_RCC_ClockConfig+0x1b8>)
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800444a:	4b20      	ldr	r3, [pc, #128]	; (80044cc <HAL_RCC_ClockConfig+0x1b8>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0307 	and.w	r3, r3, #7
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	429a      	cmp	r2, r3
 8004456:	d001      	beq.n	800445c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e032      	b.n	80044c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0304 	and.w	r3, r3, #4
 8004464:	2b00      	cmp	r3, #0
 8004466:	d008      	beq.n	800447a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004468:	4b19      	ldr	r3, [pc, #100]	; (80044d0 <HAL_RCC_ClockConfig+0x1bc>)
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	4916      	ldr	r1, [pc, #88]	; (80044d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004476:	4313      	orrs	r3, r2
 8004478:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0308 	and.w	r3, r3, #8
 8004482:	2b00      	cmp	r3, #0
 8004484:	d009      	beq.n	800449a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004486:	4b12      	ldr	r3, [pc, #72]	; (80044d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	490e      	ldr	r1, [pc, #56]	; (80044d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004496:	4313      	orrs	r3, r2
 8004498:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800449a:	f000 f821 	bl	80044e0 <HAL_RCC_GetSysClockFreq>
 800449e:	4602      	mov	r2, r0
 80044a0:	4b0b      	ldr	r3, [pc, #44]	; (80044d0 <HAL_RCC_ClockConfig+0x1bc>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	091b      	lsrs	r3, r3, #4
 80044a6:	f003 030f 	and.w	r3, r3, #15
 80044aa:	490a      	ldr	r1, [pc, #40]	; (80044d4 <HAL_RCC_ClockConfig+0x1c0>)
 80044ac:	5ccb      	ldrb	r3, [r1, r3]
 80044ae:	fa22 f303 	lsr.w	r3, r2, r3
 80044b2:	4a09      	ldr	r2, [pc, #36]	; (80044d8 <HAL_RCC_ClockConfig+0x1c4>)
 80044b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044b6:	4b09      	ldr	r3, [pc, #36]	; (80044dc <HAL_RCC_ClockConfig+0x1c8>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7fe f9e2 	bl	8002884 <HAL_InitTick>

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	40023c00 	.word	0x40023c00
 80044d0:	40023800 	.word	0x40023800
 80044d4:	0800e4c0 	.word	0x0800e4c0
 80044d8:	20000060 	.word	0x20000060
 80044dc:	20000064 	.word	0x20000064

080044e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044e4:	b094      	sub	sp, #80	; 0x50
 80044e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	647b      	str	r3, [r7, #68]	; 0x44
 80044ec:	2300      	movs	r3, #0
 80044ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044f0:	2300      	movs	r3, #0
 80044f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80044f4:	2300      	movs	r3, #0
 80044f6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044f8:	4b79      	ldr	r3, [pc, #484]	; (80046e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f003 030c 	and.w	r3, r3, #12
 8004500:	2b08      	cmp	r3, #8
 8004502:	d00d      	beq.n	8004520 <HAL_RCC_GetSysClockFreq+0x40>
 8004504:	2b08      	cmp	r3, #8
 8004506:	f200 80e1 	bhi.w	80046cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800450a:	2b00      	cmp	r3, #0
 800450c:	d002      	beq.n	8004514 <HAL_RCC_GetSysClockFreq+0x34>
 800450e:	2b04      	cmp	r3, #4
 8004510:	d003      	beq.n	800451a <HAL_RCC_GetSysClockFreq+0x3a>
 8004512:	e0db      	b.n	80046cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004514:	4b73      	ldr	r3, [pc, #460]	; (80046e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004516:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004518:	e0db      	b.n	80046d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800451a:	4b73      	ldr	r3, [pc, #460]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800451c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800451e:	e0d8      	b.n	80046d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004520:	4b6f      	ldr	r3, [pc, #444]	; (80046e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004528:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800452a:	4b6d      	ldr	r3, [pc, #436]	; (80046e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d063      	beq.n	80045fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004536:	4b6a      	ldr	r3, [pc, #424]	; (80046e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	099b      	lsrs	r3, r3, #6
 800453c:	2200      	movs	r2, #0
 800453e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004540:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004548:	633b      	str	r3, [r7, #48]	; 0x30
 800454a:	2300      	movs	r3, #0
 800454c:	637b      	str	r3, [r7, #52]	; 0x34
 800454e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004552:	4622      	mov	r2, r4
 8004554:	462b      	mov	r3, r5
 8004556:	f04f 0000 	mov.w	r0, #0
 800455a:	f04f 0100 	mov.w	r1, #0
 800455e:	0159      	lsls	r1, r3, #5
 8004560:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004564:	0150      	lsls	r0, r2, #5
 8004566:	4602      	mov	r2, r0
 8004568:	460b      	mov	r3, r1
 800456a:	4621      	mov	r1, r4
 800456c:	1a51      	subs	r1, r2, r1
 800456e:	6139      	str	r1, [r7, #16]
 8004570:	4629      	mov	r1, r5
 8004572:	eb63 0301 	sbc.w	r3, r3, r1
 8004576:	617b      	str	r3, [r7, #20]
 8004578:	f04f 0200 	mov.w	r2, #0
 800457c:	f04f 0300 	mov.w	r3, #0
 8004580:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004584:	4659      	mov	r1, fp
 8004586:	018b      	lsls	r3, r1, #6
 8004588:	4651      	mov	r1, sl
 800458a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800458e:	4651      	mov	r1, sl
 8004590:	018a      	lsls	r2, r1, #6
 8004592:	4651      	mov	r1, sl
 8004594:	ebb2 0801 	subs.w	r8, r2, r1
 8004598:	4659      	mov	r1, fp
 800459a:	eb63 0901 	sbc.w	r9, r3, r1
 800459e:	f04f 0200 	mov.w	r2, #0
 80045a2:	f04f 0300 	mov.w	r3, #0
 80045a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045b2:	4690      	mov	r8, r2
 80045b4:	4699      	mov	r9, r3
 80045b6:	4623      	mov	r3, r4
 80045b8:	eb18 0303 	adds.w	r3, r8, r3
 80045bc:	60bb      	str	r3, [r7, #8]
 80045be:	462b      	mov	r3, r5
 80045c0:	eb49 0303 	adc.w	r3, r9, r3
 80045c4:	60fb      	str	r3, [r7, #12]
 80045c6:	f04f 0200 	mov.w	r2, #0
 80045ca:	f04f 0300 	mov.w	r3, #0
 80045ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80045d2:	4629      	mov	r1, r5
 80045d4:	024b      	lsls	r3, r1, #9
 80045d6:	4621      	mov	r1, r4
 80045d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80045dc:	4621      	mov	r1, r4
 80045de:	024a      	lsls	r2, r1, #9
 80045e0:	4610      	mov	r0, r2
 80045e2:	4619      	mov	r1, r3
 80045e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045e6:	2200      	movs	r2, #0
 80045e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80045ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045f0:	f7fc fa4c 	bl	8000a8c <__aeabi_uldivmod>
 80045f4:	4602      	mov	r2, r0
 80045f6:	460b      	mov	r3, r1
 80045f8:	4613      	mov	r3, r2
 80045fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045fc:	e058      	b.n	80046b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045fe:	4b38      	ldr	r3, [pc, #224]	; (80046e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	099b      	lsrs	r3, r3, #6
 8004604:	2200      	movs	r2, #0
 8004606:	4618      	mov	r0, r3
 8004608:	4611      	mov	r1, r2
 800460a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800460e:	623b      	str	r3, [r7, #32]
 8004610:	2300      	movs	r3, #0
 8004612:	627b      	str	r3, [r7, #36]	; 0x24
 8004614:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004618:	4642      	mov	r2, r8
 800461a:	464b      	mov	r3, r9
 800461c:	f04f 0000 	mov.w	r0, #0
 8004620:	f04f 0100 	mov.w	r1, #0
 8004624:	0159      	lsls	r1, r3, #5
 8004626:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800462a:	0150      	lsls	r0, r2, #5
 800462c:	4602      	mov	r2, r0
 800462e:	460b      	mov	r3, r1
 8004630:	4641      	mov	r1, r8
 8004632:	ebb2 0a01 	subs.w	sl, r2, r1
 8004636:	4649      	mov	r1, r9
 8004638:	eb63 0b01 	sbc.w	fp, r3, r1
 800463c:	f04f 0200 	mov.w	r2, #0
 8004640:	f04f 0300 	mov.w	r3, #0
 8004644:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004648:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800464c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004650:	ebb2 040a 	subs.w	r4, r2, sl
 8004654:	eb63 050b 	sbc.w	r5, r3, fp
 8004658:	f04f 0200 	mov.w	r2, #0
 800465c:	f04f 0300 	mov.w	r3, #0
 8004660:	00eb      	lsls	r3, r5, #3
 8004662:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004666:	00e2      	lsls	r2, r4, #3
 8004668:	4614      	mov	r4, r2
 800466a:	461d      	mov	r5, r3
 800466c:	4643      	mov	r3, r8
 800466e:	18e3      	adds	r3, r4, r3
 8004670:	603b      	str	r3, [r7, #0]
 8004672:	464b      	mov	r3, r9
 8004674:	eb45 0303 	adc.w	r3, r5, r3
 8004678:	607b      	str	r3, [r7, #4]
 800467a:	f04f 0200 	mov.w	r2, #0
 800467e:	f04f 0300 	mov.w	r3, #0
 8004682:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004686:	4629      	mov	r1, r5
 8004688:	028b      	lsls	r3, r1, #10
 800468a:	4621      	mov	r1, r4
 800468c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004690:	4621      	mov	r1, r4
 8004692:	028a      	lsls	r2, r1, #10
 8004694:	4610      	mov	r0, r2
 8004696:	4619      	mov	r1, r3
 8004698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800469a:	2200      	movs	r2, #0
 800469c:	61bb      	str	r3, [r7, #24]
 800469e:	61fa      	str	r2, [r7, #28]
 80046a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046a4:	f7fc f9f2 	bl	8000a8c <__aeabi_uldivmod>
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	4613      	mov	r3, r2
 80046ae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046b0:	4b0b      	ldr	r3, [pc, #44]	; (80046e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	0c1b      	lsrs	r3, r3, #16
 80046b6:	f003 0303 	and.w	r3, r3, #3
 80046ba:	3301      	adds	r3, #1
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80046c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046ca:	e002      	b.n	80046d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046cc:	4b05      	ldr	r3, [pc, #20]	; (80046e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80046ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3750      	adds	r7, #80	; 0x50
 80046d8:	46bd      	mov	sp, r7
 80046da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046de:	bf00      	nop
 80046e0:	40023800 	.word	0x40023800
 80046e4:	00f42400 	.word	0x00f42400
 80046e8:	007a1200 	.word	0x007a1200

080046ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046f0:	4b03      	ldr	r3, [pc, #12]	; (8004700 <HAL_RCC_GetHCLKFreq+0x14>)
 80046f2:	681b      	ldr	r3, [r3, #0]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	20000060 	.word	0x20000060

08004704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004708:	f7ff fff0 	bl	80046ec <HAL_RCC_GetHCLKFreq>
 800470c:	4602      	mov	r2, r0
 800470e:	4b05      	ldr	r3, [pc, #20]	; (8004724 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	0a9b      	lsrs	r3, r3, #10
 8004714:	f003 0307 	and.w	r3, r3, #7
 8004718:	4903      	ldr	r1, [pc, #12]	; (8004728 <HAL_RCC_GetPCLK1Freq+0x24>)
 800471a:	5ccb      	ldrb	r3, [r1, r3]
 800471c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004720:	4618      	mov	r0, r3
 8004722:	bd80      	pop	{r7, pc}
 8004724:	40023800 	.word	0x40023800
 8004728:	0800e4d0 	.word	0x0800e4d0

0800472c <adcchart_initialize>:
#include "adcchart.h"

adc_chart_t adcchart_initialize(
    cbk_t lpfnPainter,
    cbk_t lpfnHandler)
{
 800472c:	b4b0      	push	{r4, r5, r7}
 800472e:	b08d      	sub	sp, #52	; 0x34
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
    adc_chart_t m = {
 8004738:	2301      	movs	r3, #1
 800473a:	743b      	strb	r3, [r7, #16]
        .lpfnPainter    = lpfnPainter == 0 ? adcchart_callback_default_painter : lpfnPainter,
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <adcchart_initialize+0x1a>
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	e000      	b.n	8004748 <adcchart_initialize+0x1c>
 8004746:	4b15      	ldr	r3, [pc, #84]	; (800479c <adcchart_initialize+0x70>)
    adc_chart_t m = {
 8004748:	617b      	str	r3, [r7, #20]
        .lpfnHandler    = lpfnHandler == 0 ? adcchart_callback_default_handler : lpfnHandler,
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <adcchart_initialize+0x28>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	e000      	b.n	8004756 <adcchart_initialize+0x2a>
 8004754:	4b12      	ldr	r3, [pc, #72]	; (80047a0 <adcchart_initialize+0x74>)
    adc_chart_t m = {
 8004756:	61bb      	str	r3, [r7, #24]
 8004758:	2380      	movs	r3, #128	; 0x80
 800475a:	773b      	strb	r3, [r7, #28]
 800475c:	2340      	movs	r3, #64	; 0x40
 800475e:	777b      	strb	r3, [r7, #29]
 8004760:	f04f 0300 	mov.w	r3, #0
 8004764:	623b      	str	r3, [r7, #32]
 8004766:	f04f 0300 	mov.w	r3, #0
 800476a:	627b      	str	r3, [r7, #36]	; 0x24
 800476c:	4b0d      	ldr	r3, [pc, #52]	; (80047a4 <adcchart_initialize+0x78>)
 800476e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004770:	2301      	movs	r3, #1
 8004772:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8004776:	2300      	movs	r3, #0
 8004778:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        .szTitle        = "Real time angle :",
        .bRepaintBorder = true,
        .bRepaint       = true,
        .chart_x        = 0,
    };
    return m;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	461d      	mov	r5, r3
 8004780:	f107 0410 	add.w	r4, r7, #16
 8004784:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004786:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004788:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800478c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	3734      	adds	r7, #52	; 0x34
 8004794:	46bd      	mov	sp, r7
 8004796:	bcb0      	pop	{r4, r5, r7}
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	080048f1 	.word	0x080048f1
 80047a0:	080047a9 	.word	0x080047a9
 80047a4:	0800def4 	.word	0x0800def4

080047a8 <adcchart_callback_default_handler>:

void adcchart_callback_default_handler(adc_chart_t* p)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
    println("def");
 80047b0:	4805      	ldr	r0, [pc, #20]	; (80047c8 <adcchart_callback_default_handler+0x20>)
 80047b2:	f006 f833 	bl	800a81c <puts>

    switch (key_scan()) {
 80047b6:	f002 fdb3 	bl	8007320 <key_scan>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
        case KEY_ID_NONE:
            break;
        default: {
            break;
 80047be:	bf00      	nop
        }
    }
}
 80047c0:	bf00      	nop
 80047c2:	3708      	adds	r7, #8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	0800df08 	.word	0x0800df08

080047cc <adcchart_repaint_border>:

void adcchart_repaint_border(adc_chart_t* p)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
    p->bRepaintBorder = true;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	771a      	strb	r2, [r3, #28]
}
 80047da:	bf00      	nop
 80047dc:	370c      	adds	r7, #12
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
	...

080047e8 <adcchart_drawborder>:

void adcchart_drawborder(adc_chart_t* p)
{
 80047e8:	b590      	push	{r4, r7, lr}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af02      	add	r7, sp, #8
 80047ee:	6078      	str	r0, [r7, #4]
    if (p->bRepaintBorder) {
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	7f1b      	ldrb	r3, [r3, #28]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d051      	beq.n	800489c <adcchart_drawborder+0xb4>
        p->bRepaintBorder = false;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	771a      	strb	r2, [r3, #28]

        _clear();
 80047fe:	4829      	ldr	r0, [pc, #164]	; (80048a4 <adcchart_drawborder+0xbc>)
 8004800:	f003 fa09 	bl	8007c16 <u8g2_ClearBuffer>

        _draw_str(4, 12, p->szTitle);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	220c      	movs	r2, #12
 800480a:	2104      	movs	r1, #4
 800480c:	4825      	ldr	r0, [pc, #148]	; (80048a4 <adcchart_drawborder+0xbc>)
 800480e:	f004 fa23 	bl	8008c58 <u8g2_DrawStr>

        _draw_rounded_rect(4, 18, 120, 46, 8);
 8004812:	2308      	movs	r3, #8
 8004814:	9301      	str	r3, [sp, #4]
 8004816:	232e      	movs	r3, #46	; 0x2e
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	2378      	movs	r3, #120	; 0x78
 800481c:	2212      	movs	r2, #18
 800481e:	2104      	movs	r1, #4
 8004820:	4820      	ldr	r0, [pc, #128]	; (80048a4 <adcchart_drawborder+0xbc>)
 8004822:	f003 f893 	bl	800794c <u8g2_DrawRBox>

        _set_color(2);
 8004826:	2102      	movs	r1, #2
 8004828:	481e      	ldr	r0, [pc, #120]	; (80048a4 <adcchart_drawborder+0xbc>)
 800482a:	f004 fca8 	bl	800917e <u8g2_SetDrawColor>

        // 轴

        _draw_hline(10, 58, 108);
 800482e:	236c      	movs	r3, #108	; 0x6c
 8004830:	223a      	movs	r2, #58	; 0x3a
 8004832:	210a      	movs	r1, #10
 8004834:	481b      	ldr	r0, [pc, #108]	; (80048a4 <adcchart_drawborder+0xbc>)
 8004836:	f004 fc3d 	bl	80090b4 <u8g2_DrawHLine>
        _draw_vline(10, 24, 34);
 800483a:	2322      	movs	r3, #34	; 0x22
 800483c:	2218      	movs	r2, #24
 800483e:	210a      	movs	r1, #10
 8004840:	4818      	ldr	r0, [pc, #96]	; (80048a4 <adcchart_drawborder+0xbc>)
 8004842:	f004 fc50 	bl	80090e6 <u8g2_DrawVLine>

        // 箭头
        _draw_pixel(7, 27);
 8004846:	221b      	movs	r2, #27
 8004848:	2107      	movs	r1, #7
 800484a:	4816      	ldr	r0, [pc, #88]	; (80048a4 <adcchart_drawborder+0xbc>)
 800484c:	f004 fc64 	bl	8009118 <u8g2_DrawPixel>
        _draw_pixel(8, 26);
 8004850:	221a      	movs	r2, #26
 8004852:	2108      	movs	r1, #8
 8004854:	4813      	ldr	r0, [pc, #76]	; (80048a4 <adcchart_drawborder+0xbc>)
 8004856:	f004 fc5f 	bl	8009118 <u8g2_DrawPixel>
        _draw_pixel(9, 25);
 800485a:	2219      	movs	r2, #25
 800485c:	2109      	movs	r1, #9
 800485e:	4811      	ldr	r0, [pc, #68]	; (80048a4 <adcchart_drawborder+0xbc>)
 8004860:	f004 fc5a 	bl	8009118 <u8g2_DrawPixel>

        _draw_pixel(116, 59);
 8004864:	223b      	movs	r2, #59	; 0x3b
 8004866:	2174      	movs	r1, #116	; 0x74
 8004868:	480e      	ldr	r0, [pc, #56]	; (80048a4 <adcchart_drawborder+0xbc>)
 800486a:	f004 fc55 	bl	8009118 <u8g2_DrawPixel>
        _draw_pixel(115, 60);
 800486e:	223c      	movs	r2, #60	; 0x3c
 8004870:	2173      	movs	r1, #115	; 0x73
 8004872:	480c      	ldr	r0, [pc, #48]	; (80048a4 <adcchart_drawborder+0xbc>)
 8004874:	f004 fc50 	bl	8009118 <u8g2_DrawPixel>
        _draw_pixel(114, 61);
 8004878:	223d      	movs	r2, #61	; 0x3d
 800487a:	2172      	movs	r1, #114	; 0x72
 800487c:	4809      	ldr	r0, [pc, #36]	; (80048a4 <adcchart_drawborder+0xbc>)
 800487e:	f004 fc4b 	bl	8009118 <u8g2_DrawPixel>

        _set_color(1);
 8004882:	2101      	movs	r1, #1
 8004884:	4807      	ldr	r0, [pc, #28]	; (80048a4 <adcchart_drawborder+0xbc>)
 8004886:	f004 fc7a 	bl	800917e <u8g2_SetDrawColor>

        p->nLastSample = adcchart_get_new_value(&p);
 800488a:	687c      	ldr	r4, [r7, #4]
 800488c:	1d3b      	adds	r3, r7, #4
 800488e:	4618      	mov	r0, r3
 8004890:	f000 f80a 	bl	80048a8 <adcchart_get_new_value>
 8004894:	eef0 7a40 	vmov.f32	s15, s0
 8004898:	edc4 7a05 	vstr	s15, [r4, #20]
    }
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd90      	pop	{r4, r7, pc}
 80048a4:	200001d0 	.word	0x200001d0

080048a8 <adcchart_get_new_value>:

float adcchart_get_new_value(adc_chart_t* p)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
    HAL_ADC_Start(&hadc1);
 80048b0:	480d      	ldr	r0, [pc, #52]	; (80048e8 <adcchart_get_new_value+0x40>)
 80048b2:	f7fe f89f 	bl	80029f4 <HAL_ADC_Start>
    return (float)abs(HAL_ADC_GetValue(&hadc1) - 3700) / (15 + 30);
 80048b6:	480c      	ldr	r0, [pc, #48]	; (80048e8 <adcchart_get_new_value+0x40>)
 80048b8:	f7fe f96e 	bl	8002b98 <HAL_ADC_GetValue>
 80048bc:	4603      	mov	r3, r0
 80048be:	f6a3 6374 	subw	r3, r3, #3700	; 0xe74
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	bfb8      	it	lt
 80048c6:	425b      	neglt	r3, r3
 80048c8:	ee07 3a90 	vmov	s15, r3
 80048cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048d0:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80048ec <adcchart_get_new_value+0x44>
 80048d4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80048d8:	eef0 7a66 	vmov.f32	s15, s13
}
 80048dc:	eeb0 0a67 	vmov.f32	s0, s15
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	200000e4 	.word	0x200000e4
 80048ec:	42340000 	.word	0x42340000

080048f0 <adcchart_callback_default_painter>:

void adcchart_callback_default_painter(adc_chart_t* p)
{
 80048f0:	b590      	push	{r4, r7, lr}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af02      	add	r7, sp, #8
 80048f6:	6078      	str	r0, [r7, #4]
    adcchart_drawborder(p);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7ff ff74 	bl	80047e8 <adcchart_drawborder>

    _draw_rect(96, 0, 30, 14);
 8004900:	230e      	movs	r3, #14
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	231e      	movs	r3, #30
 8004906:	2200      	movs	r2, #0
 8004908:	2160      	movs	r1, #96	; 0x60
 800490a:	4857      	ldr	r0, [pc, #348]	; (8004a68 <adcchart_callback_default_painter+0x178>)
 800490c:	f002 ff8b 	bl	8007826 <u8g2_DrawBox>

    _draw_vline(p->chart_x + 10, 59, 3);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	7f5b      	ldrb	r3, [r3, #29]
 8004914:	b29b      	uxth	r3, r3
 8004916:	330a      	adds	r3, #10
 8004918:	b299      	uxth	r1, r3
 800491a:	2303      	movs	r3, #3
 800491c:	223b      	movs	r2, #59	; 0x3b
 800491e:	4852      	ldr	r0, [pc, #328]	; (8004a68 <adcchart_callback_default_painter+0x178>)
 8004920:	f004 fbe1 	bl	80090e6 <u8g2_DrawVLine>
    if (p->chart_x == 100) p->chart_x = 0;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	7f5b      	ldrb	r3, [r3, #29]
 8004928:	2b64      	cmp	r3, #100	; 0x64
 800492a:	d102      	bne.n	8004932 <adcchart_callback_default_painter+0x42>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	775a      	strb	r2, [r3, #29]

    _draw_vline(p->chart_x + 11, 24, 34);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	7f5b      	ldrb	r3, [r3, #29]
 8004936:	b29b      	uxth	r3, r3
 8004938:	330b      	adds	r3, #11
 800493a:	b299      	uxth	r1, r3
 800493c:	2322      	movs	r3, #34	; 0x22
 800493e:	2218      	movs	r2, #24
 8004940:	4849      	ldr	r0, [pc, #292]	; (8004a68 <adcchart_callback_default_painter+0x178>)
 8004942:	f004 fbd0 	bl	80090e6 <u8g2_DrawVLine>
    _draw_vline(p->chart_x + 12, 24, 34);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	7f5b      	ldrb	r3, [r3, #29]
 800494a:	b29b      	uxth	r3, r3
 800494c:	330c      	adds	r3, #12
 800494e:	b299      	uxth	r1, r3
 8004950:	2322      	movs	r3, #34	; 0x22
 8004952:	2218      	movs	r2, #24
 8004954:	4844      	ldr	r0, [pc, #272]	; (8004a68 <adcchart_callback_default_painter+0x178>)
 8004956:	f004 fbc6 	bl	80090e6 <u8g2_DrawVLine>
    _draw_vline(p->chart_x + 13, 24, 34);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	7f5b      	ldrb	r3, [r3, #29]
 800495e:	b29b      	uxth	r3, r3
 8004960:	330d      	adds	r3, #13
 8004962:	b299      	uxth	r1, r3
 8004964:	2322      	movs	r3, #34	; 0x22
 8004966:	2218      	movs	r2, #24
 8004968:	483f      	ldr	r0, [pc, #252]	; (8004a68 <adcchart_callback_default_painter+0x178>)
 800496a:	f004 fbbc 	bl	80090e6 <u8g2_DrawVLine>
    _draw_vline(p->chart_x + 14, 24, 34);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	7f5b      	ldrb	r3, [r3, #29]
 8004972:	b29b      	uxth	r3, r3
 8004974:	330e      	adds	r3, #14
 8004976:	b299      	uxth	r1, r3
 8004978:	2322      	movs	r3, #34	; 0x22
 800497a:	2218      	movs	r2, #24
 800497c:	483a      	ldr	r0, [pc, #232]	; (8004a68 <adcchart_callback_default_painter+0x178>)
 800497e:	f004 fbb2 	bl	80090e6 <u8g2_DrawVLine>

    // 异或绘制
    _set_color(2);
 8004982:	2102      	movs	r1, #2
 8004984:	4838      	ldr	r0, [pc, #224]	; (8004a68 <adcchart_callback_default_painter+0x178>)
 8004986:	f004 fbfa 	bl	800917e <u8g2_SetDrawColor>
    p->nCurrentSample = adcchart_get_new_value(&p);
 800498a:	687c      	ldr	r4, [r7, #4]
 800498c:	1d3b      	adds	r3, r7, #4
 800498e:	4618      	mov	r0, r3
 8004990:	f7ff ff8a 	bl	80048a8 <adcchart_get_new_value>
 8004994:	eef0 7a40 	vmov.f32	s15, s0
 8004998:	edc4 7a04 	vstr	s15, [r4, #16]
    _draw_line(p->chart_x + 11, 58 - (int)(p->nLastSample) / 2, p->chart_x + 12, 58 - (int)(p->nCurrentSample) / 2);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	7f5b      	ldrb	r3, [r3, #29]
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	330b      	adds	r3, #11
 80049a4:	b299      	uxth	r1, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	edd3 7a05 	vldr	s15, [r3, #20]
 80049ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049b0:	ee17 2a90 	vmov	r2, s15
 80049b4:	0fd3      	lsrs	r3, r2, #31
 80049b6:	4413      	add	r3, r2
 80049b8:	105b      	asrs	r3, r3, #1
 80049ba:	425b      	negs	r3, r3
 80049bc:	b29b      	uxth	r3, r3
 80049be:	333a      	adds	r3, #58	; 0x3a
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	7f5b      	ldrb	r3, [r3, #29]
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	330c      	adds	r3, #12
 80049ca:	b298      	uxth	r0, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	edd3 7a04 	vldr	s15, [r3, #16]
 80049d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049d6:	ee17 4a90 	vmov	r4, s15
 80049da:	0fe3      	lsrs	r3, r4, #31
 80049dc:	4423      	add	r3, r4
 80049de:	105b      	asrs	r3, r3, #1
 80049e0:	425b      	negs	r3, r3
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	333a      	adds	r3, #58	; 0x3a
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	4603      	mov	r3, r0
 80049ec:	481e      	ldr	r0, [pc, #120]	; (8004a68 <adcchart_callback_default_painter+0x178>)
 80049ee:	f004 fc3b 	bl	8009268 <u8g2_DrawLine>
    _draw_vline(p->chart_x + 12, 59, 3);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	7f5b      	ldrb	r3, [r3, #29]
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	330c      	adds	r3, #12
 80049fa:	b299      	uxth	r1, r3
 80049fc:	2303      	movs	r3, #3
 80049fe:	223b      	movs	r2, #59	; 0x3b
 8004a00:	4819      	ldr	r0, [pc, #100]	; (8004a68 <adcchart_callback_default_painter+0x178>)
 8004a02:	f004 fb70 	bl	80090e6 <u8g2_DrawVLine>
    p->nLastSample = p->nCurrentSample;
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6912      	ldr	r2, [r2, #16]
 8004a0c:	615a      	str	r2, [r3, #20]
    p->chart_x += 2;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	7f5a      	ldrb	r2, [r3, #29]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	3202      	adds	r2, #2
 8004a16:	b2d2      	uxtb	r2, r2
 8004a18:	775a      	strb	r2, [r3, #29]
    _draw_rect(96, 0, 30, 14);
 8004a1a:	230e      	movs	r3, #14
 8004a1c:	9300      	str	r3, [sp, #0]
 8004a1e:	231e      	movs	r3, #30
 8004a20:	2200      	movs	r2, #0
 8004a22:	2160      	movs	r1, #96	; 0x60
 8004a24:	4810      	ldr	r0, [pc, #64]	; (8004a68 <adcchart_callback_default_painter+0x178>)
 8004a26:	f002 fefe 	bl	8007826 <u8g2_DrawBox>
    _set_color(1);
 8004a2a:	2101      	movs	r1, #1
 8004a2c:	480e      	ldr	r0, [pc, #56]	; (8004a68 <adcchart_callback_default_painter+0x178>)
 8004a2e:	f004 fba6 	bl	800917e <u8g2_SetDrawColor>

    _draw_num(96, 12, "%.2f", p->nCurrentSample);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7fb feb0 	bl	800079c <__aeabi_f2d>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	460b      	mov	r3, r1
 8004a40:	490a      	ldr	r1, [pc, #40]	; (8004a6c <adcchart_callback_default_painter+0x17c>)
 8004a42:	480b      	ldr	r0, [pc, #44]	; (8004a70 <adcchart_callback_default_painter+0x180>)
 8004a44:	f005 fef2 	bl	800a82c <siprintf>
 8004a48:	4b09      	ldr	r3, [pc, #36]	; (8004a70 <adcchart_callback_default_painter+0x180>)
 8004a4a:	220c      	movs	r2, #12
 8004a4c:	2160      	movs	r1, #96	; 0x60
 8004a4e:	4806      	ldr	r0, [pc, #24]	; (8004a68 <adcchart_callback_default_painter+0x178>)
 8004a50:	f004 f902 	bl	8008c58 <u8g2_DrawStr>

    _update();
 8004a54:	4804      	ldr	r0, [pc, #16]	; (8004a68 <adcchart_callback_default_painter+0x178>)
 8004a56:	f003 f951 	bl	8007cfc <u8g2_SendBuffer>

    p->bRepaint = true;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	701a      	strb	r2, [r3, #0]
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd90      	pop	{r4, r7, pc}
 8004a68:	200001d0 	.word	0x200001d0
 8004a6c:	0800df10 	.word	0x0800df10
 8004a70:	200001c0 	.word	0x200001c0

08004a74 <u8g2_init>:

uint8_t* buf_ptr;
uint16_t buf_len;

void u8g2_init()
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0
    u8g2Init(&u8g2);
 8004a78:	480d      	ldr	r0, [pc, #52]	; (8004ab0 <u8g2_init+0x3c>)
 8004a7a:	f002 fe05 	bl	8007688 <u8g2Init>

    // u8g2_SetBusClock(&u8g2, 800000);
    u8g2_SetFont(&u8g2, u8g2_font_wqy12_t_chinese1);
 8004a7e:	490d      	ldr	r1, [pc, #52]	; (8004ab4 <u8g2_init+0x40>)
 8004a80:	480b      	ldr	r0, [pc, #44]	; (8004ab0 <u8g2_init+0x3c>)
 8004a82:	f004 f98b 	bl	8008d9c <u8g2_SetFont>
    // u8g2_SetContrast(&u8g2,10);

    buf_ptr = u8g2_GetBufferPtr(&u8g2);
 8004a86:	4b0a      	ldr	r3, [pc, #40]	; (8004ab0 <u8g2_init+0x3c>)
 8004a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8a:	4a0b      	ldr	r2, [pc, #44]	; (8004ab8 <u8g2_init+0x44>)
 8004a8c:	6013      	str	r3, [r2, #0]
    buf_len = 8 * u8g2_GetBufferTileHeight(&u8g2) * u8g2_GetBufferTileWidth(&u8g2);
 8004a8e:	4b08      	ldr	r3, [pc, #32]	; (8004ab0 <u8g2_init+0x3c>)
 8004a90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	4b06      	ldr	r3, [pc, #24]	; (8004ab0 <u8g2_init+0x3c>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	7c1b      	ldrb	r3, [r3, #16]
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	fb12 f303 	smulbb	r3, r2, r3
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	00db      	lsls	r3, r3, #3
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	4b04      	ldr	r3, [pc, #16]	; (8004abc <u8g2_init+0x48>)
 8004aaa:	801a      	strh	r2, [r3, #0]
}
 8004aac:	bf00      	nop
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	200001d0 	.word	0x200001d0
 8004ab4:	0800e4e4 	.word	0x0800e4e4
 8004ab8:	20000264 	.word	0x20000264
 8004abc:	20000268 	.word	0x20000268

08004ac0 <effect_disappear>:

void effect_disappear()
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
    uint16_t i;

    for (i = 0; i < buf_len; i += 2) 
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	80fb      	strh	r3, [r7, #6]
 8004aca:	e00f      	b.n	8004aec <effect_disappear+0x2c>
        buf_ptr[i] &= 0x55;
 8004acc:	4b2f      	ldr	r3, [pc, #188]	; (8004b8c <effect_disappear+0xcc>)
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	88fb      	ldrh	r3, [r7, #6]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	781a      	ldrb	r2, [r3, #0]
 8004ad6:	4b2d      	ldr	r3, [pc, #180]	; (8004b8c <effect_disappear+0xcc>)
 8004ad8:	6819      	ldr	r1, [r3, #0]
 8004ada:	88fb      	ldrh	r3, [r7, #6]
 8004adc:	440b      	add	r3, r1
 8004ade:	f002 0255 	and.w	r2, r2, #85	; 0x55
 8004ae2:	b2d2      	uxtb	r2, r2
 8004ae4:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < buf_len; i += 2) 
 8004ae6:	88fb      	ldrh	r3, [r7, #6]
 8004ae8:	3302      	adds	r3, #2
 8004aea:	80fb      	strh	r3, [r7, #6]
 8004aec:	4b28      	ldr	r3, [pc, #160]	; (8004b90 <effect_disappear+0xd0>)
 8004aee:	881b      	ldrh	r3, [r3, #0]
 8004af0:	88fa      	ldrh	r2, [r7, #6]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d3ea      	bcc.n	8004acc <effect_disappear+0xc>
    
    _update();
 8004af6:	4827      	ldr	r0, [pc, #156]	; (8004b94 <effect_disappear+0xd4>)
 8004af8:	f003 f900 	bl	8007cfc <u8g2_SendBuffer>

    for (i = 1; i < buf_len; i += 2) 
 8004afc:	2301      	movs	r3, #1
 8004afe:	80fb      	strh	r3, [r7, #6]
 8004b00:	e00f      	b.n	8004b22 <effect_disappear+0x62>
        buf_ptr[i] &= 0xAA;
 8004b02:	4b22      	ldr	r3, [pc, #136]	; (8004b8c <effect_disappear+0xcc>)
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	88fb      	ldrh	r3, [r7, #6]
 8004b08:	4413      	add	r3, r2
 8004b0a:	781a      	ldrb	r2, [r3, #0]
 8004b0c:	4b1f      	ldr	r3, [pc, #124]	; (8004b8c <effect_disappear+0xcc>)
 8004b0e:	6819      	ldr	r1, [r3, #0]
 8004b10:	88fb      	ldrh	r3, [r7, #6]
 8004b12:	440b      	add	r3, r1
 8004b14:	f022 0255 	bic.w	r2, r2, #85	; 0x55
 8004b18:	b2d2      	uxtb	r2, r2
 8004b1a:	701a      	strb	r2, [r3, #0]
    for (i = 1; i < buf_len; i += 2) 
 8004b1c:	88fb      	ldrh	r3, [r7, #6]
 8004b1e:	3302      	adds	r3, #2
 8004b20:	80fb      	strh	r3, [r7, #6]
 8004b22:	4b1b      	ldr	r3, [pc, #108]	; (8004b90 <effect_disappear+0xd0>)
 8004b24:	881b      	ldrh	r3, [r3, #0]
 8004b26:	88fa      	ldrh	r2, [r7, #6]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d3ea      	bcc.n	8004b02 <effect_disappear+0x42>
    
    _update();
 8004b2c:	4819      	ldr	r0, [pc, #100]	; (8004b94 <effect_disappear+0xd4>)
 8004b2e:	f003 f8e5 	bl	8007cfc <u8g2_SendBuffer>

    for (i = 0; i < buf_len; i += 2) 
 8004b32:	2300      	movs	r3, #0
 8004b34:	80fb      	strh	r3, [r7, #6]
 8004b36:	e008      	b.n	8004b4a <effect_disappear+0x8a>
        buf_ptr[i] &= 0x00;
 8004b38:	4b14      	ldr	r3, [pc, #80]	; (8004b8c <effect_disappear+0xcc>)
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	88fb      	ldrh	r3, [r7, #6]
 8004b3e:	4413      	add	r3, r2
 8004b40:	2200      	movs	r2, #0
 8004b42:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < buf_len; i += 2) 
 8004b44:	88fb      	ldrh	r3, [r7, #6]
 8004b46:	3302      	adds	r3, #2
 8004b48:	80fb      	strh	r3, [r7, #6]
 8004b4a:	4b11      	ldr	r3, [pc, #68]	; (8004b90 <effect_disappear+0xd0>)
 8004b4c:	881b      	ldrh	r3, [r3, #0]
 8004b4e:	88fa      	ldrh	r2, [r7, #6]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d3f1      	bcc.n	8004b38 <effect_disappear+0x78>
    
    _update();
 8004b54:	480f      	ldr	r0, [pc, #60]	; (8004b94 <effect_disappear+0xd4>)
 8004b56:	f003 f8d1 	bl	8007cfc <u8g2_SendBuffer>

    for (i = 1; i < buf_len; i += 2) 
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	80fb      	strh	r3, [r7, #6]
 8004b5e:	e008      	b.n	8004b72 <effect_disappear+0xb2>
        buf_ptr[i] &= 0x00;
 8004b60:	4b0a      	ldr	r3, [pc, #40]	; (8004b8c <effect_disappear+0xcc>)
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	88fb      	ldrh	r3, [r7, #6]
 8004b66:	4413      	add	r3, r2
 8004b68:	2200      	movs	r2, #0
 8004b6a:	701a      	strb	r2, [r3, #0]
    for (i = 1; i < buf_len; i += 2) 
 8004b6c:	88fb      	ldrh	r3, [r7, #6]
 8004b6e:	3302      	adds	r3, #2
 8004b70:	80fb      	strh	r3, [r7, #6]
 8004b72:	4b07      	ldr	r3, [pc, #28]	; (8004b90 <effect_disappear+0xd0>)
 8004b74:	881b      	ldrh	r3, [r3, #0]
 8004b76:	88fa      	ldrh	r2, [r7, #6]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d3f1      	bcc.n	8004b60 <effect_disappear+0xa0>
    
    _update();
 8004b7c:	4805      	ldr	r0, [pc, #20]	; (8004b94 <effect_disappear+0xd4>)
 8004b7e:	f003 f8bd 	bl	8007cfc <u8g2_SendBuffer>
}
 8004b82:	bf00      	nop
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	20000264 	.word	0x20000264
 8004b90:	20000268 	.word	0x20000268
 8004b94:	200001d0 	.word	0x200001d0

08004b98 <iconlist_initialize>:
#include "iconlist.h"

#define FRAMECOUNT 6

iconlist_t iconlist_initialize(item_icon_t pItems[], uint8_t nSize, cbk_t lpfnPainter, cbk_t lpfnHandler)
{
 8004b98:	b590      	push	{r4, r7, lr}
 8004b9a:	b0f9      	sub	sp, #484	; 0x1e4
 8004b9c:	af02      	add	r7, sp, #8
 8004b9e:	f507 74ec 	add.w	r4, r7, #472	; 0x1d8
 8004ba2:	f5a4 74e6 	sub.w	r4, r4, #460	; 0x1cc
 8004ba6:	6020      	str	r0, [r4, #0]
 8004ba8:	f507 70ec 	add.w	r0, r7, #472	; 0x1d8
 8004bac:	f5a0 70e8 	sub.w	r0, r0, #464	; 0x1d0
 8004bb0:	6001      	str	r1, [r0, #0]
 8004bb2:	4611      	mov	r1, r2
 8004bb4:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 8004bb8:	f5a2 72ec 	sub.w	r2, r2, #472	; 0x1d8
 8004bbc:	6013      	str	r3, [r2, #0]
 8004bbe:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8004bc2:	f2a3 13d1 	subw	r3, r3, #465	; 0x1d1
 8004bc6:	460a      	mov	r2, r1
 8004bc8:	701a      	strb	r2, [r3, #0]
    if (nSize == 0) {
 8004bca:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8004bce:	f2a3 13d1 	subw	r3, r3, #465	; 0x1d1
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d119      	bne.n	8004c0c <iconlist_initialize+0x74>
        iconlist_t m = {0};
 8004bd8:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8004bdc:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004be0:	4618      	mov	r0, r3
 8004be2:	23e0      	movs	r3, #224	; 0xe0
 8004be4:	461a      	mov	r2, r3
 8004be6:	2100      	movs	r1, #0
 8004be8:	f005 ff18 	bl	800aa1c <memset>
        return m;
 8004bec:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8004bf0:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8004bfa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004bfe:	4610      	mov	r0, r2
 8004c00:	4619      	mov	r1, r3
 8004c02:	23e0      	movs	r3, #224	; 0xe0
 8004c04:	461a      	mov	r2, r3
 8004c06:	f005 ff84 	bl	800ab12 <memcpy>
        .yIconUpDownOffset  = easing_create(EASING_MODE_NTIMES(2) | EASING_DIR_BACKANDFORTH, _easing_calc_OutQuad, 0, 4, EASING_INTERVAL_NONE),

    };

    return m;
}
 8004c0a:	e086      	b.n	8004d1a <iconlist_initialize+0x182>
    uint8_t nWidth  = CONFIG_SCREEN_WIDTH;
 8004c0c:	2380      	movs	r3, #128	; 0x80
 8004c0e:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7
    uint8_t nHeight = CONFIG_SCREEN_HEIGHT;
 8004c12:	2340      	movs	r3, #64	; 0x40
 8004c14:	f887 31d6 	strb.w	r3, [r7, #470]	; 0x1d6
    iconlist_t m = {
 8004c18:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004c1c:	22e0      	movs	r2, #224	; 0xe0
 8004c1e:	2100      	movs	r1, #0
 8004c20:	4618      	mov	r0, r3
 8004c22:	f005 fefb 	bl	800aa1c <memset>
 8004c26:	2301      	movs	r3, #1
 8004c28:	f887 30f4 	strb.w	r3, [r7, #244]	; 0xf4
        .lpfnPainter = lpfnPainter == 0 ? iconlist_callback_default_painter : lpfnPainter,
 8004c2c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8004c30:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d005      	beq.n	8004c46 <iconlist_initialize+0xae>
 8004c3a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8004c3e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	e000      	b.n	8004c48 <iconlist_initialize+0xb0>
 8004c46:	4b39      	ldr	r3, [pc, #228]	; (8004d2c <iconlist_initialize+0x194>)
    iconlist_t m = {
 8004c48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
        .lpfnHandler = lpfnHandler == 0 ? iconlist_callback_default_handler : lpfnHandler,
 8004c4c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d002      	beq.n	8004c5a <iconlist_initialize+0xc2>
 8004c54:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004c58:	e000      	b.n	8004c5c <iconlist_initialize+0xc4>
 8004c5a:	4b35      	ldr	r3, [pc, #212]	; (8004d30 <iconlist_initialize+0x198>)
    iconlist_t m = {
 8004c5c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004c60:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100
 8004c6a:	f897 31d6 	ldrb.w	r3, [r7, #470]	; 0x1d6
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
 8004c74:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8004c78:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004c82:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8004c86:	f2a3 13d1 	subw	r3, r3, #465	; 0x1d1
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	f887 3108 	strb.w	r3, [r7, #264]	; 0x108
        .hTitle = nHeight / 4,
 8004c90:	f897 31d6 	ldrb.w	r3, [r7, #470]	; 0x1d6
 8004c94:	089b      	lsrs	r3, r3, #2
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	ee07 3a90 	vmov	s15, r3
    iconlist_t m = {
 8004c9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ca0:	edc7 7a43 	vstr	s15, [r7, #268]	; 0x10c
        .yTitleOffset       = easing_create(EASING_MODE_DEFAULT, _easing_calc_Linear, 0, FRAMECOUNT, EASING_INTERVAL_NONE),
 8004ca4:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8004ca8:	2300      	movs	r3, #0
 8004caa:	9300      	str	r3, [sp, #0]
 8004cac:	2306      	movs	r3, #6
 8004cae:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8004d34 <iconlist_initialize+0x19c>
 8004cb2:	4a21      	ldr	r2, [pc, #132]	; (8004d38 <iconlist_initialize+0x1a0>)
 8004cb4:	2100      	movs	r1, #0
 8004cb6:	f002 f90f 	bl	8006ed8 <easing_create>
        .xIconOffset        = easing_create(EASING_MODE_DEFAULT, _easing_calc_OutCubic, 0, FRAMECOUNT, EASING_INTERVAL_NONE),
 8004cba:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	9300      	str	r3, [sp, #0]
 8004cc2:	2306      	movs	r3, #6
 8004cc4:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8004d34 <iconlist_initialize+0x19c>
 8004cc8:	4a1c      	ldr	r2, [pc, #112]	; (8004d3c <iconlist_initialize+0x1a4>)
 8004cca:	2100      	movs	r1, #0
 8004ccc:	f002 f904 	bl	8006ed8 <easing_create>
    iconlist_t m = {
 8004cd0:	2330      	movs	r3, #48	; 0x30
 8004cd2:	f887 3170 	strb.w	r3, [r7, #368]	; 0x170
        .xIconShakingOffset = easing_create(EASING_TIMES_SINGLE | EASING_DIR_BACKANDFORTH, _easing_calc_InOutCirc, 0, 4, EASING_INTERVAL_NONE),
 8004cd6:	f507 70ba 	add.w	r0, r7, #372	; 0x174
 8004cda:	2300      	movs	r3, #0
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	2304      	movs	r3, #4
 8004ce0:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8004d34 <iconlist_initialize+0x19c>
 8004ce4:	4a16      	ldr	r2, [pc, #88]	; (8004d40 <iconlist_initialize+0x1a8>)
 8004ce6:	2108      	movs	r1, #8
 8004ce8:	f002 f8f6 	bl	8006ed8 <easing_create>
        .yIconUpDownOffset  = easing_create(EASING_MODE_NTIMES(2) | EASING_DIR_BACKANDFORTH, _easing_calc_OutQuad, 0, 4, EASING_INTERVAL_NONE),
 8004cec:	f507 70d2 	add.w	r0, r7, #420	; 0x1a4
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	9300      	str	r3, [sp, #0]
 8004cf4:	2304      	movs	r3, #4
 8004cf6:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8004d34 <iconlist_initialize+0x19c>
 8004cfa:	4a12      	ldr	r2, [pc, #72]	; (8004d44 <iconlist_initialize+0x1ac>)
 8004cfc:	2129      	movs	r1, #41	; 0x29
 8004cfe:	f002 f8eb 	bl	8006ed8 <easing_create>
    return m;
 8004d02:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8004d06:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004d12:	22e0      	movs	r2, #224	; 0xe0
 8004d14:	4619      	mov	r1, r3
 8004d16:	f005 fefc 	bl	800ab12 <memcpy>
}
 8004d1a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8004d1e:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8004d22:	6818      	ldr	r0, [r3, #0]
 8004d24:	f507 77ee 	add.w	r7, r7, #476	; 0x1dc
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd90      	pop	{r4, r7, pc}
 8004d2c:	08004f2d 	.word	0x08004f2d
 8004d30:	08004d49 	.word	0x08004d49
 8004d34:	00000000 	.word	0x00000000
 8004d38:	0800681d 	.word	0x0800681d
 8004d3c:	080063f9 	.word	0x080063f9
 8004d40:	08006311 	.word	0x08006311
 8004d44:	0800685d 	.word	0x0800685d

08004d48 <iconlist_callback_default_handler>:

void iconlist_callback_default_handler(iconlist_t* p)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
    switch (key_scan()) {
 8004d50:	f002 fae6 	bl	8007320 <key_scan>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b03      	cmp	r3, #3
 8004d58:	d009      	beq.n	8004d6e <iconlist_callback_default_handler+0x26>
 8004d5a:	2b03      	cmp	r3, #3
 8004d5c:	dc0b      	bgt.n	8004d76 <iconlist_callback_default_handler+0x2e>
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d018      	beq.n	8004d94 <iconlist_callback_default_handler+0x4c>
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d107      	bne.n	8004d76 <iconlist_callback_default_handler+0x2e>
        case KEY_ID_NONE: break;
        case KEY_ID_PREV: iconlist_callback_handler_switch_prev(p); break;
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 f81c 	bl	8004da4 <iconlist_callback_handler_switch_prev>
 8004d6c:	e013      	b.n	8004d96 <iconlist_callback_default_handler+0x4e>
        case KEY_ID_NEXT: iconlist_callback_handler_switch_next(p); break;
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 f85e 	bl	8004e30 <iconlist_callback_handler_switch_next>
 8004d74:	e00f      	b.n	8004d96 <iconlist_callback_default_handler+0x4e>
        default: {
            println("%s", p->pItems[p->nSelectedIndex].title);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	691a      	ldr	r2, [r3, #16]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	7d5b      	ldrb	r3, [r3, #21]
 8004d7e:	011b      	lsls	r3, r3, #4
 8004d80:	4413      	add	r3, r2
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	4619      	mov	r1, r3
 8004d86:	4806      	ldr	r0, [pc, #24]	; (8004da0 <iconlist_callback_default_handler+0x58>)
 8004d88:	f005 fce2 	bl	800a750 <iprintf>
            iconlist_callback_handler_shake_selected(p);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 f897 	bl	8004ec0 <iconlist_callback_handler_shake_selected>
            break;
 8004d92:	e000      	b.n	8004d96 <iconlist_callback_default_handler+0x4e>
        case KEY_ID_NONE: break;
 8004d94:	bf00      	nop
        }
    }
}
 8004d96:	bf00      	nop
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	0800df1c 	.word	0x0800df1c

08004da4 <iconlist_callback_handler_switch_prev>:

void iconlist_callback_handler_switch_prev(iconlist_t* p)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
    if (p->nSelectedIndex > 0) {
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	7d5b      	ldrb	r3, [r3, #21]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d037      	beq.n	8004e24 <iconlist_callback_handler_switch_prev+0x80>
        // decrease selected index
        --p->nSelectedIndex;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	7d5b      	ldrb	r3, [r3, #21]
 8004db8:	3b01      	subs	r3, #1
 8004dba:	b2da      	uxtb	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	755a      	strb	r2, [r3, #21]
        // decrease offset
        easing_start_relative(&p->xIconOffset, -p->nIconSpace);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004dcc:	425b      	negs	r3, r3
 8004dce:	ee07 3a90 	vmov	s15, r3
 8004dd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dd6:	eeb0 0a67 	vmov.f32	s0, s15
 8004dda:	4610      	mov	r0, r2
 8004ddc:	f002 f92a 	bl	8007034 <easing_start_relative>
        easing_start_relative(&p->yTitleOffset, -p->hTitle);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f103 021c 	add.w	r2, r3, #28
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	edd3 7a06 	vldr	s15, [r3, #24]
 8004dec:	eef1 7a67 	vneg.f32	s15, s15
 8004df0:	eeb0 0a67 	vmov.f32	s0, s15
 8004df4:	4610      	mov	r0, r2
 8004df6:	f002 f91d 	bl	8007034 <easing_start_relative>
        // stop animation
        easing_stop(&p->xIconShakingOffset, 0);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	3380      	adds	r3, #128	; 0x80
 8004dfe:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8004e2c <iconlist_callback_handler_switch_prev+0x88>
 8004e02:	4618      	mov	r0, r3
 8004e04:	f002 fa04 	bl	8007210 <easing_stop>
        easing_stop(&p->yIconUpDownOffset, 0);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	33b0      	adds	r3, #176	; 0xb0
 8004e0c:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8004e2c <iconlist_callback_handler_switch_prev+0x88>
 8004e10:	4618      	mov	r0, r3
 8004e12:	f002 f9fd 	bl	8007210 <easing_stop>
        p->nShakingTimes = 0;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
        // repaint
        p->bRepaint = true;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	701a      	strb	r2, [r3, #0]
    }
}
 8004e24:	bf00      	nop
 8004e26:	3708      	adds	r7, #8
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	00000000 	.word	0x00000000

08004e30 <iconlist_callback_handler_switch_next>:

void iconlist_callback_handler_switch_next(iconlist_t* p)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
    if (p->nSelectedIndex < p->nSize - 1) {
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	7d5b      	ldrb	r3, [r3, #21]
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	7d1b      	ldrb	r3, [r3, #20]
 8004e42:	3b01      	subs	r3, #1
 8004e44:	429a      	cmp	r2, r3
 8004e46:	da34      	bge.n	8004eb2 <iconlist_callback_handler_switch_next+0x82>
        // increase selected index
        ++p->nSelectedIndex;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	7d5b      	ldrb	r3, [r3, #21]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	b2da      	uxtb	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	755a      	strb	r2, [r3, #21]
        // increase offset
        easing_start_relative(&p->xIconOffset, p->nIconSpace);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004e60:	ee07 3a90 	vmov	s15, r3
 8004e64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e68:	eeb0 0a67 	vmov.f32	s0, s15
 8004e6c:	4610      	mov	r0, r2
 8004e6e:	f002 f8e1 	bl	8007034 <easing_start_relative>
        easing_start_relative(&p->yTitleOffset, p->hTitle);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f103 021c 	add.w	r2, r3, #28
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	edd3 7a06 	vldr	s15, [r3, #24]
 8004e7e:	eeb0 0a67 	vmov.f32	s0, s15
 8004e82:	4610      	mov	r0, r2
 8004e84:	f002 f8d6 	bl	8007034 <easing_start_relative>
        // stop animation
        easing_stop(&p->xIconShakingOffset, 0);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	3380      	adds	r3, #128	; 0x80
 8004e8c:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8004ebc <iconlist_callback_handler_switch_next+0x8c>
 8004e90:	4618      	mov	r0, r3
 8004e92:	f002 f9bd 	bl	8007210 <easing_stop>
        easing_stop(&p->yIconUpDownOffset, 0);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	33b0      	adds	r3, #176	; 0xb0
 8004e9a:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8004ebc <iconlist_callback_handler_switch_next+0x8c>
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f002 f9b6 	bl	8007210 <easing_stop>
        p->nShakingTimes = 0;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
        // repaint
        p->bRepaint = true;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	701a      	strb	r2, [r3, #0]
    }
}
 8004eb2:	bf00      	nop
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	00000000 	.word	0x00000000

08004ec0 <iconlist_callback_handler_shake_selected>:

void iconlist_callback_handler_shake_selected(iconlist_t* p)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
    p->nShakingTimes = 3;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2203      	movs	r2, #3
 8004ecc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    p->bRepaint      = true;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	701a      	strb	r2, [r3, #0]
}
 8004ed6:	bf00      	nop
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
	...

08004ee4 <iconlist_callback_handler_updown_selected>:

void iconlist_callback_handler_updown_selected(iconlist_t* p)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
    easing_start_absolute(&p->yIconUpDownOffset, 0, -p->nIconSpace / 8);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	da00      	bge.n	8004efe <iconlist_callback_handler_updown_selected+0x1a>
 8004efc:	3307      	adds	r3, #7
 8004efe:	10db      	asrs	r3, r3, #3
 8004f00:	425b      	negs	r3, r3
 8004f02:	ee07 3a90 	vmov	s15, r3
 8004f06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f0a:	eef0 0a67 	vmov.f32	s1, s15
 8004f0e:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8004f28 <iconlist_callback_handler_updown_selected+0x44>
 8004f12:	4610      	mov	r0, r2
 8004f14:	f002 f832 	bl	8006f7c <easing_start_absolute>
    p->bRepaint = true;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	701a      	strb	r2, [r3, #0]
}
 8004f1e:	bf00      	nop
 8004f20:	3708      	adds	r7, #8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	00000000 	.word	0x00000000

08004f2c <iconlist_callback_default_painter>:

void iconlist_callback_default_painter(iconlist_t* p)
{
 8004f2c:	b5b0      	push	{r4, r5, r7, lr}
 8004f2e:	ed2d 8b02 	vpush	{d8}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af02      	add	r7, sp, #8
 8004f36:	6078      	str	r0, [r7, #4]
    // easing

    easing_update(&p->yTitleOffset);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	331c      	adds	r3, #28
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f002 f894 	bl	800706a <easing_update>
    easing_update(&p->xIconOffset);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	334c      	adds	r3, #76	; 0x4c
 8004f46:	4618      	mov	r0, r3
 8004f48:	f002 f88f 	bl	800706a <easing_update>
    easing_update(&p->xIconShakingOffset);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	3380      	adds	r3, #128	; 0x80
 8004f50:	4618      	mov	r0, r3
 8004f52:	f002 f88a 	bl	800706a <easing_update>
    easing_update(&p->yIconUpDownOffset);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	33b0      	adds	r3, #176	; 0xb0
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f002 f885 	bl	800706a <easing_update>

    if (p->nShakingTimes > 0 && easing_isok(&p->xIconShakingOffset)) {
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d044      	beq.n	8004ff4 <iconlist_callback_default_painter+0xc8>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	3380      	adds	r3, #128	; 0x80
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f002 f93c 	bl	80071ec <easing_isok>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d03c      	beq.n	8004ff4 <iconlist_callback_default_painter+0xc8>
        switch (p->nShakingTimes % 2) {
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8004f80:	f003 0301 	and.w	r3, r3, #1
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d002      	beq.n	8004f8e <iconlist_callback_default_painter+0x62>
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d014      	beq.n	8004fb6 <iconlist_callback_default_painter+0x8a>
 8004f8c:	e02a      	b.n	8004fe4 <iconlist_callback_default_painter+0xb8>
            case 0: easing_start_absolute(&p->xIconShakingOffset, 0, p->nIconSpace / 8); break;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004f9a:	08db      	lsrs	r3, r3, #3
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	ee07 3a90 	vmov	s15, r3
 8004fa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fa6:	eef0 0a67 	vmov.f32	s1, s15
 8004faa:	ed9f 0ab6 	vldr	s0, [pc, #728]	; 8005284 <iconlist_callback_default_painter+0x358>
 8004fae:	4610      	mov	r0, r2
 8004fb0:	f001 ffe4 	bl	8006f7c <easing_start_absolute>
 8004fb4:	e016      	b.n	8004fe4 <iconlist_callback_default_painter+0xb8>
            case 1: easing_start_absolute(&p->xIconShakingOffset, 0, -p->nIconSpace / 8); break;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	da00      	bge.n	8004fc8 <iconlist_callback_default_painter+0x9c>
 8004fc6:	3307      	adds	r3, #7
 8004fc8:	10db      	asrs	r3, r3, #3
 8004fca:	425b      	negs	r3, r3
 8004fcc:	ee07 3a90 	vmov	s15, r3
 8004fd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fd4:	eef0 0a67 	vmov.f32	s1, s15
 8004fd8:	ed9f 0aaa 	vldr	s0, [pc, #680]	; 8005284 <iconlist_callback_default_painter+0x358>
 8004fdc:	4610      	mov	r0, r2
 8004fde:	f001 ffcd 	bl	8006f7c <easing_start_absolute>
 8004fe2:	bf00      	nop
        }
        --p->nShakingTimes;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8004fea:	3b01      	subs	r3, #1
 8004fec:	b2da      	uxtb	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    }

    p->bRepaint =
        !(easing_isok(&p->yTitleOffset) &&
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	331c      	adds	r3, #28
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f002 f8f7 	bl	80071ec <easing_isok>
 8004ffe:	4603      	mov	r3, r0
 8005000:	f083 0301 	eor.w	r3, r3, #1
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d120      	bne.n	800504c <iconlist_callback_default_painter+0x120>
          easing_isok(&p->xIconOffset) &&
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	334c      	adds	r3, #76	; 0x4c
 800500e:	4618      	mov	r0, r3
 8005010:	f002 f8ec 	bl	80071ec <easing_isok>
 8005014:	4603      	mov	r3, r0
        !(easing_isok(&p->yTitleOffset) &&
 8005016:	f083 0301 	eor.w	r3, r3, #1
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b00      	cmp	r3, #0
 800501e:	d115      	bne.n	800504c <iconlist_callback_default_painter+0x120>
          easing_isok(&p->xIconShakingOffset) &&
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	3380      	adds	r3, #128	; 0x80
 8005024:	4618      	mov	r0, r3
 8005026:	f002 f8e1 	bl	80071ec <easing_isok>
 800502a:	4603      	mov	r3, r0
          easing_isok(&p->xIconOffset) &&
 800502c:	f083 0301 	eor.w	r3, r3, #1
 8005030:	b2db      	uxtb	r3, r3
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10a      	bne.n	800504c <iconlist_callback_default_painter+0x120>
          easing_isok(&p->yIconUpDownOffset));
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	33b0      	adds	r3, #176	; 0xb0
 800503a:	4618      	mov	r0, r3
 800503c:	f002 f8d6 	bl	80071ec <easing_isok>
 8005040:	4603      	mov	r3, r0
          easing_isok(&p->xIconShakingOffset) &&
 8005042:	f083 0301 	eor.w	r3, r3, #1
 8005046:	b2db      	uxtb	r3, r3
        !(easing_isok(&p->yTitleOffset) &&
 8005048:	2b00      	cmp	r3, #0
 800504a:	d001      	beq.n	8005050 <iconlist_callback_default_painter+0x124>
 800504c:	2301      	movs	r3, #1
 800504e:	e000      	b.n	8005052 <iconlist_callback_default_painter+0x126>
 8005050:	2300      	movs	r3, #0
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	b2da      	uxtb	r2, r3
    p->bRepaint =
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	701a      	strb	r2, [r3, #0]

    // new frame

    _clear();
 800505c:	488a      	ldr	r0, [pc, #552]	; (8005288 <iconlist_callback_default_painter+0x35c>)
 800505e:	f002 fdda 	bl	8007c16 <u8g2_ClearBuffer>

    // draw

    uint8_t index = easing_curpos(&p->xIconOffset) / p->nIconSpace;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	334c      	adds	r3, #76	; 0x4c
 8005066:	4618      	mov	r0, r3
 8005068:	f002 f8e4 	bl	8007234 <easing_curpos>
 800506c:	eef0 6a40 	vmov.f32	s13, s0
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005076:	ee07 3a90 	vmov	s15, r3
 800507a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800507e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005082:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005086:	edc7 7a00 	vstr	s15, [r7]
 800508a:	783b      	ldrb	r3, [r7, #0]
 800508c:	73fb      	strb	r3, [r7, #15]
    if (index > 0) --index;
 800508e:	7bfb      	ldrb	r3, [r7, #15]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d002      	beq.n	800509a <iconlist_callback_default_painter+0x16e>
 8005094:	7bfb      	ldrb	r3, [r7, #15]
 8005096:	3b01      	subs	r3, #1
 8005098:	73fb      	strb	r3, [r7, #15]
    int8_t offset = index * p->nIconSpace - easing_curpos(&p->xIconOffset);
 800509a:	7bfb      	ldrb	r3, [r7, #15]
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	f892 207c 	ldrb.w	r2, [r2, #124]	; 0x7c
 80050a2:	fb02 f303 	mul.w	r3, r2, r3
 80050a6:	ee07 3a90 	vmov	s15, r3
 80050aa:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	334c      	adds	r3, #76	; 0x4c
 80050b2:	4618      	mov	r0, r3
 80050b4:	f002 f8be 	bl	8007234 <easing_curpos>
 80050b8:	eef0 7a40 	vmov.f32	s15, s0
 80050bc:	ee78 7a67 	vsub.f32	s15, s16, s15
 80050c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050c4:	edc7 7a00 	vstr	s15, [r7]
 80050c8:	783b      	ldrb	r3, [r7, #0]
 80050ca:	73bb      	strb	r3, [r7, #14]
    while (index < p->nSize && offset < p->nWidth) {
 80050cc:	e0c4      	b.n	8005258 <iconlist_callback_default_painter+0x32c>
        // icon
        if (index == p->nSelectedIndex) {
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	7d5b      	ldrb	r3, [r3, #21]
 80050d2:	7bfa      	ldrb	r2, [r7, #15]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d148      	bne.n	800516a <iconlist_callback_default_painter+0x23e>
            u8g2_DrawXBMP(&u8g2, 46 + p->xIconShakingOffset.nCurrent + offset, p->yIconUpDownOffset.nCurrent + (p->nHeight - p->nIconSpace) / 2, p->pItems[index].nHeight, p->pItems[index].nWidth, p->pItems[index].buff);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80050de:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800528c <iconlist_callback_default_painter+0x360>
 80050e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050ea:	ee07 3a90 	vmov	s15, r3
 80050ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050fa:	ee17 3a90 	vmov	r3, s15
 80050fe:	b298      	uxth	r0, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	89db      	ldrh	r3, [r3, #14]
 800510a:	461a      	mov	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	0fda      	lsrs	r2, r3, #31
 8005116:	4413      	add	r3, r2
 8005118:	105b      	asrs	r3, r3, #1
 800511a:	ee07 3a90 	vmov	s15, r3
 800511e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005122:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005126:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800512a:	ee17 3a90 	vmov	r3, s15
 800512e:	b29c      	uxth	r4, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	691a      	ldr	r2, [r3, #16]
 8005134:	7bfb      	ldrb	r3, [r7, #15]
 8005136:	011b      	lsls	r3, r3, #4
 8005138:	4413      	add	r3, r2
 800513a:	7a5b      	ldrb	r3, [r3, #9]
 800513c:	b29d      	uxth	r5, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	691a      	ldr	r2, [r3, #16]
 8005142:	7bfb      	ldrb	r3, [r7, #15]
 8005144:	011b      	lsls	r3, r3, #4
 8005146:	4413      	add	r3, r2
 8005148:	7a1b      	ldrb	r3, [r3, #8]
 800514a:	b29b      	uxth	r3, r3
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	6911      	ldr	r1, [r2, #16]
 8005150:	7bfa      	ldrb	r2, [r7, #15]
 8005152:	0112      	lsls	r2, r2, #4
 8005154:	440a      	add	r2, r1
 8005156:	68d2      	ldr	r2, [r2, #12]
 8005158:	9201      	str	r2, [sp, #4]
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	462b      	mov	r3, r5
 800515e:	4622      	mov	r2, r4
 8005160:	4601      	mov	r1, r0
 8005162:	4849      	ldr	r0, [pc, #292]	; (8005288 <iconlist_callback_default_painter+0x35c>)
 8005164:	f002 fb1c 	bl	80077a0 <u8g2_DrawXBMP>
 8005168:	e02d      	b.n	80051c6 <iconlist_callback_default_painter+0x29a>
        } else {
            u8g2_DrawXBMP(&u8g2, 46 + offset, (p->nHeight - p->nIconSpace) / 2 + 5, p->pItems[index].nHeight, p->pItems[index].nWidth, p->pItems[index].buff);
 800516a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800516e:	b29b      	uxth	r3, r3
 8005170:	332e      	adds	r3, #46	; 0x2e
 8005172:	b298      	uxth	r0, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	89db      	ldrh	r3, [r3, #14]
 8005178:	461a      	mov	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	0fda      	lsrs	r2, r3, #31
 8005184:	4413      	add	r3, r2
 8005186:	105b      	asrs	r3, r3, #1
 8005188:	b29b      	uxth	r3, r3
 800518a:	3305      	adds	r3, #5
 800518c:	b29c      	uxth	r4, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	691a      	ldr	r2, [r3, #16]
 8005192:	7bfb      	ldrb	r3, [r7, #15]
 8005194:	011b      	lsls	r3, r3, #4
 8005196:	4413      	add	r3, r2
 8005198:	7a5b      	ldrb	r3, [r3, #9]
 800519a:	b29d      	uxth	r5, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	691a      	ldr	r2, [r3, #16]
 80051a0:	7bfb      	ldrb	r3, [r7, #15]
 80051a2:	011b      	lsls	r3, r3, #4
 80051a4:	4413      	add	r3, r2
 80051a6:	7a1b      	ldrb	r3, [r3, #8]
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	6911      	ldr	r1, [r2, #16]
 80051ae:	7bfa      	ldrb	r2, [r7, #15]
 80051b0:	0112      	lsls	r2, r2, #4
 80051b2:	440a      	add	r2, r1
 80051b4:	68d2      	ldr	r2, [r2, #12]
 80051b6:	9201      	str	r2, [sp, #4]
 80051b8:	9300      	str	r3, [sp, #0]
 80051ba:	462b      	mov	r3, r5
 80051bc:	4622      	mov	r2, r4
 80051be:	4601      	mov	r1, r0
 80051c0:	4831      	ldr	r0, [pc, #196]	; (8005288 <iconlist_callback_default_painter+0x35c>)
 80051c2:	f002 faed 	bl	80077a0 <u8g2_DrawXBMP>
        }
        // title
        u8g2_SetClipWindow(&u8g2, 0, 48, p->nWidth, p->nHeight);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	899a      	ldrh	r2, [r3, #12]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	89db      	ldrh	r3, [r3, #14]
 80051ce:	9300      	str	r3, [sp, #0]
 80051d0:	4613      	mov	r3, r2
 80051d2:	2230      	movs	r2, #48	; 0x30
 80051d4:	2100      	movs	r1, #0
 80051d6:	482c      	ldr	r0, [pc, #176]	; (8005288 <iconlist_callback_default_painter+0x35c>)
 80051d8:	f004 fcdd 	bl	8009b96 <u8g2_SetClipWindow>
        _draw_str((p->nWidth - _str_w_(p->pItems[index].title)) / 2, 62 - p->yTitleOffset.nCurrent + index * 16, p->pItems[index].title);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	899b      	ldrh	r3, [r3, #12]
 80051e0:	461c      	mov	r4, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	691a      	ldr	r2, [r3, #16]
 80051e6:	7bfb      	ldrb	r3, [r7, #15]
 80051e8:	011b      	lsls	r3, r3, #4
 80051ea:	4413      	add	r3, r2
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	4619      	mov	r1, r3
 80051f0:	4825      	ldr	r0, [pc, #148]	; (8005288 <iconlist_callback_default_painter+0x35c>)
 80051f2:	f003 fe51 	bl	8008e98 <u8g2_GetStrWidth>
 80051f6:	4603      	mov	r3, r0
 80051f8:	1ae3      	subs	r3, r4, r3
 80051fa:	0fda      	lsrs	r2, r3, #31
 80051fc:	4413      	add	r3, r2
 80051fe:	105b      	asrs	r3, r3, #1
 8005200:	b299      	uxth	r1, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005208:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005290 <iconlist_callback_default_painter+0x364>
 800520c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005210:	7bfb      	ldrb	r3, [r7, #15]
 8005212:	011b      	lsls	r3, r3, #4
 8005214:	ee07 3a90 	vmov	s15, r3
 8005218:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800521c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005220:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005224:	ee17 3a90 	vmov	r3, s15
 8005228:	b298      	uxth	r0, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	691a      	ldr	r2, [r3, #16]
 800522e:	7bfb      	ldrb	r3, [r7, #15]
 8005230:	011b      	lsls	r3, r3, #4
 8005232:	4413      	add	r3, r2
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	4602      	mov	r2, r0
 8005238:	4813      	ldr	r0, [pc, #76]	; (8005288 <iconlist_callback_default_painter+0x35c>)
 800523a:	f003 fd0d 	bl	8008c58 <u8g2_DrawStr>
        u8g2_SetMaxClipWindow(&u8g2);
 800523e:	4812      	ldr	r0, [pc, #72]	; (8005288 <iconlist_callback_default_painter+0x35c>)
 8005240:	f004 fc8a 	bl	8009b58 <u8g2_SetMaxClipWindow>

        ++index, offset += p->nIconSpace;
 8005244:	7bfb      	ldrb	r3, [r7, #15]
 8005246:	3301      	adds	r3, #1
 8005248:	73fb      	strb	r3, [r7, #15]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 8005250:	7bbb      	ldrb	r3, [r7, #14]
 8005252:	4413      	add	r3, r2
 8005254:	b2db      	uxtb	r3, r3
 8005256:	73bb      	strb	r3, [r7, #14]
    while (index < p->nSize && offset < p->nWidth) {
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	7d1b      	ldrb	r3, [r3, #20]
 800525c:	7bfa      	ldrb	r2, [r7, #15]
 800525e:	429a      	cmp	r2, r3
 8005260:	d206      	bcs.n	8005270 <iconlist_callback_default_painter+0x344>
 8005262:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	8992      	ldrh	r2, [r2, #12]
 800526a:	4293      	cmp	r3, r2
 800526c:	f6ff af2f 	blt.w	80050ce <iconlist_callback_default_painter+0x1a2>
    }

    // update screen

    _update();
 8005270:	4805      	ldr	r0, [pc, #20]	; (8005288 <iconlist_callback_default_painter+0x35c>)
 8005272:	f002 fd43 	bl	8007cfc <u8g2_SendBuffer>
}
 8005276:	bf00      	nop
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	ecbd 8b02 	vpop	{d8}
 8005280:	bdb0      	pop	{r4, r5, r7, pc}
 8005282:	bf00      	nop
 8005284:	00000000 	.word	0x00000000
 8005288:	200001d0 	.word	0x200001d0
 800528c:	42380000 	.word	0x42380000
 8005290:	42780000 	.word	0x42780000

08005294 <menulist_initialize>:
#define FRAMECOUNT 4

#define CORRECT(v) ((v - (uint8_t)v) > 0.5f)

menulist_t menulist_initialize(item_menu_t pItems[], uint8_t nSize, uint8_t nDisplyedCount, cbk_t lpfnPainter, cbk_t lpfnHandler)
{
 8005294:	b590      	push	{r4, r7, lr}
 8005296:	b0ff      	sub	sp, #508	; 0x1fc
 8005298:	af02      	add	r7, sp, #8
 800529a:	f507 74f8 	add.w	r4, r7, #496	; 0x1f0
 800529e:	f5a4 74f2 	sub.w	r4, r4, #484	; 0x1e4
 80052a2:	6020      	str	r0, [r4, #0]
 80052a4:	f507 70f8 	add.w	r0, r7, #496	; 0x1f0
 80052a8:	f5a0 70f4 	sub.w	r0, r0, #488	; 0x1e8
 80052ac:	6001      	str	r1, [r0, #0]
 80052ae:	4619      	mov	r1, r3
 80052b0:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80052b4:	f2a3 13e9 	subw	r3, r3, #489	; 0x1e9
 80052b8:	701a      	strb	r2, [r3, #0]
 80052ba:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80052be:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 80052c2:	460a      	mov	r2, r1
 80052c4:	701a      	strb	r2, [r3, #0]
    if (nSize == 0) {
 80052c6:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80052ca:	f2a3 13e9 	subw	r3, r3, #489	; 0x1e9
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d119      	bne.n	8005308 <menulist_initialize+0x74>
        menulist_t m = {0};
 80052d4:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80052d8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80052dc:	4618      	mov	r0, r3
 80052de:	23ec      	movs	r3, #236	; 0xec
 80052e0:	461a      	mov	r2, r3
 80052e2:	2100      	movs	r1, #0
 80052e4:	f005 fb9a 	bl	800aa1c <memset>
        return m;
 80052e8:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80052ec:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80052f6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80052fa:	4610      	mov	r0, r2
 80052fc:	4619      	mov	r1, r3
 80052fe:	23ec      	movs	r3, #236	; 0xec
 8005300:	461a      	mov	r2, r3
 8005302:	f005 fc06 	bl	800ab12 <memcpy>
    m.wMask.nCurrent = _str_w_(pItems[0].title);

    m.yPadding += (m.hLine - m.yPadding) / 2;

    return m;
}
 8005306:	e0da      	b.n	80054be <menulist_initialize+0x22a>
    if (nDisplyedCount == 0) nDisplyedCount = 1;
 8005308:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800530c:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d105      	bne.n	8005322 <menulist_initialize+0x8e>
 8005316:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800531a:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 800531e:	2201      	movs	r2, #1
 8005320:	701a      	strb	r2, [r3, #0]
    uint8_t nWidth  = CONFIG_SCREEN_WIDTH;
 8005322:	2380      	movs	r3, #128	; 0x80
 8005324:	f887 31ef 	strb.w	r3, [r7, #495]	; 0x1ef
    uint8_t nHeight = CONFIG_SCREEN_HEIGHT;
 8005328:	2340      	movs	r3, #64	; 0x40
 800532a:	f887 31ee 	strb.w	r3, [r7, #494]	; 0x1ee
    menulist_t m = {
 800532e:	2301      	movs	r3, #1
 8005330:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
        .lpfnPainter = lpfnPainter == 0 ? menulist_callback_default_painter : lpfnPainter,
 8005334:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005338:	2b00      	cmp	r3, #0
 800533a:	d002      	beq.n	8005342 <menulist_initialize+0xae>
 800533c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005340:	e000      	b.n	8005344 <menulist_initialize+0xb0>
 8005342:	4b63      	ldr	r3, [pc, #396]	; (80054d0 <menulist_initialize+0x23c>)
    menulist_t m = {
 8005344:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        .lpfnHandler = lpfnHandler == 0 ? menulist_callback_default_handler : lpfnHandler,
 8005348:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800534c:	2b00      	cmp	r3, #0
 800534e:	d002      	beq.n	8005356 <menulist_initialize+0xc2>
 8005350:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8005354:	e000      	b.n	8005358 <menulist_initialize+0xc4>
 8005356:	4b5f      	ldr	r3, [pc, #380]	; (80054d4 <menulist_initialize+0x240>)
    menulist_t m = {
 8005358:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800535c:	f897 31ef 	ldrb.w	r3, [r7, #495]	; 0x1ef
 8005360:	b29b      	uxth	r3, r3
 8005362:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
 8005366:	f897 31ee 	ldrb.w	r3, [r7, #494]	; 0x1ee
 800536a:	b29b      	uxth	r3, r3
 800536c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8005370:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8005374:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800537e:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8005382:	f2a3 13e9 	subw	r3, r3, #489	; 0x1e9
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
 800538c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8005390:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
        .hLine   = (easing_pos_t)nHeight / nDisplyedCount,
 800539a:	f897 31ee 	ldrb.w	r3, [r7, #494]	; 0x1ee
 800539e:	ee07 3a90 	vmov	s15, r3
 80053a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053a6:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80053aa:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	ee07 3a90 	vmov	s15, r3
 80053b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
    menulist_t m = {
 80053bc:	edc7 7a46 	vstr	s15, [r7, #280]	; 0x118
        .hSlider = (easing_pos_t)nHeight / nSize,
 80053c0:	f897 31ee 	ldrb.w	r3, [r7, #494]	; 0x1ee
 80053c4:	ee07 3a90 	vmov	s15, r3
 80053c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053cc:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80053d0:	f2a3 13e9 	subw	r3, r3, #489	; 0x1e9
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	ee07 3a90 	vmov	s15, r3
 80053da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053de:	eec6 7a87 	vdiv.f32	s15, s13, s14
    menulist_t m = {
 80053e2:	edc7 7a47 	vstr	s15, [r7, #284]	; 0x11c
 80053e6:	2300      	movs	r3, #0
 80053e8:	f887 3120 	strb.w	r3, [r7, #288]	; 0x120
 80053ec:	2300      	movs	r3, #0
 80053ee:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121
 80053f2:	2304      	movs	r3, #4
 80053f4:	f887 3122 	strb.w	r3, [r7, #290]	; 0x122
 80053f8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80053fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        .wMask = easing_create(EASING_MODE_DEFAULT, _easing_calc_OutCubic, 0, FRAMECOUNT, EASING_INTERVAL_NONE),
 8005400:	f507 7094 	add.w	r0, r7, #296	; 0x128
 8005404:	2300      	movs	r3, #0
 8005406:	9300      	str	r3, [sp, #0]
 8005408:	2304      	movs	r3, #4
 800540a:	ed9f 0a33 	vldr	s0, [pc, #204]	; 80054d8 <menulist_initialize+0x244>
 800540e:	4a33      	ldr	r2, [pc, #204]	; (80054dc <menulist_initialize+0x248>)
 8005410:	2100      	movs	r1, #0
 8005412:	f001 fd61 	bl	8006ed8 <easing_create>
        .yMask = easing_create(EASING_MODE_DEFAULT, _easing_calc_OutCubic, 0, FRAMECOUNT, EASING_INTERVAL_NONE),
 8005416:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800541a:	2300      	movs	r3, #0
 800541c:	9300      	str	r3, [sp, #0]
 800541e:	2304      	movs	r3, #4
 8005420:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 80054d8 <menulist_initialize+0x244>
 8005424:	4a2d      	ldr	r2, [pc, #180]	; (80054dc <menulist_initialize+0x248>)
 8005426:	2100      	movs	r1, #0
 8005428:	f001 fd56 	bl	8006ed8 <easing_create>
        .xSlider = nWidth - 2,
 800542c:	f897 31ef 	ldrb.w	r3, [r7, #495]	; 0x1ef
 8005430:	3b02      	subs	r3, #2
 8005432:	b2db      	uxtb	r3, r3
    menulist_t m = {
 8005434:	f887 3188 	strb.w	r3, [r7, #392]	; 0x188
        .ySlider      = easing_create(EASING_MODE_DEFAULT, _easing_calc_OutCubic, 0, FRAMECOUNT, EASING_INTERVAL_NONE),
 8005438:	f507 70c6 	add.w	r0, r7, #396	; 0x18c
 800543c:	2300      	movs	r3, #0
 800543e:	9300      	str	r3, [sp, #0]
 8005440:	2304      	movs	r3, #4
 8005442:	ed9f 0a25 	vldr	s0, [pc, #148]	; 80054d8 <menulist_initialize+0x244>
 8005446:	4a25      	ldr	r2, [pc, #148]	; (80054dc <menulist_initialize+0x248>)
 8005448:	2100      	movs	r1, #0
 800544a:	f001 fd45 	bl	8006ed8 <easing_create>
        .yTitleOffset = easing_create(EASING_MODE_DEFAULT, _easing_calc_Linear, 0, FRAMECOUNT, EASING_INTERVAL_NONE),
 800544e:	f507 70de 	add.w	r0, r7, #444	; 0x1bc
 8005452:	2300      	movs	r3, #0
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	2304      	movs	r3, #4
 8005458:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 80054d8 <menulist_initialize+0x244>
 800545c:	4a20      	ldr	r2, [pc, #128]	; (80054e0 <menulist_initialize+0x24c>)
 800545e:	2100      	movs	r1, #0
 8005460:	f001 fd3a 	bl	8006ed8 <easing_create>
    m.wMask.nCurrent = _str_w_(pItems[0].title);
 8005464:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8005468:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	4619      	mov	r1, r3
 8005472:	481c      	ldr	r0, [pc, #112]	; (80054e4 <menulist_initialize+0x250>)
 8005474:	f003 fd10 	bl	8008e98 <u8g2_GetStrWidth>
 8005478:	4603      	mov	r3, r0
 800547a:	ee07 3a90 	vmov	s15, r3
 800547e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005482:	edc7 7a50 	vstr	s15, [r7, #320]	; 0x140
    m.yPadding += (m.hLine - m.yPadding) / 2;
 8005486:	ed97 7a49 	vldr	s14, [r7, #292]	; 0x124
 800548a:	edd7 6a46 	vldr	s13, [r7, #280]	; 0x118
 800548e:	edd7 7a49 	vldr	s15, [r7, #292]	; 0x124
 8005492:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005496:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800549a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800549e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054a2:	edc7 7a49 	vstr	s15, [r7, #292]	; 0x124
    return m;
 80054a6:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80054aa:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4618      	mov	r0, r3
 80054b2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80054b6:	22ec      	movs	r2, #236	; 0xec
 80054b8:	4619      	mov	r1, r3
 80054ba:	f005 fb2a 	bl	800ab12 <memcpy>
}
 80054be:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80054c2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80054c6:	6818      	ldr	r0, [r3, #0]
 80054c8:	f507 77fa 	add.w	r7, r7, #500	; 0x1f4
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd90      	pop	{r4, r7, pc}
 80054d0:	08005b3d 	.word	0x08005b3d
 80054d4:	080054e9 	.word	0x080054e9
 80054d8:	00000000 	.word	0x00000000
 80054dc:	080063f9 	.word	0x080063f9
 80054e0:	0800681d 	.word	0x0800681d
 80054e4:	200001d0 	.word	0x200001d0

080054e8 <menulist_callback_default_handler>:

void menulist_callback_default_handler(menulist_t* p)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
    switch (key_scan()) {
 80054f0:	f001 ff16 	bl	8007320 <key_scan>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b03      	cmp	r3, #3
 80054f8:	d009      	beq.n	800550e <menulist_callback_default_handler+0x26>
 80054fa:	2b03      	cmp	r3, #3
 80054fc:	dc0b      	bgt.n	8005516 <menulist_callback_default_handler+0x2e>
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d01a      	beq.n	8005538 <menulist_callback_default_handler+0x50>
 8005502:	2b01      	cmp	r3, #1
 8005504:	d107      	bne.n	8005516 <menulist_callback_default_handler+0x2e>
        case KEY_ID_NONE: break;
        case KEY_ID_PREV: menulist_callback_handler_switch_prev(p); break;
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 f81e 	bl	8005548 <menulist_callback_handler_switch_prev>
 800550c:	e015      	b.n	800553a <menulist_callback_default_handler+0x52>
        case KEY_ID_NEXT: menulist_callback_handler_switch_next(p); break;
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 f890 	bl	8005634 <menulist_callback_handler_switch_next>
 8005514:	e011      	b.n	800553a <menulist_callback_default_handler+0x52>
        default: {
            println("%s", p->pItems[p->nSelectedIndex].title);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	691a      	ldr	r2, [r3, #16]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005520:	4619      	mov	r1, r3
 8005522:	460b      	mov	r3, r1
 8005524:	005b      	lsls	r3, r3, #1
 8005526:	440b      	add	r3, r1
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	4413      	add	r3, r2
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	4619      	mov	r1, r3
 8005530:	4804      	ldr	r0, [pc, #16]	; (8005544 <menulist_callback_default_handler+0x5c>)
 8005532:	f005 f90d 	bl	800a750 <iprintf>
            break;
 8005536:	e000      	b.n	800553a <menulist_callback_default_handler+0x52>
        case KEY_ID_NONE: break;
 8005538:	bf00      	nop
        }
    }
}
 800553a:	bf00      	nop
 800553c:	3708      	adds	r7, #8
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	0800df28 	.word	0x0800df28

08005548 <menulist_callback_handler_switch_prev>:

void menulist_callback_handler_switch_prev(menulist_t* p)
{
 8005548:	b590      	push	{r4, r7, lr}
 800554a:	ed2d 8b02 	vpush	{d8}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
    if (p->nSelectedIndex > 0) {
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800555a:	2b00      	cmp	r3, #0
 800555c:	d061      	beq.n	8005622 <menulist_callback_handler_switch_prev+0xda>
        // decrease selected index
        --p->nSelectedIndex;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005564:	3b01      	subs	r3, #1
 8005566:	b2da      	uxtb	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        // check if masked index at top
        if (p->nMaskedIndex > 0) {
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d015      	beq.n	80055a4 <menulist_callback_handler_switch_prev+0x5c>
            // decrease masked index
            --p->nMaskedIndex;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800557e:	3b01      	subs	r3, #1
 8005580:	b2da      	uxtb	r2, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f883 2020 	strb.w	r2, [r3, #32]
            // decrease mask ypos
            easing_start_relative(&p->yMask, -p->hLine);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f103 0258 	add.w	r2, r3, #88	; 0x58
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	edd3 7a06 	vldr	s15, [r3, #24]
 8005594:	eef1 7a67 	vneg.f32	s15, s15
 8005598:	eeb0 0a67 	vmov.f32	s0, s15
 800559c:	4610      	mov	r0, r2
 800559e:	f001 fd49 	bl	8007034 <easing_start_relative>
 80055a2:	e00c      	b.n	80055be <menulist_callback_handler_switch_prev+0x76>
        } else {
            // decrease text yoffset
            easing_start_relative(&p->yTitleOffset, -p->hLine);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	edd3 7a06 	vldr	s15, [r3, #24]
 80055b0:	eef1 7a67 	vneg.f32	s15, s15
 80055b4:	eeb0 0a67 	vmov.f32	s0, s15
 80055b8:	4610      	mov	r0, r2
 80055ba:	f001 fd3b 	bl	8007034 <easing_start_relative>
        }
        // decrease scroll ypos
        easing_start_relative(&p->ySlider, -p->hSlider);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f103 028c 	add.w	r2, r3, #140	; 0x8c
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	edd3 7a07 	vldr	s15, [r3, #28]
 80055ca:	eef1 7a67 	vneg.f32	s15, s15
 80055ce:	eeb0 0a67 	vmov.f32	s0, s15
 80055d2:	4610      	mov	r0, r2
 80055d4:	f001 fd2e 	bl	8007034 <easing_start_relative>
        // change mask width
        easing_start_absolute(&p->wMask, p->wMask.nCurrent, _str_w_(p->pItems[p->nSelectedIndex].title));
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	ed93 8a10 	vldr	s16, [r3, #64]	; 0x40
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	691a      	ldr	r2, [r3, #16]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80055ee:	4619      	mov	r1, r3
 80055f0:	460b      	mov	r3, r1
 80055f2:	005b      	lsls	r3, r3, #1
 80055f4:	440b      	add	r3, r1
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4413      	add	r3, r2
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	4619      	mov	r1, r3
 80055fe:	480c      	ldr	r0, [pc, #48]	; (8005630 <menulist_callback_handler_switch_prev+0xe8>)
 8005600:	f003 fc4a 	bl	8008e98 <u8g2_GetStrWidth>
 8005604:	4603      	mov	r3, r0
 8005606:	ee07 3a90 	vmov	s15, r3
 800560a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800560e:	eef0 0a67 	vmov.f32	s1, s15
 8005612:	eeb0 0a48 	vmov.f32	s0, s16
 8005616:	4620      	mov	r0, r4
 8005618:	f001 fcb0 	bl	8006f7c <easing_start_absolute>
        // repaint
        p->bRepaint = true;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	701a      	strb	r2, [r3, #0]
    }
}
 8005622:	bf00      	nop
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	ecbd 8b02 	vpop	{d8}
 800562c:	bd90      	pop	{r4, r7, pc}
 800562e:	bf00      	nop
 8005630:	200001d0 	.word	0x200001d0

08005634 <menulist_callback_handler_switch_next>:

void menulist_callback_handler_switch_next(menulist_t* p)
{
 8005634:	b590      	push	{r4, r7, lr}
 8005636:	ed2d 8b02 	vpush	{d8}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
    if (p->nSelectedIndex < p->nSize - 1) {
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005646:	461a      	mov	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	7d1b      	ldrb	r3, [r3, #20]
 800564c:	3b01      	subs	r3, #1
 800564e:	429a      	cmp	r2, r3
 8005650:	da5f      	bge.n	8005712 <menulist_callback_handler_switch_next+0xde>
        // increase selected index
        ++p->nSelectedIndex;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005658:	3301      	adds	r3, #1
 800565a:	b2da      	uxtb	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        // check if masked index at bottom
        if (p->nMaskedIndex < p->nDisplyedCount - 1) {
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005668:	461a      	mov	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	7d5b      	ldrb	r3, [r3, #21]
 800566e:	3b01      	subs	r3, #1
 8005670:	429a      	cmp	r2, r3
 8005672:	da13      	bge.n	800569c <menulist_callback_handler_switch_next+0x68>
            // increase masked index
            ++p->nMaskedIndex;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f893 3020 	ldrb.w	r3, [r3, #32]
 800567a:	3301      	adds	r3, #1
 800567c:	b2da      	uxtb	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f883 2020 	strb.w	r2, [r3, #32]
            // increase mask ypos
            easing_start_relative(&p->yMask, p->hLine);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f103 0258 	add.w	r2, r3, #88	; 0x58
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	edd3 7a06 	vldr	s15, [r3, #24]
 8005690:	eeb0 0a67 	vmov.f32	s0, s15
 8005694:	4610      	mov	r0, r2
 8005696:	f001 fccd 	bl	8007034 <easing_start_relative>
 800569a:	e00a      	b.n	80056b2 <menulist_callback_handler_switch_next+0x7e>
        } else {
            // increase text yoffset
            easing_start_relative(&p->yTitleOffset, p->hLine);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	edd3 7a06 	vldr	s15, [r3, #24]
 80056a8:	eeb0 0a67 	vmov.f32	s0, s15
 80056ac:	4610      	mov	r0, r2
 80056ae:	f001 fcc1 	bl	8007034 <easing_start_relative>
        }
        // increase scroll ypos
        easing_start_relative(&p->ySlider, p->hSlider);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f103 028c 	add.w	r2, r3, #140	; 0x8c
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	edd3 7a07 	vldr	s15, [r3, #28]
 80056be:	eeb0 0a67 	vmov.f32	s0, s15
 80056c2:	4610      	mov	r0, r2
 80056c4:	f001 fcb6 	bl	8007034 <easing_start_relative>
        // change mask width
        easing_start_absolute(&p->wMask, p->wMask.nCurrent, _str_w_(p->pItems[p->nSelectedIndex].title));
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	ed93 8a10 	vldr	s16, [r3, #64]	; 0x40
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	691a      	ldr	r2, [r3, #16]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80056de:	4619      	mov	r1, r3
 80056e0:	460b      	mov	r3, r1
 80056e2:	005b      	lsls	r3, r3, #1
 80056e4:	440b      	add	r3, r1
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4413      	add	r3, r2
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	4619      	mov	r1, r3
 80056ee:	480c      	ldr	r0, [pc, #48]	; (8005720 <menulist_callback_handler_switch_next+0xec>)
 80056f0:	f003 fbd2 	bl	8008e98 <u8g2_GetStrWidth>
 80056f4:	4603      	mov	r3, r0
 80056f6:	ee07 3a90 	vmov	s15, r3
 80056fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056fe:	eef0 0a67 	vmov.f32	s1, s15
 8005702:	eeb0 0a48 	vmov.f32	s0, s16
 8005706:	4620      	mov	r0, r4
 8005708:	f001 fc38 	bl	8006f7c <easing_start_absolute>
        // repaint
        p->bRepaint = true;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	701a      	strb	r2, [r3, #0]
    }
}
 8005712:	bf00      	nop
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	ecbd 8b02 	vpop	{d8}
 800571c:	bd90      	pop	{r4, r7, pc}
 800571e:	bf00      	nop
 8005720:	200001d0 	.word	0x200001d0

08005724 <menulist_callback_painter_update_easing>:

void menulist_callback_painter_update_easing(menulist_t* p)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
    easing_update(&p->wMask);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	3328      	adds	r3, #40	; 0x28
 8005730:	4618      	mov	r0, r3
 8005732:	f001 fc9a 	bl	800706a <easing_update>
    easing_update(&p->yMask);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	3358      	adds	r3, #88	; 0x58
 800573a:	4618      	mov	r0, r3
 800573c:	f001 fc95 	bl	800706a <easing_update>
    easing_update(&p->yTitleOffset);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	33bc      	adds	r3, #188	; 0xbc
 8005744:	4618      	mov	r0, r3
 8005746:	f001 fc90 	bl	800706a <easing_update>
    easing_update(&p->ySlider);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	338c      	adds	r3, #140	; 0x8c
 800574e:	4618      	mov	r0, r3
 8005750:	f001 fc8b 	bl	800706a <easing_update>

    p->bRepaint =
        !(easing_isok(&p->wMask) &&
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	3328      	adds	r3, #40	; 0x28
 8005758:	4618      	mov	r0, r3
 800575a:	f001 fd47 	bl	80071ec <easing_isok>
 800575e:	4603      	mov	r3, r0
 8005760:	f083 0301 	eor.w	r3, r3, #1
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d120      	bne.n	80057ac <menulist_callback_painter_update_easing+0x88>
          easing_isok(&p->yMask) &&
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	3358      	adds	r3, #88	; 0x58
 800576e:	4618      	mov	r0, r3
 8005770:	f001 fd3c 	bl	80071ec <easing_isok>
 8005774:	4603      	mov	r3, r0
        !(easing_isok(&p->wMask) &&
 8005776:	f083 0301 	eor.w	r3, r3, #1
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b00      	cmp	r3, #0
 800577e:	d115      	bne.n	80057ac <menulist_callback_painter_update_easing+0x88>
          easing_isok(&p->yTitleOffset) &&
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	33bc      	adds	r3, #188	; 0xbc
 8005784:	4618      	mov	r0, r3
 8005786:	f001 fd31 	bl	80071ec <easing_isok>
 800578a:	4603      	mov	r3, r0
          easing_isok(&p->yMask) &&
 800578c:	f083 0301 	eor.w	r3, r3, #1
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10a      	bne.n	80057ac <menulist_callback_painter_update_easing+0x88>
          easing_isok(&p->ySlider));
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	338c      	adds	r3, #140	; 0x8c
 800579a:	4618      	mov	r0, r3
 800579c:	f001 fd26 	bl	80071ec <easing_isok>
 80057a0:	4603      	mov	r3, r0
          easing_isok(&p->yTitleOffset) &&
 80057a2:	f083 0301 	eor.w	r3, r3, #1
 80057a6:	b2db      	uxtb	r3, r3
        !(easing_isok(&p->wMask) &&
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d001      	beq.n	80057b0 <menulist_callback_painter_update_easing+0x8c>
 80057ac:	2301      	movs	r3, #1
 80057ae:	e000      	b.n	80057b2 <menulist_callback_painter_update_easing+0x8e>
 80057b0:	2300      	movs	r3, #0
 80057b2:	f003 0301 	and.w	r3, r3, #1
 80057b6:	b2da      	uxtb	r2, r3
    p->bRepaint =
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	701a      	strb	r2, [r3, #0]
}
 80057bc:	bf00      	nop
 80057be:	3708      	adds	r7, #8
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <menulist_callback_painter_draw_items>:

void menulist_callback_painter_draw_items(menulist_t* p)
{
 80057c4:	b590      	push	{r4, r7, lr}
 80057c6:	ed2d 8b02 	vpush	{d8}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
    // 虚表绘制:
    uint8_t      index    = easing_curpos(&p->yTitleOffset) / p->hLine;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	33bc      	adds	r3, #188	; 0xbc
 80057d4:	4618      	mov	r0, r3
 80057d6:	f001 fd2d 	bl	8007234 <easing_curpos>
 80057da:	eef0 6a40 	vmov.f32	s13, s0
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	ed93 7a06 	vldr	s14, [r3, #24]
 80057e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057ec:	edc7 7a00 	vstr	s15, [r7]
 80057f0:	783b      	ldrb	r3, [r7, #0]
 80057f2:	73fb      	strb	r3, [r7, #15]
    easing_pos_t y_offset = index * p->hLine - easing_curpos(&p->yTitleOffset);
 80057f4:	7bfb      	ldrb	r3, [r7, #15]
 80057f6:	ee07 3a90 	vmov	s15, r3
 80057fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	edd3 7a06 	vldr	s15, [r3, #24]
 8005804:	ee27 8a27 	vmul.f32	s16, s14, s15
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	33bc      	adds	r3, #188	; 0xbc
 800580c:	4618      	mov	r0, r3
 800580e:	f001 fd11 	bl	8007234 <easing_curpos>
 8005812:	eef0 7a40 	vmov.f32	s15, s0
 8005816:	ee78 7a67 	vsub.f32	s15, s16, s15
 800581a:	edc7 7a02 	vstr	s15, [r7, #8]
    while (index < p->nSize && y_offset < p->nHeight) {
 800581e:	e029      	b.n	8005874 <menulist_callback_painter_draw_items+0xb0>
        _draw_str(p->xPadding, y_offset + p->yPadding, p->pItems[index].title);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005826:	b298      	uxth	r0, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800582e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005832:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005836:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800583a:	ee17 3a90 	vmov	r3, s15
 800583e:	b29c      	uxth	r4, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6919      	ldr	r1, [r3, #16]
 8005844:	7bfa      	ldrb	r2, [r7, #15]
 8005846:	4613      	mov	r3, r2
 8005848:	005b      	lsls	r3, r3, #1
 800584a:	4413      	add	r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	440b      	add	r3, r1
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	4622      	mov	r2, r4
 8005854:	4601      	mov	r1, r0
 8005856:	4813      	ldr	r0, [pc, #76]	; (80058a4 <menulist_callback_painter_draw_items+0xe0>)
 8005858:	f003 f9fe 	bl	8008c58 <u8g2_DrawStr>
        ++index, y_offset += p->hLine;
 800585c:	7bfb      	ldrb	r3, [r7, #15]
 800585e:	3301      	adds	r3, #1
 8005860:	73fb      	strb	r3, [r7, #15]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	edd3 7a06 	vldr	s15, [r3, #24]
 8005868:	ed97 7a02 	vldr	s14, [r7, #8]
 800586c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005870:	edc7 7a02 	vstr	s15, [r7, #8]
    while (index < p->nSize && y_offset < p->nHeight) {
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	7d1b      	ldrb	r3, [r3, #20]
 8005878:	7bfa      	ldrb	r2, [r7, #15]
 800587a:	429a      	cmp	r2, r3
 800587c:	d20c      	bcs.n	8005898 <menulist_callback_painter_draw_items+0xd4>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	89db      	ldrh	r3, [r3, #14]
 8005882:	ee07 3a90 	vmov	s15, r3
 8005886:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800588a:	ed97 7a02 	vldr	s14, [r7, #8]
 800588e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005896:	d4c3      	bmi.n	8005820 <menulist_callback_painter_draw_items+0x5c>
    }
}
 8005898:	bf00      	nop
 800589a:	3714      	adds	r7, #20
 800589c:	46bd      	mov	sp, r7
 800589e:	ecbd 8b02 	vpop	{d8}
 80058a2:	bd90      	pop	{r4, r7, pc}
 80058a4:	200001d0 	.word	0x200001d0

080058a8 <menulist_callback_painter_draw_scroll>:

void menulist_callback_painter_draw_scroll(menulist_t* p)
{
 80058a8:	b590      	push	{r4, r7, lr}
 80058aa:	ed2d 8b02 	vpush	{d8}
 80058ae:	b087      	sub	sp, #28
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
    _draw_vline(p->xSlider, 0, p->nHeight);  // 轴
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80058ba:	b299      	uxth	r1, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	89db      	ldrh	r3, [r3, #14]
 80058c0:	2200      	movs	r2, #0
 80058c2:	4862      	ldr	r0, [pc, #392]	; (8005a4c <menulist_callback_painter_draw_scroll+0x1a4>)
 80058c4:	f003 fc0f 	bl	80090e6 <u8g2_DrawVLine>

    easing_pos_t y = 0;
 80058c8:	f04f 0300 	mov.w	r3, #0
 80058cc:	617b      	str	r3, [r7, #20]

    for (uint8_t i = 0; i < p->nSize; ++i) {  // 刻度
 80058ce:	2300      	movs	r3, #0
 80058d0:	74fb      	strb	r3, [r7, #19]
 80058d2:	e02d      	b.n	8005930 <menulist_callback_painter_draw_scroll+0x88>
        _draw_pixel(p->xSlider - 1, y);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80058da:	b29b      	uxth	r3, r3
 80058dc:	3b01      	subs	r3, #1
 80058de:	b29b      	uxth	r3, r3
 80058e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80058e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058e8:	ee17 2a90 	vmov	r2, s15
 80058ec:	b292      	uxth	r2, r2
 80058ee:	4619      	mov	r1, r3
 80058f0:	4856      	ldr	r0, [pc, #344]	; (8005a4c <menulist_callback_painter_draw_scroll+0x1a4>)
 80058f2:	f003 fc11 	bl	8009118 <u8g2_DrawPixel>
        _draw_pixel(p->xSlider + 1, y);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	3301      	adds	r3, #1
 8005900:	b29b      	uxth	r3, r3
 8005902:	edd7 7a05 	vldr	s15, [r7, #20]
 8005906:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800590a:	ee17 2a90 	vmov	r2, s15
 800590e:	b292      	uxth	r2, r2
 8005910:	4619      	mov	r1, r3
 8005912:	484e      	ldr	r0, [pc, #312]	; (8005a4c <menulist_callback_painter_draw_scroll+0x1a4>)
 8005914:	f003 fc00 	bl	8009118 <u8g2_DrawPixel>
        y += p->hSlider;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	edd3 7a07 	vldr	s15, [r3, #28]
 800591e:	ed97 7a05 	vldr	s14, [r7, #20]
 8005922:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005926:	edc7 7a05 	vstr	s15, [r7, #20]
    for (uint8_t i = 0; i < p->nSize; ++i) {  // 刻度
 800592a:	7cfb      	ldrb	r3, [r7, #19]
 800592c:	3301      	adds	r3, #1
 800592e:	74fb      	strb	r3, [r7, #19]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	7d1b      	ldrb	r3, [r3, #20]
 8005934:	7cfa      	ldrb	r2, [r7, #19]
 8005936:	429a      	cmp	r2, r3
 8005938:	d3cc      	bcc.n	80058d4 <menulist_callback_painter_draw_scroll+0x2c>
    }
    _draw_pixel(p->xSlider - 1, p->nHeight - 1);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8005940:	b29b      	uxth	r3, r3
 8005942:	3b01      	subs	r3, #1
 8005944:	b299      	uxth	r1, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	89db      	ldrh	r3, [r3, #14]
 800594a:	3b01      	subs	r3, #1
 800594c:	b29b      	uxth	r3, r3
 800594e:	461a      	mov	r2, r3
 8005950:	483e      	ldr	r0, [pc, #248]	; (8005a4c <menulist_callback_painter_draw_scroll+0x1a4>)
 8005952:	f003 fbe1 	bl	8009118 <u8g2_DrawPixel>
    _draw_pixel(p->xSlider + 1, p->nHeight - 1);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800595c:	b29b      	uxth	r3, r3
 800595e:	3301      	adds	r3, #1
 8005960:	b299      	uxth	r1, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	89db      	ldrh	r3, [r3, #14]
 8005966:	3b01      	subs	r3, #1
 8005968:	b29b      	uxth	r3, r3
 800596a:	461a      	mov	r2, r3
 800596c:	4837      	ldr	r0, [pc, #220]	; (8005a4c <menulist_callback_painter_draw_scroll+0x1a4>)
 800596e:	f003 fbd3 	bl	8009118 <u8g2_DrawPixel>

    easing_pos_t h = p->hSlider + CORRECT(easing_curpos(&p->ySlider));
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	ed93 8a07 	vldr	s16, [r3, #28]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	338c      	adds	r3, #140	; 0x8c
 800597c:	4618      	mov	r0, r3
 800597e:	f001 fc59 	bl	8007234 <easing_curpos>
 8005982:	eef0 8a40 	vmov.f32	s17, s0
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	338c      	adds	r3, #140	; 0x8c
 800598a:	4618      	mov	r0, r3
 800598c:	f001 fc52 	bl	8007234 <easing_curpos>
 8005990:	eef0 7a40 	vmov.f32	s15, s0
 8005994:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005998:	edc7 7a00 	vstr	s15, [r7]
 800599c:	783b      	ldrb	r3, [r7, #0]
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	ee07 3a90 	vmov	s15, r3
 80059a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059a8:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80059ac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80059b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059b8:	dd02      	ble.n	80059c0 <menulist_callback_painter_draw_scroll+0x118>
 80059ba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80059be:	e001      	b.n	80059c4 <menulist_callback_painter_draw_scroll+0x11c>
 80059c0:	eddf 7a23 	vldr	s15, [pc, #140]	; 8005a50 <menulist_callback_painter_draw_scroll+0x1a8>
 80059c4:	ee77 7a88 	vadd.f32	s15, s15, s16
 80059c8:	edc7 7a03 	vstr	s15, [r7, #12]
    _draw_vline(p->xSlider - 1, easing_curpos(&p->ySlider), h);  // 滑块
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	3b01      	subs	r3, #1
 80059d6:	b29c      	uxth	r4, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	338c      	adds	r3, #140	; 0x8c
 80059dc:	4618      	mov	r0, r3
 80059de:	f001 fc29 	bl	8007234 <easing_curpos>
 80059e2:	eef0 7a40 	vmov.f32	s15, s0
 80059e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059ea:	ee17 3a90 	vmov	r3, s15
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80059f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059f8:	ee17 3a90 	vmov	r3, s15
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	4621      	mov	r1, r4
 8005a00:	4812      	ldr	r0, [pc, #72]	; (8005a4c <menulist_callback_painter_draw_scroll+0x1a4>)
 8005a02:	f003 fb70 	bl	80090e6 <u8g2_DrawVLine>
    _draw_vline(p->xSlider + 1, easing_curpos(&p->ySlider), h);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	3301      	adds	r3, #1
 8005a10:	b29c      	uxth	r4, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	338c      	adds	r3, #140	; 0x8c
 8005a16:	4618      	mov	r0, r3
 8005a18:	f001 fc0c 	bl	8007234 <easing_curpos>
 8005a1c:	eef0 7a40 	vmov.f32	s15, s0
 8005a20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a24:	ee17 3a90 	vmov	r3, s15
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8005a2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a32:	ee17 3a90 	vmov	r3, s15
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	4621      	mov	r1, r4
 8005a3a:	4804      	ldr	r0, [pc, #16]	; (8005a4c <menulist_callback_painter_draw_scroll+0x1a4>)
 8005a3c:	f003 fb53 	bl	80090e6 <u8g2_DrawVLine>
}
 8005a40:	bf00      	nop
 8005a42:	371c      	adds	r7, #28
 8005a44:	46bd      	mov	sp, r7
 8005a46:	ecbd 8b02 	vpop	{d8}
 8005a4a:	bd90      	pop	{r4, r7, pc}
 8005a4c:	200001d0 	.word	0x200001d0
 8005a50:	00000000 	.word	0x00000000

08005a54 <menulist_callback_painter_draw_item_mask>:

void menulist_callback_painter_draw_item_mask(menulist_t* p)
{
 8005a54:	b5b0      	push	{r4, r5, r7, lr}
 8005a56:	ed2d 8b02 	vpush	{d8}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af02      	add	r7, sp, #8
 8005a5e:	6078      	str	r0, [r7, #4]
    _set_color(2);
 8005a60:	2102      	movs	r1, #2
 8005a62:	4834      	ldr	r0, [pc, #208]	; (8005b34 <menulist_callback_painter_draw_item_mask+0xe0>)
 8005a64:	f003 fb8b 	bl	800917e <u8g2_SetDrawColor>
    _draw_rounded_rect(0, easing_curpos(&p->yMask), easing_curpos(&p->wMask) + p->xPadding * 2, p->hLine + CORRECT(easing_curpos(&p->yMask)), 1);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	3358      	adds	r3, #88	; 0x58
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f001 fbe1 	bl	8007234 <easing_curpos>
 8005a72:	eef0 7a40 	vmov.f32	s15, s0
 8005a76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a7a:	ee17 3a90 	vmov	r3, s15
 8005a7e:	b29c      	uxth	r4, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	3328      	adds	r3, #40	; 0x28
 8005a84:	4618      	mov	r0, r3
 8005a86:	f001 fbd5 	bl	8007234 <easing_curpos>
 8005a8a:	eeb0 7a40 	vmov.f32	s14, s0
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005a94:	005b      	lsls	r3, r3, #1
 8005a96:	ee07 3a90 	vmov	s15, r3
 8005a9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005aa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005aa6:	ee17 3a90 	vmov	r3, s15
 8005aaa:	b29d      	uxth	r5, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	ed93 8a06 	vldr	s16, [r3, #24]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	3358      	adds	r3, #88	; 0x58
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f001 fbbc 	bl	8007234 <easing_curpos>
 8005abc:	eef0 8a40 	vmov.f32	s17, s0
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	3358      	adds	r3, #88	; 0x58
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f001 fbb5 	bl	8007234 <easing_curpos>
 8005aca:	eef0 7a40 	vmov.f32	s15, s0
 8005ace:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ad2:	edc7 7a00 	vstr	s15, [r7]
 8005ad6:	783b      	ldrb	r3, [r7, #0]
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	ee07 3a90 	vmov	s15, r3
 8005ade:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ae2:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8005ae6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005aea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005af2:	dd02      	ble.n	8005afa <menulist_callback_painter_draw_item_mask+0xa6>
 8005af4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005af8:	e001      	b.n	8005afe <menulist_callback_painter_draw_item_mask+0xaa>
 8005afa:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8005b38 <menulist_callback_painter_draw_item_mask+0xe4>
 8005afe:	ee77 7a88 	vadd.f32	s15, s15, s16
 8005b02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b06:	ee17 3a90 	vmov	r3, s15
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	9201      	str	r2, [sp, #4]
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	462b      	mov	r3, r5
 8005b14:	4622      	mov	r2, r4
 8005b16:	2100      	movs	r1, #0
 8005b18:	4806      	ldr	r0, [pc, #24]	; (8005b34 <menulist_callback_painter_draw_item_mask+0xe0>)
 8005b1a:	f001 ff17 	bl	800794c <u8g2_DrawRBox>
    _set_color(1);
 8005b1e:	2101      	movs	r1, #1
 8005b20:	4804      	ldr	r0, [pc, #16]	; (8005b34 <menulist_callback_painter_draw_item_mask+0xe0>)
 8005b22:	f003 fb2c 	bl	800917e <u8g2_SetDrawColor>
}
 8005b26:	bf00      	nop
 8005b28:	3708      	adds	r7, #8
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	ecbd 8b02 	vpop	{d8}
 8005b30:	bdb0      	pop	{r4, r5, r7, pc}
 8005b32:	bf00      	nop
 8005b34:	200001d0 	.word	0x200001d0
 8005b38:	00000000 	.word	0x00000000

08005b3c <menulist_callback_default_painter>:

void menulist_callback_default_painter(menulist_t* p)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
    // easing

    menulist_callback_painter_update_easing(p);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f7ff fded 	bl	8005724 <menulist_callback_painter_update_easing>

    // new frame

    _clear();
 8005b4a:	4809      	ldr	r0, [pc, #36]	; (8005b70 <menulist_callback_default_painter+0x34>)
 8005b4c:	f002 f863 	bl	8007c16 <u8g2_ClearBuffer>

    // title

    menulist_callback_painter_draw_items(p);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f7ff fe37 	bl	80057c4 <menulist_callback_painter_draw_items>

    // scroll

    menulist_callback_painter_draw_scroll(p);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f7ff fea6 	bl	80058a8 <menulist_callback_painter_draw_scroll>

    // mask

    menulist_callback_painter_draw_item_mask(p);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f7ff ff79 	bl	8005a54 <menulist_callback_painter_draw_item_mask>

    // update screen

    _update();
 8005b62:	4803      	ldr	r0, [pc, #12]	; (8005b70 <menulist_callback_default_painter+0x34>)
 8005b64:	f002 f8ca 	bl	8007cfc <u8g2_SendBuffer>
}
 8005b68:	bf00      	nop
 8005b6a:	3708      	adds	r7, #8
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	200001d0 	.word	0x200001d0

08005b74 <textedit_initialize>:
texteditor_t textedit_initialize(
    cbk_t   lpfnPainter,
    cbk_t   lpfnHandler,
    char*   szContent,
    uint8_t nContentSize)
{
 8005b74:	b5b0      	push	{r4, r5, r7, lr}
 8005b76:	b090      	sub	sp, #64	; 0x40
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	607a      	str	r2, [r7, #4]
 8005b80:	603b      	str	r3, [r7, #0]
    texteditor_t m = {
 8005b82:	f107 0314 	add.w	r3, r7, #20
 8005b86:	222c      	movs	r2, #44	; 0x2c
 8005b88:	2100      	movs	r1, #0
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f004 ff46 	bl	800aa1c <memset>
        .lpfnPainter    = lpfnPainter == 0 ? texteditor_callback_default_painter : lpfnPainter,
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d001      	beq.n	8005b9a <textedit_initialize+0x26>
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	e000      	b.n	8005b9c <textedit_initialize+0x28>
 8005b9a:	4b22      	ldr	r3, [pc, #136]	; (8005c24 <textedit_initialize+0xb0>)
    texteditor_t m = {
 8005b9c:	61bb      	str	r3, [r7, #24]
        .lpfnHandler    = lpfnHandler == 0 ? texteditor_callback_default_handler : lpfnHandler,
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d001      	beq.n	8005ba8 <textedit_initialize+0x34>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	e000      	b.n	8005baa <textedit_initialize+0x36>
 8005ba8:	4b1f      	ldr	r3, [pc, #124]	; (8005c28 <textedit_initialize+0xb4>)
    texteditor_t m = {
 8005baa:	61fb      	str	r3, [r7, #28]
 8005bac:	2380      	movs	r3, #128	; 0x80
 8005bae:	f887 3020 	strb.w	r3, [r7, #32]
 8005bb2:	2340      	movs	r3, #64	; 0x40
 8005bb4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8005bb8:	4b1c      	ldr	r3, [pc, #112]	; (8005c2c <textedit_initialize+0xb8>)
 8005bba:	627b      	str	r3, [r7, #36]	; 0x24
        .nWidth         = CONFIG_SCREEN_WIDTH,
        .nHeight        = CONFIG_SCREEN_HEIGHT,
        .szEditorTitle  = "--Text Editor--",
        .wEditorTitle   = _str_w_("--Text Editor--"),
 8005bbc:	491b      	ldr	r1, [pc, #108]	; (8005c2c <textedit_initialize+0xb8>)
 8005bbe:	481c      	ldr	r0, [pc, #112]	; (8005c30 <textedit_initialize+0xbc>)
 8005bc0:	f003 f96a 	bl	8008e98 <u8g2_GetStrWidth>
 8005bc4:	4603      	mov	r3, r0
    texteditor_t m = {
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8005bcc:	4b19      	ldr	r3, [pc, #100]	; (8005c34 <textedit_initialize+0xc0>)
 8005bce:	62fb      	str	r3, [r7, #44]	; 0x2c
        .szButtonTitle  = "-Return",
        .wButtonTitle   = _str_w_("-Return"),
 8005bd0:	4918      	ldr	r1, [pc, #96]	; (8005c34 <textedit_initialize+0xc0>)
 8005bd2:	4817      	ldr	r0, [pc, #92]	; (8005c30 <textedit_initialize+0xbc>)
 8005bd4:	f003 f960 	bl	8008e98 <u8g2_GetStrWidth>
 8005bd8:	4603      	mov	r3, r0
    texteditor_t m = {
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	637b      	str	r3, [r7, #52]	; 0x34
 8005be4:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005be8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8005bec:	2310      	movs	r3, #16
 8005bee:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        .nSelectedIndex = 0,
        .bEditing       = false,
        .hLine          = 16,
    };

    if (nContentSize) texteditor_measure_blink_char(&m);
 8005bf2:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d004      	beq.n	8005c04 <textedit_initialize+0x90>
 8005bfa:	f107 0314 	add.w	r3, r7, #20
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f000 f850 	bl	8005ca4 <texteditor_measure_blink_char>

    return m;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	461d      	mov	r5, r3
 8005c08:	f107 0414 	add.w	r4, r7, #20
 8005c0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c14:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005c18:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	3740      	adds	r7, #64	; 0x40
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bdb0      	pop	{r4, r5, r7, pc}
 8005c24:	08005edd 	.word	0x08005edd
 8005c28:	08005e91 	.word	0x08005e91
 8005c2c:	0800df34 	.word	0x0800df34
 8005c30:	200001d0 	.word	0x200001d0
 8005c34:	0800df44 	.word	0x0800df44

08005c38 <texteditor_measure_blink_pos>:

void texteditor_measure_blink_pos(texteditor_t* p)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
    if (p->nSelectedIndex == p->nContentSize) return;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d023      	beq.n	8005c98 <texteditor_measure_blink_pos+0x60>

    char c = p->szContent[p->nSelectedIndex];
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a1b      	ldr	r3, [r3, #32]
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8005c5a:	4413      	add	r3, r2
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	73fb      	strb	r3, [r7, #15]
    // set end
    p->szContent[p->nSelectedIndex] = '\0';
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6a1b      	ldr	r3, [r3, #32]
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8005c6a:	4413      	add	r3, r2
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	701a      	strb	r2, [r3, #0]
    // get width (hover left pos)
    p->xBlinkArea = _str_w_(p->szContent);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a1b      	ldr	r3, [r3, #32]
 8005c74:	4619      	mov	r1, r3
 8005c76:	480a      	ldr	r0, [pc, #40]	; (8005ca0 <texteditor_measure_blink_pos+0x68>)
 8005c78:	f003 f90e 	bl	8008e98 <u8g2_GetStrWidth>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	b2da      	uxtb	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    // recover char
    p->szContent[p->nSelectedIndex] = c;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8005c90:	4413      	add	r3, r2
 8005c92:	7bfa      	ldrb	r2, [r7, #15]
 8005c94:	701a      	strb	r2, [r3, #0]
 8005c96:	e000      	b.n	8005c9a <texteditor_measure_blink_pos+0x62>
    if (p->nSelectedIndex == p->nContentSize) return;
 8005c98:	bf00      	nop
}
 8005c9a:	3710      	adds	r7, #16
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	200001d0 	.word	0x200001d0

08005ca4 <texteditor_measure_blink_char>:

void texteditor_measure_blink_char(texteditor_t* p)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
    if (p->nSelectedIndex == p->nContentSize) return;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d015      	beq.n	8005ce8 <texteditor_measure_blink_char+0x44>
    // get width (hover char witdh)
    char buff[2]  = {p->szContent[p->nSelectedIndex], '\0'};
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a1b      	ldr	r3, [r3, #32]
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8005cc6:	4413      	add	r3, r2
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	733b      	strb	r3, [r7, #12]
 8005ccc:	2300      	movs	r3, #0
 8005cce:	737b      	strb	r3, [r7, #13]
    p->wBlinkArea = _str_w_(buff);
 8005cd0:	f107 030c 	add.w	r3, r7, #12
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	4806      	ldr	r0, [pc, #24]	; (8005cf0 <texteditor_measure_blink_char+0x4c>)
 8005cd8:	f003 f8de 	bl	8008e98 <u8g2_GetStrWidth>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	b2da      	uxtb	r2, r3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005ce6:	e000      	b.n	8005cea <texteditor_measure_blink_char+0x46>
    if (p->nSelectedIndex == p->nContentSize) return;
 8005ce8:	bf00      	nop
}
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	200001d0 	.word	0x200001d0

08005cf4 <texteditor_callback_handle_set_prevchar>:

void texteditor_callback_handle_set_prevchar(texteditor_t* p)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
    if (p->bEditing) {
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d027      	beq.n	8005d56 <texteditor_callback_handle_set_prevchar+0x62>
        // space->Z->...->A->z->...->a->space
        char ch = p->szContent[p->nSelectedIndex];
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8005d10:	4413      	add	r3, r2
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	73fb      	strb	r3, [r7, #15]
        switch (ch) {
 8005d16:	7bfb      	ldrb	r3, [r7, #15]
 8005d18:	2b61      	cmp	r3, #97	; 0x61
 8005d1a:	d006      	beq.n	8005d2a <texteditor_callback_handle_set_prevchar+0x36>
 8005d1c:	2b61      	cmp	r3, #97	; 0x61
 8005d1e:	dc0d      	bgt.n	8005d3c <texteditor_callback_handle_set_prevchar+0x48>
 8005d20:	2b20      	cmp	r3, #32
 8005d22:	d008      	beq.n	8005d36 <texteditor_callback_handle_set_prevchar+0x42>
 8005d24:	2b41      	cmp	r3, #65	; 0x41
 8005d26:	d003      	beq.n	8005d30 <texteditor_callback_handle_set_prevchar+0x3c>
 8005d28:	e008      	b.n	8005d3c <texteditor_callback_handle_set_prevchar+0x48>
            case 'a': ch = ' '; break;
 8005d2a:	2320      	movs	r3, #32
 8005d2c:	73fb      	strb	r3, [r7, #15]
 8005d2e:	e009      	b.n	8005d44 <texteditor_callback_handle_set_prevchar+0x50>
            case 'A': ch = 'z'; break;
 8005d30:	237a      	movs	r3, #122	; 0x7a
 8005d32:	73fb      	strb	r3, [r7, #15]
 8005d34:	e006      	b.n	8005d44 <texteditor_callback_handle_set_prevchar+0x50>
            case ' ': ch = 'Z'; break;
 8005d36:	235a      	movs	r3, #90	; 0x5a
 8005d38:	73fb      	strb	r3, [r7, #15]
 8005d3a:	e003      	b.n	8005d44 <texteditor_callback_handle_set_prevchar+0x50>
            default: --ch; break;
 8005d3c:	7bfb      	ldrb	r3, [r7, #15]
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	73fb      	strb	r3, [r7, #15]
 8005d42:	bf00      	nop
        }
        p->szContent[p->nSelectedIndex] = ch;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a1b      	ldr	r3, [r3, #32]
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8005d4e:	4413      	add	r3, r2
 8005d50:	7bfa      	ldrb	r2, [r7, #15]
 8005d52:	701a      	strb	r2, [r3, #0]
 8005d54:	e016      	b.n	8005d84 <texteditor_callback_handle_set_prevchar+0x90>
    } else {
        // decrease selected
        if (p->nSelectedIndex > 0) {
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d008      	beq.n	8005d72 <texteditor_callback_handle_set_prevchar+0x7e>
            --p->nSelectedIndex;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005d66:	3b01      	subs	r3, #1
 8005d68:	b2da      	uxtb	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8005d70:	e005      	b.n	8005d7e <texteditor_callback_handle_set_prevchar+0x8a>
        } else {
            p->nSelectedIndex = p->nContentSize;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        }
        // measure
        texteditor_measure_blink_pos(p);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f7ff ff5a 	bl	8005c38 <texteditor_measure_blink_pos>
    }
    // measure
    texteditor_measure_blink_char(p);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f7ff ff8d 	bl	8005ca4 <texteditor_measure_blink_char>
    // repaint
    p->bRepaint = true;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	701a      	strb	r2, [r3, #0]
}
 8005d90:	bf00      	nop
 8005d92:	3710      	adds	r7, #16
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <texteditor_callback_handle_set_nextchar>:

void texteditor_callback_handle_set_nextchar(texteditor_t* p)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
    if (p->bEditing) {
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d027      	beq.n	8005dfa <texteditor_callback_handle_set_nextchar+0x62>
        // space->a->...->z->A->...->Z->space
        char ch = p->szContent[p->nSelectedIndex];
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8005db4:	4413      	add	r3, r2
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	73fb      	strb	r3, [r7, #15]
        switch (ch) {
 8005dba:	7bfb      	ldrb	r3, [r7, #15]
 8005dbc:	2b7a      	cmp	r3, #122	; 0x7a
 8005dbe:	d009      	beq.n	8005dd4 <texteditor_callback_handle_set_nextchar+0x3c>
 8005dc0:	2b7a      	cmp	r3, #122	; 0x7a
 8005dc2:	dc0d      	bgt.n	8005de0 <texteditor_callback_handle_set_nextchar+0x48>
 8005dc4:	2b20      	cmp	r3, #32
 8005dc6:	d002      	beq.n	8005dce <texteditor_callback_handle_set_nextchar+0x36>
 8005dc8:	2b5a      	cmp	r3, #90	; 0x5a
 8005dca:	d006      	beq.n	8005dda <texteditor_callback_handle_set_nextchar+0x42>
 8005dcc:	e008      	b.n	8005de0 <texteditor_callback_handle_set_nextchar+0x48>
            case ' ': ch = 'a'; break;
 8005dce:	2361      	movs	r3, #97	; 0x61
 8005dd0:	73fb      	strb	r3, [r7, #15]
 8005dd2:	e009      	b.n	8005de8 <texteditor_callback_handle_set_nextchar+0x50>
            case 'z': ch = 'A'; break;
 8005dd4:	2341      	movs	r3, #65	; 0x41
 8005dd6:	73fb      	strb	r3, [r7, #15]
 8005dd8:	e006      	b.n	8005de8 <texteditor_callback_handle_set_nextchar+0x50>
            case 'Z': ch = ' '; break;
 8005dda:	2320      	movs	r3, #32
 8005ddc:	73fb      	strb	r3, [r7, #15]
 8005dde:	e003      	b.n	8005de8 <texteditor_callback_handle_set_nextchar+0x50>
            default: ++ch; break;
 8005de0:	7bfb      	ldrb	r3, [r7, #15]
 8005de2:	3301      	adds	r3, #1
 8005de4:	73fb      	strb	r3, [r7, #15]
 8005de6:	bf00      	nop
        }
        p->szContent[p->nSelectedIndex] = ch;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a1b      	ldr	r3, [r3, #32]
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8005df2:	4413      	add	r3, r2
 8005df4:	7bfa      	ldrb	r2, [r7, #15]
 8005df6:	701a      	strb	r2, [r3, #0]
 8005df8:	e017      	b.n	8005e2a <texteditor_callback_handle_set_nextchar+0x92>
    } else {
        // increase selected
        if (p->nSelectedIndex < p->nContentSize) {
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d208      	bcs.n	8005e1c <texteditor_callback_handle_set_nextchar+0x84>
            ++p->nSelectedIndex;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005e10:	3301      	adds	r3, #1
 8005e12:	b2da      	uxtb	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8005e1a:	e003      	b.n	8005e24 <texteditor_callback_handle_set_nextchar+0x8c>
        } else {
            p->nSelectedIndex = 0;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        }
        // measure
        texteditor_measure_blink_pos(p);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f7ff ff07 	bl	8005c38 <texteditor_measure_blink_pos>
    }
    // measure
    texteditor_measure_blink_char(p);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f7ff ff3a 	bl	8005ca4 <texteditor_measure_blink_char>
    // repaint
    p->bRepaint = true;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	701a      	strb	r2, [r3, #0]
}
 8005e36:	bf00      	nop
 8005e38:	3710      	adds	r7, #16
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}

08005e3e <texteditor_callback_handle_switch_editmode>:

bool texteditor_callback_handle_switch_editmode(texteditor_t* p)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b083      	sub	sp, #12
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
    if (p->nSelectedIndex == p->nContentSize) {
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d101      	bne.n	8005e5a <texteditor_callback_handle_switch_editmode+0x1c>
        // swicth fail, beacause cursor on button
        return false;
 8005e56:	2300      	movs	r3, #0
 8005e58:	e014      	b.n	8005e84 <texteditor_callback_handle_switch_editmode+0x46>
    } else {
        // edit mode
        p->bEditing = !p->bEditing;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	bf14      	ite	ne
 8005e64:	2301      	movne	r3, #1
 8005e66:	2300      	moveq	r3, #0
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	f083 0301 	eor.w	r3, r3, #1
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	b2da      	uxtb	r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
        // repaint
        p->bRepaint = true;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	701a      	strb	r2, [r3, #0]
        // swicth sucess
        return true;
 8005e82:	2301      	movs	r3, #1
    }
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <texteditor_callback_default_handler>:

void texteditor_callback_default_handler(texteditor_t* p)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
    switch (key_scan()) {
 8005e98:	f001 fa42 	bl	8007320 <key_scan>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b03      	cmp	r3, #3
 8005ea0:	d817      	bhi.n	8005ed2 <texteditor_callback_default_handler+0x42>
 8005ea2:	a201      	add	r2, pc, #4	; (adr r2, 8005ea8 <texteditor_callback_default_handler+0x18>)
 8005ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea8:	08005ed1 	.word	0x08005ed1
 8005eac:	08005eb9 	.word	0x08005eb9
 8005eb0:	08005ec9 	.word	0x08005ec9
 8005eb4:	08005ec1 	.word	0x08005ec1
        case KEY_ID_NONE: break;
        case KEY_ID_PREV: {
            texteditor_callback_handle_set_prevchar(p);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f7ff ff1b 	bl	8005cf4 <texteditor_callback_handle_set_prevchar>
            break;
 8005ebe:	e008      	b.n	8005ed2 <texteditor_callback_default_handler+0x42>
        }
        case KEY_ID_NEXT: {
            texteditor_callback_handle_set_nextchar(p);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f7ff ff69 	bl	8005d98 <texteditor_callback_handle_set_nextchar>
            break;
 8005ec6:	e004      	b.n	8005ed2 <texteditor_callback_default_handler+0x42>
        }
        case KEY_ID_OK: {
            texteditor_callback_handle_switch_editmode(p);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f7ff ffb8 	bl	8005e3e <texteditor_callback_handle_switch_editmode>
            break;
 8005ece:	e000      	b.n	8005ed2 <texteditor_callback_default_handler+0x42>
        case KEY_ID_NONE: break;
 8005ed0:	bf00      	nop
        }
    }
}
 8005ed2:	bf00      	nop
 8005ed4:	3708      	adds	r7, #8
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop

08005edc <texteditor_callback_default_painter>:

void texteditor_callback_default_painter(texteditor_t* p)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b086      	sub	sp, #24
 8005ee0:	af02      	add	r7, sp, #8
 8005ee2:	6078      	str	r0, [r7, #4]
    _clear();
 8005ee4:	484c      	ldr	r0, [pc, #304]	; (8006018 <texteditor_callback_default_painter+0x13c>)
 8005ee6:	f001 fe96 	bl	8007c16 <u8g2_ClearBuffer>

    // frame
    _fiil_rounded_rect(4, 6, 120, 52, 8);
 8005eea:	2308      	movs	r3, #8
 8005eec:	9301      	str	r3, [sp, #4]
 8005eee:	2334      	movs	r3, #52	; 0x34
 8005ef0:	9300      	str	r3, [sp, #0]
 8005ef2:	2378      	movs	r3, #120	; 0x78
 8005ef4:	2206      	movs	r2, #6
 8005ef6:	2104      	movs	r1, #4
 8005ef8:	4847      	ldr	r0, [pc, #284]	; (8006018 <texteditor_callback_default_painter+0x13c>)
 8005efa:	f001 fdd7 	bl	8007aac <u8g2_DrawRFrame>
    // title
    _draw_str((128 - p->wEditorTitle) / 2, 20, p->szEditorTitle);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	7d1b      	ldrb	r3, [r3, #20]
 8005f02:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8005f06:	0fda      	lsrs	r2, r3, #31
 8005f08:	4413      	add	r3, r2
 8005f0a:	105b      	asrs	r3, r3, #1
 8005f0c:	b299      	uxth	r1, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	2214      	movs	r2, #20
 8005f14:	4840      	ldr	r0, [pc, #256]	; (8006018 <texteditor_callback_default_painter+0x13c>)
 8005f16:	f002 fe9f 	bl	8008c58 <u8g2_DrawStr>
    // text
    uint8_t box_x = 10;
 8005f1a:	230a      	movs	r3, #10
 8005f1c:	73fb      	strb	r3, [r7, #15]
    _draw_str(box_x, 38, p->szContent);
 8005f1e:	7bfb      	ldrb	r3, [r7, #15]
 8005f20:	b299      	uxth	r1, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	2226      	movs	r2, #38	; 0x26
 8005f28:	483b      	ldr	r0, [pc, #236]	; (8006018 <texteditor_callback_default_painter+0x13c>)
 8005f2a:	f002 fe95 	bl	8008c58 <u8g2_DrawStr>
    // button
    _draw_str(80, 50, p->szButtonTitle);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	2232      	movs	r2, #50	; 0x32
 8005f34:	2150      	movs	r1, #80	; 0x50
 8005f36:	4838      	ldr	r0, [pc, #224]	; (8006018 <texteditor_callback_default_painter+0x13c>)
 8005f38:	f002 fe8e 	bl	8008c58 <u8g2_DrawStr>

    // cursor
    if (p->nSelectedIndex < p->nContentSize) {
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d22d      	bcs.n	8005fa8 <texteditor_callback_default_painter+0xcc>
        if (p->blink < BLINK_SPEED / 2 || !p->bEditing) {
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005f52:	2b0b      	cmp	r3, #11
 8005f54:	d907      	bls.n	8005f66 <texteditor_callback_default_painter+0x8a>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005f5c:	f083 0301 	eor.w	r3, r3, #1
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d03a      	beq.n	8005fdc <texteditor_callback_default_painter+0x100>
            _set_color(2);
 8005f66:	2102      	movs	r1, #2
 8005f68:	482b      	ldr	r0, [pc, #172]	; (8006018 <texteditor_callback_default_painter+0x13c>)
 8005f6a:	f003 f908 	bl	800917e <u8g2_SetDrawColor>
            _draw_rect(box_x + p->xBlinkArea, 26, p->wBlinkArea + 2, p->hLine);
 8005f6e:	7bfb      	ldrb	r3, [r7, #15]
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	4413      	add	r3, r2
 8005f7c:	b299      	uxth	r1, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	3302      	adds	r3, #2
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	9300      	str	r3, [sp, #0]
 8005f94:	4613      	mov	r3, r2
 8005f96:	221a      	movs	r2, #26
 8005f98:	481f      	ldr	r0, [pc, #124]	; (8006018 <texteditor_callback_default_painter+0x13c>)
 8005f9a:	f001 fc44 	bl	8007826 <u8g2_DrawBox>
            _set_color(1);
 8005f9e:	2101      	movs	r1, #1
 8005fa0:	481d      	ldr	r0, [pc, #116]	; (8006018 <texteditor_callback_default_painter+0x13c>)
 8005fa2:	f003 f8ec 	bl	800917e <u8g2_SetDrawColor>
 8005fa6:	e019      	b.n	8005fdc <texteditor_callback_default_painter+0x100>
        }
    } else {
        // button (hover)
        _set_color(2);
 8005fa8:	2102      	movs	r1, #2
 8005faa:	481b      	ldr	r0, [pc, #108]	; (8006018 <texteditor_callback_default_painter+0x13c>)
 8005fac:	f003 f8e7 	bl	800917e <u8g2_SetDrawColor>
        _draw_rounded_rect(78, 38, p->wButtonTitle + 4, p->hLine, 1);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	7f1b      	ldrb	r3, [r3, #28]
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	3304      	adds	r3, #4
 8005fb8:	b29a      	uxth	r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	2101      	movs	r1, #1
 8005fc4:	9101      	str	r1, [sp, #4]
 8005fc6:	9300      	str	r3, [sp, #0]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	2226      	movs	r2, #38	; 0x26
 8005fcc:	214e      	movs	r1, #78	; 0x4e
 8005fce:	4812      	ldr	r0, [pc, #72]	; (8006018 <texteditor_callback_default_painter+0x13c>)
 8005fd0:	f001 fcbc 	bl	800794c <u8g2_DrawRBox>
        _set_color(1);
 8005fd4:	2101      	movs	r1, #1
 8005fd6:	4810      	ldr	r0, [pc, #64]	; (8006018 <texteditor_callback_default_painter+0x13c>)
 8005fd8:	f003 f8d1 	bl	800917e <u8g2_SetDrawColor>
    }

    if (p->bEditing) {
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d011      	beq.n	800600a <texteditor_callback_default_painter+0x12e>
        p->blink    = (p->blink < BLINK_SPEED) ? (p->blink + 1) : 0;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005fec:	2b17      	cmp	r3, #23
 8005fee:	d805      	bhi.n	8005ffc <texteditor_callback_default_painter+0x120>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	b2da      	uxtb	r2, r3
 8005ffa:	e000      	b.n	8005ffe <texteditor_callback_default_painter+0x122>
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
        p->bRepaint = true;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	701a      	strb	r2, [r3, #0]
    }

    _update();
 800600a:	4803      	ldr	r0, [pc, #12]	; (8006018 <texteditor_callback_default_painter+0x13c>)
 800600c:	f001 fe76 	bl	8007cfc <u8g2_SendBuffer>
}
 8006010:	bf00      	nop
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	200001d0 	.word	0x200001d0

0800601c <_easing_calc_InBounce>:
// static const float I1  = 1. / D1;
// static const float I2  = 1. / D2;
// static const float I4D = 1. / D4 / D4;

float _easing_calc_InBounce(const float t)
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	ed87 0a01 	vstr	s0, [r7, #4]
    float s;
    if (t < D1) {
 8006026:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8006128 <_easing_calc_InBounce+0x10c>
 800602a:	edd7 7a01 	vldr	s15, [r7, #4]
 800602e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006036:	d516      	bpl.n	8006066 <_easing_calc_InBounce+0x4a>
        s = t - DH;
 8006038:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800612c <_easing_calc_InBounce+0x110>
 800603c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006040:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006044:	edc7 7a03 	vstr	s15, [r7, #12]
        s = DH - s * s * IH;
 8006048:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800612c <_easing_calc_InBounce+0x110>
 800604c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006050:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006054:	eef3 6a06 	vmov.f32	s13, #54	; 0x41b00000  22.0
 8006058:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800605c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006060:	edc7 7a03 	vstr	s15, [r7, #12]
 8006064:	e055      	b.n	8006112 <_easing_calc_InBounce+0xf6>
    } else if (t < D3) {
 8006066:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8006130 <_easing_calc_InBounce+0x114>
 800606a:	edd7 7a01 	vldr	s15, [r7, #4]
 800606e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006076:	d516      	bpl.n	80060a6 <_easing_calc_InBounce+0x8a>
        s = t - D2;
 8006078:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8006134 <_easing_calc_InBounce+0x118>
 800607c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006080:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006084:	edc7 7a03 	vstr	s15, [r7, #12]
        s = D1 - s * s * I1;
 8006088:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8006128 <_easing_calc_InBounce+0x10c>
 800608c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006090:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006094:	eef2 6a06 	vmov.f32	s13, #38	; 0x41300000  11.0
 8006098:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800609c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060a0:	edc7 7a03 	vstr	s15, [r7, #12]
 80060a4:	e035      	b.n	8006112 <_easing_calc_InBounce+0xf6>
    } else if (t < D7) {
 80060a6:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8006138 <_easing_calc_InBounce+0x11c>
 80060aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80060ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060b6:	d516      	bpl.n	80060e6 <_easing_calc_InBounce+0xca>
        s = t - D5;
 80060b8:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800613c <_easing_calc_InBounce+0x120>
 80060bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80060c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80060c4:	edc7 7a03 	vstr	s15, [r7, #12]
        s = D2 - s * s * I2;
 80060c8:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8006134 <_easing_calc_InBounce+0x118>
 80060cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80060d0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80060d4:	eef1 6a06 	vmov.f32	s13, #22	; 0x40b00000  5.5
 80060d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80060dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060e0:	edc7 7a03 	vstr	s15, [r7, #12]
 80060e4:	e015      	b.n	8006112 <_easing_calc_InBounce+0xf6>
    } else {
        s = t - 1;
 80060e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80060ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80060f2:	edc7 7a03 	vstr	s15, [r7, #12]
        s = 1 - s * s * I4D;
 80060f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80060fa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80060fe:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8006140 <_easing_calc_InBounce+0x124>
 8006102:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006106:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800610a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800610e:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    return s;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	ee07 3a90 	vmov	s15, r3
}
 8006118:	eeb0 0a67 	vmov.f32	s0, s15
 800611c:	3714      	adds	r7, #20
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	3dba2e8c 	.word	0x3dba2e8c
 800612c:	3d3a2e8c 	.word	0x3d3a2e8c
 8006130:	3e8ba2e9 	.word	0x3e8ba2e9
 8006134:	3e3a2e8c 	.word	0x3e3a2e8c
 8006138:	3f22e8ba 	.word	0x3f22e8ba
 800613c:	3ee8ba2f 	.word	0x3ee8ba2f
 8006140:	40f20000 	.word	0x40f20000

08006144 <_easing_calc_OutBounce>:

float _easing_calc_OutBounce(const float t)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	ed87 0a01 	vstr	s0, [r7, #4]
    return 1. - _easing_calc_InBounce(1. - t);
 800614e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006152:	edd7 7a01 	vldr	s15, [r7, #4]
 8006156:	ee77 7a67 	vsub.f32	s15, s14, s15
 800615a:	eeb0 0a67 	vmov.f32	s0, s15
 800615e:	f7ff ff5d 	bl	800601c <_easing_calc_InBounce>
 8006162:	ee10 3a10 	vmov	r3, s0
 8006166:	4618      	mov	r0, r3
 8006168:	f7fa fb18 	bl	800079c <__aeabi_f2d>
 800616c:	4602      	mov	r2, r0
 800616e:	460b      	mov	r3, r1
 8006170:	f04f 0000 	mov.w	r0, #0
 8006174:	4908      	ldr	r1, [pc, #32]	; (8006198 <_easing_calc_OutBounce+0x54>)
 8006176:	f7fa f9b1 	bl	80004dc <__aeabi_dsub>
 800617a:	4602      	mov	r2, r0
 800617c:	460b      	mov	r3, r1
 800617e:	4610      	mov	r0, r2
 8006180:	4619      	mov	r1, r3
 8006182:	f7fa fc33 	bl	80009ec <__aeabi_d2f>
 8006186:	4603      	mov	r3, r0
 8006188:	ee07 3a90 	vmov	s15, r3
}
 800618c:	eeb0 0a67 	vmov.f32	s0, s15
 8006190:	3708      	adds	r7, #8
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	3ff00000 	.word	0x3ff00000

0800619c <_easing_calc_InOutBounce>:

float _easing_calc_InOutBounce(const float t)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	ed87 0a01 	vstr	s0, [r7, #4]
    return (t < 0.5) ? _easing_calc_InBounce(t * 2.0) * 0.5 : 1 - _easing_calc_InBounce(2.0 - t * 2.0) * 0.5;
 80061a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80061aa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80061ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061b6:	d514      	bpl.n	80061e2 <_easing_calc_InOutBounce+0x46>
 80061b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80061bc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80061c0:	eeb0 0a67 	vmov.f32	s0, s15
 80061c4:	f7ff ff2a 	bl	800601c <_easing_calc_InBounce>
 80061c8:	ee10 3a10 	vmov	r3, s0
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7fa fae5 	bl	800079c <__aeabi_f2d>
 80061d2:	f04f 0200 	mov.w	r2, #0
 80061d6:	4b1f      	ldr	r3, [pc, #124]	; (8006254 <_easing_calc_InOutBounce+0xb8>)
 80061d8:	f7fa f852 	bl	8000280 <__aeabi_dmul>
 80061dc:	4602      	mov	r2, r0
 80061de:	460b      	mov	r3, r1
 80061e0:	e02c      	b.n	800623c <_easing_calc_InOutBounce+0xa0>
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f7fa fada 	bl	800079c <__aeabi_f2d>
 80061e8:	4602      	mov	r2, r0
 80061ea:	460b      	mov	r3, r1
 80061ec:	f7fa f978 	bl	80004e0 <__adddf3>
 80061f0:	4602      	mov	r2, r0
 80061f2:	460b      	mov	r3, r1
 80061f4:	f04f 0000 	mov.w	r0, #0
 80061f8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80061fc:	f7fa f96e 	bl	80004dc <__aeabi_dsub>
 8006200:	4602      	mov	r2, r0
 8006202:	460b      	mov	r3, r1
 8006204:	4610      	mov	r0, r2
 8006206:	4619      	mov	r1, r3
 8006208:	f7fa fbf0 	bl	80009ec <__aeabi_d2f>
 800620c:	4603      	mov	r3, r0
 800620e:	ee00 3a10 	vmov	s0, r3
 8006212:	f7ff ff03 	bl	800601c <_easing_calc_InBounce>
 8006216:	ee10 3a10 	vmov	r3, s0
 800621a:	4618      	mov	r0, r3
 800621c:	f7fa fabe 	bl	800079c <__aeabi_f2d>
 8006220:	f04f 0200 	mov.w	r2, #0
 8006224:	4b0b      	ldr	r3, [pc, #44]	; (8006254 <_easing_calc_InOutBounce+0xb8>)
 8006226:	f7fa f82b 	bl	8000280 <__aeabi_dmul>
 800622a:	4602      	mov	r2, r0
 800622c:	460b      	mov	r3, r1
 800622e:	f04f 0000 	mov.w	r0, #0
 8006232:	4909      	ldr	r1, [pc, #36]	; (8006258 <_easing_calc_InOutBounce+0xbc>)
 8006234:	f7fa f952 	bl	80004dc <__aeabi_dsub>
 8006238:	4602      	mov	r2, r0
 800623a:	460b      	mov	r3, r1
 800623c:	4610      	mov	r0, r2
 800623e:	4619      	mov	r1, r3
 8006240:	f7fa fbd4 	bl	80009ec <__aeabi_d2f>
 8006244:	4603      	mov	r3, r0
 8006246:	ee07 3a90 	vmov	s15, r3
}
 800624a:	eeb0 0a67 	vmov.f32	s0, s15
 800624e:	3708      	adds	r7, #8
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	3fe00000 	.word	0x3fe00000
 8006258:	3ff00000 	.word	0x3ff00000

0800625c <_easing_calc_InCirc>:

float _easing_calc_InCirc(const float t)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
 8006262:	ed87 0a01 	vstr	s0, [r7, #4]
    return 1.0 - sqrtf(1.0 - t * t);
 8006266:	edd7 7a01 	vldr	s15, [r7, #4]
 800626a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800626e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006272:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006276:	eeb0 0a67 	vmov.f32	s0, s15
 800627a:	f005 fc15 	bl	800baa8 <sqrtf>
 800627e:	ee10 3a10 	vmov	r3, s0
 8006282:	4618      	mov	r0, r3
 8006284:	f7fa fa8a 	bl	800079c <__aeabi_f2d>
 8006288:	4602      	mov	r2, r0
 800628a:	460b      	mov	r3, r1
 800628c:	f04f 0000 	mov.w	r0, #0
 8006290:	4908      	ldr	r1, [pc, #32]	; (80062b4 <_easing_calc_InCirc+0x58>)
 8006292:	f7fa f923 	bl	80004dc <__aeabi_dsub>
 8006296:	4602      	mov	r2, r0
 8006298:	460b      	mov	r3, r1
 800629a:	4610      	mov	r0, r2
 800629c:	4619      	mov	r1, r3
 800629e:	f7fa fba5 	bl	80009ec <__aeabi_d2f>
 80062a2:	4603      	mov	r3, r0
 80062a4:	ee07 3a90 	vmov	s15, r3
}
 80062a8:	eeb0 0a67 	vmov.f32	s0, s15
 80062ac:	3708      	adds	r7, #8
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	3ff00000 	.word	0x3ff00000

080062b8 <_easing_calc_OutCirc>:

float _easing_calc_OutCirc(const float t)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	ed87 0a01 	vstr	s0, [r7, #4]
    return 1. - _easing_calc_InCirc(1. - t);
 80062c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80062ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062ce:	eeb0 0a67 	vmov.f32	s0, s15
 80062d2:	f7ff ffc3 	bl	800625c <_easing_calc_InCirc>
 80062d6:	ee10 3a10 	vmov	r3, s0
 80062da:	4618      	mov	r0, r3
 80062dc:	f7fa fa5e 	bl	800079c <__aeabi_f2d>
 80062e0:	4602      	mov	r2, r0
 80062e2:	460b      	mov	r3, r1
 80062e4:	f04f 0000 	mov.w	r0, #0
 80062e8:	4908      	ldr	r1, [pc, #32]	; (800630c <_easing_calc_OutCirc+0x54>)
 80062ea:	f7fa f8f7 	bl	80004dc <__aeabi_dsub>
 80062ee:	4602      	mov	r2, r0
 80062f0:	460b      	mov	r3, r1
 80062f2:	4610      	mov	r0, r2
 80062f4:	4619      	mov	r1, r3
 80062f6:	f7fa fb79 	bl	80009ec <__aeabi_d2f>
 80062fa:	4603      	mov	r3, r0
 80062fc:	ee07 3a90 	vmov	s15, r3
}
 8006300:	eeb0 0a67 	vmov.f32	s0, s15
 8006304:	3708      	adds	r7, #8
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	3ff00000 	.word	0x3ff00000

08006310 <_easing_calc_InOutCirc>:

float _easing_calc_InOutCirc(const float t)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	ed87 0a01 	vstr	s0, [r7, #4]
    return (t < 0.5) ? _easing_calc_InCirc(t * 2.0) * 0.5 : 1 - _easing_calc_InCirc(2.0 - t * 2.0) * 0.5;
 800631a:	edd7 7a01 	vldr	s15, [r7, #4]
 800631e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006322:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800632a:	d514      	bpl.n	8006356 <_easing_calc_InOutCirc+0x46>
 800632c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006330:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006334:	eeb0 0a67 	vmov.f32	s0, s15
 8006338:	f7ff ff90 	bl	800625c <_easing_calc_InCirc>
 800633c:	ee10 3a10 	vmov	r3, s0
 8006340:	4618      	mov	r0, r3
 8006342:	f7fa fa2b 	bl	800079c <__aeabi_f2d>
 8006346:	f04f 0200 	mov.w	r2, #0
 800634a:	4b1f      	ldr	r3, [pc, #124]	; (80063c8 <_easing_calc_InOutCirc+0xb8>)
 800634c:	f7f9 ff98 	bl	8000280 <__aeabi_dmul>
 8006350:	4602      	mov	r2, r0
 8006352:	460b      	mov	r3, r1
 8006354:	e02c      	b.n	80063b0 <_easing_calc_InOutCirc+0xa0>
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f7fa fa20 	bl	800079c <__aeabi_f2d>
 800635c:	4602      	mov	r2, r0
 800635e:	460b      	mov	r3, r1
 8006360:	f7fa f8be 	bl	80004e0 <__adddf3>
 8006364:	4602      	mov	r2, r0
 8006366:	460b      	mov	r3, r1
 8006368:	f04f 0000 	mov.w	r0, #0
 800636c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006370:	f7fa f8b4 	bl	80004dc <__aeabi_dsub>
 8006374:	4602      	mov	r2, r0
 8006376:	460b      	mov	r3, r1
 8006378:	4610      	mov	r0, r2
 800637a:	4619      	mov	r1, r3
 800637c:	f7fa fb36 	bl	80009ec <__aeabi_d2f>
 8006380:	4603      	mov	r3, r0
 8006382:	ee00 3a10 	vmov	s0, r3
 8006386:	f7ff ff69 	bl	800625c <_easing_calc_InCirc>
 800638a:	ee10 3a10 	vmov	r3, s0
 800638e:	4618      	mov	r0, r3
 8006390:	f7fa fa04 	bl	800079c <__aeabi_f2d>
 8006394:	f04f 0200 	mov.w	r2, #0
 8006398:	4b0b      	ldr	r3, [pc, #44]	; (80063c8 <_easing_calc_InOutCirc+0xb8>)
 800639a:	f7f9 ff71 	bl	8000280 <__aeabi_dmul>
 800639e:	4602      	mov	r2, r0
 80063a0:	460b      	mov	r3, r1
 80063a2:	f04f 0000 	mov.w	r0, #0
 80063a6:	4909      	ldr	r1, [pc, #36]	; (80063cc <_easing_calc_InOutCirc+0xbc>)
 80063a8:	f7fa f898 	bl	80004dc <__aeabi_dsub>
 80063ac:	4602      	mov	r2, r0
 80063ae:	460b      	mov	r3, r1
 80063b0:	4610      	mov	r0, r2
 80063b2:	4619      	mov	r1, r3
 80063b4:	f7fa fb1a 	bl	80009ec <__aeabi_d2f>
 80063b8:	4603      	mov	r3, r0
 80063ba:	ee07 3a90 	vmov	s15, r3
}
 80063be:	eeb0 0a67 	vmov.f32	s0, s15
 80063c2:	3708      	adds	r7, #8
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	3fe00000 	.word	0x3fe00000
 80063cc:	3ff00000 	.word	0x3ff00000

080063d0 <_easing_calc_InCubic>:

float _easing_calc_InCubic(const float t)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	ed87 0a01 	vstr	s0, [r7, #4]
    return t * t * t;
 80063da:	edd7 7a01 	vldr	s15, [r7, #4]
 80063de:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80063e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80063e6:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80063ea:	eeb0 0a67 	vmov.f32	s0, s15
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <_easing_calc_OutCubic>:

float _easing_calc_OutCubic(const float t)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	ed87 0a01 	vstr	s0, [r7, #4]
    return 1. - _easing_calc_InCubic(1. - t);
 8006402:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006406:	edd7 7a01 	vldr	s15, [r7, #4]
 800640a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800640e:	eeb0 0a67 	vmov.f32	s0, s15
 8006412:	f7ff ffdd 	bl	80063d0 <_easing_calc_InCubic>
 8006416:	ee10 3a10 	vmov	r3, s0
 800641a:	4618      	mov	r0, r3
 800641c:	f7fa f9be 	bl	800079c <__aeabi_f2d>
 8006420:	4602      	mov	r2, r0
 8006422:	460b      	mov	r3, r1
 8006424:	f04f 0000 	mov.w	r0, #0
 8006428:	4908      	ldr	r1, [pc, #32]	; (800644c <_easing_calc_OutCubic+0x54>)
 800642a:	f7fa f857 	bl	80004dc <__aeabi_dsub>
 800642e:	4602      	mov	r2, r0
 8006430:	460b      	mov	r3, r1
 8006432:	4610      	mov	r0, r2
 8006434:	4619      	mov	r1, r3
 8006436:	f7fa fad9 	bl	80009ec <__aeabi_d2f>
 800643a:	4603      	mov	r3, r0
 800643c:	ee07 3a90 	vmov	s15, r3
}
 8006440:	eeb0 0a67 	vmov.f32	s0, s15
 8006444:	3708      	adds	r7, #8
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	3ff00000 	.word	0x3ff00000

08006450 <_easing_calc_InOutCubic>:

float _easing_calc_InOutCubic(const float t)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	ed87 0a01 	vstr	s0, [r7, #4]
    return (t < 0.5) ? _easing_calc_InCubic(t * 2.0) * 0.5 : 1 - _easing_calc_InCubic(2.0 - t * 2.0) * 0.5;
 800645a:	edd7 7a01 	vldr	s15, [r7, #4]
 800645e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006462:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800646a:	d514      	bpl.n	8006496 <_easing_calc_InOutCubic+0x46>
 800646c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006470:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006474:	eeb0 0a67 	vmov.f32	s0, s15
 8006478:	f7ff ffaa 	bl	80063d0 <_easing_calc_InCubic>
 800647c:	ee10 3a10 	vmov	r3, s0
 8006480:	4618      	mov	r0, r3
 8006482:	f7fa f98b 	bl	800079c <__aeabi_f2d>
 8006486:	f04f 0200 	mov.w	r2, #0
 800648a:	4b1f      	ldr	r3, [pc, #124]	; (8006508 <_easing_calc_InOutCubic+0xb8>)
 800648c:	f7f9 fef8 	bl	8000280 <__aeabi_dmul>
 8006490:	4602      	mov	r2, r0
 8006492:	460b      	mov	r3, r1
 8006494:	e02c      	b.n	80064f0 <_easing_calc_InOutCubic+0xa0>
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f7fa f980 	bl	800079c <__aeabi_f2d>
 800649c:	4602      	mov	r2, r0
 800649e:	460b      	mov	r3, r1
 80064a0:	f7fa f81e 	bl	80004e0 <__adddf3>
 80064a4:	4602      	mov	r2, r0
 80064a6:	460b      	mov	r3, r1
 80064a8:	f04f 0000 	mov.w	r0, #0
 80064ac:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80064b0:	f7fa f814 	bl	80004dc <__aeabi_dsub>
 80064b4:	4602      	mov	r2, r0
 80064b6:	460b      	mov	r3, r1
 80064b8:	4610      	mov	r0, r2
 80064ba:	4619      	mov	r1, r3
 80064bc:	f7fa fa96 	bl	80009ec <__aeabi_d2f>
 80064c0:	4603      	mov	r3, r0
 80064c2:	ee00 3a10 	vmov	s0, r3
 80064c6:	f7ff ff83 	bl	80063d0 <_easing_calc_InCubic>
 80064ca:	ee10 3a10 	vmov	r3, s0
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7fa f964 	bl	800079c <__aeabi_f2d>
 80064d4:	f04f 0200 	mov.w	r2, #0
 80064d8:	4b0b      	ldr	r3, [pc, #44]	; (8006508 <_easing_calc_InOutCubic+0xb8>)
 80064da:	f7f9 fed1 	bl	8000280 <__aeabi_dmul>
 80064de:	4602      	mov	r2, r0
 80064e0:	460b      	mov	r3, r1
 80064e2:	f04f 0000 	mov.w	r0, #0
 80064e6:	4909      	ldr	r1, [pc, #36]	; (800650c <_easing_calc_InOutCubic+0xbc>)
 80064e8:	f7f9 fff8 	bl	80004dc <__aeabi_dsub>
 80064ec:	4602      	mov	r2, r0
 80064ee:	460b      	mov	r3, r1
 80064f0:	4610      	mov	r0, r2
 80064f2:	4619      	mov	r1, r3
 80064f4:	f7fa fa7a 	bl	80009ec <__aeabi_d2f>
 80064f8:	4603      	mov	r3, r0
 80064fa:	ee07 3a90 	vmov	s15, r3
}
 80064fe:	eeb0 0a67 	vmov.f32	s0, s15
 8006502:	3708      	adds	r7, #8
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	3fe00000 	.word	0x3fe00000
 800650c:	3ff00000 	.word	0x3ff00000

08006510 <_easing_calc_OutElastic>:

float _easing_calc_OutElastic(const float t)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	ed2d 8b02 	vpush	{d8}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	ed87 0a01 	vstr	s0, [r7, #4]
    float s = 1 - t;
 800651e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006522:	edd7 7a01 	vldr	s15, [r7, #4]
 8006526:	ee77 7a67 	vsub.f32	s15, s14, s15
 800652a:	edc7 7a03 	vstr	s15, [r7, #12]
    return 1 - powf(s, 8) + sinf(t * t * 6 * PI) * s * s;
 800652e:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 8006532:	ed97 0a03 	vldr	s0, [r7, #12]
 8006536:	f005 fa5f 	bl	800b9f8 <powf>
 800653a:	eef0 7a40 	vmov.f32	s15, s0
 800653e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006542:	ee37 8a67 	vsub.f32	s16, s14, s15
 8006546:	edd7 7a01 	vldr	s15, [r7, #4]
 800654a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800654e:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8006552:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006556:	ee17 0a90 	vmov	r0, s15
 800655a:	f7fa f91f 	bl	800079c <__aeabi_f2d>
 800655e:	a312      	add	r3, pc, #72	; (adr r3, 80065a8 <_easing_calc_OutElastic+0x98>)
 8006560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006564:	f7f9 fe8c 	bl	8000280 <__aeabi_dmul>
 8006568:	4602      	mov	r2, r0
 800656a:	460b      	mov	r3, r1
 800656c:	4610      	mov	r0, r2
 800656e:	4619      	mov	r1, r3
 8006570:	f7fa fa3c 	bl	80009ec <__aeabi_d2f>
 8006574:	4603      	mov	r3, r0
 8006576:	ee00 3a10 	vmov	s0, r3
 800657a:	f005 faf7 	bl	800bb6c <sinf>
 800657e:	eeb0 7a40 	vmov.f32	s14, s0
 8006582:	edd7 7a03 	vldr	s15, [r7, #12]
 8006586:	ee27 7a27 	vmul.f32	s14, s14, s15
 800658a:	edd7 7a03 	vldr	s15, [r7, #12]
 800658e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006592:	ee78 7a27 	vadd.f32	s15, s16, s15
}
 8006596:	eeb0 0a67 	vmov.f32	s0, s15
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	ecbd 8b02 	vpop	{d8}
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	f3af 8000 	nop.w
 80065a8:	4d12d84a 	.word	0x4d12d84a
 80065ac:	400921fb 	.word	0x400921fb

080065b0 <_easing_calc_InElastic>:

float _easing_calc_InElastic(const float t)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	ed87 0a01 	vstr	s0, [r7, #4]
    return 1.0 - _easing_calc_OutElastic(1.0 - t);
 80065ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80065be:	edd7 7a01 	vldr	s15, [r7, #4]
 80065c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80065c6:	eeb0 0a67 	vmov.f32	s0, s15
 80065ca:	f7ff ffa1 	bl	8006510 <_easing_calc_OutElastic>
 80065ce:	ee10 3a10 	vmov	r3, s0
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7fa f8e2 	bl	800079c <__aeabi_f2d>
 80065d8:	4602      	mov	r2, r0
 80065da:	460b      	mov	r3, r1
 80065dc:	f04f 0000 	mov.w	r0, #0
 80065e0:	4908      	ldr	r1, [pc, #32]	; (8006604 <_easing_calc_InElastic+0x54>)
 80065e2:	f7f9 ff7b 	bl	80004dc <__aeabi_dsub>
 80065e6:	4602      	mov	r2, r0
 80065e8:	460b      	mov	r3, r1
 80065ea:	4610      	mov	r0, r2
 80065ec:	4619      	mov	r1, r3
 80065ee:	f7fa f9fd 	bl	80009ec <__aeabi_d2f>
 80065f2:	4603      	mov	r3, r0
 80065f4:	ee07 3a90 	vmov	s15, r3
}
 80065f8:	eeb0 0a67 	vmov.f32	s0, s15
 80065fc:	3708      	adds	r7, #8
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	3ff00000 	.word	0x3ff00000

08006608 <_easing_calc_InOutElastic>:

float _easing_calc_InOutElastic(const float t)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	ed87 0a01 	vstr	s0, [r7, #4]
    return (t < 0.5) ? _easing_calc_InElastic(t * 2.0) * 0.5 : 1 - _easing_calc_InElastic(2.0 - t * 2.0) * 0.5;
 8006612:	edd7 7a01 	vldr	s15, [r7, #4]
 8006616:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800661a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800661e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006622:	d514      	bpl.n	800664e <_easing_calc_InOutElastic+0x46>
 8006624:	edd7 7a01 	vldr	s15, [r7, #4]
 8006628:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800662c:	eeb0 0a67 	vmov.f32	s0, s15
 8006630:	f7ff ffbe 	bl	80065b0 <_easing_calc_InElastic>
 8006634:	ee10 3a10 	vmov	r3, s0
 8006638:	4618      	mov	r0, r3
 800663a:	f7fa f8af 	bl	800079c <__aeabi_f2d>
 800663e:	f04f 0200 	mov.w	r2, #0
 8006642:	4b1f      	ldr	r3, [pc, #124]	; (80066c0 <_easing_calc_InOutElastic+0xb8>)
 8006644:	f7f9 fe1c 	bl	8000280 <__aeabi_dmul>
 8006648:	4602      	mov	r2, r0
 800664a:	460b      	mov	r3, r1
 800664c:	e02c      	b.n	80066a8 <_easing_calc_InOutElastic+0xa0>
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f7fa f8a4 	bl	800079c <__aeabi_f2d>
 8006654:	4602      	mov	r2, r0
 8006656:	460b      	mov	r3, r1
 8006658:	f7f9 ff42 	bl	80004e0 <__adddf3>
 800665c:	4602      	mov	r2, r0
 800665e:	460b      	mov	r3, r1
 8006660:	f04f 0000 	mov.w	r0, #0
 8006664:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006668:	f7f9 ff38 	bl	80004dc <__aeabi_dsub>
 800666c:	4602      	mov	r2, r0
 800666e:	460b      	mov	r3, r1
 8006670:	4610      	mov	r0, r2
 8006672:	4619      	mov	r1, r3
 8006674:	f7fa f9ba 	bl	80009ec <__aeabi_d2f>
 8006678:	4603      	mov	r3, r0
 800667a:	ee00 3a10 	vmov	s0, r3
 800667e:	f7ff ff97 	bl	80065b0 <_easing_calc_InElastic>
 8006682:	ee10 3a10 	vmov	r3, s0
 8006686:	4618      	mov	r0, r3
 8006688:	f7fa f888 	bl	800079c <__aeabi_f2d>
 800668c:	f04f 0200 	mov.w	r2, #0
 8006690:	4b0b      	ldr	r3, [pc, #44]	; (80066c0 <_easing_calc_InOutElastic+0xb8>)
 8006692:	f7f9 fdf5 	bl	8000280 <__aeabi_dmul>
 8006696:	4602      	mov	r2, r0
 8006698:	460b      	mov	r3, r1
 800669a:	f04f 0000 	mov.w	r0, #0
 800669e:	4909      	ldr	r1, [pc, #36]	; (80066c4 <_easing_calc_InOutElastic+0xbc>)
 80066a0:	f7f9 ff1c 	bl	80004dc <__aeabi_dsub>
 80066a4:	4602      	mov	r2, r0
 80066a6:	460b      	mov	r3, r1
 80066a8:	4610      	mov	r0, r2
 80066aa:	4619      	mov	r1, r3
 80066ac:	f7fa f99e 	bl	80009ec <__aeabi_d2f>
 80066b0:	4603      	mov	r3, r0
 80066b2:	ee07 3a90 	vmov	s15, r3
}
 80066b6:	eeb0 0a67 	vmov.f32	s0, s15
 80066ba:	3708      	adds	r7, #8
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	3fe00000 	.word	0x3fe00000
 80066c4:	3ff00000 	.word	0x3ff00000

080066c8 <_easing_calc_InExpo>:

float _easing_calc_InExpo(const float t)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	ed87 0a01 	vstr	s0, [r7, #4]
    return powf(2, 10 * (t - 1));
 80066d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80066d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80066da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80066de:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80066e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80066e6:	eef0 0a67 	vmov.f32	s1, s15
 80066ea:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80066ee:	f005 f983 	bl	800b9f8 <powf>
 80066f2:	eef0 7a40 	vmov.f32	s15, s0
}
 80066f6:	eeb0 0a67 	vmov.f32	s0, s15
 80066fa:	3708      	adds	r7, #8
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <_easing_calc_OutExpo>:

float _easing_calc_OutExpo(const float t)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
 8006706:	ed87 0a01 	vstr	s0, [r7, #4]
    return 1.0 - powf(2, -10 * t);
 800670a:	edd7 7a01 	vldr	s15, [r7, #4]
 800670e:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8006712:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006716:	eef0 0a67 	vmov.f32	s1, s15
 800671a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800671e:	f005 f96b 	bl	800b9f8 <powf>
 8006722:	ee10 3a10 	vmov	r3, s0
 8006726:	4618      	mov	r0, r3
 8006728:	f7fa f838 	bl	800079c <__aeabi_f2d>
 800672c:	4602      	mov	r2, r0
 800672e:	460b      	mov	r3, r1
 8006730:	f04f 0000 	mov.w	r0, #0
 8006734:	4908      	ldr	r1, [pc, #32]	; (8006758 <_easing_calc_OutExpo+0x58>)
 8006736:	f7f9 fed1 	bl	80004dc <__aeabi_dsub>
 800673a:	4602      	mov	r2, r0
 800673c:	460b      	mov	r3, r1
 800673e:	4610      	mov	r0, r2
 8006740:	4619      	mov	r1, r3
 8006742:	f7fa f953 	bl	80009ec <__aeabi_d2f>
 8006746:	4603      	mov	r3, r0
 8006748:	ee07 3a90 	vmov	s15, r3
}
 800674c:	eeb0 0a67 	vmov.f32	s0, s15
 8006750:	3708      	adds	r7, #8
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	3ff00000 	.word	0x3ff00000

0800675c <_easing_calc_InOutExpo>:

float _easing_calc_InOutExpo(const float t)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
 8006762:	ed87 0a01 	vstr	s0, [r7, #4]
    return (t < 0.5) ? _easing_calc_InExpo(t * 2.0) * 0.5 : 1 - _easing_calc_InExpo(2.0 - t * 2.0) * 0.5;
 8006766:	edd7 7a01 	vldr	s15, [r7, #4]
 800676a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800676e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006776:	d514      	bpl.n	80067a2 <_easing_calc_InOutExpo+0x46>
 8006778:	edd7 7a01 	vldr	s15, [r7, #4]
 800677c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006780:	eeb0 0a67 	vmov.f32	s0, s15
 8006784:	f7ff ffa0 	bl	80066c8 <_easing_calc_InExpo>
 8006788:	ee10 3a10 	vmov	r3, s0
 800678c:	4618      	mov	r0, r3
 800678e:	f7fa f805 	bl	800079c <__aeabi_f2d>
 8006792:	f04f 0200 	mov.w	r2, #0
 8006796:	4b1f      	ldr	r3, [pc, #124]	; (8006814 <_easing_calc_InOutExpo+0xb8>)
 8006798:	f7f9 fd72 	bl	8000280 <__aeabi_dmul>
 800679c:	4602      	mov	r2, r0
 800679e:	460b      	mov	r3, r1
 80067a0:	e02c      	b.n	80067fc <_easing_calc_InOutExpo+0xa0>
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f7f9 fffa 	bl	800079c <__aeabi_f2d>
 80067a8:	4602      	mov	r2, r0
 80067aa:	460b      	mov	r3, r1
 80067ac:	f7f9 fe98 	bl	80004e0 <__adddf3>
 80067b0:	4602      	mov	r2, r0
 80067b2:	460b      	mov	r3, r1
 80067b4:	f04f 0000 	mov.w	r0, #0
 80067b8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80067bc:	f7f9 fe8e 	bl	80004dc <__aeabi_dsub>
 80067c0:	4602      	mov	r2, r0
 80067c2:	460b      	mov	r3, r1
 80067c4:	4610      	mov	r0, r2
 80067c6:	4619      	mov	r1, r3
 80067c8:	f7fa f910 	bl	80009ec <__aeabi_d2f>
 80067cc:	4603      	mov	r3, r0
 80067ce:	ee00 3a10 	vmov	s0, r3
 80067d2:	f7ff ff79 	bl	80066c8 <_easing_calc_InExpo>
 80067d6:	ee10 3a10 	vmov	r3, s0
 80067da:	4618      	mov	r0, r3
 80067dc:	f7f9 ffde 	bl	800079c <__aeabi_f2d>
 80067e0:	f04f 0200 	mov.w	r2, #0
 80067e4:	4b0b      	ldr	r3, [pc, #44]	; (8006814 <_easing_calc_InOutExpo+0xb8>)
 80067e6:	f7f9 fd4b 	bl	8000280 <__aeabi_dmul>
 80067ea:	4602      	mov	r2, r0
 80067ec:	460b      	mov	r3, r1
 80067ee:	f04f 0000 	mov.w	r0, #0
 80067f2:	4909      	ldr	r1, [pc, #36]	; (8006818 <_easing_calc_InOutExpo+0xbc>)
 80067f4:	f7f9 fe72 	bl	80004dc <__aeabi_dsub>
 80067f8:	4602      	mov	r2, r0
 80067fa:	460b      	mov	r3, r1
 80067fc:	4610      	mov	r0, r2
 80067fe:	4619      	mov	r1, r3
 8006800:	f7fa f8f4 	bl	80009ec <__aeabi_d2f>
 8006804:	4603      	mov	r3, r0
 8006806:	ee07 3a90 	vmov	s15, r3
}
 800680a:	eeb0 0a67 	vmov.f32	s0, s15
 800680e:	3708      	adds	r7, #8
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	3fe00000 	.word	0x3fe00000
 8006818:	3ff00000 	.word	0x3ff00000

0800681c <_easing_calc_Linear>:

float _easing_calc_Linear(const float t)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	ed87 0a01 	vstr	s0, [r7, #4]
    return t;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	ee07 3a90 	vmov	s15, r3
}
 800682c:	eeb0 0a67 	vmov.f32	s0, s15
 8006830:	370c      	adds	r7, #12
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr

0800683a <_easing_calc_InQuad>:

float _easing_calc_InQuad(const float t)
{
 800683a:	b480      	push	{r7}
 800683c:	b083      	sub	sp, #12
 800683e:	af00      	add	r7, sp, #0
 8006840:	ed87 0a01 	vstr	s0, [r7, #4]
    return t * t;
 8006844:	edd7 7a01 	vldr	s15, [r7, #4]
 8006848:	ee67 7aa7 	vmul.f32	s15, s15, s15
}
 800684c:	eeb0 0a67 	vmov.f32	s0, s15
 8006850:	370c      	adds	r7, #12
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
	...

0800685c <_easing_calc_OutQuad>:

float _easing_calc_OutQuad(const float t)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	ed87 0a01 	vstr	s0, [r7, #4]
    return 1. - _easing_calc_InQuad(1. - t);
 8006866:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800686a:	edd7 7a01 	vldr	s15, [r7, #4]
 800686e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006872:	eeb0 0a67 	vmov.f32	s0, s15
 8006876:	f7ff ffe0 	bl	800683a <_easing_calc_InQuad>
 800687a:	ee10 3a10 	vmov	r3, s0
 800687e:	4618      	mov	r0, r3
 8006880:	f7f9 ff8c 	bl	800079c <__aeabi_f2d>
 8006884:	4602      	mov	r2, r0
 8006886:	460b      	mov	r3, r1
 8006888:	f04f 0000 	mov.w	r0, #0
 800688c:	4908      	ldr	r1, [pc, #32]	; (80068b0 <_easing_calc_OutQuad+0x54>)
 800688e:	f7f9 fe25 	bl	80004dc <__aeabi_dsub>
 8006892:	4602      	mov	r2, r0
 8006894:	460b      	mov	r3, r1
 8006896:	4610      	mov	r0, r2
 8006898:	4619      	mov	r1, r3
 800689a:	f7fa f8a7 	bl	80009ec <__aeabi_d2f>
 800689e:	4603      	mov	r3, r0
 80068a0:	ee07 3a90 	vmov	s15, r3
}
 80068a4:	eeb0 0a67 	vmov.f32	s0, s15
 80068a8:	3708      	adds	r7, #8
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	3ff00000 	.word	0x3ff00000

080068b4 <_easing_calc_InOutQuad>:

float _easing_calc_InOutQuad(const float t)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	ed87 0a01 	vstr	s0, [r7, #4]
    return (t < 0.5) ? _easing_calc_InQuad(t * 2.0) * 0.5 : 1 - _easing_calc_InQuad(2.0 - t * 2.0) * 0.5;
 80068be:	edd7 7a01 	vldr	s15, [r7, #4]
 80068c2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80068c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068ce:	d514      	bpl.n	80068fa <_easing_calc_InOutQuad+0x46>
 80068d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80068d4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80068d8:	eeb0 0a67 	vmov.f32	s0, s15
 80068dc:	f7ff ffad 	bl	800683a <_easing_calc_InQuad>
 80068e0:	ee10 3a10 	vmov	r3, s0
 80068e4:	4618      	mov	r0, r3
 80068e6:	f7f9 ff59 	bl	800079c <__aeabi_f2d>
 80068ea:	f04f 0200 	mov.w	r2, #0
 80068ee:	4b1f      	ldr	r3, [pc, #124]	; (800696c <_easing_calc_InOutQuad+0xb8>)
 80068f0:	f7f9 fcc6 	bl	8000280 <__aeabi_dmul>
 80068f4:	4602      	mov	r2, r0
 80068f6:	460b      	mov	r3, r1
 80068f8:	e02c      	b.n	8006954 <_easing_calc_InOutQuad+0xa0>
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7f9 ff4e 	bl	800079c <__aeabi_f2d>
 8006900:	4602      	mov	r2, r0
 8006902:	460b      	mov	r3, r1
 8006904:	f7f9 fdec 	bl	80004e0 <__adddf3>
 8006908:	4602      	mov	r2, r0
 800690a:	460b      	mov	r3, r1
 800690c:	f04f 0000 	mov.w	r0, #0
 8006910:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006914:	f7f9 fde2 	bl	80004dc <__aeabi_dsub>
 8006918:	4602      	mov	r2, r0
 800691a:	460b      	mov	r3, r1
 800691c:	4610      	mov	r0, r2
 800691e:	4619      	mov	r1, r3
 8006920:	f7fa f864 	bl	80009ec <__aeabi_d2f>
 8006924:	4603      	mov	r3, r0
 8006926:	ee00 3a10 	vmov	s0, r3
 800692a:	f7ff ff86 	bl	800683a <_easing_calc_InQuad>
 800692e:	ee10 3a10 	vmov	r3, s0
 8006932:	4618      	mov	r0, r3
 8006934:	f7f9 ff32 	bl	800079c <__aeabi_f2d>
 8006938:	f04f 0200 	mov.w	r2, #0
 800693c:	4b0b      	ldr	r3, [pc, #44]	; (800696c <_easing_calc_InOutQuad+0xb8>)
 800693e:	f7f9 fc9f 	bl	8000280 <__aeabi_dmul>
 8006942:	4602      	mov	r2, r0
 8006944:	460b      	mov	r3, r1
 8006946:	f04f 0000 	mov.w	r0, #0
 800694a:	4909      	ldr	r1, [pc, #36]	; (8006970 <_easing_calc_InOutQuad+0xbc>)
 800694c:	f7f9 fdc6 	bl	80004dc <__aeabi_dsub>
 8006950:	4602      	mov	r2, r0
 8006952:	460b      	mov	r3, r1
 8006954:	4610      	mov	r0, r2
 8006956:	4619      	mov	r1, r3
 8006958:	f7fa f848 	bl	80009ec <__aeabi_d2f>
 800695c:	4603      	mov	r3, r0
 800695e:	ee07 3a90 	vmov	s15, r3
}
 8006962:	eeb0 0a67 	vmov.f32	s0, s15
 8006966:	3708      	adds	r7, #8
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	3fe00000 	.word	0x3fe00000
 8006970:	3ff00000 	.word	0x3ff00000

08006974 <_easing_calc_InQuart>:

float _easing_calc_InQuart(const float t)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	ed87 0a01 	vstr	s0, [r7, #4]
    return t * t * t * t;
 800697e:	edd7 7a01 	vldr	s15, [r7, #4]
 8006982:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006986:	edd7 7a01 	vldr	s15, [r7, #4]
 800698a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800698e:	edd7 7a01 	vldr	s15, [r7, #4]
 8006992:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8006996:	eeb0 0a67 	vmov.f32	s0, s15
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <_easing_calc_OutQuart>:

float _easing_calc_OutQuart(const float t)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	ed87 0a01 	vstr	s0, [r7, #4]
    return 1. - _easing_calc_InQuart(1. - t);
 80069ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80069b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80069ba:	eeb0 0a67 	vmov.f32	s0, s15
 80069be:	f7ff ffd9 	bl	8006974 <_easing_calc_InQuart>
 80069c2:	ee10 3a10 	vmov	r3, s0
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7f9 fee8 	bl	800079c <__aeabi_f2d>
 80069cc:	4602      	mov	r2, r0
 80069ce:	460b      	mov	r3, r1
 80069d0:	f04f 0000 	mov.w	r0, #0
 80069d4:	4908      	ldr	r1, [pc, #32]	; (80069f8 <_easing_calc_OutQuart+0x54>)
 80069d6:	f7f9 fd81 	bl	80004dc <__aeabi_dsub>
 80069da:	4602      	mov	r2, r0
 80069dc:	460b      	mov	r3, r1
 80069de:	4610      	mov	r0, r2
 80069e0:	4619      	mov	r1, r3
 80069e2:	f7fa f803 	bl	80009ec <__aeabi_d2f>
 80069e6:	4603      	mov	r3, r0
 80069e8:	ee07 3a90 	vmov	s15, r3
}
 80069ec:	eeb0 0a67 	vmov.f32	s0, s15
 80069f0:	3708      	adds	r7, #8
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	3ff00000 	.word	0x3ff00000

080069fc <_easing_calc_InOutQuart>:

float _easing_calc_InOutQuart(const float t)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	ed87 0a01 	vstr	s0, [r7, #4]
    return (t < 0.5) ? _easing_calc_InQuart(t * 2.0) * 0.5 : 1 - _easing_calc_InQuart(2.0 - t * 2.0) * 0.5;
 8006a06:	edd7 7a01 	vldr	s15, [r7, #4]
 8006a0a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006a0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a16:	d514      	bpl.n	8006a42 <_easing_calc_InOutQuart+0x46>
 8006a18:	edd7 7a01 	vldr	s15, [r7, #4]
 8006a1c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006a20:	eeb0 0a67 	vmov.f32	s0, s15
 8006a24:	f7ff ffa6 	bl	8006974 <_easing_calc_InQuart>
 8006a28:	ee10 3a10 	vmov	r3, s0
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f7f9 feb5 	bl	800079c <__aeabi_f2d>
 8006a32:	f04f 0200 	mov.w	r2, #0
 8006a36:	4b1f      	ldr	r3, [pc, #124]	; (8006ab4 <_easing_calc_InOutQuart+0xb8>)
 8006a38:	f7f9 fc22 	bl	8000280 <__aeabi_dmul>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	460b      	mov	r3, r1
 8006a40:	e02c      	b.n	8006a9c <_easing_calc_InOutQuart+0xa0>
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f7f9 feaa 	bl	800079c <__aeabi_f2d>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	f7f9 fd48 	bl	80004e0 <__adddf3>
 8006a50:	4602      	mov	r2, r0
 8006a52:	460b      	mov	r3, r1
 8006a54:	f04f 0000 	mov.w	r0, #0
 8006a58:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006a5c:	f7f9 fd3e 	bl	80004dc <__aeabi_dsub>
 8006a60:	4602      	mov	r2, r0
 8006a62:	460b      	mov	r3, r1
 8006a64:	4610      	mov	r0, r2
 8006a66:	4619      	mov	r1, r3
 8006a68:	f7f9 ffc0 	bl	80009ec <__aeabi_d2f>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	ee00 3a10 	vmov	s0, r3
 8006a72:	f7ff ff7f 	bl	8006974 <_easing_calc_InQuart>
 8006a76:	ee10 3a10 	vmov	r3, s0
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7f9 fe8e 	bl	800079c <__aeabi_f2d>
 8006a80:	f04f 0200 	mov.w	r2, #0
 8006a84:	4b0b      	ldr	r3, [pc, #44]	; (8006ab4 <_easing_calc_InOutQuart+0xb8>)
 8006a86:	f7f9 fbfb 	bl	8000280 <__aeabi_dmul>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	f04f 0000 	mov.w	r0, #0
 8006a92:	4909      	ldr	r1, [pc, #36]	; (8006ab8 <_easing_calc_InOutQuart+0xbc>)
 8006a94:	f7f9 fd22 	bl	80004dc <__aeabi_dsub>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	4610      	mov	r0, r2
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	f7f9 ffa4 	bl	80009ec <__aeabi_d2f>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	ee07 3a90 	vmov	s15, r3
}
 8006aaa:	eeb0 0a67 	vmov.f32	s0, s15
 8006aae:	3708      	adds	r7, #8
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	3fe00000 	.word	0x3fe00000
 8006ab8:	3ff00000 	.word	0x3ff00000

08006abc <_easing_calc_InQuint>:

float _easing_calc_InQuint(const float t)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	ed87 0a01 	vstr	s0, [r7, #4]
    return t * t * t * t * t;
 8006ac6:	edd7 7a01 	vldr	s15, [r7, #4]
 8006aca:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006ace:	edd7 7a01 	vldr	s15, [r7, #4]
 8006ad2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006ad6:	edd7 7a01 	vldr	s15, [r7, #4]
 8006ada:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006ade:	edd7 7a01 	vldr	s15, [r7, #4]
 8006ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8006ae6:	eeb0 0a67 	vmov.f32	s0, s15
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <_easing_calc_OutQuint>:

float _easing_calc_OutQuint(const float t)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	ed87 0a01 	vstr	s0, [r7, #4]
    return 1. - _easing_calc_InQuint(1. - t);
 8006afe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b02:	edd7 7a01 	vldr	s15, [r7, #4]
 8006b06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b0a:	eeb0 0a67 	vmov.f32	s0, s15
 8006b0e:	f7ff ffd5 	bl	8006abc <_easing_calc_InQuint>
 8006b12:	ee10 3a10 	vmov	r3, s0
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7f9 fe40 	bl	800079c <__aeabi_f2d>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	460b      	mov	r3, r1
 8006b20:	f04f 0000 	mov.w	r0, #0
 8006b24:	4908      	ldr	r1, [pc, #32]	; (8006b48 <_easing_calc_OutQuint+0x54>)
 8006b26:	f7f9 fcd9 	bl	80004dc <__aeabi_dsub>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	4610      	mov	r0, r2
 8006b30:	4619      	mov	r1, r3
 8006b32:	f7f9 ff5b 	bl	80009ec <__aeabi_d2f>
 8006b36:	4603      	mov	r3, r0
 8006b38:	ee07 3a90 	vmov	s15, r3
}
 8006b3c:	eeb0 0a67 	vmov.f32	s0, s15
 8006b40:	3708      	adds	r7, #8
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	3ff00000 	.word	0x3ff00000

08006b4c <_easing_calc_InOutQuint>:

float _easing_calc_InOutQuint(const float t)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	ed87 0a01 	vstr	s0, [r7, #4]
    return (t < 0.5) ? _easing_calc_InQuint(t * 2.0) * 0.5 : 1 - _easing_calc_InQuint(2.0 - t * 2.0) * 0.5;
 8006b56:	edd7 7a01 	vldr	s15, [r7, #4]
 8006b5a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006b5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b66:	d514      	bpl.n	8006b92 <_easing_calc_InOutQuint+0x46>
 8006b68:	edd7 7a01 	vldr	s15, [r7, #4]
 8006b6c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006b70:	eeb0 0a67 	vmov.f32	s0, s15
 8006b74:	f7ff ffa2 	bl	8006abc <_easing_calc_InQuint>
 8006b78:	ee10 3a10 	vmov	r3, s0
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7f9 fe0d 	bl	800079c <__aeabi_f2d>
 8006b82:	f04f 0200 	mov.w	r2, #0
 8006b86:	4b1f      	ldr	r3, [pc, #124]	; (8006c04 <_easing_calc_InOutQuint+0xb8>)
 8006b88:	f7f9 fb7a 	bl	8000280 <__aeabi_dmul>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	460b      	mov	r3, r1
 8006b90:	e02c      	b.n	8006bec <_easing_calc_InOutQuint+0xa0>
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f7f9 fe02 	bl	800079c <__aeabi_f2d>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	f7f9 fca0 	bl	80004e0 <__adddf3>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	f04f 0000 	mov.w	r0, #0
 8006ba8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006bac:	f7f9 fc96 	bl	80004dc <__aeabi_dsub>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	4610      	mov	r0, r2
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	f7f9 ff18 	bl	80009ec <__aeabi_d2f>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	ee00 3a10 	vmov	s0, r3
 8006bc2:	f7ff ff7b 	bl	8006abc <_easing_calc_InQuint>
 8006bc6:	ee10 3a10 	vmov	r3, s0
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f7f9 fde6 	bl	800079c <__aeabi_f2d>
 8006bd0:	f04f 0200 	mov.w	r2, #0
 8006bd4:	4b0b      	ldr	r3, [pc, #44]	; (8006c04 <_easing_calc_InOutQuint+0xb8>)
 8006bd6:	f7f9 fb53 	bl	8000280 <__aeabi_dmul>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	460b      	mov	r3, r1
 8006bde:	f04f 0000 	mov.w	r0, #0
 8006be2:	4909      	ldr	r1, [pc, #36]	; (8006c08 <_easing_calc_InOutQuint+0xbc>)
 8006be4:	f7f9 fc7a 	bl	80004dc <__aeabi_dsub>
 8006be8:	4602      	mov	r2, r0
 8006bea:	460b      	mov	r3, r1
 8006bec:	4610      	mov	r0, r2
 8006bee:	4619      	mov	r1, r3
 8006bf0:	f7f9 fefc 	bl	80009ec <__aeabi_d2f>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	ee07 3a90 	vmov	s15, r3
}
 8006bfa:	eeb0 0a67 	vmov.f32	s0, s15
 8006bfe:	3708      	adds	r7, #8
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	3fe00000 	.word	0x3fe00000
 8006c08:	3ff00000 	.word	0x3ff00000
 8006c0c:	00000000 	.word	0x00000000

08006c10 <_easing_calc_InSine>:

float _easing_calc_InSine(const float t)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	ed87 0a01 	vstr	s0, [r7, #4]
    return 1.0 - cosf(t * (PI / 2));
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f7f9 fdbe 	bl	800079c <__aeabi_f2d>
 8006c20:	a30d      	add	r3, pc, #52	; (adr r3, 8006c58 <_easing_calc_InSine+0x48>)
 8006c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c26:	f7f9 fb2b 	bl	8000280 <__aeabi_dmul>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	4610      	mov	r0, r2
 8006c30:	4619      	mov	r1, r3
 8006c32:	f7f9 fedb 	bl	80009ec <__aeabi_d2f>
 8006c36:	4603      	mov	r3, r0
 8006c38:	ee00 3a10 	vmov	s0, r3
 8006c3c:	f004 ff52 	bl	800bae4 <cosf>
 8006c40:	eef0 7a40 	vmov.f32	s15, s0
 8006c44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c48:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8006c4c:	eeb0 0a67 	vmov.f32	s0, s15
 8006c50:	3708      	adds	r7, #8
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	4d12d84a 	.word	0x4d12d84a
 8006c5c:	3ff921fb 	.word	0x3ff921fb

08006c60 <_easing_calc_OutSine>:

float _easing_calc_OutSine(const float t)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	ed87 0a01 	vstr	s0, [r7, #4]
    return 1. - _easing_calc_InSine(1. - t);
 8006c6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8006c72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c76:	eeb0 0a67 	vmov.f32	s0, s15
 8006c7a:	f7ff ffc9 	bl	8006c10 <_easing_calc_InSine>
 8006c7e:	ee10 3a10 	vmov	r3, s0
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7f9 fd8a 	bl	800079c <__aeabi_f2d>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	f04f 0000 	mov.w	r0, #0
 8006c90:	4908      	ldr	r1, [pc, #32]	; (8006cb4 <_easing_calc_OutSine+0x54>)
 8006c92:	f7f9 fc23 	bl	80004dc <__aeabi_dsub>
 8006c96:	4602      	mov	r2, r0
 8006c98:	460b      	mov	r3, r1
 8006c9a:	4610      	mov	r0, r2
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	f7f9 fea5 	bl	80009ec <__aeabi_d2f>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	ee07 3a90 	vmov	s15, r3
}
 8006ca8:	eeb0 0a67 	vmov.f32	s0, s15
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	3ff00000 	.word	0x3ff00000

08006cb8 <_easing_calc_InOutSine>:

float _easing_calc_InOutSine(const float t)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	ed87 0a01 	vstr	s0, [r7, #4]
    return (t < 0.5) ? _easing_calc_InSine(t * 2.0) * 0.5 : 1 - _easing_calc_InSine(2.0 - t * 2.0) * 0.5;
 8006cc2:	edd7 7a01 	vldr	s15, [r7, #4]
 8006cc6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006cca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cd2:	d514      	bpl.n	8006cfe <_easing_calc_InOutSine+0x46>
 8006cd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8006cd8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006cdc:	eeb0 0a67 	vmov.f32	s0, s15
 8006ce0:	f7ff ff96 	bl	8006c10 <_easing_calc_InSine>
 8006ce4:	ee10 3a10 	vmov	r3, s0
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f7f9 fd57 	bl	800079c <__aeabi_f2d>
 8006cee:	f04f 0200 	mov.w	r2, #0
 8006cf2:	4b1f      	ldr	r3, [pc, #124]	; (8006d70 <_easing_calc_InOutSine+0xb8>)
 8006cf4:	f7f9 fac4 	bl	8000280 <__aeabi_dmul>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	e02c      	b.n	8006d58 <_easing_calc_InOutSine+0xa0>
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f7f9 fd4c 	bl	800079c <__aeabi_f2d>
 8006d04:	4602      	mov	r2, r0
 8006d06:	460b      	mov	r3, r1
 8006d08:	f7f9 fbea 	bl	80004e0 <__adddf3>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	460b      	mov	r3, r1
 8006d10:	f04f 0000 	mov.w	r0, #0
 8006d14:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006d18:	f7f9 fbe0 	bl	80004dc <__aeabi_dsub>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	460b      	mov	r3, r1
 8006d20:	4610      	mov	r0, r2
 8006d22:	4619      	mov	r1, r3
 8006d24:	f7f9 fe62 	bl	80009ec <__aeabi_d2f>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	ee00 3a10 	vmov	s0, r3
 8006d2e:	f7ff ff6f 	bl	8006c10 <_easing_calc_InSine>
 8006d32:	ee10 3a10 	vmov	r3, s0
 8006d36:	4618      	mov	r0, r3
 8006d38:	f7f9 fd30 	bl	800079c <__aeabi_f2d>
 8006d3c:	f04f 0200 	mov.w	r2, #0
 8006d40:	4b0b      	ldr	r3, [pc, #44]	; (8006d70 <_easing_calc_InOutSine+0xb8>)
 8006d42:	f7f9 fa9d 	bl	8000280 <__aeabi_dmul>
 8006d46:	4602      	mov	r2, r0
 8006d48:	460b      	mov	r3, r1
 8006d4a:	f04f 0000 	mov.w	r0, #0
 8006d4e:	4909      	ldr	r1, [pc, #36]	; (8006d74 <_easing_calc_InOutSine+0xbc>)
 8006d50:	f7f9 fbc4 	bl	80004dc <__aeabi_dsub>
 8006d54:	4602      	mov	r2, r0
 8006d56:	460b      	mov	r3, r1
 8006d58:	4610      	mov	r0, r2
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	f7f9 fe46 	bl	80009ec <__aeabi_d2f>
 8006d60:	4603      	mov	r3, r0
 8006d62:	ee07 3a90 	vmov	s15, r3
}
 8006d66:	eeb0 0a67 	vmov.f32	s0, s15
 8006d6a:	3708      	adds	r7, #8
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	3fe00000 	.word	0x3fe00000
 8006d74:	3ff00000 	.word	0x3ff00000

08006d78 <_easing_calc_InBack>:

float _easing_calc_InBack(const float t)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	ed87 0a01 	vstr	s0, [r7, #4]
    return 3 * t * t * t - 2 * t * t;
 8006d82:	edd7 7a01 	vldr	s15, [r7, #4]
 8006d86:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8006d8a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006d8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8006d92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006d96:	edd7 7a01 	vldr	s15, [r7, #4]
 8006d9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006d9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8006da2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006da6:	edd7 7a01 	vldr	s15, [r7, #4]
 8006daa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006dae:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8006db2:	eeb0 0a67 	vmov.f32	s0, s15
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <_easing_calc_OutBack>:

float _easing_calc_OutBack(const float t)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	ed87 0a01 	vstr	s0, [r7, #4]
    return 1. - _easing_calc_InBack(1. - t);
 8006dca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006dce:	edd7 7a01 	vldr	s15, [r7, #4]
 8006dd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006dd6:	eeb0 0a67 	vmov.f32	s0, s15
 8006dda:	f7ff ffcd 	bl	8006d78 <_easing_calc_InBack>
 8006dde:	ee10 3a10 	vmov	r3, s0
 8006de2:	4618      	mov	r0, r3
 8006de4:	f7f9 fcda 	bl	800079c <__aeabi_f2d>
 8006de8:	4602      	mov	r2, r0
 8006dea:	460b      	mov	r3, r1
 8006dec:	f04f 0000 	mov.w	r0, #0
 8006df0:	4908      	ldr	r1, [pc, #32]	; (8006e14 <_easing_calc_OutBack+0x54>)
 8006df2:	f7f9 fb73 	bl	80004dc <__aeabi_dsub>
 8006df6:	4602      	mov	r2, r0
 8006df8:	460b      	mov	r3, r1
 8006dfa:	4610      	mov	r0, r2
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	f7f9 fdf5 	bl	80009ec <__aeabi_d2f>
 8006e02:	4603      	mov	r3, r0
 8006e04:	ee07 3a90 	vmov	s15, r3
}
 8006e08:	eeb0 0a67 	vmov.f32	s0, s15
 8006e0c:	3708      	adds	r7, #8
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	3ff00000 	.word	0x3ff00000

08006e18 <_easing_calc_InOutBack>:

float _easing_calc_InOutBack(const float t)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	ed87 0a01 	vstr	s0, [r7, #4]
    return (t < 0.5) ? _easing_calc_InBack(t * 2.0) * 0.5 : 1 - _easing_calc_InBack(2.0 - t * 2.0) * 0.5;
 8006e22:	edd7 7a01 	vldr	s15, [r7, #4]
 8006e26:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006e2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e32:	d514      	bpl.n	8006e5e <_easing_calc_InOutBack+0x46>
 8006e34:	edd7 7a01 	vldr	s15, [r7, #4]
 8006e38:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006e3c:	eeb0 0a67 	vmov.f32	s0, s15
 8006e40:	f7ff ff9a 	bl	8006d78 <_easing_calc_InBack>
 8006e44:	ee10 3a10 	vmov	r3, s0
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f7f9 fca7 	bl	800079c <__aeabi_f2d>
 8006e4e:	f04f 0200 	mov.w	r2, #0
 8006e52:	4b1f      	ldr	r3, [pc, #124]	; (8006ed0 <_easing_calc_InOutBack+0xb8>)
 8006e54:	f7f9 fa14 	bl	8000280 <__aeabi_dmul>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	e02c      	b.n	8006eb8 <_easing_calc_InOutBack+0xa0>
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f7f9 fc9c 	bl	800079c <__aeabi_f2d>
 8006e64:	4602      	mov	r2, r0
 8006e66:	460b      	mov	r3, r1
 8006e68:	f7f9 fb3a 	bl	80004e0 <__adddf3>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	460b      	mov	r3, r1
 8006e70:	f04f 0000 	mov.w	r0, #0
 8006e74:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006e78:	f7f9 fb30 	bl	80004dc <__aeabi_dsub>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	460b      	mov	r3, r1
 8006e80:	4610      	mov	r0, r2
 8006e82:	4619      	mov	r1, r3
 8006e84:	f7f9 fdb2 	bl	80009ec <__aeabi_d2f>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	ee00 3a10 	vmov	s0, r3
 8006e8e:	f7ff ff73 	bl	8006d78 <_easing_calc_InBack>
 8006e92:	ee10 3a10 	vmov	r3, s0
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7f9 fc80 	bl	800079c <__aeabi_f2d>
 8006e9c:	f04f 0200 	mov.w	r2, #0
 8006ea0:	4b0b      	ldr	r3, [pc, #44]	; (8006ed0 <_easing_calc_InOutBack+0xb8>)
 8006ea2:	f7f9 f9ed 	bl	8000280 <__aeabi_dmul>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	460b      	mov	r3, r1
 8006eaa:	f04f 0000 	mov.w	r0, #0
 8006eae:	4909      	ldr	r1, [pc, #36]	; (8006ed4 <_easing_calc_InOutBack+0xbc>)
 8006eb0:	f7f9 fb14 	bl	80004dc <__aeabi_dsub>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	4610      	mov	r0, r2
 8006eba:	4619      	mov	r1, r3
 8006ebc:	f7f9 fd96 	bl	80009ec <__aeabi_d2f>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	ee07 3a90 	vmov	s15, r3
}
 8006ec6:	eeb0 0a67 	vmov.f32	s0, s15
 8006eca:	3708      	adds	r7, #8
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}
 8006ed0:	3fe00000 	.word	0x3fe00000
 8006ed4:	3ff00000 	.word	0x3ff00000

08006ed8 <easing_create>:
    easing_mode_t dwMode,
    easing_calc_t lpfnCalc,
    easing_pos_t  nOffset,
    uint16_t      nFrameCount,
    uint16_t      nInterval)
{
 8006ed8:	b4b0      	push	{r4, r5, r7}
 8006eda:	b091      	sub	sp, #68	; 0x44
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	607a      	str	r2, [r7, #4]
 8006ee2:	ed87 0a00 	vstr	s0, [r7]
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	460b      	mov	r3, r1
 8006eea:	72fb      	strb	r3, [r7, #11]
 8006eec:	4613      	mov	r3, r2
 8006eee:	813b      	strh	r3, [r7, #8]
    easing_t easing = {
 8006ef0:	7afb      	ldrb	r3, [r7, #11]
 8006ef2:	743b      	strb	r3, [r7, #16]
        .dwMode      = dwMode,
        .lpfnCalc    = lpfnCalc == 0 ? _easing_calc_Linear : lpfnCalc,
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d001      	beq.n	8006efe <easing_create+0x26>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	e000      	b.n	8006f00 <easing_create+0x28>
 8006efe:	4b1e      	ldr	r3, [pc, #120]	; (8006f78 <easing_create+0xa0>)
    easing_t easing = {
 8006f00:	617b      	str	r3, [r7, #20]
 8006f02:	f04f 0300 	mov.w	r3, #0
 8006f06:	61bb      	str	r3, [r7, #24]
 8006f08:	f04f 0300 	mov.w	r3, #0
 8006f0c:	61fb      	str	r3, [r7, #28]
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	623b      	str	r3, [r7, #32]
 8006f12:	f04f 0300 	mov.w	r3, #0
 8006f16:	627b      	str	r3, [r7, #36]	; 0x24
 8006f18:	f04f 0300 	mov.w	r3, #0
 8006f1c:	62bb      	str	r3, [r7, #40]	; 0x28
        .nStop       = 0,
        .nDelta      = 0,
        .nCurrent    = 0,
        .nOffset     = nOffset,
        .nFrameIndex = 0,
        .nFrameCount = (nFrameCount < 2) ? 2 : nFrameCount,
 8006f1e:	893b      	ldrh	r3, [r7, #8]
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	bf38      	it	cc
 8006f24:	2302      	movcc	r3, #2
 8006f26:	b29b      	uxth	r3, r3
    easing_t easing = {
 8006f28:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006f2e:	f04f 0300 	mov.w	r3, #0
 8006f32:	633b      	str	r3, [r7, #48]	; 0x30
 8006f34:	2300      	movs	r3, #0
 8006f36:	86bb      	strh	r3, [r7, #52]	; 0x34
        .fProgress   = 0.f,
        .nInterval   = nInterval,
        .nMills      = 0,
        .bDirection  = dwMode & EASING_DIR_REVERSE,
 8006f38:	7afb      	ldrb	r3, [r7, #11]
 8006f3a:	f003 0304 	and.w	r3, r3, #4
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	bf14      	ite	ne
 8006f42:	2301      	movne	r3, #1
 8006f44:	2300      	moveq	r3, #0
 8006f46:	b2db      	uxtb	r3, r3
    easing_t easing = {
 8006f48:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f50:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006f54:	87bb      	strh	r3, [r7, #60]	; 0x3c
        .nTimes      = 0,
    };

    return easing;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	461d      	mov	r5, r3
 8006f5a:	f107 0410 	add.w	r4, r7, #16
 8006f5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006f60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006f62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006f64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006f66:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006f6a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8006f6e:	68f8      	ldr	r0, [r7, #12]
 8006f70:	3744      	adds	r7, #68	; 0x44
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bcb0      	pop	{r4, r5, r7}
 8006f76:	4770      	bx	lr
 8006f78:	0800681d 	.word	0x0800681d

08006f7c <easing_start_absolute>:

void easing_start_absolute(
    easing_t*    pEasing,
    easing_pos_t nStart,
    easing_pos_t nStop)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	ed87 0a02 	vstr	s0, [r7, #8]
 8006f88:	edc7 0a01 	vstr	s1, [r7, #4]
    pEasing->nStart = nStart;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	68ba      	ldr	r2, [r7, #8]
 8006f90:	609a      	str	r2, [r3, #8]
    pEasing->nStop  = nStop;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	60da      	str	r2, [r3, #12]
    pEasing->nDelta = nStop - nStart;
 8006f98:	ed97 7a01 	vldr	s14, [r7, #4]
 8006f9c:	edd7 7a02 	vldr	s15, [r7, #8]
 8006fa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	edc3 7a05 	vstr	s15, [r3, #20]

    pEasing->nFrameIndex = 0;  // first frame is nStart
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	83da      	strh	r2, [r3, #30]
    pEasing->fProgress   = 0.f;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f04f 0200 	mov.w	r2, #0
 8006fb6:	621a      	str	r2, [r3, #32]

    pEasing->bDirection = pEasing->dwMode & EASING_DIR_REVERSE;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	f003 0304 	and.w	r3, r3, #4
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	bf14      	ite	ne
 8006fc4:	2301      	movne	r3, #1
 8006fc6:	2300      	moveq	r3, #0
 8006fc8:	b2da      	uxtb	r2, r3
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    if (pEasing->dwMode & EASING_TIMES_INFINITE) {
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	f003 0302 	and.w	r3, r3, #2
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d004      	beq.n	8006fe6 <easing_start_absolute+0x6a>
        pEasing->nTimes = -1;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006fe2:	849a      	strh	r2, [r3, #36]	; 0x24
 8006fe4:	e01d      	b.n	8007022 <easing_start_absolute+0xa6>
    } else {
        pEasing->nTimes = (pEasing->dwMode & EASING_TIMES_MANYTIMES) ? (pEasing->dwMode >> EASING_TIMES_SET) : 1;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	f003 0301 	and.w	r3, r3, #1
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d005      	beq.n	8006ffe <easing_start_absolute+0x82>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	091b      	lsrs	r3, r3, #4
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	b21a      	sxth	r2, r3
 8006ffc:	e000      	b.n	8007000 <easing_start_absolute+0x84>
 8006ffe:	2201      	movs	r2, #1
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	849a      	strh	r2, [r3, #36]	; 0x24
        if (pEasing->dwMode & EASING_DIR_BACKANDFORTH) pEasing->nTimes *= 2;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	f003 0308 	and.w	r3, r3, #8
 800700c:	2b00      	cmp	r3, #0
 800700e:	d008      	beq.n	8007022 <easing_start_absolute+0xa6>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8007016:	b29b      	uxth	r3, r3
 8007018:	005b      	lsls	r3, r3, #1
 800701a:	b29b      	uxth	r3, r3
 800701c:	b21a      	sxth	r2, r3
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	849a      	strh	r2, [r3, #36]	; 0x24
    }

#ifdef easing_mills
    pEasing->nMills = easing_mills();
 8007022:	f7fb fc73 	bl	800290c <HAL_GetTick>
 8007026:	4602      	mov	r2, r0
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
 800702c:	bf00      	nop
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <easing_start_relative>:

void easing_start_relative(
    easing_t*    pEasing,
    easing_pos_t nDistance)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b082      	sub	sp, #8
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	ed87 0a00 	vstr	s0, [r7]
    easing_start_absolute(
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	edd3 6a06 	vldr	s13, [r3, #24]
#if 1
        pEasing->nCurrent,  // from current pos
#else
        easing->nStop,  // from stop pos
#endif
        pEasing->nStop + nDistance);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	ed93 7a03 	vldr	s14, [r3, #12]
    easing_start_absolute(
 800704c:	edd7 7a00 	vldr	s15, [r7]
 8007050:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007054:	eef0 0a67 	vmov.f32	s1, s15
 8007058:	eeb0 0a66 	vmov.f32	s0, s13
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f7ff ff8d 	bl	8006f7c <easing_start_absolute>
}
 8007062:	bf00      	nop
 8007064:	3708      	adds	r7, #8
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}

0800706a <easing_update>:

void easing_update(easing_t* pEasing)
{
 800706a:	b580      	push	{r7, lr}
 800706c:	ed2d 8b02 	vpush	{d8}
 8007070:	b082      	sub	sp, #8
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
    // isok
    if (pEasing->nTimes == 0) return;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800707c:	2b00      	cmp	r3, #0
 800707e:	f000 80ad 	beq.w	80071dc <easing_update+0x172>

#ifdef easing_mills
    if (pEasing->nInterval > 0) {
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00f      	beq.n	80070aa <easing_update+0x40>
        if (easing_mills() < pEasing->nMills) return;
 800708a:	f7fb fc3f 	bl	800290c <HAL_GetTick>
 800708e:	4602      	mov	r2, r0
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007094:	429a      	cmp	r2, r3
 8007096:	f0c0 80a3 	bcc.w	80071e0 <easing_update+0x176>
        pEasing->nMills = easing_mills() + pEasing->nInterval;
 800709a:	f7fb fc37 	bl	800290c <HAL_GetTick>
 800709e:	4602      	mov	r2, r0
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80070a4:	441a      	add	r2, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	629a      	str	r2, [r3, #40]	; 0x28
    }
#endif

    // next frame
    ++pEasing->nFrameIndex;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	8bdb      	ldrh	r3, [r3, #30]
 80070ae:	3301      	adds	r3, #1
 80070b0:	b29a      	uxth	r2, r3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	83da      	strh	r2, [r3, #30]

    if (pEasing->nFrameIndex > pEasing->nFrameCount) {
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	8bda      	ldrh	r2, [r3, #30]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	8b9b      	ldrh	r3, [r3, #28]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d91d      	bls.n	80070fe <easing_update+0x94>
        if (pEasing->dwMode & EASING_DIR_BACKANDFORTH) {
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	f003 0308 	and.w	r3, r3, #8
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d014      	beq.n	80070f8 <easing_update+0x8e>
            // reverse direction
            pEasing->bDirection = !pEasing->bDirection;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	bf14      	ite	ne
 80070d8:	2301      	movne	r3, #1
 80070da:	2300      	moveq	r3, #0
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	f083 0301 	eor.w	r3, r3, #1
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	f003 0301 	and.w	r3, r3, #1
 80070e8:	b2da      	uxtb	r2, r3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
            // skip once nStart/nStop pos
            pEasing->nFrameIndex = 2;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2202      	movs	r2, #2
 80070f4:	83da      	strh	r2, [r3, #30]
 80070f6:	e002      	b.n	80070fe <easing_update+0x94>
        } else {
            // at first frame
            pEasing->nFrameIndex = 1;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	83da      	strh	r2, [r3, #30]
        }
    }

    if (pEasing->nFrameIndex == pEasing->nFrameCount) {
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	8bda      	ldrh	r2, [r3, #30]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	8b9b      	ldrh	r3, [r3, #28]
 8007106:	429a      	cmp	r2, r3
 8007108:	d123      	bne.n	8007152 <easing_update+0xe8>
        // at last frame
        pEasing->fProgress = 1.f;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007110:	621a      	str	r2, [r3, #32]
        pEasing->nCurrent  = pEasing->bDirection ? pEasing->nStart : pEasing->nStop;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007118:	2b00      	cmp	r3, #0
 800711a:	d002      	beq.n	8007122 <easing_update+0xb8>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	e001      	b.n	8007126 <easing_update+0xbc>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	6193      	str	r3, [r2, #24]
        // decrease times
        if (!(pEasing->dwMode & EASING_TIMES_INFINITE))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	f003 0302 	and.w	r3, r3, #2
 8007132:	2b00      	cmp	r3, #0
 8007134:	d155      	bne.n	80071e2 <easing_update+0x178>
            if (--pEasing->nTimes) return;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800713c:	b29b      	uxth	r3, r3
 800713e:	3b01      	subs	r3, #1
 8007140:	b29b      	uxth	r3, r3
 8007142:	b21a      	sxth	r2, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	849a      	strh	r2, [r3, #36]	; 0x24
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800714e:	2b00      	cmp	r3, #0
 8007150:	e047      	b.n	80071e2 <easing_update+0x178>
    } else {
        // calculate progress
        pEasing->fProgress = (float)(pEasing->nFrameIndex - 1) / (pEasing->nFrameCount - 1);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	8bdb      	ldrh	r3, [r3, #30]
 8007156:	3b01      	subs	r3, #1
 8007158:	ee07 3a90 	vmov	s15, r3
 800715c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	8b9b      	ldrh	r3, [r3, #28]
 8007164:	3b01      	subs	r3, #1
 8007166:	ee07 3a90 	vmov	s15, r3
 800716a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800716e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	edc3 7a08 	vstr	s15, [r3, #32]
        // calculate position
        pEasing->nCurrent = pEasing->bDirection ?
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
                                (pEasing->nStop - pEasing->nDelta * pEasing->lpfnCalc(pEasing->fProgress)) :
 800717e:	2b00      	cmp	r3, #0
 8007180:	d014      	beq.n	80071ac <easing_update+0x142>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	ed93 8a03 	vldr	s16, [r3, #12]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	edd3 8a05 	vldr	s17, [r3, #20]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	edd2 7a08 	vldr	s15, [r2, #32]
 8007198:	eeb0 0a67 	vmov.f32	s0, s15
 800719c:	4798      	blx	r3
 800719e:	eef0 7a40 	vmov.f32	s15, s0
 80071a2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80071a6:	ee78 7a67 	vsub.f32	s15, s16, s15
 80071aa:	e013      	b.n	80071d4 <easing_update+0x16a>
                                (pEasing->nStart + pEasing->nDelta * pEasing->lpfnCalc(pEasing->fProgress));
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	ed93 8a02 	vldr	s16, [r3, #8]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	edd3 8a05 	vldr	s17, [r3, #20]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	edd2 7a08 	vldr	s15, [r2, #32]
 80071c2:	eeb0 0a67 	vmov.f32	s0, s15
 80071c6:	4798      	blx	r3
 80071c8:	eef0 7a40 	vmov.f32	s15, s0
 80071cc:	ee68 7aa7 	vmul.f32	s15, s17, s15
                                (pEasing->nStop - pEasing->nDelta * pEasing->lpfnCalc(pEasing->fProgress)) :
 80071d0:	ee78 7a27 	vadd.f32	s15, s16, s15
        pEasing->nCurrent = pEasing->bDirection ?
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	edc3 7a06 	vstr	s15, [r3, #24]
 80071da:	e002      	b.n	80071e2 <easing_update+0x178>
    if (pEasing->nTimes == 0) return;
 80071dc:	bf00      	nop
 80071de:	e000      	b.n	80071e2 <easing_update+0x178>
        if (easing_mills() < pEasing->nMills) return;
 80071e0:	bf00      	nop
    }
}
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	ecbd 8b02 	vpop	{d8}
 80071ea:	bd80      	pop	{r7, pc}

080071ec <easing_isok>:

#define INLINE

INLINE bool easing_isok(easing_t* pEasing)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
    return pEasing->nTimes == 0;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	bf0c      	ite	eq
 80071fe:	2301      	moveq	r3, #1
 8007200:	2300      	movne	r3, #0
 8007202:	b2db      	uxtb	r3, r3
}
 8007204:	4618      	mov	r0, r3
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <easing_stop>:

INLINE void easing_stop(easing_t* pEasing, easing_pos_t nCurrent)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	ed87 0a00 	vstr	s0, [r7]
    pEasing->nTimes   = 0;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	849a      	strh	r2, [r3, #36]	; 0x24
    pEasing->nCurrent = nCurrent;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	683a      	ldr	r2, [r7, #0]
 8007226:	619a      	str	r2, [r3, #24]
}
 8007228:	bf00      	nop
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <easing_curpos>:

INLINE easing_pos_t easing_curpos(easing_t* pEasing)
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
    return pEasing->nCurrent + pEasing->nOffset;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	ed93 7a06 	vldr	s14, [r3, #24]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	edd3 7a04 	vldr	s15, [r3, #16]
 8007248:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800724c:	eeb0 0a67 	vmov.f32	s0, s15
 8007250:	370c      	adds	r7, #12
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr
	...

0800725c <key_val>:

key_id_t    key_id;  // current
key_state_t keys[KEY_ID_END];

bool key_val(key_id_t id)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	4603      	mov	r3, r0
 8007264:	71fb      	strb	r3, [r7, #7]
    switch (id) {
 8007266:	79fb      	ldrb	r3, [r7, #7]
 8007268:	2b03      	cmp	r3, #3
 800726a:	d01b      	beq.n	80072a4 <key_val+0x48>
 800726c:	2b03      	cmp	r3, #3
 800726e:	dc24      	bgt.n	80072ba <key_val+0x5e>
 8007270:	2b01      	cmp	r3, #1
 8007272:	d00c      	beq.n	800728e <key_val+0x32>
 8007274:	2b02      	cmp	r3, #2
 8007276:	d120      	bne.n	80072ba <key_val+0x5e>
        case KEY_ID_OK: return HAL_GPIO_ReadPin(KEY_C1_GPIO_Port, KEY_C1_Pin) == GPIO_PIN_RESET;    // b
 8007278:	2108      	movs	r1, #8
 800727a:	4813      	ldr	r0, [pc, #76]	; (80072c8 <key_val+0x6c>)
 800727c:	f7fc f93a 	bl	80034f4 <HAL_GPIO_ReadPin>
 8007280:	4603      	mov	r3, r0
 8007282:	2b00      	cmp	r3, #0
 8007284:	bf0c      	ite	eq
 8007286:	2301      	moveq	r3, #1
 8007288:	2300      	movne	r3, #0
 800728a:	b2db      	uxtb	r3, r3
 800728c:	e017      	b.n	80072be <key_val+0x62>
        case KEY_ID_PREV: return HAL_GPIO_ReadPin(KEY_C3_GPIO_Port, KEY_C3_Pin) == GPIO_PIN_RESET;  // d
 800728e:	2104      	movs	r1, #4
 8007290:	480d      	ldr	r0, [pc, #52]	; (80072c8 <key_val+0x6c>)
 8007292:	f7fc f92f 	bl	80034f4 <HAL_GPIO_ReadPin>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	bf0c      	ite	eq
 800729c:	2301      	moveq	r3, #1
 800729e:	2300      	movne	r3, #0
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	e00c      	b.n	80072be <key_val+0x62>
        case KEY_ID_NEXT: return HAL_GPIO_ReadPin(KEY_C2_GPIO_Port, KEY_C2_Pin) == GPIO_PIN_RESET;  // c
 80072a4:	2110      	movs	r1, #16
 80072a6:	4808      	ldr	r0, [pc, #32]	; (80072c8 <key_val+0x6c>)
 80072a8:	f7fc f924 	bl	80034f4 <HAL_GPIO_ReadPin>
 80072ac:	4603      	mov	r3, r0
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	bf0c      	ite	eq
 80072b2:	2301      	moveq	r3, #1
 80072b4:	2300      	movne	r3, #0
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	e001      	b.n	80072be <key_val+0x62>
        default: break;
 80072ba:	bf00      	nop
    }
    return false;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3708      	adds	r7, #8
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	40021000 	.word	0x40021000

080072cc <key_init>:

void key_init(void)
{
 80072cc:	b590      	push	{r4, r7, lr}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < ARRAY_SIZE(keys); ++i)
 80072d2:	2300      	movs	r3, #0
 80072d4:	71fb      	strb	r3, [r7, #7]
 80072d6:	e018      	b.n	800730a <key_init+0x3e>
        keys[i].cur = keys[i].last = key_val(i + KEY_ID_START);
 80072d8:	79fb      	ldrb	r3, [r7, #7]
 80072da:	3301      	adds	r3, #1
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	79fc      	ldrb	r4, [r7, #7]
 80072e0:	4618      	mov	r0, r3
 80072e2:	f7ff ffbb 	bl	800725c <key_val>
 80072e6:	4603      	mov	r3, r0
 80072e8:	4619      	mov	r1, r3
 80072ea:	4a0c      	ldr	r2, [pc, #48]	; (800731c <key_init+0x50>)
 80072ec:	0063      	lsls	r3, r4, #1
 80072ee:	4413      	add	r3, r2
 80072f0:	460a      	mov	r2, r1
 80072f2:	705a      	strb	r2, [r3, #1]
 80072f4:	79fa      	ldrb	r2, [r7, #7]
 80072f6:	4909      	ldr	r1, [pc, #36]	; (800731c <key_init+0x50>)
 80072f8:	0063      	lsls	r3, r4, #1
 80072fa:	440b      	add	r3, r1
 80072fc:	7859      	ldrb	r1, [r3, #1]
 80072fe:	4b07      	ldr	r3, [pc, #28]	; (800731c <key_init+0x50>)
 8007300:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
    for (uint8_t i = 0; i < ARRAY_SIZE(keys); ++i)
 8007304:	79fb      	ldrb	r3, [r7, #7]
 8007306:	3301      	adds	r3, #1
 8007308:	71fb      	strb	r3, [r7, #7]
 800730a:	79fb      	ldrb	r3, [r7, #7]
 800730c:	2b02      	cmp	r3, #2
 800730e:	d9e3      	bls.n	80072d8 <key_init+0xc>
}
 8007310:	bf00      	nop
 8007312:	bf00      	nop
 8007314:	370c      	adds	r7, #12
 8007316:	46bd      	mov	sp, r7
 8007318:	bd90      	pop	{r4, r7, pc}
 800731a:	bf00      	nop
 800731c:	2000026c 	.word	0x2000026c

08007320 <key_scan>:

key_id_t key_scan(void)
{
 8007320:	b590      	push	{r4, r7, lr}
 8007322:	b085      	sub	sp, #20
 8007324:	af02      	add	r7, sp, #8
    for (key_id_t i = 0; i <= ARRAY_SIZE(keys); ++i) {
 8007326:	2300      	movs	r3, #0
 8007328:	71fb      	strb	r3, [r7, #7]
 800732a:	e03c      	b.n	80073a6 <key_scan+0x86>
        keys[i].cur = key_val(i + KEY_ID_START);
 800732c:	79fb      	ldrb	r3, [r7, #7]
 800732e:	3301      	adds	r3, #1
 8007330:	b2db      	uxtb	r3, r3
 8007332:	79fc      	ldrb	r4, [r7, #7]
 8007334:	4618      	mov	r0, r3
 8007336:	f7ff ff91 	bl	800725c <key_val>
 800733a:	4603      	mov	r3, r0
 800733c:	461a      	mov	r2, r3
 800733e:	4b1e      	ldr	r3, [pc, #120]	; (80073b8 <key_scan+0x98>)
 8007340:	f803 2014 	strb.w	r2, [r3, r4, lsl #1]
        if (keys[i].last != keys[i].cur) {
 8007344:	79fb      	ldrb	r3, [r7, #7]
 8007346:	4a1c      	ldr	r2, [pc, #112]	; (80073b8 <key_scan+0x98>)
 8007348:	005b      	lsls	r3, r3, #1
 800734a:	4413      	add	r3, r2
 800734c:	785a      	ldrb	r2, [r3, #1]
 800734e:	79fb      	ldrb	r3, [r7, #7]
 8007350:	4919      	ldr	r1, [pc, #100]	; (80073b8 <key_scan+0x98>)
 8007352:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8007356:	429a      	cmp	r2, r3
 8007358:	d022      	beq.n	80073a0 <key_scan+0x80>
            keys[i].last = keys[i].cur;
 800735a:	79fa      	ldrb	r2, [r7, #7]
 800735c:	79fb      	ldrb	r3, [r7, #7]
 800735e:	4916      	ldr	r1, [pc, #88]	; (80073b8 <key_scan+0x98>)
 8007360:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 8007364:	4a14      	ldr	r2, [pc, #80]	; (80073b8 <key_scan+0x98>)
 8007366:	005b      	lsls	r3, r3, #1
 8007368:	4413      	add	r3, r2
 800736a:	460a      	mov	r2, r1
 800736c:	705a      	strb	r2, [r3, #1]
            printv("%d", keys[i].cur);
 800736e:	79fb      	ldrb	r3, [r7, #7]
 8007370:	4a11      	ldr	r2, [pc, #68]	; (80073b8 <key_scan+0x98>)
 8007372:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8007376:	9300      	str	r3, [sp, #0]
 8007378:	4b10      	ldr	r3, [pc, #64]	; (80073bc <key_scan+0x9c>)
 800737a:	4a11      	ldr	r2, [pc, #68]	; (80073c0 <key_scan+0xa0>)
 800737c:	211e      	movs	r1, #30
 800737e:	4811      	ldr	r0, [pc, #68]	; (80073c4 <key_scan+0xa4>)
 8007380:	f003 f9e6 	bl	800a750 <iprintf>
            if (keys[i].cur)
 8007384:	79fb      	ldrb	r3, [r7, #7]
 8007386:	4a0c      	ldr	r2, [pc, #48]	; (80073b8 <key_scan+0x98>)
 8007388:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d007      	beq.n	80073a0 <key_scan+0x80>
                return key_id = i + KEY_ID_START;  // key pressed
 8007390:	79fb      	ldrb	r3, [r7, #7]
 8007392:	3301      	adds	r3, #1
 8007394:	b2da      	uxtb	r2, r3
 8007396:	4b0c      	ldr	r3, [pc, #48]	; (80073c8 <key_scan+0xa8>)
 8007398:	701a      	strb	r2, [r3, #0]
 800739a:	4b0b      	ldr	r3, [pc, #44]	; (80073c8 <key_scan+0xa8>)
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	e006      	b.n	80073ae <key_scan+0x8e>
    for (key_id_t i = 0; i <= ARRAY_SIZE(keys); ++i) {
 80073a0:	79fb      	ldrb	r3, [r7, #7]
 80073a2:	3301      	adds	r3, #1
 80073a4:	71fb      	strb	r3, [r7, #7]
 80073a6:	79fb      	ldrb	r3, [r7, #7]
 80073a8:	2b03      	cmp	r3, #3
 80073aa:	d9bf      	bls.n	800732c <key_scan+0xc>
        }
    }
    return KEY_ID_NONE;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	370c      	adds	r7, #12
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd90      	pop	{r4, r7, pc}
 80073b6:	bf00      	nop
 80073b8:	2000026c 	.word	0x2000026c
 80073bc:	0800df50 	.word	0x0800df50
 80073c0:	0800e4d8 	.word	0x0800e4d8
 80073c4:	0800df5c 	.word	0x0800df5c
 80073c8:	2000026a 	.word	0x2000026a

080073cc <memcpy_byte>:
#include "oled.h"

void* memcpy_byte(void* dst, const void* src, int n)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b087      	sub	sp, #28
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	607a      	str	r2, [r7, #4]
    if (dst == NULL || src == NULL || n <= 0)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d005      	beq.n	80073ea <memcpy_byte+0x1e>
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d002      	beq.n	80073ea <memcpy_byte+0x1e>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	dc01      	bgt.n	80073ee <memcpy_byte+0x22>
        return NULL;
 80073ea:	2300      	movs	r3, #0
 80073ec:	e034      	b.n	8007458 <memcpy_byte+0x8c>

    char* pdst = (char*)dst;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	617b      	str	r3, [r7, #20]
    char* psrc = (char*)src;
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	613b      	str	r3, [r7, #16]

    if (pdst > psrc && pdst < psrc + n) {
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d926      	bls.n	800744c <memcpy_byte+0x80>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	693a      	ldr	r2, [r7, #16]
 8007402:	4413      	add	r3, r2
 8007404:	697a      	ldr	r2, [r7, #20]
 8007406:	429a      	cmp	r2, r3
 8007408:	d220      	bcs.n	800744c <memcpy_byte+0x80>
        pdst = pdst + n - 1;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	3b01      	subs	r3, #1
 800740e:	697a      	ldr	r2, [r7, #20]
 8007410:	4413      	add	r3, r2
 8007412:	617b      	str	r3, [r7, #20]
        psrc = psrc + n - 1;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	3b01      	subs	r3, #1
 8007418:	693a      	ldr	r2, [r7, #16]
 800741a:	4413      	add	r3, r2
 800741c:	613b      	str	r3, [r7, #16]
        while (n--)
 800741e:	e007      	b.n	8007430 <memcpy_byte+0x64>
            *pdst-- = *psrc--;
 8007420:	693a      	ldr	r2, [r7, #16]
 8007422:	1e53      	subs	r3, r2, #1
 8007424:	613b      	str	r3, [r7, #16]
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	1e59      	subs	r1, r3, #1
 800742a:	6179      	str	r1, [r7, #20]
 800742c:	7812      	ldrb	r2, [r2, #0]
 800742e:	701a      	strb	r2, [r3, #0]
        while (n--)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	1e5a      	subs	r2, r3, #1
 8007434:	607a      	str	r2, [r7, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d1f2      	bne.n	8007420 <memcpy_byte+0x54>
    if (pdst > psrc && pdst < psrc + n) {
 800743a:	e00c      	b.n	8007456 <memcpy_byte+0x8a>
    } else {
        while (n--)
            *pdst++ = *psrc++;
 800743c:	693a      	ldr	r2, [r7, #16]
 800743e:	1c53      	adds	r3, r2, #1
 8007440:	613b      	str	r3, [r7, #16]
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	1c59      	adds	r1, r3, #1
 8007446:	6179      	str	r1, [r7, #20]
 8007448:	7812      	ldrb	r2, [r2, #0]
 800744a:	701a      	strb	r2, [r3, #0]
        while (n--)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	1e5a      	subs	r2, r3, #1
 8007450:	607a      	str	r2, [r7, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1f2      	bne.n	800743c <memcpy_byte+0x70>
    }
    return dst;
 8007456:	68fb      	ldr	r3, [r7, #12]
}
 8007458:	4618      	mov	r0, r3
 800745a:	371c      	adds	r7, #28
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <u8x8_byte_hw_i2c>:

uint8_t u8x8_byte_hw_i2c(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b086      	sub	sp, #24
 8007468:	af02      	add	r7, sp, #8
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	607b      	str	r3, [r7, #4]
 800746e:	460b      	mov	r3, r1
 8007470:	72fb      	strb	r3, [r7, #11]
 8007472:	4613      	mov	r3, r2
 8007474:	72bb      	strb	r3, [r7, #10]
     * between START_TRANSFER and END_TRANSFER */

    static uint8_t buffer[128];
    static uint8_t length;

    switch (msg) {
 8007476:	7afb      	ldrb	r3, [r7, #11]
 8007478:	3b14      	subs	r3, #20
 800747a:	2b0c      	cmp	r3, #12
 800747c:	d841      	bhi.n	8007502 <u8x8_byte_hw_i2c+0x9e>
 800747e:	a201      	add	r2, pc, #4	; (adr r2, 8007484 <u8x8_byte_hw_i2c+0x20>)
 8007480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007484:	08007507 	.word	0x08007507
 8007488:	08007503 	.word	0x08007503
 800748c:	08007503 	.word	0x08007503
 8007490:	080074c1 	.word	0x080074c1
 8007494:	080074b9 	.word	0x080074b9
 8007498:	080074e5 	.word	0x080074e5
 800749c:	08007503 	.word	0x08007503
 80074a0:	08007503 	.word	0x08007503
 80074a4:	08007503 	.word	0x08007503
 80074a8:	08007503 	.word	0x08007503
 80074ac:	08007503 	.word	0x08007503
 80074b0:	08007503 	.word	0x08007503
 80074b4:	08007507 	.word	0x08007507
        case U8X8_MSG_BYTE_INIT: {
            // i2c init
            break;
        }
        case U8X8_MSG_BYTE_START_TRANSFER: {
            length = 0;
 80074b8:	4b17      	ldr	r3, [pc, #92]	; (8007518 <u8x8_byte_hw_i2c+0xb4>)
 80074ba:	2200      	movs	r2, #0
 80074bc:	701a      	strb	r2, [r3, #0]
            break;
 80074be:	e025      	b.n	800750c <u8x8_byte_hw_i2c+0xa8>
        }
        case U8X8_MSG_BYTE_SEND: {
            memcpy_byte(buffer + length, arg_ptr, arg_int);
 80074c0:	4b15      	ldr	r3, [pc, #84]	; (8007518 <u8x8_byte_hw_i2c+0xb4>)
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	461a      	mov	r2, r3
 80074c6:	4b15      	ldr	r3, [pc, #84]	; (800751c <u8x8_byte_hw_i2c+0xb8>)
 80074c8:	4413      	add	r3, r2
 80074ca:	7aba      	ldrb	r2, [r7, #10]
 80074cc:	6879      	ldr	r1, [r7, #4]
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7ff ff7c 	bl	80073cc <memcpy_byte>
            length += arg_int;
 80074d4:	4b10      	ldr	r3, [pc, #64]	; (8007518 <u8x8_byte_hw_i2c+0xb4>)
 80074d6:	781a      	ldrb	r2, [r3, #0]
 80074d8:	7abb      	ldrb	r3, [r7, #10]
 80074da:	4413      	add	r3, r2
 80074dc:	b2da      	uxtb	r2, r3
 80074de:	4b0e      	ldr	r3, [pc, #56]	; (8007518 <u8x8_byte_hw_i2c+0xb4>)
 80074e0:	701a      	strb	r2, [r3, #0]
            break;
 80074e2:	e013      	b.n	800750c <u8x8_byte_hw_i2c+0xa8>
        }
        case U8X8_MSG_BYTE_END_TRANSFER: {
            if (HAL_I2C_Master_Transmit(&hi2c2, SSD1306_ADDRESS, buffer, length, 0xFF) != HAL_OK) return 0;
 80074e4:	4b0c      	ldr	r3, [pc, #48]	; (8007518 <u8x8_byte_hw_i2c+0xb4>)
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	22ff      	movs	r2, #255	; 0xff
 80074ec:	9200      	str	r2, [sp, #0]
 80074ee:	4a0b      	ldr	r2, [pc, #44]	; (800751c <u8x8_byte_hw_i2c+0xb8>)
 80074f0:	2178      	movs	r1, #120	; 0x78
 80074f2:	480b      	ldr	r0, [pc, #44]	; (8007520 <u8x8_byte_hw_i2c+0xbc>)
 80074f4:	f7fc f98e 	bl	8003814 <HAL_I2C_Master_Transmit>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d005      	beq.n	800750a <u8x8_byte_hw_i2c+0xa6>
 80074fe:	2300      	movs	r3, #0
 8007500:	e005      	b.n	800750e <u8x8_byte_hw_i2c+0xaa>
        }
        case U8X8_MSG_BYTE_SET_DC: {
            break;
        }
        default:
            return 0;
 8007502:	2300      	movs	r3, #0
 8007504:	e003      	b.n	800750e <u8x8_byte_hw_i2c+0xaa>
            break;
 8007506:	bf00      	nop
 8007508:	e000      	b.n	800750c <u8x8_byte_hw_i2c+0xa8>
            break;
 800750a:	bf00      	nop
    }
    return 1;
 800750c:	2301      	movs	r3, #1
}
 800750e:	4618      	mov	r0, r3
 8007510:	3710      	adds	r7, #16
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop
 8007518:	20000272 	.word	0x20000272
 800751c:	20000274 	.word	0x20000274
 8007520:	2000012c 	.word	0x2000012c

08007524 <delay_us>:

void delay_us(uint32_t time)
{
 8007524:	b480      	push	{r7}
 8007526:	b085      	sub	sp, #20
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
    uint32_t i = 8 * time;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	00db      	lsls	r3, r3, #3
 8007530:	60fb      	str	r3, [r7, #12]
    while (i--)
 8007532:	bf00      	nop
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	1e5a      	subs	r2, r3, #1
 8007538:	60fa      	str	r2, [r7, #12]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1fa      	bne.n	8007534 <delay_us+0x10>
        ;
}
 800753e:	bf00      	nop
 8007540:	bf00      	nop
 8007542:	3714      	adds	r7, #20
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <u8x8_gpio_and_delay>:

uint8_t u8x8_gpio_and_delay(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b086      	sub	sp, #24
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	607b      	str	r3, [r7, #4]
 8007556:	460b      	mov	r3, r1
 8007558:	72fb      	strb	r3, [r7, #11]
 800755a:	4613      	mov	r3, r2
 800755c:	72bb      	strb	r3, [r7, #10]
    switch (msg) {
 800755e:	7afb      	ldrb	r3, [r7, #11]
 8007560:	3b29      	subs	r3, #41	; 0x29
 8007562:	2b2a      	cmp	r3, #42	; 0x2a
 8007564:	f200 8084 	bhi.w	8007670 <u8x8_gpio_and_delay+0x124>
 8007568:	a201      	add	r2, pc, #4	; (adr r2, 8007570 <u8x8_gpio_and_delay+0x24>)
 800756a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800756e:	bf00      	nop
 8007570:	08007639 	.word	0x08007639
 8007574:	08007621 	.word	0x08007621
 8007578:	0800761d 	.word	0x0800761d
 800757c:	08007671 	.word	0x08007671
 8007580:	08007641 	.word	0x08007641
 8007584:	08007671 	.word	0x08007671
 8007588:	08007671 	.word	0x08007671
 800758c:	08007671 	.word	0x08007671
 8007590:	08007671 	.word	0x08007671
 8007594:	08007671 	.word	0x08007671
 8007598:	08007671 	.word	0x08007671
 800759c:	08007671 	.word	0x08007671
 80075a0:	08007671 	.word	0x08007671
 80075a4:	08007671 	.word	0x08007671
 80075a8:	08007671 	.word	0x08007671
 80075ac:	08007671 	.word	0x08007671
 80075b0:	08007671 	.word	0x08007671
 80075b4:	08007671 	.word	0x08007671
 80075b8:	08007671 	.word	0x08007671
 80075bc:	08007671 	.word	0x08007671
 80075c0:	08007671 	.word	0x08007671
 80075c4:	08007671 	.word	0x08007671
 80075c8:	08007671 	.word	0x08007671
 80075cc:	08007671 	.word	0x08007671
 80075d0:	08007671 	.word	0x08007671
 80075d4:	08007671 	.word	0x08007671
 80075d8:	08007671 	.word	0x08007671
 80075dc:	08007671 	.word	0x08007671
 80075e0:	08007671 	.word	0x08007671
 80075e4:	08007671 	.word	0x08007671
 80075e8:	08007671 	.word	0x08007671
 80075ec:	08007671 	.word	0x08007671
 80075f0:	08007671 	.word	0x08007671
 80075f4:	08007671 	.word	0x08007671
 80075f8:	08007671 	.word	0x08007671
 80075fc:	0800767b 	.word	0x0800767b
 8007600:	0800767b 	.word	0x0800767b
 8007604:	08007671 	.word	0x08007671
 8007608:	08007671 	.word	0x08007671
 800760c:	08007649 	.word	0x08007649
 8007610:	08007653 	.word	0x08007653
 8007614:	0800765d 	.word	0x0800765d
 8007618:	08007667 	.word	0x08007667
        case U8X8_MSG_DELAY_100NANO:  // delay arg_int * 100 nano seconds
            __NOP();
 800761c:	bf00      	nop
            break;
 800761e:	e02d      	b.n	800767c <u8x8_gpio_and_delay+0x130>
        case U8X8_MSG_DELAY_10MICRO:  // delay arg_int * 10 micro seconds
            for (uint16_t n = 0; n < 320; n++) {
 8007620:	2300      	movs	r3, #0
 8007622:	82fb      	strh	r3, [r7, #22]
 8007624:	e003      	b.n	800762e <u8x8_gpio_and_delay+0xe2>
                __NOP();
 8007626:	bf00      	nop
            for (uint16_t n = 0; n < 320; n++) {
 8007628:	8afb      	ldrh	r3, [r7, #22]
 800762a:	3301      	adds	r3, #1
 800762c:	82fb      	strh	r3, [r7, #22]
 800762e:	8afb      	ldrh	r3, [r7, #22]
 8007630:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8007634:	d3f7      	bcc.n	8007626 <u8x8_gpio_and_delay+0xda>
            }
            break;
 8007636:	e021      	b.n	800767c <u8x8_gpio_and_delay+0x130>
        case U8X8_MSG_DELAY_MILLI:  // delay arg_int * 1 milli second
            HAL_Delay(1);
 8007638:	2001      	movs	r0, #1
 800763a:	f7fb f973 	bl	8002924 <HAL_Delay>
            break;
 800763e:	e01d      	b.n	800767c <u8x8_gpio_and_delay+0x130>
        case U8X8_MSG_DELAY_I2C:  // arg_int is the I2C speed in 100KHz, e.g. 4 = 400 KHz
            delay_us(5);
 8007640:	2005      	movs	r0, #5
 8007642:	f7ff ff6f 	bl	8007524 <delay_us>
            break;                     // arg_int=1: delay by 5us, arg_int = 4: delay by 1.25us
 8007646:	e019      	b.n	800767c <u8x8_gpio_and_delay+0x130>
        case U8X8_MSG_GPIO_I2C_CLOCK:  // arg_int=0: Output low at I2C clock pin
            break;                     // arg_int=1: Input dir with pullup high for I2C clock pin
        case U8X8_MSG_GPIO_I2C_DATA:   // arg_int=0: Output low at I2C data pin
            break;                     // arg_int=1: Input dir with pullup high for I2C data pin
        case U8X8_MSG_GPIO_MENU_SELECT:
            u8x8_SetGPIOResult(u8x8, /* get menu select pin state */ 0);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2200      	movs	r2, #0
 800764c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
            break;
 8007650:	e014      	b.n	800767c <u8x8_gpio_and_delay+0x130>
        case U8X8_MSG_GPIO_MENU_NEXT:
            u8x8_SetGPIOResult(u8x8, /* get menu next pin state */ 0);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2200      	movs	r2, #0
 8007656:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
            break;
 800765a:	e00f      	b.n	800767c <u8x8_gpio_and_delay+0x130>
        case U8X8_MSG_GPIO_MENU_PREV:
            u8x8_SetGPIOResult(u8x8, /* get menu prev pin state */ 0);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2200      	movs	r2, #0
 8007660:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
            break;
 8007664:	e00a      	b.n	800767c <u8x8_gpio_and_delay+0x130>
        case U8X8_MSG_GPIO_MENU_HOME:
            u8x8_SetGPIOResult(u8x8, /* get menu home pin state */ 0);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2200      	movs	r2, #0
 800766a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
            break;
 800766e:	e005      	b.n	800767c <u8x8_gpio_and_delay+0x130>
        default:
            u8x8_SetGPIOResult(u8x8, 1);  // default return value
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2201      	movs	r2, #1
 8007674:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
            break;
 8007678:	e000      	b.n	800767c <u8x8_gpio_and_delay+0x130>
            break;                     // arg_int=1: Input dir with pullup high for I2C clock pin
 800767a:	bf00      	nop
    }
    return 1;
 800767c:	2301      	movs	r3, #1
}
 800767e:	4618      	mov	r0, r3
 8007680:	3718      	adds	r7, #24
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop

08007688 <u8g2Init>:

void u8g2Init(u8g2_t* u8g2)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
    u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2, U8G2_R0, u8x8_byte_hw_i2c, u8x8_gpio_and_delay);
 8007690:	4b09      	ldr	r3, [pc, #36]	; (80076b8 <u8g2Init+0x30>)
 8007692:	4a0a      	ldr	r2, [pc, #40]	; (80076bc <u8g2Init+0x34>)
 8007694:	490a      	ldr	r1, [pc, #40]	; (80076c0 <u8g2Init+0x38>)
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 fd94 	bl	80081c4 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>
    u8g2_InitDisplay(u8g2);
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f002 fef7 	bl	800a490 <u8x8_InitDisplay>
    u8g2_SetPowerSave(u8g2, 0);  // 使能
 80076a2:	2100      	movs	r1, #0
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f002 ff02 	bl	800a4ae <u8x8_SetPowerSave>
    u8g2_ClearBuffer(u8g2);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 fab3 	bl	8007c16 <u8g2_ClearBuffer>
}
 80076b0:	bf00      	nop
 80076b2:	3708      	adds	r7, #8
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	0800754d 	.word	0x0800754d
 80076bc:	08007465 	.word	0x08007465
 80076c0:	08010994 	.word	0x08010994

080076c4 <u8g2_DrawHXBMP>:
        h--;
    }
}

void u8g2_DrawHXBMP(u8g2_t* u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t* b)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b088      	sub	sp, #32
 80076c8:	af02      	add	r7, sp, #8
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	4608      	mov	r0, r1
 80076ce:	4611      	mov	r1, r2
 80076d0:	461a      	mov	r2, r3
 80076d2:	4603      	mov	r3, r0
 80076d4:	817b      	strh	r3, [r7, #10]
 80076d6:	460b      	mov	r3, r1
 80076d8:	813b      	strh	r3, [r7, #8]
 80076da:	4613      	mov	r3, r2
 80076dc:	80fb      	strh	r3, [r7, #6]
    uint8_t mask;
    uint8_t color  = u8g2->draw_color;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80076e4:	75bb      	strb	r3, [r7, #22]
    uint8_t ncolor = (color == 0 ? 1 : 0);
 80076e6:	7dbb      	ldrb	r3, [r7, #22]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	bf0c      	ite	eq
 80076ec:	2301      	moveq	r3, #1
 80076ee:	2300      	movne	r3, #0
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	757b      	strb	r3, [r7, #21]
#ifdef U8G2_WITH_INTERSECTION
    if (u8g2_IsIntersection(u8g2, x, y, x + len, y + 1) == 0)
 80076f4:	897a      	ldrh	r2, [r7, #10]
 80076f6:	88fb      	ldrh	r3, [r7, #6]
 80076f8:	4413      	add	r3, r2
 80076fa:	b298      	uxth	r0, r3
 80076fc:	893b      	ldrh	r3, [r7, #8]
 80076fe:	3301      	adds	r3, #1
 8007700:	b29b      	uxth	r3, r3
 8007702:	893a      	ldrh	r2, [r7, #8]
 8007704:	8979      	ldrh	r1, [r7, #10]
 8007706:	9300      	str	r3, [sp, #0]
 8007708:	4603      	mov	r3, r0
 800770a:	68f8      	ldr	r0, [r7, #12]
 800770c:	f001 fd81 	bl	8009212 <u8g2_IsIntersection>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d040      	beq.n	8007798 <u8g2_DrawHXBMP+0xd4>
        return;
#endif /* U8G2_WITH_INTERSECTION */

    mask = 1;
 8007716:	2301      	movs	r3, #1
 8007718:	75fb      	strb	r3, [r7, #23]
    while (len > 0) {
 800771a:	e035      	b.n	8007788 <u8g2_DrawHXBMP+0xc4>
        if (u8x8_pgm_read(b) & mask) {
 800771c:	6a3b      	ldr	r3, [r7, #32]
 800771e:	781a      	ldrb	r2, [r3, #0]
 8007720:	7dfb      	ldrb	r3, [r7, #23]
 8007722:	4013      	ands	r3, r2
 8007724:	b2db      	uxtb	r3, r3
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00c      	beq.n	8007744 <u8g2_DrawHXBMP+0x80>
            u8g2->draw_color = color;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	7dba      	ldrb	r2, [r7, #22]
 800772e:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
            u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8007732:	893a      	ldrh	r2, [r7, #8]
 8007734:	8979      	ldrh	r1, [r7, #10]
 8007736:	2300      	movs	r3, #0
 8007738:	9300      	str	r3, [sp, #0]
 800773a:	2301      	movs	r3, #1
 800773c:	68f8      	ldr	r0, [r7, #12]
 800773e:	f001 fc2e 	bl	8008f9e <u8g2_DrawHVLine>
 8007742:	e010      	b.n	8007766 <u8g2_DrawHXBMP+0xa2>
        } else if (u8g2->bitmap_transparency == 0) {
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800774a:	2b00      	cmp	r3, #0
 800774c:	d10b      	bne.n	8007766 <u8g2_DrawHXBMP+0xa2>
            u8g2->draw_color = ncolor;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	7d7a      	ldrb	r2, [r7, #21]
 8007752:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
            u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8007756:	893a      	ldrh	r2, [r7, #8]
 8007758:	8979      	ldrh	r1, [r7, #10]
 800775a:	2300      	movs	r3, #0
 800775c:	9300      	str	r3, [sp, #0]
 800775e:	2301      	movs	r3, #1
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	f001 fc1c 	bl	8008f9e <u8g2_DrawHVLine>
        }

        x++;
 8007766:	897b      	ldrh	r3, [r7, #10]
 8007768:	3301      	adds	r3, #1
 800776a:	817b      	strh	r3, [r7, #10]
        mask <<= 1;
 800776c:	7dfb      	ldrb	r3, [r7, #23]
 800776e:	005b      	lsls	r3, r3, #1
 8007770:	75fb      	strb	r3, [r7, #23]
        if (mask == 0) {
 8007772:	7dfb      	ldrb	r3, [r7, #23]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d104      	bne.n	8007782 <u8g2_DrawHXBMP+0xbe>
            mask = 1;
 8007778:	2301      	movs	r3, #1
 800777a:	75fb      	strb	r3, [r7, #23]
            b++;
 800777c:	6a3b      	ldr	r3, [r7, #32]
 800777e:	3301      	adds	r3, #1
 8007780:	623b      	str	r3, [r7, #32]
        }
        len--;
 8007782:	88fb      	ldrh	r3, [r7, #6]
 8007784:	3b01      	subs	r3, #1
 8007786:	80fb      	strh	r3, [r7, #6]
    while (len > 0) {
 8007788:	88fb      	ldrh	r3, [r7, #6]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1c6      	bne.n	800771c <u8g2_DrawHXBMP+0x58>
    }
    u8g2->draw_color = color;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	7dba      	ldrb	r2, [r7, #22]
 8007792:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 8007796:	e000      	b.n	800779a <u8g2_DrawHXBMP+0xd6>
        return;
 8007798:	bf00      	nop
}
 800779a:	3718      	adds	r7, #24
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <u8g2_DrawXBMP>:

void u8g2_DrawXBMP(u8g2_t* u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t* bitmap)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b088      	sub	sp, #32
 80077a4:	af02      	add	r7, sp, #8
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	4608      	mov	r0, r1
 80077aa:	4611      	mov	r1, r2
 80077ac:	461a      	mov	r2, r3
 80077ae:	4603      	mov	r3, r0
 80077b0:	817b      	strh	r3, [r7, #10]
 80077b2:	460b      	mov	r3, r1
 80077b4:	813b      	strh	r3, [r7, #8]
 80077b6:	4613      	mov	r3, r2
 80077b8:	80fb      	strh	r3, [r7, #6]
    u8g2_uint_t blen;
    blen = w;
 80077ba:	88fb      	ldrh	r3, [r7, #6]
 80077bc:	82fb      	strh	r3, [r7, #22]
    blen += 7;
 80077be:	8afb      	ldrh	r3, [r7, #22]
 80077c0:	3307      	adds	r3, #7
 80077c2:	82fb      	strh	r3, [r7, #22]
    blen >>= 3;
 80077c4:	8afb      	ldrh	r3, [r7, #22]
 80077c6:	08db      	lsrs	r3, r3, #3
 80077c8:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
    if (u8g2_IsIntersection(u8g2, x, y, x + w, y + h) == 0)
 80077ca:	897a      	ldrh	r2, [r7, #10]
 80077cc:	88fb      	ldrh	r3, [r7, #6]
 80077ce:	4413      	add	r3, r2
 80077d0:	b298      	uxth	r0, r3
 80077d2:	893a      	ldrh	r2, [r7, #8]
 80077d4:	8c3b      	ldrh	r3, [r7, #32]
 80077d6:	4413      	add	r3, r2
 80077d8:	b29b      	uxth	r3, r3
 80077da:	893a      	ldrh	r2, [r7, #8]
 80077dc:	8979      	ldrh	r1, [r7, #10]
 80077de:	9300      	str	r3, [sp, #0]
 80077e0:	4603      	mov	r3, r0
 80077e2:	68f8      	ldr	r0, [r7, #12]
 80077e4:	f001 fd15 	bl	8009212 <u8g2_IsIntersection>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d017      	beq.n	800781e <u8g2_DrawXBMP+0x7e>
        return;
#endif /* U8G2_WITH_INTERSECTION */

    while (h > 0) {
 80077ee:	e012      	b.n	8007816 <u8g2_DrawXBMP+0x76>
        u8g2_DrawHXBMP(u8g2, x, y, w, bitmap);
 80077f0:	88f8      	ldrh	r0, [r7, #6]
 80077f2:	893a      	ldrh	r2, [r7, #8]
 80077f4:	8979      	ldrh	r1, [r7, #10]
 80077f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f8:	9300      	str	r3, [sp, #0]
 80077fa:	4603      	mov	r3, r0
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	f7ff ff61 	bl	80076c4 <u8g2_DrawHXBMP>
        bitmap += blen;
 8007802:	8afb      	ldrh	r3, [r7, #22]
 8007804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007806:	4413      	add	r3, r2
 8007808:	627b      	str	r3, [r7, #36]	; 0x24
        y++;
 800780a:	893b      	ldrh	r3, [r7, #8]
 800780c:	3301      	adds	r3, #1
 800780e:	813b      	strh	r3, [r7, #8]
        h--;
 8007810:	8c3b      	ldrh	r3, [r7, #32]
 8007812:	3b01      	subs	r3, #1
 8007814:	843b      	strh	r3, [r7, #32]
    while (h > 0) {
 8007816:	8c3b      	ldrh	r3, [r7, #32]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d1e9      	bne.n	80077f0 <u8g2_DrawXBMP+0x50>
 800781c:	e000      	b.n	8007820 <u8g2_DrawXBMP+0x80>
        return;
 800781e:	bf00      	nop
    }
}
 8007820:	3718      	adds	r7, #24
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8007826:	b580      	push	{r7, lr}
 8007828:	b086      	sub	sp, #24
 800782a:	af02      	add	r7, sp, #8
 800782c:	60f8      	str	r0, [r7, #12]
 800782e:	4608      	mov	r0, r1
 8007830:	4611      	mov	r1, r2
 8007832:	461a      	mov	r2, r3
 8007834:	4603      	mov	r3, r0
 8007836:	817b      	strh	r3, [r7, #10]
 8007838:	460b      	mov	r3, r1
 800783a:	813b      	strh	r3, [r7, #8]
 800783c:	4613      	mov	r3, r2
 800783e:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8007840:	897a      	ldrh	r2, [r7, #10]
 8007842:	88fb      	ldrh	r3, [r7, #6]
 8007844:	4413      	add	r3, r2
 8007846:	b298      	uxth	r0, r3
 8007848:	893a      	ldrh	r2, [r7, #8]
 800784a:	8b3b      	ldrh	r3, [r7, #24]
 800784c:	4413      	add	r3, r2
 800784e:	b29b      	uxth	r3, r3
 8007850:	893a      	ldrh	r2, [r7, #8]
 8007852:	8979      	ldrh	r1, [r7, #10]
 8007854:	9300      	str	r3, [sp, #0]
 8007856:	4603      	mov	r3, r0
 8007858:	68f8      	ldr	r0, [r7, #12]
 800785a:	f001 fcda 	bl	8009212 <u8g2_IsIntersection>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d012      	beq.n	800788a <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8007864:	e00d      	b.n	8007882 <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8007866:	88fb      	ldrh	r3, [r7, #6]
 8007868:	893a      	ldrh	r2, [r7, #8]
 800786a:	8979      	ldrh	r1, [r7, #10]
 800786c:	2000      	movs	r0, #0
 800786e:	9000      	str	r0, [sp, #0]
 8007870:	68f8      	ldr	r0, [r7, #12]
 8007872:	f001 fb94 	bl	8008f9e <u8g2_DrawHVLine>
    y++;    
 8007876:	893b      	ldrh	r3, [r7, #8]
 8007878:	3301      	adds	r3, #1
 800787a:	813b      	strh	r3, [r7, #8]
    h--;
 800787c:	8b3b      	ldrh	r3, [r7, #24]
 800787e:	3b01      	subs	r3, #1
 8007880:	833b      	strh	r3, [r7, #24]
  while( h != 0 )
 8007882:	8b3b      	ldrh	r3, [r7, #24]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1ee      	bne.n	8007866 <u8g2_DrawBox+0x40>
 8007888:	e000      	b.n	800788c <u8g2_DrawBox+0x66>
    return;
 800788a:	bf00      	nop
  }
}
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b088      	sub	sp, #32
 8007896:	af02      	add	r7, sp, #8
 8007898:	60f8      	str	r0, [r7, #12]
 800789a:	4608      	mov	r0, r1
 800789c:	4611      	mov	r1, r2
 800789e:	461a      	mov	r2, r3
 80078a0:	4603      	mov	r3, r0
 80078a2:	817b      	strh	r3, [r7, #10]
 80078a4:	460b      	mov	r3, r1
 80078a6:	813b      	strh	r3, [r7, #8]
 80078a8:	4613      	mov	r3, r2
 80078aa:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t xtmp = x;
 80078ac:	897b      	ldrh	r3, [r7, #10]
 80078ae:	82fb      	strh	r3, [r7, #22]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80078b0:	897a      	ldrh	r2, [r7, #10]
 80078b2:	88fb      	ldrh	r3, [r7, #6]
 80078b4:	4413      	add	r3, r2
 80078b6:	b298      	uxth	r0, r3
 80078b8:	893a      	ldrh	r2, [r7, #8]
 80078ba:	8c3b      	ldrh	r3, [r7, #32]
 80078bc:	4413      	add	r3, r2
 80078be:	b29b      	uxth	r3, r3
 80078c0:	893a      	ldrh	r2, [r7, #8]
 80078c2:	8979      	ldrh	r1, [r7, #10]
 80078c4:	9300      	str	r3, [sp, #0]
 80078c6:	4603      	mov	r3, r0
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	f001 fca2 	bl	8009212 <u8g2_IsIntersection>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d037      	beq.n	8007944 <u8g2_DrawFrame+0xb2>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 80078d4:	88fb      	ldrh	r3, [r7, #6]
 80078d6:	893a      	ldrh	r2, [r7, #8]
 80078d8:	8979      	ldrh	r1, [r7, #10]
 80078da:	2000      	movs	r0, #0
 80078dc:	9000      	str	r0, [sp, #0]
 80078de:	68f8      	ldr	r0, [r7, #12]
 80078e0:	f001 fb5d 	bl	8008f9e <u8g2_DrawHVLine>
  if (h >= 2) {
 80078e4:	8c3b      	ldrh	r3, [r7, #32]
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d92d      	bls.n	8007946 <u8g2_DrawFrame+0xb4>
    h-=2;
 80078ea:	8c3b      	ldrh	r3, [r7, #32]
 80078ec:	3b02      	subs	r3, #2
 80078ee:	843b      	strh	r3, [r7, #32]
    y++;
 80078f0:	893b      	ldrh	r3, [r7, #8]
 80078f2:	3301      	adds	r3, #1
 80078f4:	813b      	strh	r3, [r7, #8]
    if (h > 0) {
 80078f6:	8c3b      	ldrh	r3, [r7, #32]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d01a      	beq.n	8007932 <u8g2_DrawFrame+0xa0>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 80078fc:	8c3b      	ldrh	r3, [r7, #32]
 80078fe:	893a      	ldrh	r2, [r7, #8]
 8007900:	8979      	ldrh	r1, [r7, #10]
 8007902:	2001      	movs	r0, #1
 8007904:	9000      	str	r0, [sp, #0]
 8007906:	68f8      	ldr	r0, [r7, #12]
 8007908:	f001 fb49 	bl	8008f9e <u8g2_DrawHVLine>
      x+=w;
 800790c:	897a      	ldrh	r2, [r7, #10]
 800790e:	88fb      	ldrh	r3, [r7, #6]
 8007910:	4413      	add	r3, r2
 8007912:	817b      	strh	r3, [r7, #10]
      x--;
 8007914:	897b      	ldrh	r3, [r7, #10]
 8007916:	3b01      	subs	r3, #1
 8007918:	817b      	strh	r3, [r7, #10]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 800791a:	8c3b      	ldrh	r3, [r7, #32]
 800791c:	893a      	ldrh	r2, [r7, #8]
 800791e:	8979      	ldrh	r1, [r7, #10]
 8007920:	2001      	movs	r0, #1
 8007922:	9000      	str	r0, [sp, #0]
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f001 fb3a 	bl	8008f9e <u8g2_DrawHVLine>
      y+=h;
 800792a:	893a      	ldrh	r2, [r7, #8]
 800792c:	8c3b      	ldrh	r3, [r7, #32]
 800792e:	4413      	add	r3, r2
 8007930:	813b      	strh	r3, [r7, #8]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8007932:	88fb      	ldrh	r3, [r7, #6]
 8007934:	893a      	ldrh	r2, [r7, #8]
 8007936:	8af9      	ldrh	r1, [r7, #22]
 8007938:	2000      	movs	r0, #0
 800793a:	9000      	str	r0, [sp, #0]
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f001 fb2e 	bl	8008f9e <u8g2_DrawHVLine>
 8007942:	e000      	b.n	8007946 <u8g2_DrawFrame+0xb4>
    return;
 8007944:	bf00      	nop
  }
}
 8007946:	3718      	adds	r7, #24
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <u8g2_DrawRBox>:




void u8g2_DrawRBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b08a      	sub	sp, #40	; 0x28
 8007950:	af02      	add	r7, sp, #8
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	4608      	mov	r0, r1
 8007956:	4611      	mov	r1, r2
 8007958:	461a      	mov	r2, r3
 800795a:	4603      	mov	r3, r0
 800795c:	817b      	strh	r3, [r7, #10]
 800795e:	460b      	mov	r3, r1
 8007960:	813b      	strh	r3, [r7, #8]
 8007962:	4613      	mov	r3, r2
 8007964:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t xl, yu;
  u8g2_uint_t yl, xr;

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8007966:	897a      	ldrh	r2, [r7, #10]
 8007968:	88fb      	ldrh	r3, [r7, #6]
 800796a:	4413      	add	r3, r2
 800796c:	b298      	uxth	r0, r3
 800796e:	893a      	ldrh	r2, [r7, #8]
 8007970:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007972:	4413      	add	r3, r2
 8007974:	b29b      	uxth	r3, r3
 8007976:	893a      	ldrh	r2, [r7, #8]
 8007978:	8979      	ldrh	r1, [r7, #10]
 800797a:	9300      	str	r3, [sp, #0]
 800797c:	4603      	mov	r3, r0
 800797e:	68f8      	ldr	r0, [r7, #12]
 8007980:	f001 fc47 	bl	8009212 <u8g2_IsIntersection>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	f000 808c 	beq.w	8007aa4 <u8g2_DrawRBox+0x158>
    return;
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
 800798c:	897b      	ldrh	r3, [r7, #10]
 800798e:	83fb      	strh	r3, [r7, #30]
  xl += r;
 8007990:	8bfa      	ldrh	r2, [r7, #30]
 8007992:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007994:	4413      	add	r3, r2
 8007996:	83fb      	strh	r3, [r7, #30]
  yu = y;
 8007998:	893b      	ldrh	r3, [r7, #8]
 800799a:	83bb      	strh	r3, [r7, #28]
  yu += r;
 800799c:	8bba      	ldrh	r2, [r7, #28]
 800799e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80079a0:	4413      	add	r3, r2
 80079a2:	83bb      	strh	r3, [r7, #28]
 
  xr = x;
 80079a4:	897b      	ldrh	r3, [r7, #10]
 80079a6:	837b      	strh	r3, [r7, #26]
  xr += w;
 80079a8:	8b7a      	ldrh	r2, [r7, #26]
 80079aa:	88fb      	ldrh	r3, [r7, #6]
 80079ac:	4413      	add	r3, r2
 80079ae:	837b      	strh	r3, [r7, #26]
  xr -= r;
 80079b0:	8b7a      	ldrh	r2, [r7, #26]
 80079b2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	837b      	strh	r3, [r7, #26]
  xr -= 1;
 80079b8:	8b7b      	ldrh	r3, [r7, #26]
 80079ba:	3b01      	subs	r3, #1
 80079bc:	837b      	strh	r3, [r7, #26]
  
  yl = y;
 80079be:	893b      	ldrh	r3, [r7, #8]
 80079c0:	833b      	strh	r3, [r7, #24]
  yl += h;
 80079c2:	8b3a      	ldrh	r2, [r7, #24]
 80079c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80079c6:	4413      	add	r3, r2
 80079c8:	833b      	strh	r3, [r7, #24]
  yl -= r; 
 80079ca:	8b3a      	ldrh	r2, [r7, #24]
 80079cc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80079ce:	1ad3      	subs	r3, r2, r3
 80079d0:	833b      	strh	r3, [r7, #24]
  yl -= 1;
 80079d2:	8b3b      	ldrh	r3, [r7, #24]
 80079d4:	3b01      	subs	r3, #1
 80079d6:	833b      	strh	r3, [r7, #24]

  u8g2_DrawDisc(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
 80079d8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80079da:	8bba      	ldrh	r2, [r7, #28]
 80079dc:	8bf9      	ldrh	r1, [r7, #30]
 80079de:	2002      	movs	r0, #2
 80079e0:	9000      	str	r0, [sp, #0]
 80079e2:	68f8      	ldr	r0, [r7, #12]
 80079e4:	f000 fba5 	bl	8008132 <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
 80079e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80079ea:	8bba      	ldrh	r2, [r7, #28]
 80079ec:	8b79      	ldrh	r1, [r7, #26]
 80079ee:	2001      	movs	r0, #1
 80079f0:	9000      	str	r0, [sp, #0]
 80079f2:	68f8      	ldr	r0, [r7, #12]
 80079f4:	f000 fb9d 	bl	8008132 <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
 80079f8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80079fa:	8b3a      	ldrh	r2, [r7, #24]
 80079fc:	8bf9      	ldrh	r1, [r7, #30]
 80079fe:	2004      	movs	r0, #4
 8007a00:	9000      	str	r0, [sp, #0]
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f000 fb95 	bl	8008132 <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
 8007a08:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007a0a:	8b3a      	ldrh	r2, [r7, #24]
 8007a0c:	8b79      	ldrh	r1, [r7, #26]
 8007a0e:	2008      	movs	r0, #8
 8007a10:	9000      	str	r0, [sp, #0]
 8007a12:	68f8      	ldr	r0, [r7, #12]
 8007a14:	f000 fb8d 	bl	8008132 <u8g2_DrawDisc>

  {
    u8g2_uint_t ww, hh;

    ww = w;
 8007a18:	88fb      	ldrh	r3, [r7, #6]
 8007a1a:	82fb      	strh	r3, [r7, #22]
    ww -= r;
 8007a1c:	8afa      	ldrh	r2, [r7, #22]
 8007a1e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	82fb      	strh	r3, [r7, #22]
    ww -= r;
 8007a24:	8afa      	ldrh	r2, [r7, #22]
 8007a26:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007a28:	1ad3      	subs	r3, r2, r3
 8007a2a:	82fb      	strh	r3, [r7, #22]
    xl++;
 8007a2c:	8bfb      	ldrh	r3, [r7, #30]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	83fb      	strh	r3, [r7, #30]
    yu++;
 8007a32:	8bbb      	ldrh	r3, [r7, #28]
 8007a34:	3301      	adds	r3, #1
 8007a36:	83bb      	strh	r3, [r7, #28]
    
    if ( ww >= 3 )
 8007a38:	8afb      	ldrh	r3, [r7, #22]
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	d918      	bls.n	8007a70 <u8g2_DrawRBox+0x124>
    {
      ww -= 2;
 8007a3e:	8afb      	ldrh	r3, [r7, #22]
 8007a40:	3b02      	subs	r3, #2
 8007a42:	82fb      	strh	r3, [r7, #22]
      u8g2_DrawBox(u8g2, xl, y, ww, r+1);
 8007a44:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007a46:	3301      	adds	r3, #1
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	8af8      	ldrh	r0, [r7, #22]
 8007a4c:	893a      	ldrh	r2, [r7, #8]
 8007a4e:	8bf9      	ldrh	r1, [r7, #30]
 8007a50:	9300      	str	r3, [sp, #0]
 8007a52:	4603      	mov	r3, r0
 8007a54:	68f8      	ldr	r0, [r7, #12]
 8007a56:	f7ff fee6 	bl	8007826 <u8g2_DrawBox>
      u8g2_DrawBox(u8g2, xl, yl, ww, r+1);
 8007a5a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	8af8      	ldrh	r0, [r7, #22]
 8007a62:	8b3a      	ldrh	r2, [r7, #24]
 8007a64:	8bf9      	ldrh	r1, [r7, #30]
 8007a66:	9300      	str	r3, [sp, #0]
 8007a68:	4603      	mov	r3, r0
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	f7ff fedb 	bl	8007826 <u8g2_DrawBox>
    }
    
    hh = h;
 8007a70:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007a72:	82bb      	strh	r3, [r7, #20]
    hh -= r;
 8007a74:	8aba      	ldrh	r2, [r7, #20]
 8007a76:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007a78:	1ad3      	subs	r3, r2, r3
 8007a7a:	82bb      	strh	r3, [r7, #20]
    hh -= r;
 8007a7c:	8aba      	ldrh	r2, [r7, #20]
 8007a7e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007a80:	1ad3      	subs	r3, r2, r3
 8007a82:	82bb      	strh	r3, [r7, #20]
    //h--;
    if ( hh >= 3 )
 8007a84:	8abb      	ldrh	r3, [r7, #20]
 8007a86:	2b02      	cmp	r3, #2
 8007a88:	d90d      	bls.n	8007aa6 <u8g2_DrawRBox+0x15a>
    {
      hh -= 2;
 8007a8a:	8abb      	ldrh	r3, [r7, #20]
 8007a8c:	3b02      	subs	r3, #2
 8007a8e:	82bb      	strh	r3, [r7, #20]
      u8g2_DrawBox(u8g2, x, yu, w, hh);
 8007a90:	88f8      	ldrh	r0, [r7, #6]
 8007a92:	8bba      	ldrh	r2, [r7, #28]
 8007a94:	8979      	ldrh	r1, [r7, #10]
 8007a96:	8abb      	ldrh	r3, [r7, #20]
 8007a98:	9300      	str	r3, [sp, #0]
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	f7ff fec2 	bl	8007826 <u8g2_DrawBox>
 8007aa2:	e000      	b.n	8007aa6 <u8g2_DrawRBox+0x15a>
    return;
 8007aa4:	bf00      	nop
    }
  }
}
 8007aa6:	3720      	adds	r7, #32
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <u8g2_DrawRFrame>:


void u8g2_DrawRFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b08a      	sub	sp, #40	; 0x28
 8007ab0:	af02      	add	r7, sp, #8
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	4608      	mov	r0, r1
 8007ab6:	4611      	mov	r1, r2
 8007ab8:	461a      	mov	r2, r3
 8007aba:	4603      	mov	r3, r0
 8007abc:	817b      	strh	r3, [r7, #10]
 8007abe:	460b      	mov	r3, r1
 8007ac0:	813b      	strh	r3, [r7, #8]
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t xl, yu;

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8007ac6:	897a      	ldrh	r2, [r7, #10]
 8007ac8:	88fb      	ldrh	r3, [r7, #6]
 8007aca:	4413      	add	r3, r2
 8007acc:	b298      	uxth	r0, r3
 8007ace:	893a      	ldrh	r2, [r7, #8]
 8007ad0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007ad2:	4413      	add	r3, r2
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	893a      	ldrh	r2, [r7, #8]
 8007ad8:	8979      	ldrh	r1, [r7, #10]
 8007ada:	9300      	str	r3, [sp, #0]
 8007adc:	4603      	mov	r3, r0
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	f001 fb97 	bl	8009212 <u8g2_IsIntersection>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	f000 8091 	beq.w	8007c0e <u8g2_DrawRFrame+0x162>
    return;
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
 8007aec:	897b      	ldrh	r3, [r7, #10]
 8007aee:	83fb      	strh	r3, [r7, #30]
  xl += r;
 8007af0:	8bfa      	ldrh	r2, [r7, #30]
 8007af2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007af4:	4413      	add	r3, r2
 8007af6:	83fb      	strh	r3, [r7, #30]
  yu = y;
 8007af8:	893b      	ldrh	r3, [r7, #8]
 8007afa:	83bb      	strh	r3, [r7, #28]
  yu += r;
 8007afc:	8bba      	ldrh	r2, [r7, #28]
 8007afe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007b00:	4413      	add	r3, r2
 8007b02:	83bb      	strh	r3, [r7, #28]
 
  {
    u8g2_uint_t yl, xr;
      
    xr = x;
 8007b04:	897b      	ldrh	r3, [r7, #10]
 8007b06:	837b      	strh	r3, [r7, #26]
    xr += w;
 8007b08:	8b7a      	ldrh	r2, [r7, #26]
 8007b0a:	88fb      	ldrh	r3, [r7, #6]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	837b      	strh	r3, [r7, #26]
    xr -= r;
 8007b10:	8b7a      	ldrh	r2, [r7, #26]
 8007b12:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007b14:	1ad3      	subs	r3, r2, r3
 8007b16:	837b      	strh	r3, [r7, #26]
    xr -= 1;
 8007b18:	8b7b      	ldrh	r3, [r7, #26]
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	837b      	strh	r3, [r7, #26]
    
    yl = y;
 8007b1e:	893b      	ldrh	r3, [r7, #8]
 8007b20:	833b      	strh	r3, [r7, #24]
    yl += h;
 8007b22:	8b3a      	ldrh	r2, [r7, #24]
 8007b24:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007b26:	4413      	add	r3, r2
 8007b28:	833b      	strh	r3, [r7, #24]
    yl -= r; 
 8007b2a:	8b3a      	ldrh	r2, [r7, #24]
 8007b2c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007b2e:	1ad3      	subs	r3, r2, r3
 8007b30:	833b      	strh	r3, [r7, #24]
    yl -= 1;
 8007b32:	8b3b      	ldrh	r3, [r7, #24]
 8007b34:	3b01      	subs	r3, #1
 8007b36:	833b      	strh	r3, [r7, #24]

    u8g2_DrawCircle(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
 8007b38:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007b3a:	8bba      	ldrh	r2, [r7, #28]
 8007b3c:	8bf9      	ldrh	r1, [r7, #30]
 8007b3e:	2002      	movs	r0, #2
 8007b40:	9000      	str	r0, [sp, #0]
 8007b42:	68f8      	ldr	r0, [r7, #12]
 8007b44:	f000 f9d0 	bl	8007ee8 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
 8007b48:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007b4a:	8bba      	ldrh	r2, [r7, #28]
 8007b4c:	8b79      	ldrh	r1, [r7, #26]
 8007b4e:	2001      	movs	r0, #1
 8007b50:	9000      	str	r0, [sp, #0]
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	f000 f9c8 	bl	8007ee8 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
 8007b58:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007b5a:	8b3a      	ldrh	r2, [r7, #24]
 8007b5c:	8bf9      	ldrh	r1, [r7, #30]
 8007b5e:	2004      	movs	r0, #4
 8007b60:	9000      	str	r0, [sp, #0]
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	f000 f9c0 	bl	8007ee8 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
 8007b68:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007b6a:	8b3a      	ldrh	r2, [r7, #24]
 8007b6c:	8b79      	ldrh	r1, [r7, #26]
 8007b6e:	2008      	movs	r0, #8
 8007b70:	9000      	str	r0, [sp, #0]
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	f000 f9b8 	bl	8007ee8 <u8g2_DrawCircle>
  }

  {
    u8g2_uint_t ww, hh;

    ww = w;
 8007b78:	88fb      	ldrh	r3, [r7, #6]
 8007b7a:	82fb      	strh	r3, [r7, #22]
    ww -= r;
 8007b7c:	8afa      	ldrh	r2, [r7, #22]
 8007b7e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007b80:	1ad3      	subs	r3, r2, r3
 8007b82:	82fb      	strh	r3, [r7, #22]
    ww -= r;
 8007b84:	8afa      	ldrh	r2, [r7, #22]
 8007b86:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007b88:	1ad3      	subs	r3, r2, r3
 8007b8a:	82fb      	strh	r3, [r7, #22]
    hh = h;
 8007b8c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007b8e:	82bb      	strh	r3, [r7, #20]
    hh -= r;
 8007b90:	8aba      	ldrh	r2, [r7, #20]
 8007b92:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007b94:	1ad3      	subs	r3, r2, r3
 8007b96:	82bb      	strh	r3, [r7, #20]
    hh -= r;
 8007b98:	8aba      	ldrh	r2, [r7, #20]
 8007b9a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007b9c:	1ad3      	subs	r3, r2, r3
 8007b9e:	82bb      	strh	r3, [r7, #20]
    
    xl++;
 8007ba0:	8bfb      	ldrh	r3, [r7, #30]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	83fb      	strh	r3, [r7, #30]
    yu++;
 8007ba6:	8bbb      	ldrh	r3, [r7, #28]
 8007ba8:	3301      	adds	r3, #1
 8007baa:	83bb      	strh	r3, [r7, #28]
    
    if ( ww >= 3 )
 8007bac:	8afb      	ldrh	r3, [r7, #22]
 8007bae:	2b02      	cmp	r3, #2
 8007bb0:	d914      	bls.n	8007bdc <u8g2_DrawRFrame+0x130>
    {
      ww -= 2;
 8007bb2:	8afb      	ldrh	r3, [r7, #22]
 8007bb4:	3b02      	subs	r3, #2
 8007bb6:	82fb      	strh	r3, [r7, #22]
      h--;
 8007bb8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	853b      	strh	r3, [r7, #40]	; 0x28
      u8g2_DrawHLine(u8g2, xl, y, ww);
 8007bbe:	8afb      	ldrh	r3, [r7, #22]
 8007bc0:	893a      	ldrh	r2, [r7, #8]
 8007bc2:	8bf9      	ldrh	r1, [r7, #30]
 8007bc4:	68f8      	ldr	r0, [r7, #12]
 8007bc6:	f001 fa75 	bl	80090b4 <u8g2_DrawHLine>
      u8g2_DrawHLine(u8g2, xl, y+h, ww);
 8007bca:	893a      	ldrh	r2, [r7, #8]
 8007bcc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007bce:	4413      	add	r3, r2
 8007bd0:	b29a      	uxth	r2, r3
 8007bd2:	8afb      	ldrh	r3, [r7, #22]
 8007bd4:	8bf9      	ldrh	r1, [r7, #30]
 8007bd6:	68f8      	ldr	r0, [r7, #12]
 8007bd8:	f001 fa6c 	bl	80090b4 <u8g2_DrawHLine>
    }
    
    if ( hh >= 3 )
 8007bdc:	8abb      	ldrh	r3, [r7, #20]
 8007bde:	2b02      	cmp	r3, #2
 8007be0:	d916      	bls.n	8007c10 <u8g2_DrawRFrame+0x164>
    {
      hh -= 2;
 8007be2:	8abb      	ldrh	r3, [r7, #20]
 8007be4:	3b02      	subs	r3, #2
 8007be6:	82bb      	strh	r3, [r7, #20]
      w--;
 8007be8:	88fb      	ldrh	r3, [r7, #6]
 8007bea:	3b01      	subs	r3, #1
 8007bec:	80fb      	strh	r3, [r7, #6]
      u8g2_DrawVLine(u8g2, x, yu, hh);
 8007bee:	8abb      	ldrh	r3, [r7, #20]
 8007bf0:	8bba      	ldrh	r2, [r7, #28]
 8007bf2:	8979      	ldrh	r1, [r7, #10]
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f001 fa76 	bl	80090e6 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x+w, yu, hh);
 8007bfa:	897a      	ldrh	r2, [r7, #10]
 8007bfc:	88fb      	ldrh	r3, [r7, #6]
 8007bfe:	4413      	add	r3, r2
 8007c00:	b299      	uxth	r1, r3
 8007c02:	8abb      	ldrh	r3, [r7, #20]
 8007c04:	8bba      	ldrh	r2, [r7, #28]
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f001 fa6d 	bl	80090e6 <u8g2_DrawVLine>
 8007c0c:	e000      	b.n	8007c10 <u8g2_DrawRFrame+0x164>
    return;
 8007c0e:	bf00      	nop
    }
  }
}
 8007c10:	3720      	adds	r7, #32
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b084      	sub	sp, #16
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	7c1b      	ldrb	r3, [r3, #16]
 8007c24:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	fb02 f303 	mul.w	r3, r2, r3
 8007c34:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	00db      	lsls	r3, r3, #3
 8007c3a:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c40:	68fa      	ldr	r2, [r7, #12]
 8007c42:	2100      	movs	r1, #0
 8007c44:	4618      	mov	r0, r3
 8007c46:	f002 fee9 	bl	800aa1c <memset>
}
 8007c4a:	bf00      	nop
 8007c4c:	3710      	adds	r7, #16
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b086      	sub	sp, #24
 8007c56:	af02      	add	r7, sp, #8
 8007c58:	6078      	str	r0, [r7, #4]
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	70fb      	strb	r3, [r7, #3]
 8007c5e:	4613      	mov	r3, r2
 8007c60:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	7c1b      	ldrb	r3, [r3, #16]
 8007c68:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8007c6a:	78fb      	ldrb	r3, [r7, #3]
 8007c6c:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c72:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8007c74:	7bfb      	ldrb	r3, [r7, #15]
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	89ba      	ldrh	r2, [r7, #12]
 8007c7a:	fb12 f303 	smulbb	r3, r2, r3
 8007c7e:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8007c80:	89bb      	ldrh	r3, [r7, #12]
 8007c82:	00db      	lsls	r3, r3, #3
 8007c84:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8007c86:	89bb      	ldrh	r3, [r7, #12]
 8007c88:	68ba      	ldr	r2, [r7, #8]
 8007c8a:	4413      	add	r3, r2
 8007c8c:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8007c8e:	7bf9      	ldrb	r1, [r7, #15]
 8007c90:	78ba      	ldrb	r2, [r7, #2]
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	9300      	str	r3, [sp, #0]
 8007c96:	460b      	mov	r3, r1
 8007c98:	2100      	movs	r1, #0
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f002 fbc7 	bl	800a42e <u8x8_DrawTile>
}
 8007ca0:	bf00      	nop
 8007ca2:	3710      	adds	r7, #16
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007cba:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007cc2:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	7c5b      	ldrb	r3, [r3, #17]
 8007cca:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8007ccc:	7bba      	ldrb	r2, [r7, #14]
 8007cce:	7bfb      	ldrb	r3, [r7, #15]
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f7ff ffbd 	bl	8007c52 <u8g2_send_tile_row>
    src_row++;
 8007cd8:	7bfb      	ldrb	r3, [r7, #15]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8007cde:	7bbb      	ldrb	r3, [r7, #14]
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8007ce4:	7bfa      	ldrb	r2, [r7, #15]
 8007ce6:	7b7b      	ldrb	r3, [r7, #13]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d203      	bcs.n	8007cf4 <u8g2_send_buffer+0x4c>
 8007cec:	7bba      	ldrb	r2, [r7, #14]
 8007cee:	7b3b      	ldrb	r3, [r7, #12]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d3eb      	bcc.n	8007ccc <u8g2_send_buffer+0x24>
}
 8007cf4:	bf00      	nop
 8007cf6:	3710      	adds	r7, #16
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f7ff ffcf 	bl	8007ca8 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f002 fbe0 	bl	800a4d0 <u8x8_RefreshDisplay>
}
 8007d10:	bf00      	nop
 8007d12:	3708      	adds	r7, #8
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <u8g2_draw_circle_section>:
/* Circle */

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	4608      	mov	r0, r1
 8007d22:	4611      	mov	r1, r2
 8007d24:	461a      	mov	r2, r3
 8007d26:	4603      	mov	r3, r0
 8007d28:	817b      	strh	r3, [r7, #10]
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	813b      	strh	r3, [r7, #8]
 8007d2e:	4613      	mov	r3, r2
 8007d30:	80fb      	strh	r3, [r7, #6]
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 8007d32:	7f3b      	ldrb	r3, [r7, #28]
 8007d34:	f003 0301 	and.w	r3, r3, #1
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d017      	beq.n	8007d6c <u8g2_draw_circle_section+0x54>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 - y);
 8007d3c:	88fa      	ldrh	r2, [r7, #6]
 8007d3e:	897b      	ldrh	r3, [r7, #10]
 8007d40:	4413      	add	r3, r2
 8007d42:	b299      	uxth	r1, r3
 8007d44:	8b3a      	ldrh	r2, [r7, #24]
 8007d46:	893b      	ldrh	r3, [r7, #8]
 8007d48:	1ad3      	subs	r3, r2, r3
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	68f8      	ldr	r0, [r7, #12]
 8007d50:	f001 f9e2 	bl	8009118 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 - x);
 8007d54:	88fa      	ldrh	r2, [r7, #6]
 8007d56:	893b      	ldrh	r3, [r7, #8]
 8007d58:	4413      	add	r3, r2
 8007d5a:	b299      	uxth	r1, r3
 8007d5c:	8b3a      	ldrh	r2, [r7, #24]
 8007d5e:	897b      	ldrh	r3, [r7, #10]
 8007d60:	1ad3      	subs	r3, r2, r3
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	461a      	mov	r2, r3
 8007d66:	68f8      	ldr	r0, [r7, #12]
 8007d68:	f001 f9d6 	bl	8009118 <u8g2_DrawPixel>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
 8007d6c:	7f3b      	ldrb	r3, [r7, #28]
 8007d6e:	f003 0302 	and.w	r3, r3, #2
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d017      	beq.n	8007da6 <u8g2_draw_circle_section+0x8e>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 - y);
 8007d76:	88fa      	ldrh	r2, [r7, #6]
 8007d78:	897b      	ldrh	r3, [r7, #10]
 8007d7a:	1ad3      	subs	r3, r2, r3
 8007d7c:	b299      	uxth	r1, r3
 8007d7e:	8b3a      	ldrh	r2, [r7, #24]
 8007d80:	893b      	ldrh	r3, [r7, #8]
 8007d82:	1ad3      	subs	r3, r2, r3
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	461a      	mov	r2, r3
 8007d88:	68f8      	ldr	r0, [r7, #12]
 8007d8a:	f001 f9c5 	bl	8009118 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 - x);
 8007d8e:	88fa      	ldrh	r2, [r7, #6]
 8007d90:	893b      	ldrh	r3, [r7, #8]
 8007d92:	1ad3      	subs	r3, r2, r3
 8007d94:	b299      	uxth	r1, r3
 8007d96:	8b3a      	ldrh	r2, [r7, #24]
 8007d98:	897b      	ldrh	r3, [r7, #10]
 8007d9a:	1ad3      	subs	r3, r2, r3
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	461a      	mov	r2, r3
 8007da0:	68f8      	ldr	r0, [r7, #12]
 8007da2:	f001 f9b9 	bl	8009118 <u8g2_DrawPixel>
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
 8007da6:	7f3b      	ldrb	r3, [r7, #28]
 8007da8:	f003 0308 	and.w	r3, r3, #8
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d017      	beq.n	8007de0 <u8g2_draw_circle_section+0xc8>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 + y);
 8007db0:	88fa      	ldrh	r2, [r7, #6]
 8007db2:	897b      	ldrh	r3, [r7, #10]
 8007db4:	4413      	add	r3, r2
 8007db6:	b299      	uxth	r1, r3
 8007db8:	8b3a      	ldrh	r2, [r7, #24]
 8007dba:	893b      	ldrh	r3, [r7, #8]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	f001 f9a8 	bl	8009118 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 + x);
 8007dc8:	88fa      	ldrh	r2, [r7, #6]
 8007dca:	893b      	ldrh	r3, [r7, #8]
 8007dcc:	4413      	add	r3, r2
 8007dce:	b299      	uxth	r1, r3
 8007dd0:	8b3a      	ldrh	r2, [r7, #24]
 8007dd2:	897b      	ldrh	r3, [r7, #10]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	461a      	mov	r2, r3
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	f001 f99c 	bl	8009118 <u8g2_DrawPixel>
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
 8007de0:	7f3b      	ldrb	r3, [r7, #28]
 8007de2:	f003 0304 	and.w	r3, r3, #4
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d017      	beq.n	8007e1a <u8g2_draw_circle_section+0x102>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 + y);
 8007dea:	88fa      	ldrh	r2, [r7, #6]
 8007dec:	897b      	ldrh	r3, [r7, #10]
 8007dee:	1ad3      	subs	r3, r2, r3
 8007df0:	b299      	uxth	r1, r3
 8007df2:	8b3a      	ldrh	r2, [r7, #24]
 8007df4:	893b      	ldrh	r3, [r7, #8]
 8007df6:	4413      	add	r3, r2
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	68f8      	ldr	r0, [r7, #12]
 8007dfe:	f001 f98b 	bl	8009118 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 + x);
 8007e02:	88fa      	ldrh	r2, [r7, #6]
 8007e04:	893b      	ldrh	r3, [r7, #8]
 8007e06:	1ad3      	subs	r3, r2, r3
 8007e08:	b299      	uxth	r1, r3
 8007e0a:	8b3a      	ldrh	r2, [r7, #24]
 8007e0c:	897b      	ldrh	r3, [r7, #10]
 8007e0e:	4413      	add	r3, r2
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	461a      	mov	r2, r3
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	f001 f97f 	bl	8009118 <u8g2_DrawPixel>
    }
}
 8007e1a:	bf00      	nop
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <u8g2_draw_circle>:

static void u8g2_draw_circle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b08a      	sub	sp, #40	; 0x28
 8007e26:	af02      	add	r7, sp, #8
 8007e28:	60f8      	str	r0, [r7, #12]
 8007e2a:	4608      	mov	r0, r1
 8007e2c:	4611      	mov	r1, r2
 8007e2e:	461a      	mov	r2, r3
 8007e30:	4603      	mov	r3, r0
 8007e32:	817b      	strh	r3, [r7, #10]
 8007e34:	460b      	mov	r3, r1
 8007e36:	813b      	strh	r3, [r7, #8]
 8007e38:	4613      	mov	r3, r2
 8007e3a:	80fb      	strh	r3, [r7, #6]
    u8g2_int_t ddF_x;
    u8g2_int_t ddF_y;
    u8g2_uint_t x;
    u8g2_uint_t y;

    f = 1;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	83fb      	strh	r3, [r7, #30]
    f -= rad;
 8007e40:	8bfa      	ldrh	r2, [r7, #30]
 8007e42:	88fb      	ldrh	r3, [r7, #6]
 8007e44:	1ad3      	subs	r3, r2, r3
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	83fb      	strh	r3, [r7, #30]
    ddF_x = 1;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	83bb      	strh	r3, [r7, #28]
    ddF_y = 0;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	837b      	strh	r3, [r7, #26]
    ddF_y -= rad;
 8007e52:	8b7a      	ldrh	r2, [r7, #26]
 8007e54:	88fb      	ldrh	r3, [r7, #6]
 8007e56:	1ad3      	subs	r3, r2, r3
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	837b      	strh	r3, [r7, #26]
    ddF_y *= 2;
 8007e5c:	8b7b      	ldrh	r3, [r7, #26]
 8007e5e:	005b      	lsls	r3, r3, #1
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	837b      	strh	r3, [r7, #26]
    x = 0;
 8007e64:	2300      	movs	r3, #0
 8007e66:	833b      	strh	r3, [r7, #24]
    y = rad;
 8007e68:	88fb      	ldrh	r3, [r7, #6]
 8007e6a:	82fb      	strh	r3, [r7, #22]

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
 8007e6c:	8978      	ldrh	r0, [r7, #10]
 8007e6e:	8afa      	ldrh	r2, [r7, #22]
 8007e70:	8b39      	ldrh	r1, [r7, #24]
 8007e72:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007e76:	9301      	str	r3, [sp, #4]
 8007e78:	893b      	ldrh	r3, [r7, #8]
 8007e7a:	9300      	str	r3, [sp, #0]
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	68f8      	ldr	r0, [r7, #12]
 8007e80:	f7ff ff4a 	bl	8007d18 <u8g2_draw_circle_section>
    
    while ( x < y )
 8007e84:	e027      	b.n	8007ed6 <u8g2_draw_circle+0xb4>
    {
      if (f >= 0) 
 8007e86:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	db0b      	blt.n	8007ea6 <u8g2_draw_circle+0x84>
      {
        y--;
 8007e8e:	8afb      	ldrh	r3, [r7, #22]
 8007e90:	3b01      	subs	r3, #1
 8007e92:	82fb      	strh	r3, [r7, #22]
        ddF_y += 2;
 8007e94:	8b7b      	ldrh	r3, [r7, #26]
 8007e96:	3302      	adds	r3, #2
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	837b      	strh	r3, [r7, #26]
        f += ddF_y;
 8007e9c:	8bfa      	ldrh	r2, [r7, #30]
 8007e9e:	8b7b      	ldrh	r3, [r7, #26]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	83fb      	strh	r3, [r7, #30]
      }
      x++;
 8007ea6:	8b3b      	ldrh	r3, [r7, #24]
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	833b      	strh	r3, [r7, #24]
      ddF_x += 2;
 8007eac:	8bbb      	ldrh	r3, [r7, #28]
 8007eae:	3302      	adds	r3, #2
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	83bb      	strh	r3, [r7, #28]
      f += ddF_x;
 8007eb4:	8bfa      	ldrh	r2, [r7, #30]
 8007eb6:	8bbb      	ldrh	r3, [r7, #28]
 8007eb8:	4413      	add	r3, r2
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	83fb      	strh	r3, [r7, #30]

      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
 8007ebe:	8978      	ldrh	r0, [r7, #10]
 8007ec0:	8afa      	ldrh	r2, [r7, #22]
 8007ec2:	8b39      	ldrh	r1, [r7, #24]
 8007ec4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007ec8:	9301      	str	r3, [sp, #4]
 8007eca:	893b      	ldrh	r3, [r7, #8]
 8007ecc:	9300      	str	r3, [sp, #0]
 8007ece:	4603      	mov	r3, r0
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	f7ff ff21 	bl	8007d18 <u8g2_draw_circle_section>
    while ( x < y )
 8007ed6:	8b3a      	ldrh	r2, [r7, #24]
 8007ed8:	8afb      	ldrh	r3, [r7, #22]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d3d3      	bcc.n	8007e86 <u8g2_draw_circle+0x64>
    }
}
 8007ede:	bf00      	nop
 8007ee0:	bf00      	nop
 8007ee2:	3720      	adds	r7, #32
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <u8g2_DrawCircle>:

void u8g2_DrawCircle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8007ee8:	b590      	push	{r4, r7, lr}
 8007eea:	b087      	sub	sp, #28
 8007eec:	af02      	add	r7, sp, #8
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	4608      	mov	r0, r1
 8007ef2:	4611      	mov	r1, r2
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	817b      	strh	r3, [r7, #10]
 8007efa:	460b      	mov	r3, r1
 8007efc:	813b      	strh	r3, [r7, #8]
 8007efe:	4613      	mov	r3, r2
 8007f00:	80fb      	strh	r3, [r7, #6]
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 8007f02:	897a      	ldrh	r2, [r7, #10]
 8007f04:	88fb      	ldrh	r3, [r7, #6]
 8007f06:	1ad3      	subs	r3, r2, r3
 8007f08:	b299      	uxth	r1, r3
 8007f0a:	893a      	ldrh	r2, [r7, #8]
 8007f0c:	88fb      	ldrh	r3, [r7, #6]
 8007f0e:	1ad3      	subs	r3, r2, r3
 8007f10:	b298      	uxth	r0, r3
 8007f12:	897a      	ldrh	r2, [r7, #10]
 8007f14:	88fb      	ldrh	r3, [r7, #6]
 8007f16:	4413      	add	r3, r2
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	b29c      	uxth	r4, r3
 8007f1e:	893a      	ldrh	r2, [r7, #8]
 8007f20:	88fb      	ldrh	r3, [r7, #6]
 8007f22:	4413      	add	r3, r2
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	3301      	adds	r3, #1
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	9300      	str	r3, [sp, #0]
 8007f2c:	4623      	mov	r3, r4
 8007f2e:	4602      	mov	r2, r0
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	f001 f96e 	bl	8009212 <u8g2_IsIntersection>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d00a      	beq.n	8007f52 <u8g2_DrawCircle+0x6a>
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  
  /* draw circle */
  u8g2_draw_circle(u8g2, x0, y0, rad, option);
 8007f3c:	88f8      	ldrh	r0, [r7, #6]
 8007f3e:	893a      	ldrh	r2, [r7, #8]
 8007f40:	8979      	ldrh	r1, [r7, #10]
 8007f42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007f46:	9300      	str	r3, [sp, #0]
 8007f48:	4603      	mov	r3, r0
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f7ff ff69 	bl	8007e22 <u8g2_draw_circle>
 8007f50:	e000      	b.n	8007f54 <u8g2_DrawCircle+0x6c>
      return;
 8007f52:	bf00      	nop
}
 8007f54:	3714      	adds	r7, #20
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd90      	pop	{r4, r7, pc}

08007f5a <u8g2_draw_disc_section>:
/* Disk */

static void u8g2_draw_disc_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;

static void u8g2_draw_disc_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b084      	sub	sp, #16
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	60f8      	str	r0, [r7, #12]
 8007f62:	4608      	mov	r0, r1
 8007f64:	4611      	mov	r1, r2
 8007f66:	461a      	mov	r2, r3
 8007f68:	4603      	mov	r3, r0
 8007f6a:	817b      	strh	r3, [r7, #10]
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	813b      	strh	r3, [r7, #8]
 8007f70:	4613      	mov	r3, r2
 8007f72:	80fb      	strh	r3, [r7, #6]
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 8007f74:	7f3b      	ldrb	r3, [r7, #28]
 8007f76:	f003 0301 	and.w	r3, r3, #1
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d01b      	beq.n	8007fb6 <u8g2_draw_disc_section+0x5c>
    {
      u8g2_DrawVLine(u8g2, x0+x, y0-y, y+1);
 8007f7e:	88fa      	ldrh	r2, [r7, #6]
 8007f80:	897b      	ldrh	r3, [r7, #10]
 8007f82:	4413      	add	r3, r2
 8007f84:	b299      	uxth	r1, r3
 8007f86:	8b3a      	ldrh	r2, [r7, #24]
 8007f88:	893b      	ldrh	r3, [r7, #8]
 8007f8a:	1ad3      	subs	r3, r2, r3
 8007f8c:	b29a      	uxth	r2, r3
 8007f8e:	893b      	ldrh	r3, [r7, #8]
 8007f90:	3301      	adds	r3, #1
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	68f8      	ldr	r0, [r7, #12]
 8007f96:	f001 f8a6 	bl	80090e6 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0+y, y0-x, x+1);
 8007f9a:	88fa      	ldrh	r2, [r7, #6]
 8007f9c:	893b      	ldrh	r3, [r7, #8]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	b299      	uxth	r1, r3
 8007fa2:	8b3a      	ldrh	r2, [r7, #24]
 8007fa4:	897b      	ldrh	r3, [r7, #10]
 8007fa6:	1ad3      	subs	r3, r2, r3
 8007fa8:	b29a      	uxth	r2, r3
 8007faa:	897b      	ldrh	r3, [r7, #10]
 8007fac:	3301      	adds	r3, #1
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	68f8      	ldr	r0, [r7, #12]
 8007fb2:	f001 f898 	bl	80090e6 <u8g2_DrawVLine>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
 8007fb6:	7f3b      	ldrb	r3, [r7, #28]
 8007fb8:	f003 0302 	and.w	r3, r3, #2
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d01b      	beq.n	8007ff8 <u8g2_draw_disc_section+0x9e>
    {
      u8g2_DrawVLine(u8g2, x0-x, y0-y, y+1);
 8007fc0:	88fa      	ldrh	r2, [r7, #6]
 8007fc2:	897b      	ldrh	r3, [r7, #10]
 8007fc4:	1ad3      	subs	r3, r2, r3
 8007fc6:	b299      	uxth	r1, r3
 8007fc8:	8b3a      	ldrh	r2, [r7, #24]
 8007fca:	893b      	ldrh	r3, [r7, #8]
 8007fcc:	1ad3      	subs	r3, r2, r3
 8007fce:	b29a      	uxth	r2, r3
 8007fd0:	893b      	ldrh	r3, [r7, #8]
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	68f8      	ldr	r0, [r7, #12]
 8007fd8:	f001 f885 	bl	80090e6 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0-y, y0-x, x+1);
 8007fdc:	88fa      	ldrh	r2, [r7, #6]
 8007fde:	893b      	ldrh	r3, [r7, #8]
 8007fe0:	1ad3      	subs	r3, r2, r3
 8007fe2:	b299      	uxth	r1, r3
 8007fe4:	8b3a      	ldrh	r2, [r7, #24]
 8007fe6:	897b      	ldrh	r3, [r7, #10]
 8007fe8:	1ad3      	subs	r3, r2, r3
 8007fea:	b29a      	uxth	r2, r3
 8007fec:	897b      	ldrh	r3, [r7, #10]
 8007fee:	3301      	adds	r3, #1
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	68f8      	ldr	r0, [r7, #12]
 8007ff4:	f001 f877 	bl	80090e6 <u8g2_DrawVLine>
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
 8007ff8:	7f3b      	ldrb	r3, [r7, #28]
 8007ffa:	f003 0308 	and.w	r3, r3, #8
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d015      	beq.n	800802e <u8g2_draw_disc_section+0xd4>
    {
      u8g2_DrawVLine(u8g2, x0+x, y0, y+1);
 8008002:	88fa      	ldrh	r2, [r7, #6]
 8008004:	897b      	ldrh	r3, [r7, #10]
 8008006:	4413      	add	r3, r2
 8008008:	b299      	uxth	r1, r3
 800800a:	893b      	ldrh	r3, [r7, #8]
 800800c:	3301      	adds	r3, #1
 800800e:	b29b      	uxth	r3, r3
 8008010:	8b3a      	ldrh	r2, [r7, #24]
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f001 f867 	bl	80090e6 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0+y, y0, x+1);
 8008018:	88fa      	ldrh	r2, [r7, #6]
 800801a:	893b      	ldrh	r3, [r7, #8]
 800801c:	4413      	add	r3, r2
 800801e:	b299      	uxth	r1, r3
 8008020:	897b      	ldrh	r3, [r7, #10]
 8008022:	3301      	adds	r3, #1
 8008024:	b29b      	uxth	r3, r3
 8008026:	8b3a      	ldrh	r2, [r7, #24]
 8008028:	68f8      	ldr	r0, [r7, #12]
 800802a:	f001 f85c 	bl	80090e6 <u8g2_DrawVLine>
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
 800802e:	7f3b      	ldrb	r3, [r7, #28]
 8008030:	f003 0304 	and.w	r3, r3, #4
 8008034:	2b00      	cmp	r3, #0
 8008036:	d015      	beq.n	8008064 <u8g2_draw_disc_section+0x10a>
    {
      u8g2_DrawVLine(u8g2, x0-x, y0, y+1);
 8008038:	88fa      	ldrh	r2, [r7, #6]
 800803a:	897b      	ldrh	r3, [r7, #10]
 800803c:	1ad3      	subs	r3, r2, r3
 800803e:	b299      	uxth	r1, r3
 8008040:	893b      	ldrh	r3, [r7, #8]
 8008042:	3301      	adds	r3, #1
 8008044:	b29b      	uxth	r3, r3
 8008046:	8b3a      	ldrh	r2, [r7, #24]
 8008048:	68f8      	ldr	r0, [r7, #12]
 800804a:	f001 f84c 	bl	80090e6 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0-y, y0, x+1);
 800804e:	88fa      	ldrh	r2, [r7, #6]
 8008050:	893b      	ldrh	r3, [r7, #8]
 8008052:	1ad3      	subs	r3, r2, r3
 8008054:	b299      	uxth	r1, r3
 8008056:	897b      	ldrh	r3, [r7, #10]
 8008058:	3301      	adds	r3, #1
 800805a:	b29b      	uxth	r3, r3
 800805c:	8b3a      	ldrh	r2, [r7, #24]
 800805e:	68f8      	ldr	r0, [r7, #12]
 8008060:	f001 f841 	bl	80090e6 <u8g2_DrawVLine>
    }
}
 8008064:	bf00      	nop
 8008066:	3710      	adds	r7, #16
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <u8g2_draw_disc>:

static void u8g2_draw_disc(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b08a      	sub	sp, #40	; 0x28
 8008070:	af02      	add	r7, sp, #8
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	4608      	mov	r0, r1
 8008076:	4611      	mov	r1, r2
 8008078:	461a      	mov	r2, r3
 800807a:	4603      	mov	r3, r0
 800807c:	817b      	strh	r3, [r7, #10]
 800807e:	460b      	mov	r3, r1
 8008080:	813b      	strh	r3, [r7, #8]
 8008082:	4613      	mov	r3, r2
 8008084:	80fb      	strh	r3, [r7, #6]
  u8g2_int_t ddF_x;
  u8g2_int_t ddF_y;
  u8g2_uint_t x;
  u8g2_uint_t y;

  f = 1;
 8008086:	2301      	movs	r3, #1
 8008088:	83fb      	strh	r3, [r7, #30]
  f -= rad;
 800808a:	8bfa      	ldrh	r2, [r7, #30]
 800808c:	88fb      	ldrh	r3, [r7, #6]
 800808e:	1ad3      	subs	r3, r2, r3
 8008090:	b29b      	uxth	r3, r3
 8008092:	83fb      	strh	r3, [r7, #30]
  ddF_x = 1;
 8008094:	2301      	movs	r3, #1
 8008096:	83bb      	strh	r3, [r7, #28]
  ddF_y = 0;
 8008098:	2300      	movs	r3, #0
 800809a:	837b      	strh	r3, [r7, #26]
  ddF_y -= rad;
 800809c:	8b7a      	ldrh	r2, [r7, #26]
 800809e:	88fb      	ldrh	r3, [r7, #6]
 80080a0:	1ad3      	subs	r3, r2, r3
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	837b      	strh	r3, [r7, #26]
  ddF_y *= 2;
 80080a6:	8b7b      	ldrh	r3, [r7, #26]
 80080a8:	005b      	lsls	r3, r3, #1
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	837b      	strh	r3, [r7, #26]
  x = 0;
 80080ae:	2300      	movs	r3, #0
 80080b0:	833b      	strh	r3, [r7, #24]
  y = rad;
 80080b2:	88fb      	ldrh	r3, [r7, #6]
 80080b4:	82fb      	strh	r3, [r7, #22]

  u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);
 80080b6:	8978      	ldrh	r0, [r7, #10]
 80080b8:	8afa      	ldrh	r2, [r7, #22]
 80080ba:	8b39      	ldrh	r1, [r7, #24]
 80080bc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80080c0:	9301      	str	r3, [sp, #4]
 80080c2:	893b      	ldrh	r3, [r7, #8]
 80080c4:	9300      	str	r3, [sp, #0]
 80080c6:	4603      	mov	r3, r0
 80080c8:	68f8      	ldr	r0, [r7, #12]
 80080ca:	f7ff ff46 	bl	8007f5a <u8g2_draw_disc_section>
  
  while ( x < y )
 80080ce:	e027      	b.n	8008120 <u8g2_draw_disc+0xb4>
  {
    if (f >= 0) 
 80080d0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	db0b      	blt.n	80080f0 <u8g2_draw_disc+0x84>
    {
      y--;
 80080d8:	8afb      	ldrh	r3, [r7, #22]
 80080da:	3b01      	subs	r3, #1
 80080dc:	82fb      	strh	r3, [r7, #22]
      ddF_y += 2;
 80080de:	8b7b      	ldrh	r3, [r7, #26]
 80080e0:	3302      	adds	r3, #2
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	837b      	strh	r3, [r7, #26]
      f += ddF_y;
 80080e6:	8bfa      	ldrh	r2, [r7, #30]
 80080e8:	8b7b      	ldrh	r3, [r7, #26]
 80080ea:	4413      	add	r3, r2
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	83fb      	strh	r3, [r7, #30]
    }
    x++;
 80080f0:	8b3b      	ldrh	r3, [r7, #24]
 80080f2:	3301      	adds	r3, #1
 80080f4:	833b      	strh	r3, [r7, #24]
    ddF_x += 2;
 80080f6:	8bbb      	ldrh	r3, [r7, #28]
 80080f8:	3302      	adds	r3, #2
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	83bb      	strh	r3, [r7, #28]
    f += ddF_x;
 80080fe:	8bfa      	ldrh	r2, [r7, #30]
 8008100:	8bbb      	ldrh	r3, [r7, #28]
 8008102:	4413      	add	r3, r2
 8008104:	b29b      	uxth	r3, r3
 8008106:	83fb      	strh	r3, [r7, #30]

    u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);    
 8008108:	8978      	ldrh	r0, [r7, #10]
 800810a:	8afa      	ldrh	r2, [r7, #22]
 800810c:	8b39      	ldrh	r1, [r7, #24]
 800810e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008112:	9301      	str	r3, [sp, #4]
 8008114:	893b      	ldrh	r3, [r7, #8]
 8008116:	9300      	str	r3, [sp, #0]
 8008118:	4603      	mov	r3, r0
 800811a:	68f8      	ldr	r0, [r7, #12]
 800811c:	f7ff ff1d 	bl	8007f5a <u8g2_draw_disc_section>
  while ( x < y )
 8008120:	8b3a      	ldrh	r2, [r7, #24]
 8008122:	8afb      	ldrh	r3, [r7, #22]
 8008124:	429a      	cmp	r2, r3
 8008126:	d3d3      	bcc.n	80080d0 <u8g2_draw_disc+0x64>
  }
}
 8008128:	bf00      	nop
 800812a:	bf00      	nop
 800812c:	3720      	adds	r7, #32
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <u8g2_DrawDisc>:

void u8g2_DrawDisc(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8008132:	b590      	push	{r4, r7, lr}
 8008134:	b087      	sub	sp, #28
 8008136:	af02      	add	r7, sp, #8
 8008138:	60f8      	str	r0, [r7, #12]
 800813a:	4608      	mov	r0, r1
 800813c:	4611      	mov	r1, r2
 800813e:	461a      	mov	r2, r3
 8008140:	4603      	mov	r3, r0
 8008142:	817b      	strh	r3, [r7, #10]
 8008144:	460b      	mov	r3, r1
 8008146:	813b      	strh	r3, [r7, #8]
 8008148:	4613      	mov	r3, r2
 800814a:	80fb      	strh	r3, [r7, #6]
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 800814c:	897a      	ldrh	r2, [r7, #10]
 800814e:	88fb      	ldrh	r3, [r7, #6]
 8008150:	1ad3      	subs	r3, r2, r3
 8008152:	b299      	uxth	r1, r3
 8008154:	893a      	ldrh	r2, [r7, #8]
 8008156:	88fb      	ldrh	r3, [r7, #6]
 8008158:	1ad3      	subs	r3, r2, r3
 800815a:	b298      	uxth	r0, r3
 800815c:	897a      	ldrh	r2, [r7, #10]
 800815e:	88fb      	ldrh	r3, [r7, #6]
 8008160:	4413      	add	r3, r2
 8008162:	b29b      	uxth	r3, r3
 8008164:	3301      	adds	r3, #1
 8008166:	b29c      	uxth	r4, r3
 8008168:	893a      	ldrh	r2, [r7, #8]
 800816a:	88fb      	ldrh	r3, [r7, #6]
 800816c:	4413      	add	r3, r2
 800816e:	b29b      	uxth	r3, r3
 8008170:	3301      	adds	r3, #1
 8008172:	b29b      	uxth	r3, r3
 8008174:	9300      	str	r3, [sp, #0]
 8008176:	4623      	mov	r3, r4
 8008178:	4602      	mov	r2, r0
 800817a:	68f8      	ldr	r0, [r7, #12]
 800817c:	f001 f849 	bl	8009212 <u8g2_IsIntersection>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d00a      	beq.n	800819c <u8g2_DrawDisc+0x6a>
      return;
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  /* draw disc */
  u8g2_draw_disc(u8g2, x0, y0, rad, option);
 8008186:	88f8      	ldrh	r0, [r7, #6]
 8008188:	893a      	ldrh	r2, [r7, #8]
 800818a:	8979      	ldrh	r1, [r7, #10]
 800818c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008190:	9300      	str	r3, [sp, #0]
 8008192:	4603      	mov	r3, r0
 8008194:	68f8      	ldr	r0, [r7, #12]
 8008196:	f7ff ff69 	bl	800806c <u8g2_draw_disc>
 800819a:	e000      	b.n	800819e <u8g2_DrawDisc+0x6c>
      return;
 800819c:	bf00      	nop
}
 800819e:	3714      	adds	r7, #20
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd90      	pop	{r4, r7, pc}

080081a4 <u8g2_m_16_8_f>:
//     *page_cnt = 2;
//     return buf;
// #endif
// }
uint8_t* u8g2_m_16_8_f(uint8_t* page_cnt)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
#ifdef U8G2_USE_DYNAMIC_ALLOC
    *page_cnt = 8;
    return 0;
#else
    static uint8_t buf[1024];
    *page_cnt = 8;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2208      	movs	r2, #8
 80081b0:	701a      	strb	r2, [r3, #0]
    return buf;
 80081b2:	4b03      	ldr	r3, [pc, #12]	; (80081c0 <u8g2_m_16_8_f+0x1c>)
#endif
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	370c      	adds	r7, #12
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr
 80081c0:	200002f4 	.word	0x200002f4

080081c4 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>:
//   buf = u8g2_m_16_8_2(&tile_buf_height);
//   u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
// }
// /* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2_t* u8g2, const u8g2_cb_t* rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b088      	sub	sp, #32
 80081c8:	af02      	add	r7, sp, #8
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	607a      	str	r2, [r7, #4]
 80081d0:	603b      	str	r3, [r7, #0]
    uint8_t  tile_buf_height;
    uint8_t* buf;
    u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	9300      	str	r3, [sp, #0]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	4a0b      	ldr	r2, [pc, #44]	; (8008208 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x44>)
 80081da:	490c      	ldr	r1, [pc, #48]	; (800820c <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x48>)
 80081dc:	68f8      	ldr	r0, [r7, #12]
 80081de:	f002 f9d7 	bl	800a590 <u8x8_Setup>
    buf = u8g2_m_16_8_f(&tile_buf_height);
 80081e2:	f107 0313 	add.w	r3, r7, #19
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7ff ffdc 	bl	80081a4 <u8g2_m_16_8_f>
 80081ec:	6178      	str	r0, [r7, #20]
    u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80081ee:	7cfa      	ldrb	r2, [r7, #19]
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	9300      	str	r3, [sp, #0]
 80081f4:	4b06      	ldr	r3, [pc, #24]	; (8008210 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x4c>)
 80081f6:	6979      	ldr	r1, [r7, #20]
 80081f8:	68f8      	ldr	r0, [r7, #12]
 80081fa:	f001 fcf2 	bl	8009be2 <u8g2_SetupBuffer>
}
 80081fe:	bf00      	nop
 8008200:	3718      	adds	r7, #24
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	0800a0cd 	.word	0x0800a0cd
 800820c:	0800a329 	.word	0x0800a329
 8008210:	0800939d 	.word	0x0800939d

08008214 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8008214:	b480      	push	{r7}
 8008216:	b083      	sub	sp, #12
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	460b      	mov	r3, r1
 800821e:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8008220:	78fb      	ldrb	r3, [r7, #3]
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	4413      	add	r3, r2
 8008226:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	781b      	ldrb	r3, [r3, #0]
}
 800822c:	4618      	mov	r0, r3
 800822e:	370c      	adds	r7, #12
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8008238:	b480      	push	{r7}
 800823a:	b085      	sub	sp, #20
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	460b      	mov	r3, r1
 8008242:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8008244:	78fb      	ldrb	r3, [r7, #3]
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	4413      	add	r3, r2
 800824a:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	81fb      	strh	r3, [r7, #14]
    font++;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	3301      	adds	r3, #1
 8008256:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8008258:	89fb      	ldrh	r3, [r7, #14]
 800825a:	021b      	lsls	r3, r3, #8
 800825c:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	b29a      	uxth	r2, r3
 8008264:	89fb      	ldrh	r3, [r7, #14]
 8008266:	4413      	add	r3, r2
 8008268:	81fb      	strh	r3, [r7, #14]
    return pos;
 800826a:	89fb      	ldrh	r3, [r7, #14]
}
 800826c:	4618      	mov	r0, r3
 800826e:	3714      	adds	r7, #20
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr

08008278 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8008282:	2100      	movs	r1, #0
 8008284:	6838      	ldr	r0, [r7, #0]
 8008286:	f7ff ffc5 	bl	8008214 <u8g2_font_get_byte>
 800828a:	4603      	mov	r3, r0
 800828c:	461a      	mov	r2, r3
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8008292:	2101      	movs	r1, #1
 8008294:	6838      	ldr	r0, [r7, #0]
 8008296:	f7ff ffbd 	bl	8008214 <u8g2_font_get_byte>
 800829a:	4603      	mov	r3, r0
 800829c:	461a      	mov	r2, r3
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 80082a2:	2102      	movs	r1, #2
 80082a4:	6838      	ldr	r0, [r7, #0]
 80082a6:	f7ff ffb5 	bl	8008214 <u8g2_font_get_byte>
 80082aa:	4603      	mov	r3, r0
 80082ac:	461a      	mov	r2, r3
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 80082b2:	2103      	movs	r1, #3
 80082b4:	6838      	ldr	r0, [r7, #0]
 80082b6:	f7ff ffad 	bl	8008214 <u8g2_font_get_byte>
 80082ba:	4603      	mov	r3, r0
 80082bc:	461a      	mov	r2, r3
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 80082c2:	2104      	movs	r1, #4
 80082c4:	6838      	ldr	r0, [r7, #0]
 80082c6:	f7ff ffa5 	bl	8008214 <u8g2_font_get_byte>
 80082ca:	4603      	mov	r3, r0
 80082cc:	461a      	mov	r2, r3
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80082d2:	2105      	movs	r1, #5
 80082d4:	6838      	ldr	r0, [r7, #0]
 80082d6:	f7ff ff9d 	bl	8008214 <u8g2_font_get_byte>
 80082da:	4603      	mov	r3, r0
 80082dc:	461a      	mov	r2, r3
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 80082e2:	2106      	movs	r1, #6
 80082e4:	6838      	ldr	r0, [r7, #0]
 80082e6:	f7ff ff95 	bl	8008214 <u8g2_font_get_byte>
 80082ea:	4603      	mov	r3, r0
 80082ec:	461a      	mov	r2, r3
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 80082f2:	2107      	movs	r1, #7
 80082f4:	6838      	ldr	r0, [r7, #0]
 80082f6:	f7ff ff8d 	bl	8008214 <u8g2_font_get_byte>
 80082fa:	4603      	mov	r3, r0
 80082fc:	461a      	mov	r2, r3
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8008302:	2108      	movs	r1, #8
 8008304:	6838      	ldr	r0, [r7, #0]
 8008306:	f7ff ff85 	bl	8008214 <u8g2_font_get_byte>
 800830a:	4603      	mov	r3, r0
 800830c:	461a      	mov	r2, r3
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8008312:	2109      	movs	r1, #9
 8008314:	6838      	ldr	r0, [r7, #0]
 8008316:	f7ff ff7d 	bl	8008214 <u8g2_font_get_byte>
 800831a:	4603      	mov	r3, r0
 800831c:	b25a      	sxtb	r2, r3
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8008322:	210a      	movs	r1, #10
 8008324:	6838      	ldr	r0, [r7, #0]
 8008326:	f7ff ff75 	bl	8008214 <u8g2_font_get_byte>
 800832a:	4603      	mov	r3, r0
 800832c:	b25a      	sxtb	r2, r3
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8008332:	210b      	movs	r1, #11
 8008334:	6838      	ldr	r0, [r7, #0]
 8008336:	f7ff ff6d 	bl	8008214 <u8g2_font_get_byte>
 800833a:	4603      	mov	r3, r0
 800833c:	b25a      	sxtb	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8008342:	210c      	movs	r1, #12
 8008344:	6838      	ldr	r0, [r7, #0]
 8008346:	f7ff ff65 	bl	8008214 <u8g2_font_get_byte>
 800834a:	4603      	mov	r3, r0
 800834c:	b25a      	sxtb	r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8008352:	210d      	movs	r1, #13
 8008354:	6838      	ldr	r0, [r7, #0]
 8008356:	f7ff ff5d 	bl	8008214 <u8g2_font_get_byte>
 800835a:	4603      	mov	r3, r0
 800835c:	b25a      	sxtb	r2, r3
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8008362:	210e      	movs	r1, #14
 8008364:	6838      	ldr	r0, [r7, #0]
 8008366:	f7ff ff55 	bl	8008214 <u8g2_font_get_byte>
 800836a:	4603      	mov	r3, r0
 800836c:	b25a      	sxtb	r2, r3
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8008372:	210f      	movs	r1, #15
 8008374:	6838      	ldr	r0, [r7, #0]
 8008376:	f7ff ff4d 	bl	8008214 <u8g2_font_get_byte>
 800837a:	4603      	mov	r3, r0
 800837c:	b25a      	sxtb	r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8008382:	2110      	movs	r1, #16
 8008384:	6838      	ldr	r0, [r7, #0]
 8008386:	f7ff ff45 	bl	8008214 <u8g2_font_get_byte>
 800838a:	4603      	mov	r3, r0
 800838c:	b25a      	sxtb	r2, r3
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8008392:	2111      	movs	r1, #17
 8008394:	6838      	ldr	r0, [r7, #0]
 8008396:	f7ff ff4f 	bl	8008238 <u8g2_font_get_word>
 800839a:	4603      	mov	r3, r0
 800839c:	461a      	mov	r2, r3
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80083a2:	2113      	movs	r1, #19
 80083a4:	6838      	ldr	r0, [r7, #0]
 80083a6:	f7ff ff47 	bl	8008238 <u8g2_font_get_word>
 80083aa:	4603      	mov	r3, r0
 80083ac:	461a      	mov	r2, r3
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 80083b2:	2115      	movs	r1, #21
 80083b4:	6838      	ldr	r0, [r7, #0]
 80083b6:	f7ff ff3f 	bl	8008238 <u8g2_font_get_word>
 80083ba:	4603      	mov	r3, r0
 80083bc:	461a      	mov	r2, r3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	82da      	strh	r2, [r3, #22]
#endif
}
 80083c2:	bf00      	nop
 80083c4:	3708      	adds	r7, #8
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}

080083ca <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 80083ca:	b480      	push	{r7}
 80083cc:	b085      	sub	sp, #20
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
 80083d2:	460b      	mov	r3, r1
 80083d4:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	7b1b      	ldrb	r3, [r3, #12]
 80083da:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 80083e4:	7bfa      	ldrb	r2, [r7, #15]
 80083e6:	7b7b      	ldrb	r3, [r7, #13]
 80083e8:	fa42 f303 	asr.w	r3, r2, r3
 80083ec:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 80083ee:	7b7b      	ldrb	r3, [r7, #13]
 80083f0:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 80083f2:	7bba      	ldrb	r2, [r7, #14]
 80083f4:	78fb      	ldrb	r3, [r7, #3]
 80083f6:	4413      	add	r3, r2
 80083f8:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 80083fa:	7bbb      	ldrb	r3, [r7, #14]
 80083fc:	2b07      	cmp	r3, #7
 80083fe:	d91a      	bls.n	8008436 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8008400:	2308      	movs	r3, #8
 8008402:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8008404:	7b3a      	ldrb	r2, [r7, #12]
 8008406:	7b7b      	ldrb	r3, [r7, #13]
 8008408:	1ad3      	subs	r3, r2, r3
 800840a:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	1c5a      	adds	r2, r3, #1
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	461a      	mov	r2, r3
 800841e:	7b3b      	ldrb	r3, [r7, #12]
 8008420:	fa02 f303 	lsl.w	r3, r2, r3
 8008424:	b25a      	sxtb	r2, r3
 8008426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800842a:	4313      	orrs	r3, r2
 800842c:	b25b      	sxtb	r3, r3
 800842e:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8008430:	7bbb      	ldrb	r3, [r7, #14]
 8008432:	3b08      	subs	r3, #8
 8008434:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8008436:	78fb      	ldrb	r3, [r7, #3]
 8008438:	f04f 32ff 	mov.w	r2, #4294967295
 800843c:	fa02 f303 	lsl.w	r3, r2, r3
 8008440:	b2db      	uxtb	r3, r3
 8008442:	43db      	mvns	r3, r3
 8008444:	b2da      	uxtb	r2, r3
 8008446:	7bfb      	ldrb	r3, [r7, #15]
 8008448:	4013      	ands	r3, r2
 800844a:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	7bba      	ldrb	r2, [r7, #14]
 8008450:	731a      	strb	r2, [r3, #12]
  return val;
 8008452:	7bfb      	ldrb	r3, [r7, #15]
}
 8008454:	4618      	mov	r0, r3
 8008456:	3714      	adds	r7, #20
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	460b      	mov	r3, r1
 800846a:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 800846c:	78fb      	ldrb	r3, [r7, #3]
 800846e:	4619      	mov	r1, r3
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f7ff ffaa 	bl	80083ca <u8g2_font_decode_get_unsigned_bits>
 8008476:	4603      	mov	r3, r0
 8008478:	73fb      	strb	r3, [r7, #15]
  d = 1;
 800847a:	2301      	movs	r3, #1
 800847c:	73bb      	strb	r3, [r7, #14]
  cnt--;
 800847e:	78fb      	ldrb	r3, [r7, #3]
 8008480:	3b01      	subs	r3, #1
 8008482:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8008484:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8008488:	78fb      	ldrb	r3, [r7, #3]
 800848a:	fa02 f303 	lsl.w	r3, r2, r3
 800848e:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8008490:	7bfa      	ldrb	r2, [r7, #15]
 8008492:	7bbb      	ldrb	r3, [r7, #14]
 8008494:	1ad3      	subs	r3, r2, r3
 8008496:	b2db      	uxtb	r3, r3
 8008498:	73fb      	strb	r3, [r7, #15]
  return v;
 800849a:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 80084a6:	b490      	push	{r4, r7}
 80084a8:	b082      	sub	sp, #8
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	4604      	mov	r4, r0
 80084ae:	4608      	mov	r0, r1
 80084b0:	4611      	mov	r1, r2
 80084b2:	461a      	mov	r2, r3
 80084b4:	4623      	mov	r3, r4
 80084b6:	80fb      	strh	r3, [r7, #6]
 80084b8:	4603      	mov	r3, r0
 80084ba:	717b      	strb	r3, [r7, #5]
 80084bc:	460b      	mov	r3, r1
 80084be:	713b      	strb	r3, [r7, #4]
 80084c0:	4613      	mov	r3, r2
 80084c2:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80084c4:	78fb      	ldrb	r3, [r7, #3]
 80084c6:	2b02      	cmp	r3, #2
 80084c8:	d014      	beq.n	80084f4 <u8g2_add_vector_y+0x4e>
 80084ca:	2b02      	cmp	r3, #2
 80084cc:	dc19      	bgt.n	8008502 <u8g2_add_vector_y+0x5c>
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d002      	beq.n	80084d8 <u8g2_add_vector_y+0x32>
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d007      	beq.n	80084e6 <u8g2_add_vector_y+0x40>
 80084d6:	e014      	b.n	8008502 <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 80084d8:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80084dc:	b29a      	uxth	r2, r3
 80084de:	88fb      	ldrh	r3, [r7, #6]
 80084e0:	4413      	add	r3, r2
 80084e2:	80fb      	strh	r3, [r7, #6]
      break;
 80084e4:	e014      	b.n	8008510 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 80084e6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80084ea:	b29a      	uxth	r2, r3
 80084ec:	88fb      	ldrh	r3, [r7, #6]
 80084ee:	4413      	add	r3, r2
 80084f0:	80fb      	strh	r3, [r7, #6]
      break;
 80084f2:	e00d      	b.n	8008510 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 80084f4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	88fa      	ldrh	r2, [r7, #6]
 80084fc:	1ad3      	subs	r3, r2, r3
 80084fe:	80fb      	strh	r3, [r7, #6]
      break;
 8008500:	e006      	b.n	8008510 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 8008502:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8008506:	b29b      	uxth	r3, r3
 8008508:	88fa      	ldrh	r2, [r7, #6]
 800850a:	1ad3      	subs	r3, r2, r3
 800850c:	80fb      	strh	r3, [r7, #6]
      break;      
 800850e:	bf00      	nop
  }
  return dy;
 8008510:	88fb      	ldrh	r3, [r7, #6]
}
 8008512:	4618      	mov	r0, r3
 8008514:	3708      	adds	r7, #8
 8008516:	46bd      	mov	sp, r7
 8008518:	bc90      	pop	{r4, r7}
 800851a:	4770      	bx	lr

0800851c <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 800851c:	b490      	push	{r4, r7}
 800851e:	b082      	sub	sp, #8
 8008520:	af00      	add	r7, sp, #0
 8008522:	4604      	mov	r4, r0
 8008524:	4608      	mov	r0, r1
 8008526:	4611      	mov	r1, r2
 8008528:	461a      	mov	r2, r3
 800852a:	4623      	mov	r3, r4
 800852c:	80fb      	strh	r3, [r7, #6]
 800852e:	4603      	mov	r3, r0
 8008530:	717b      	strb	r3, [r7, #5]
 8008532:	460b      	mov	r3, r1
 8008534:	713b      	strb	r3, [r7, #4]
 8008536:	4613      	mov	r3, r2
 8008538:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 800853a:	78fb      	ldrb	r3, [r7, #3]
 800853c:	2b02      	cmp	r3, #2
 800853e:	d014      	beq.n	800856a <u8g2_add_vector_x+0x4e>
 8008540:	2b02      	cmp	r3, #2
 8008542:	dc19      	bgt.n	8008578 <u8g2_add_vector_x+0x5c>
 8008544:	2b00      	cmp	r3, #0
 8008546:	d002      	beq.n	800854e <u8g2_add_vector_x+0x32>
 8008548:	2b01      	cmp	r3, #1
 800854a:	d007      	beq.n	800855c <u8g2_add_vector_x+0x40>
 800854c:	e014      	b.n	8008578 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 800854e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8008552:	b29a      	uxth	r2, r3
 8008554:	88fb      	ldrh	r3, [r7, #6]
 8008556:	4413      	add	r3, r2
 8008558:	80fb      	strh	r3, [r7, #6]
      break;
 800855a:	e014      	b.n	8008586 <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 800855c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8008560:	b29b      	uxth	r3, r3
 8008562:	88fa      	ldrh	r2, [r7, #6]
 8008564:	1ad3      	subs	r3, r2, r3
 8008566:	80fb      	strh	r3, [r7, #6]
      break;
 8008568:	e00d      	b.n	8008586 <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 800856a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800856e:	b29b      	uxth	r3, r3
 8008570:	88fa      	ldrh	r2, [r7, #6]
 8008572:	1ad3      	subs	r3, r2, r3
 8008574:	80fb      	strh	r3, [r7, #6]
      break;
 8008576:	e006      	b.n	8008586 <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 8008578:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800857c:	b29a      	uxth	r2, r3
 800857e:	88fb      	ldrh	r3, [r7, #6]
 8008580:	4413      	add	r3, r2
 8008582:	80fb      	strh	r3, [r7, #6]
      break;      
 8008584:	bf00      	nop
  }
  return dx;
 8008586:	88fb      	ldrh	r3, [r7, #6]
}
 8008588:	4618      	mov	r0, r3
 800858a:	3708      	adds	r7, #8
 800858c:	46bd      	mov	sp, r7
 800858e:	bc90      	pop	{r4, r7}
 8008590:	4770      	bx	lr

08008592 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8008592:	b580      	push	{r7, lr}
 8008594:	b088      	sub	sp, #32
 8008596:	af02      	add	r7, sp, #8
 8008598:	6078      	str	r0, [r7, #4]
 800859a:	460b      	mov	r3, r1
 800859c:	70fb      	strb	r3, [r7, #3]
 800859e:	4613      	mov	r3, r2
 80085a0:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	3360      	adds	r3, #96	; 0x60
 80085a6:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 80085a8:	78fb      	ldrb	r3, [r7, #3]
 80085aa:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80085b2:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80085ba:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80085c2:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 80085c4:	7bfa      	ldrb	r2, [r7, #15]
 80085c6:	7d7b      	ldrb	r3, [r7, #21]
 80085c8:	1ad3      	subs	r3, r2, r3
 80085ca:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 80085cc:	7bfb      	ldrb	r3, [r7, #15]
 80085ce:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 80085d0:	7dfa      	ldrb	r2, [r7, #23]
 80085d2:	7bfb      	ldrb	r3, [r7, #15]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d201      	bcs.n	80085dc <u8g2_font_decode_len+0x4a>
      current = cnt;
 80085d8:	7dfb      	ldrb	r3, [r7, #23]
 80085da:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	889b      	ldrh	r3, [r3, #4]
 80085e0:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	88db      	ldrh	r3, [r3, #6]
 80085e6:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80085e8:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80085ec:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	7c1b      	ldrb	r3, [r3, #16]
 80085f4:	89b8      	ldrh	r0, [r7, #12]
 80085f6:	f7ff ff91 	bl	800851c <u8g2_add_vector_x>
 80085fa:	4603      	mov	r3, r0
 80085fc:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80085fe:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8008602:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	7c1b      	ldrb	r3, [r3, #16]
 800860a:	8978      	ldrh	r0, [r7, #10]
 800860c:	f7ff ff4b 	bl	80084a6 <u8g2_add_vector_y>
 8008610:	4603      	mov	r3, r0
 8008612:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8008614:	78bb      	ldrb	r3, [r7, #2]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d010      	beq.n	800863c <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	7b9a      	ldrb	r2, [r3, #14]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8008624:	7dbb      	ldrb	r3, [r7, #22]
 8008626:	b298      	uxth	r0, r3
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	7c1b      	ldrb	r3, [r3, #16]
 800862c:	897a      	ldrh	r2, [r7, #10]
 800862e:	89b9      	ldrh	r1, [r7, #12]
 8008630:	9300      	str	r3, [sp, #0]
 8008632:	4603      	mov	r3, r0
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 fcb2 	bl	8008f9e <u8g2_DrawHVLine>
 800863a:	e013      	b.n	8008664 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	7b5b      	ldrb	r3, [r3, #13]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d10f      	bne.n	8008664 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	7bda      	ldrb	r2, [r3, #15]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 800864e:	7dbb      	ldrb	r3, [r7, #22]
 8008650:	b298      	uxth	r0, r3
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	7c1b      	ldrb	r3, [r3, #16]
 8008656:	897a      	ldrh	r2, [r7, #10]
 8008658:	89b9      	ldrh	r1, [r7, #12]
 800865a:	9300      	str	r3, [sp, #0]
 800865c:	4603      	mov	r3, r0
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 fc9d 	bl	8008f9e <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8008664:	7dfa      	ldrb	r2, [r7, #23]
 8008666:	7bfb      	ldrb	r3, [r7, #15]
 8008668:	429a      	cmp	r2, r3
 800866a:	d309      	bcc.n	8008680 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 800866c:	7dfa      	ldrb	r2, [r7, #23]
 800866e:	7bfb      	ldrb	r3, [r7, #15]
 8008670:	1ad3      	subs	r3, r2, r3
 8008672:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8008674:	2300      	movs	r3, #0
 8008676:	757b      	strb	r3, [r7, #21]
    ly++;
 8008678:	7d3b      	ldrb	r3, [r7, #20]
 800867a:	3301      	adds	r3, #1
 800867c:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 800867e:	e79d      	b.n	80085bc <u8g2_font_decode_len+0x2a>
      break;
 8008680:	bf00      	nop
  }
  lx += cnt;
 8008682:	7d7a      	ldrb	r2, [r7, #21]
 8008684:	7dfb      	ldrb	r3, [r7, #23]
 8008686:	4413      	add	r3, r2
 8008688:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 800868a:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 8008692:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	725a      	strb	r2, [r3, #9]
}
 800869a:	bf00      	nop
 800869c:	3718      	adds	r7, #24
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b084      	sub	sp, #16
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
 80086aa:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	3360      	adds	r3, #96	; 0x60
 80086b0:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	683a      	ldr	r2, [r7, #0]
 80086b6:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2200      	movs	r2, #0
 80086bc:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80086c4:	4619      	mov	r1, r3
 80086c6:	68f8      	ldr	r0, [r7, #12]
 80086c8:	f7ff fe7f 	bl	80083ca <u8g2_font_decode_get_unsigned_bits>
 80086cc:	4603      	mov	r3, r0
 80086ce:	b25a      	sxtb	r2, r3
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80086da:	4619      	mov	r1, r3
 80086dc:	68f8      	ldr	r0, [r7, #12]
 80086de:	f7ff fe74 	bl	80083ca <u8g2_font_decode_get_unsigned_bits>
 80086e2:	4603      	mov	r3, r0
 80086e4:	b25a      	sxtb	r2, r3
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	7b9b      	ldrb	r3, [r3, #14]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	bf0c      	ite	eq
 80086fc:	2301      	moveq	r3, #1
 80086fe:	2300      	movne	r3, #0
 8008700:	b2db      	uxtb	r3, r3
 8008702:	461a      	mov	r2, r3
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	73da      	strb	r2, [r3, #15]
}
 8008708:	bf00      	nop
 800870a:	3710      	adds	r7, #16
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b08a      	sub	sp, #40	; 0x28
 8008714:	af02      	add	r7, sp, #8
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	3360      	adds	r3, #96	; 0x60
 800871e:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8008720:	6839      	ldr	r1, [r7, #0]
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f7ff ffbd 	bl	80086a2 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800872e:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8008736:	4619      	mov	r1, r3
 8008738:	6978      	ldr	r0, [r7, #20]
 800873a:	f7ff fe91 	bl	8008460 <u8g2_font_decode_get_signed_bits>
 800873e:	4603      	mov	r3, r0
 8008740:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8008748:	4619      	mov	r1, r3
 800874a:	6978      	ldr	r0, [r7, #20]
 800874c:	f7ff fe88 	bl	8008460 <u8g2_font_decode_get_signed_bits>
 8008750:	4603      	mov	r3, r0
 8008752:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800875a:	4619      	mov	r1, r3
 800875c:	6978      	ldr	r0, [r7, #20]
 800875e:	f7ff fe7f 	bl	8008460 <u8g2_font_decode_get_signed_bits>
 8008762:	4603      	mov	r3, r0
 8008764:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800876c:	2b00      	cmp	r3, #0
 800876e:	f340 80d7 	ble.w	8008920 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	8898      	ldrh	r0, [r3, #4]
 8008776:	7cfa      	ldrb	r2, [r7, #19]
 8008778:	7c7b      	ldrb	r3, [r7, #17]
 800877a:	4413      	add	r3, r2
 800877c:	b2db      	uxtb	r3, r3
 800877e:	425b      	negs	r3, r3
 8008780:	b2db      	uxtb	r3, r3
 8008782:	b25a      	sxtb	r2, r3
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	7c1b      	ldrb	r3, [r3, #16]
 8008788:	f997 1012 	ldrsb.w	r1, [r7, #18]
 800878c:	f7ff fec6 	bl	800851c <u8g2_add_vector_x>
 8008790:	4603      	mov	r3, r0
 8008792:	461a      	mov	r2, r3
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	88d8      	ldrh	r0, [r3, #6]
 800879c:	7cfa      	ldrb	r2, [r7, #19]
 800879e:	7c7b      	ldrb	r3, [r7, #17]
 80087a0:	4413      	add	r3, r2
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	425b      	negs	r3, r3
 80087a6:	b2db      	uxtb	r3, r3
 80087a8:	b25a      	sxtb	r2, r3
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	7c1b      	ldrb	r3, [r3, #16]
 80087ae:	f997 1012 	ldrsb.w	r1, [r7, #18]
 80087b2:	f7ff fe78 	bl	80084a6 <u8g2_add_vector_y>
 80087b6:	4603      	mov	r3, r0
 80087b8:	461a      	mov	r2, r3
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	889b      	ldrh	r3, [r3, #4]
 80087c2:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	88db      	ldrh	r3, [r3, #6]
 80087c8:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 80087ca:	8bfb      	ldrh	r3, [r7, #30]
 80087cc:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 80087ce:	8b7b      	ldrh	r3, [r7, #26]
 80087d0:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	7c1b      	ldrb	r3, [r3, #16]
 80087d6:	2b03      	cmp	r3, #3
 80087d8:	d85a      	bhi.n	8008890 <u8g2_font_decode_glyph+0x180>
 80087da:	a201      	add	r2, pc, #4	; (adr r2, 80087e0 <u8g2_font_decode_glyph+0xd0>)
 80087dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e0:	080087f1 	.word	0x080087f1
 80087e4:	0800880d 	.word	0x0800880d
 80087e8:	08008835 	.word	0x08008835
 80087ec:	08008869 	.word	0x08008869
      {
	case 0:
	    x1 += decode->glyph_width;
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80087f6:	b29a      	uxth	r2, r3
 80087f8:	8bbb      	ldrh	r3, [r7, #28]
 80087fa:	4413      	add	r3, r2
 80087fc:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 80087fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008802:	b29a      	uxth	r2, r3
 8008804:	8b3b      	ldrh	r3, [r7, #24]
 8008806:	4413      	add	r3, r2
 8008808:	833b      	strh	r3, [r7, #24]
	    break;
 800880a:	e041      	b.n	8008890 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 800880c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008810:	b29b      	uxth	r3, r3
 8008812:	8bfa      	ldrh	r2, [r7, #30]
 8008814:	1ad3      	subs	r3, r2, r3
 8008816:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8008818:	8bfb      	ldrh	r3, [r7, #30]
 800881a:	3301      	adds	r3, #1
 800881c:	83fb      	strh	r3, [r7, #30]
	    x1++;
 800881e:	8bbb      	ldrh	r3, [r7, #28]
 8008820:	3301      	adds	r3, #1
 8008822:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800882a:	b29a      	uxth	r2, r3
 800882c:	8b3b      	ldrh	r3, [r7, #24]
 800882e:	4413      	add	r3, r2
 8008830:	833b      	strh	r3, [r7, #24]
	    break;
 8008832:	e02d      	b.n	8008890 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800883a:	b29b      	uxth	r3, r3
 800883c:	8bfa      	ldrh	r2, [r7, #30]
 800883e:	1ad3      	subs	r3, r2, r3
 8008840:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8008842:	8bfb      	ldrh	r3, [r7, #30]
 8008844:	3301      	adds	r3, #1
 8008846:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8008848:	8bbb      	ldrh	r3, [r7, #28]
 800884a:	3301      	adds	r3, #1
 800884c:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 800884e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008852:	b29b      	uxth	r3, r3
 8008854:	8b7a      	ldrh	r2, [r7, #26]
 8008856:	1ad3      	subs	r3, r2, r3
 8008858:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800885a:	8b7b      	ldrh	r3, [r7, #26]
 800885c:	3301      	adds	r3, #1
 800885e:	837b      	strh	r3, [r7, #26]
	    y1++;
 8008860:	8b3b      	ldrh	r3, [r7, #24]
 8008862:	3301      	adds	r3, #1
 8008864:	833b      	strh	r3, [r7, #24]
	    break;	  
 8008866:	e013      	b.n	8008890 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 8008868:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800886c:	b29a      	uxth	r2, r3
 800886e:	8bbb      	ldrh	r3, [r7, #28]
 8008870:	4413      	add	r3, r2
 8008872:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800887a:	b29b      	uxth	r3, r3
 800887c:	8b7a      	ldrh	r2, [r7, #26]
 800887e:	1ad3      	subs	r3, r2, r3
 8008880:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8008882:	8b7b      	ldrh	r3, [r7, #26]
 8008884:	3301      	adds	r3, #1
 8008886:	837b      	strh	r3, [r7, #26]
	    y1++;
 8008888:	8b3b      	ldrh	r3, [r7, #24]
 800888a:	3301      	adds	r3, #1
 800888c:	833b      	strh	r3, [r7, #24]
	    break;	  
 800888e:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8008890:	8bb8      	ldrh	r0, [r7, #28]
 8008892:	8b7a      	ldrh	r2, [r7, #26]
 8008894:	8bf9      	ldrh	r1, [r7, #30]
 8008896:	8b3b      	ldrh	r3, [r7, #24]
 8008898:	9300      	str	r3, [sp, #0]
 800889a:	4603      	mov	r3, r0
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 fcb8 	bl	8009212 <u8g2_IsIntersection>
 80088a2:	4603      	mov	r3, r0
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d102      	bne.n	80088ae <u8g2_font_decode_glyph+0x19e>
	return d;
 80088a8:	f997 3010 	ldrsb.w	r3, [r7, #16]
 80088ac:	e03a      	b.n	8008924 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	2200      	movs	r2, #0
 80088b2:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	2200      	movs	r2, #0
 80088b8:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80088c0:	4619      	mov	r1, r3
 80088c2:	6978      	ldr	r0, [r7, #20]
 80088c4:	f7ff fd81 	bl	80083ca <u8g2_font_decode_get_unsigned_bits>
 80088c8:	4603      	mov	r3, r0
 80088ca:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80088d2:	4619      	mov	r1, r3
 80088d4:	6978      	ldr	r0, [r7, #20]
 80088d6:	f7ff fd78 	bl	80083ca <u8g2_font_decode_get_unsigned_bits>
 80088da:	4603      	mov	r3, r0
 80088dc:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 80088de:	7bfb      	ldrb	r3, [r7, #15]
 80088e0:	2200      	movs	r2, #0
 80088e2:	4619      	mov	r1, r3
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f7ff fe54 	bl	8008592 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 80088ea:	7bbb      	ldrb	r3, [r7, #14]
 80088ec:	2201      	movs	r2, #1
 80088ee:	4619      	mov	r1, r3
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f7ff fe4e 	bl	8008592 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 80088f6:	2101      	movs	r1, #1
 80088f8:	6978      	ldr	r0, [r7, #20]
 80088fa:	f7ff fd66 	bl	80083ca <u8g2_font_decode_get_unsigned_bits>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d1ec      	bne.n	80088de <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800890a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800890e:	429a      	cmp	r2, r3
 8008910:	dd00      	ble.n	8008914 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8008912:	e7d2      	b.n	80088ba <u8g2_font_decode_glyph+0x1aa>
	break;
 8008914:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	7b9a      	ldrb	r2, [r3, #14]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d;
 8008920:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8008924:	4618      	mov	r0, r3
 8008926:	3720      	adds	r7, #32
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b086      	sub	sp, #24
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	460b      	mov	r3, r1
 8008936:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800893c:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	3317      	adds	r3, #23
 8008942:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8008944:	887b      	ldrh	r3, [r7, #2]
 8008946:	2bff      	cmp	r3, #255	; 0xff
 8008948:	d82a      	bhi.n	80089a0 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 800894a:	887b      	ldrh	r3, [r7, #2]
 800894c:	2b60      	cmp	r3, #96	; 0x60
 800894e:	d907      	bls.n	8008960 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8008956:	461a      	mov	r2, r3
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	4413      	add	r3, r2
 800895c:	617b      	str	r3, [r7, #20]
 800895e:	e009      	b.n	8008974 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8008960:	887b      	ldrh	r3, [r7, #2]
 8008962:	2b40      	cmp	r3, #64	; 0x40
 8008964:	d906      	bls.n	8008974 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800896c:	461a      	mov	r2, r3
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	4413      	add	r3, r2
 8008972:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	3301      	adds	r3, #1
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d04e      	beq.n	8008a1c <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	781b      	ldrb	r3, [r3, #0]
 8008982:	b29b      	uxth	r3, r3
 8008984:	887a      	ldrh	r2, [r7, #2]
 8008986:	429a      	cmp	r2, r3
 8008988:	d102      	bne.n	8008990 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	3302      	adds	r3, #2
 800898e:	e049      	b.n	8008a24 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	3301      	adds	r3, #1
 8008994:	781b      	ldrb	r3, [r3, #0]
 8008996:	461a      	mov	r2, r3
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	4413      	add	r3, r2
 800899c:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800899e:	e7e9      	b.n	8008974 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 80089a6:	461a      	mov	r2, r3
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	4413      	add	r3, r2
 80089ac:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 80089b2:	2100      	movs	r1, #0
 80089b4:	6938      	ldr	r0, [r7, #16]
 80089b6:	f7ff fc3f 	bl	8008238 <u8g2_font_get_word>
 80089ba:	4603      	mov	r3, r0
 80089bc:	461a      	mov	r2, r3
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	4413      	add	r3, r2
 80089c2:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80089c4:	2102      	movs	r1, #2
 80089c6:	6938      	ldr	r0, [r7, #16]
 80089c8:	f7ff fc36 	bl	8008238 <u8g2_font_get_word>
 80089cc:	4603      	mov	r3, r0
 80089ce:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	3304      	adds	r3, #4
 80089d4:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 80089d6:	89fa      	ldrh	r2, [r7, #14]
 80089d8:	887b      	ldrh	r3, [r7, #2]
 80089da:	429a      	cmp	r2, r3
 80089dc:	d3e9      	bcc.n	80089b2 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 80089e4:	89fb      	ldrh	r3, [r7, #14]
 80089e6:	021b      	lsls	r3, r3, #8
 80089e8:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	3301      	adds	r3, #1
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	b29a      	uxth	r2, r3
 80089f2:	89fb      	ldrh	r3, [r7, #14]
 80089f4:	4313      	orrs	r3, r2
 80089f6:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 80089f8:	89fb      	ldrh	r3, [r7, #14]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d010      	beq.n	8008a20 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 80089fe:	89fa      	ldrh	r2, [r7, #14]
 8008a00:	887b      	ldrh	r3, [r7, #2]
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d102      	bne.n	8008a0c <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	3303      	adds	r3, #3
 8008a0a:	e00b      	b.n	8008a24 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	3302      	adds	r3, #2
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	461a      	mov	r2, r3
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	4413      	add	r3, r2
 8008a18:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8008a1a:	e7e0      	b.n	80089de <u8g2_font_get_glyph_data+0xb2>
	break;
 8008a1c:	bf00      	nop
 8008a1e:	e000      	b.n	8008a22 <u8g2_font_get_glyph_data+0xf6>
	break;
 8008a20:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8008a22:	2300      	movs	r3, #0
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3718      	adds	r7, #24
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b086      	sub	sp, #24
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	60f8      	str	r0, [r7, #12]
 8008a34:	4608      	mov	r0, r1
 8008a36:	4611      	mov	r1, r2
 8008a38:	461a      	mov	r2, r3
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	817b      	strh	r3, [r7, #10]
 8008a3e:	460b      	mov	r3, r1
 8008a40:	813b      	strh	r3, [r7, #8]
 8008a42:	4613      	mov	r3, r2
 8008a44:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 8008a46:	2300      	movs	r3, #0
 8008a48:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	897a      	ldrh	r2, [r7, #10]
 8008a4e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	893a      	ldrh	r2, [r7, #8]
 8008a56:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8008a5a:	88fb      	ldrh	r3, [r7, #6]
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	68f8      	ldr	r0, [r7, #12]
 8008a60:	f7ff ff64 	bl	800892c <u8g2_font_get_glyph_data>
 8008a64:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d005      	beq.n	8008a78 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8008a6c:	6939      	ldr	r1, [r7, #16]
 8008a6e:	68f8      	ldr	r0, [r7, #12]
 8008a70:	f7ff fe4e 	bl	8008710 <u8g2_font_decode_glyph>
 8008a74:	4603      	mov	r3, r0
 8008a76:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8008a78:	8afb      	ldrh	r3, [r7, #22]
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3718      	adds	r7, #24
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <u8g2_GetGlyphWidth>:
  return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b084      	sub	sp, #16
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	807b      	strh	r3, [r7, #2]
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, requested_encoding);
 8008a8e:	887b      	ldrh	r3, [r7, #2]
 8008a90:	4619      	mov	r1, r3
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f7ff ff4a 	bl	800892c <u8g2_font_get_glyph_data>
 8008a98:	60f8      	str	r0, [r7, #12]
  if ( glyph_data == NULL )
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d101      	bne.n	8008aa4 <u8g2_GetGlyphWidth+0x22>
    return 0; 
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	e027      	b.n	8008af4 <u8g2_GetGlyphWidth+0x72>
  
  u8g2_font_setup_decode(u8g2, glyph_data);
 8008aa4:	68f9      	ldr	r1, [r7, #12]
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f7ff fdfb 	bl	80086a2 <u8g2_font_setup_decode>
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8008ab8:	4619      	mov	r1, r3
 8008aba:	4610      	mov	r0, r2
 8008abc:	f7ff fcd0 	bl	8008460 <u8g2_font_decode_get_signed_bits>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	4610      	mov	r0, r2
 8008ada:	f7ff fcc1 	bl	8008460 <u8g2_font_decode_get_signed_bits>
  
  /* glyph width is here: u8g2->font_decode.glyph_width */

  return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008aea:	4619      	mov	r1, r3
 8008aec:	4610      	mov	r0, r2
 8008aee:	f7ff fcb7 	bl	8008460 <u8g2_font_decode_get_signed_bits>
 8008af2:	4603      	mov	r3, r0
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3710      	adds	r7, #16
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	60f8      	str	r0, [r7, #12]
 8008b04:	4608      	mov	r0, r1
 8008b06:	4611      	mov	r1, r2
 8008b08:	461a      	mov	r2, r3
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	817b      	strh	r3, [r7, #10]
 8008b0e:	460b      	mov	r3, r1
 8008b10:	813b      	strh	r3, [r7, #8]
 8008b12:	4613      	mov	r3, r2
 8008b14:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008b1c:	2b03      	cmp	r3, #3
 8008b1e:	d833      	bhi.n	8008b88 <u8g2_DrawGlyph+0x8c>
 8008b20:	a201      	add	r2, pc, #4	; (adr r2, 8008b28 <u8g2_DrawGlyph+0x2c>)
 8008b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b26:	bf00      	nop
 8008b28:	08008b39 	.word	0x08008b39
 8008b2c:	08008b4d 	.word	0x08008b4d
 8008b30:	08008b61 	.word	0x08008b61
 8008b34:	08008b75 	.word	0x08008b75
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b3c:	68f8      	ldr	r0, [r7, #12]
 8008b3e:	4798      	blx	r3
 8008b40:	4603      	mov	r3, r0
 8008b42:	461a      	mov	r2, r3
 8008b44:	893b      	ldrh	r3, [r7, #8]
 8008b46:	4413      	add	r3, r2
 8008b48:	813b      	strh	r3, [r7, #8]
      break;
 8008b4a:	e01d      	b.n	8008b88 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b50:	68f8      	ldr	r0, [r7, #12]
 8008b52:	4798      	blx	r3
 8008b54:	4603      	mov	r3, r0
 8008b56:	461a      	mov	r2, r3
 8008b58:	897b      	ldrh	r3, [r7, #10]
 8008b5a:	1a9b      	subs	r3, r3, r2
 8008b5c:	817b      	strh	r3, [r7, #10]
      break;
 8008b5e:	e013      	b.n	8008b88 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b64:	68f8      	ldr	r0, [r7, #12]
 8008b66:	4798      	blx	r3
 8008b68:	4603      	mov	r3, r0
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	893b      	ldrh	r3, [r7, #8]
 8008b6e:	1a9b      	subs	r3, r3, r2
 8008b70:	813b      	strh	r3, [r7, #8]
      break;
 8008b72:	e009      	b.n	8008b88 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b78:	68f8      	ldr	r0, [r7, #12]
 8008b7a:	4798      	blx	r3
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	461a      	mov	r2, r3
 8008b80:	897b      	ldrh	r3, [r7, #10]
 8008b82:	4413      	add	r3, r2
 8008b84:	817b      	strh	r3, [r7, #10]
      break;
 8008b86:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8008b88:	88fb      	ldrh	r3, [r7, #6]
 8008b8a:	893a      	ldrh	r2, [r7, #8]
 8008b8c:	8979      	ldrh	r1, [r7, #10]
 8008b8e:	68f8      	ldr	r0, [r7, #12]
 8008b90:	f7ff ff4c 	bl	8008a2c <u8g2_font_draw_glyph>
 8008b94:	4603      	mov	r3, r0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3710      	adds	r7, #16
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop

08008ba0 <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b086      	sub	sp, #24
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	60f8      	str	r0, [r7, #12]
 8008ba8:	607b      	str	r3, [r7, #4]
 8008baa:	460b      	mov	r3, r1
 8008bac:	817b      	strh	r3, [r7, #10]
 8008bae:	4613      	mov	r3, r2
 8008bb0:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8008bb2:	68f8      	ldr	r0, [r7, #12]
 8008bb4:	f001 f95c 	bl	8009e70 <u8x8_utf8_init>
  sum = 0;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	7812      	ldrb	r2, [r2, #0]
 8008bc4:	4611      	mov	r1, r2
 8008bc6:	68f8      	ldr	r0, [r7, #12]
 8008bc8:	4798      	blx	r3
 8008bca:	4603      	mov	r3, r0
 8008bcc:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8008bce:	8abb      	ldrh	r3, [r7, #20]
 8008bd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d038      	beq.n	8008c4a <u8g2_draw_string+0xaa>
      break;
    str++;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	3301      	adds	r3, #1
 8008bdc:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8008bde:	8abb      	ldrh	r3, [r7, #20]
 8008be0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d0e9      	beq.n	8008bbc <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8008be8:	8abb      	ldrh	r3, [r7, #20]
 8008bea:	893a      	ldrh	r2, [r7, #8]
 8008bec:	8979      	ldrh	r1, [r7, #10]
 8008bee:	68f8      	ldr	r0, [r7, #12]
 8008bf0:	f7ff ff84 	bl	8008afc <u8g2_DrawGlyph>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008bfe:	2b03      	cmp	r3, #3
 8008c00:	d81e      	bhi.n	8008c40 <u8g2_draw_string+0xa0>
 8008c02:	a201      	add	r2, pc, #4	; (adr r2, 8008c08 <u8g2_draw_string+0x68>)
 8008c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c08:	08008c19 	.word	0x08008c19
 8008c0c:	08008c23 	.word	0x08008c23
 8008c10:	08008c2d 	.word	0x08008c2d
 8008c14:	08008c37 	.word	0x08008c37
      {
	case 0:
	  x += delta;
 8008c18:	897a      	ldrh	r2, [r7, #10]
 8008c1a:	8a7b      	ldrh	r3, [r7, #18]
 8008c1c:	4413      	add	r3, r2
 8008c1e:	817b      	strh	r3, [r7, #10]
	  break;
 8008c20:	e00e      	b.n	8008c40 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8008c22:	893a      	ldrh	r2, [r7, #8]
 8008c24:	8a7b      	ldrh	r3, [r7, #18]
 8008c26:	4413      	add	r3, r2
 8008c28:	813b      	strh	r3, [r7, #8]
	  break;
 8008c2a:	e009      	b.n	8008c40 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8008c2c:	897a      	ldrh	r2, [r7, #10]
 8008c2e:	8a7b      	ldrh	r3, [r7, #18]
 8008c30:	1ad3      	subs	r3, r2, r3
 8008c32:	817b      	strh	r3, [r7, #10]
	  break;
 8008c34:	e004      	b.n	8008c40 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8008c36:	893a      	ldrh	r2, [r7, #8]
 8008c38:	8a7b      	ldrh	r3, [r7, #18]
 8008c3a:	1ad3      	subs	r3, r2, r3
 8008c3c:	813b      	strh	r3, [r7, #8]
	  break;
 8008c3e:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8008c40:	8afa      	ldrh	r2, [r7, #22]
 8008c42:	8a7b      	ldrh	r3, [r7, #18]
 8008c44:	4413      	add	r3, r2
 8008c46:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8008c48:	e7b8      	b.n	8008bbc <u8g2_draw_string+0x1c>
      break;
 8008c4a:	bf00      	nop
    }
  }
  return sum;
 8008c4c:	8afb      	ldrh	r3, [r7, #22]
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3718      	adds	r7, #24
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop

08008c58 <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	607b      	str	r3, [r7, #4]
 8008c62:	460b      	mov	r3, r1
 8008c64:	817b      	strh	r3, [r7, #10]
 8008c66:	4613      	mov	r3, r2
 8008c68:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	4a06      	ldr	r2, [pc, #24]	; (8008c88 <u8g2_DrawStr+0x30>)
 8008c6e:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8008c70:	893a      	ldrh	r2, [r7, #8]
 8008c72:	8979      	ldrh	r1, [r7, #10]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	68f8      	ldr	r0, [r7, #12]
 8008c78:	f7ff ff92 	bl	8008ba0 <u8g2_draw_string>
 8008c7c:	4603      	mov	r3, r0
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3710      	adds	r7, #16
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	08009e8d 	.word	0x08009e8d

08008c8c <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b083      	sub	sp, #12
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d05d      	beq.n	8008d58 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d04d      	beq.n	8008d5a <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d11c      	bne.n	8008d02 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	da05      	bge.n	8008ce4 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	dd32      	ble.n	8008d5a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8008d00:	e02b      	b.n	8008d5a <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8008d08:	461a      	mov	r2, r3
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8008d10:	4619      	mov	r1, r3
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8008d18:	440b      	add	r3, r1
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	da0d      	bge.n	8008d3a <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8008d24:	b2da      	uxtb	r2, r3
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8008d2c:	b2db      	uxtb	r3, r3
 8008d2e:	4413      	add	r3, r2
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	b25a      	sxtb	r2, r3
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8008d46:	429a      	cmp	r2, r3
 8008d48:	dd07      	ble.n	8008d5a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8008d56:	e000      	b.n	8008d5a <u8g2_UpdateRefHeight+0xce>
    return;
 8008d58:	bf00      	nop
  }  
}
 8008d5a:	370c      	adds	r7, #12
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  return 0;
 8008d6c:	2300      	movs	r3, #0
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	370c      	adds	r7, #12
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr
	...

08008d7c <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	4a04      	ldr	r2, [pc, #16]	; (8008d98 <u8g2_SetFontPosBaseline+0x1c>)
 8008d88:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8008d8a:	bf00      	nop
 8008d8c:	370c      	adds	r7, #12
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr
 8008d96:	bf00      	nop
 8008d98:	08008d65 	.word	0x08008d65

08008d9c <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b082      	sub	sp, #8
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008daa:	683a      	ldr	r2, [r7, #0]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d00b      	beq.n	8008dc8 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	683a      	ldr	r2, [r7, #0]
 8008db4:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	3374      	adds	r3, #116	; 0x74
 8008dba:	6839      	ldr	r1, [r7, #0]
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f7ff fa5b 	bl	8008278 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f7ff ff62 	bl	8008c8c <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8008dc8:	bf00      	nop
 8008dca:	3708      	adds	r7, #8
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <u8g2_string_width>:


/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
  uint16_t e;
  u8g2_uint_t  w, dx;
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
  int8_t initial_x_offset = -64;
 8008dda:	23c0      	movs	r3, #192	; 0xc0
 8008ddc:	72fb      	strb	r3, [r7, #11]
#endif 
  
  u8g2->font_decode.glyph_width = 0;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2200      	movs	r2, #0
 8008de2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f001 f842 	bl	8009e70 <u8x8_utf8_init>
  
  /* reset the total width to zero, this will be expanded during calculation */
  w = 0;
 8008dec:	2300      	movs	r3, #0
 8008dee:	81fb      	strh	r3, [r7, #14]
  dx = 0;
 8008df0:	2300      	movs	r3, #0
 8008df2:	81bb      	strh	r3, [r7, #12]

  // printf("str=<%s>\n", str);
	
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	683a      	ldr	r2, [r7, #0]
 8008dfa:	7812      	ldrb	r2, [r2, #0]
 8008dfc:	4611      	mov	r1, r2
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	4798      	blx	r3
 8008e02:	4603      	mov	r3, r0
 8008e04:	813b      	strh	r3, [r7, #8]
    if ( e == 0x0ffff )
 8008e06:	893b      	ldrh	r3, [r7, #8]
 8008e08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d01c      	beq.n	8008e4a <u8g2_string_width+0x7a>
      break;
    str++;
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	3301      	adds	r3, #1
 8008e14:	603b      	str	r3, [r7, #0]
    if ( e != 0x0fffe )
 8008e16:	893b      	ldrh	r3, [r7, #8]
 8008e18:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d0e9      	beq.n	8008df4 <u8g2_string_width+0x24>
    {
      dx = u8g2_GetGlyphWidth(u8g2, e);		/* delta x value of the glyph */
 8008e20:	893b      	ldrh	r3, [r7, #8]
 8008e22:	4619      	mov	r1, r3
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f7ff fe2c 	bl	8008a82 <u8g2_GetGlyphWidth>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	81bb      	strh	r3, [r7, #12]
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
      if ( initial_x_offset == -64 )
 8008e2e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008e32:	f113 0f40 	cmn.w	r3, #64	; 0x40
 8008e36:	d103      	bne.n	8008e40 <u8g2_string_width+0x70>
        initial_x_offset = u8g2->glyph_x_offset;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8008e3e:	72fb      	strb	r3, [r7, #11]
#endif 
      //printf("'%c' x=%d dx=%d w=%d io=%d ", e, u8g2->glyph_x_offset, dx, u8g2->font_decode.glyph_width, initial_x_offset);
      w += dx;
 8008e40:	89fa      	ldrh	r2, [r7, #14]
 8008e42:	89bb      	ldrh	r3, [r7, #12]
 8008e44:	4413      	add	r3, r2
 8008e46:	81fb      	strh	r3, [r7, #14]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8008e48:	e7d4      	b.n	8008df4 <u8g2_string_width+0x24>
      break;
 8008e4a:	bf00      	nop
    }
  }
  //printf("\n");
  
  /* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
  if ( u8g2->font_decode.glyph_width != 0 )
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d01b      	beq.n	8008e8e <u8g2_string_width+0xbe>
  {
    //printf("string width adjust dx=%d glyph_width=%d x-offset=%d\n", dx, u8g2->font_decode.glyph_width, u8g2->glyph_x_offset);
    w -= dx;
 8008e56:	89fa      	ldrh	r2, [r7, #14]
 8008e58:	89bb      	ldrh	r3, [r7, #12]
 8008e5a:	1ad3      	subs	r3, r2, r3
 8008e5c:	81fb      	strh	r3, [r7, #14]
    w += u8g2->font_decode.glyph_width;  /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 8008e64:	b29a      	uxth	r2, r3
 8008e66:	89fb      	ldrh	r3, [r7, #14]
 8008e68:	4413      	add	r3, r2
 8008e6a:	81fb      	strh	r3, [r7, #14]
    /* issue #46: we have to add the x offset also */
    w += u8g2->glyph_x_offset;	/* this value is set as a side effect of u8g2_GetGlyphWidth() */
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f993 3090 	ldrsb.w	r3, [r3, #144]	; 0x90
 8008e72:	b29a      	uxth	r2, r3
 8008e74:	89fb      	ldrh	r3, [r7, #14]
 8008e76:	4413      	add	r3, r2
 8008e78:	81fb      	strh	r3, [r7, #14]
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
    /* https://github.com/olikraus/u8g2/issues/1561 */
    if ( initial_x_offset > 0 )
 8008e7a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	dd05      	ble.n	8008e8e <u8g2_string_width+0xbe>
      w+=initial_x_offset;
 8008e82:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008e86:	b29a      	uxth	r2, r3
 8008e88:	89fb      	ldrh	r3, [r7, #14]
 8008e8a:	4413      	add	r3, r2
 8008e8c:	81fb      	strh	r3, [r7, #14]
#endif 
  }
  // printf("w=%d \n", w);
  
  return w;  
 8008e8e:	89fb      	ldrh	r3, [r7, #14]
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3710      	adds	r7, #16
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <u8g2_GetStrWidth>:




u8g2_uint_t u8g2_GetStrWidth(u8g2_t *u8g2, const char *s)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	4a05      	ldr	r2, [pc, #20]	; (8008ebc <u8g2_GetStrWidth+0x24>)
 8008ea6:	605a      	str	r2, [r3, #4]
  return u8g2_string_width(u8g2, s);
 8008ea8:	6839      	ldr	r1, [r7, #0]
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f7ff ff90 	bl	8008dd0 <u8g2_string_width>
 8008eb0:	4603      	mov	r3, r0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3708      	adds	r7, #8
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
 8008eba:	bf00      	nop
 8008ebc:	08009e8d 	.word	0x08009e8d

08008ec0 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t* ap, u8g2_uint_t* len, u8g2_uint_t c, u8g2_uint_t d)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b087      	sub	sp, #28
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	60f8      	str	r0, [r7, #12]
 8008ec8:	60b9      	str	r1, [r7, #8]
 8008eca:	4611      	mov	r1, r2
 8008ecc:	461a      	mov	r2, r3
 8008ece:	460b      	mov	r3, r1
 8008ed0:	80fb      	strh	r3, [r7, #6]
 8008ed2:	4613      	mov	r3, r2
 8008ed4:	80bb      	strh	r3, [r7, #4]
    u8g2_uint_t a = *ap;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	881b      	ldrh	r3, [r3, #0]
 8008eda:	82fb      	strh	r3, [r7, #22]
    u8g2_uint_t b;
    b = a;
 8008edc:	8afb      	ldrh	r3, [r7, #22]
 8008ede:	82bb      	strh	r3, [r7, #20]
    b += *len;
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	881a      	ldrh	r2, [r3, #0]
 8008ee4:	8abb      	ldrh	r3, [r7, #20]
 8008ee6:	4413      	add	r3, r2
 8008ee8:	82bb      	strh	r3, [r7, #20]
    /* be removed completly (be aware about memory curruption for wrong */
    /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
    /* arguments) */

    /* removing the following if clause completly may lead to memory corruption of a>b */
    if (a > b) {
 8008eea:	8afa      	ldrh	r2, [r7, #22]
 8008eec:	8abb      	ldrh	r3, [r7, #20]
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d90b      	bls.n	8008f0a <u8g2_clip_intersection2+0x4a>
        /* replacing this if with a simple "return 0;" will not handle the case with negative a */
        if (a < d) {
 8008ef2:	8afa      	ldrh	r2, [r7, #22]
 8008ef4:	88bb      	ldrh	r3, [r7, #4]
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d205      	bcs.n	8008f06 <u8g2_clip_intersection2+0x46>
            b = d;
 8008efa:	88bb      	ldrh	r3, [r7, #4]
 8008efc:	82bb      	strh	r3, [r7, #20]
            b--;
 8008efe:	8abb      	ldrh	r3, [r7, #20]
 8008f00:	3b01      	subs	r3, #1
 8008f02:	82bb      	strh	r3, [r7, #20]
 8008f04:	e001      	b.n	8008f0a <u8g2_clip_intersection2+0x4a>
        } else {
            a = c;
 8008f06:	88fb      	ldrh	r3, [r7, #6]
 8008f08:	82fb      	strh	r3, [r7, #22]
        }
    }

    /* from now on, the asumption a <= b is ok */

    if (a >= d)
 8008f0a:	8afa      	ldrh	r2, [r7, #22]
 8008f0c:	88bb      	ldrh	r3, [r7, #4]
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d301      	bcc.n	8008f16 <u8g2_clip_intersection2+0x56>
        return 0;
 8008f12:	2300      	movs	r3, #0
 8008f14:	e01c      	b.n	8008f50 <u8g2_clip_intersection2+0x90>
    if (b <= c)
 8008f16:	8aba      	ldrh	r2, [r7, #20]
 8008f18:	88fb      	ldrh	r3, [r7, #6]
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d801      	bhi.n	8008f22 <u8g2_clip_intersection2+0x62>
        return 0;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	e016      	b.n	8008f50 <u8g2_clip_intersection2+0x90>
    if (a < c)
 8008f22:	8afa      	ldrh	r2, [r7, #22]
 8008f24:	88fb      	ldrh	r3, [r7, #6]
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d201      	bcs.n	8008f2e <u8g2_clip_intersection2+0x6e>
        a = c;
 8008f2a:	88fb      	ldrh	r3, [r7, #6]
 8008f2c:	82fb      	strh	r3, [r7, #22]
    if (b > d)
 8008f2e:	8aba      	ldrh	r2, [r7, #20]
 8008f30:	88bb      	ldrh	r3, [r7, #4]
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d901      	bls.n	8008f3a <u8g2_clip_intersection2+0x7a>
        b = d;
 8008f36:	88bb      	ldrh	r3, [r7, #4]
 8008f38:	82bb      	strh	r3, [r7, #20]

    *ap = a;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	8afa      	ldrh	r2, [r7, #22]
 8008f3e:	801a      	strh	r2, [r3, #0]
    b -= a;
 8008f40:	8aba      	ldrh	r2, [r7, #20]
 8008f42:	8afb      	ldrh	r3, [r7, #22]
 8008f44:	1ad3      	subs	r3, r2, r3
 8008f46:	82bb      	strh	r3, [r7, #20]
    *len = b;
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	8aba      	ldrh	r2, [r7, #20]
 8008f4c:	801a      	strh	r2, [r3, #0]
    return 1;
 8008f4e:	2301      	movs	r3, #1
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	371c      	adds	r7, #28
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr

08008f5c <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t* u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8008f5c:	b590      	push	{r4, r7, lr}
 8008f5e:	b087      	sub	sp, #28
 8008f60:	af02      	add	r7, sp, #8
 8008f62:	60f8      	str	r0, [r7, #12]
 8008f64:	4608      	mov	r0, r1
 8008f66:	4611      	mov	r1, r2
 8008f68:	461a      	mov	r2, r3
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	817b      	strh	r3, [r7, #10]
 8008f6e:	460b      	mov	r3, r1
 8008f70:	813b      	strh	r3, [r7, #8]
 8008f72:	4613      	mov	r3, r2
 8008f74:	80fb      	strh	r3, [r7, #6]
    /* clipping happens before the display rotation */

    /* transform to pixel buffer coordinates */
    y -= u8g2->pixel_curr_row;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f7a:	893a      	ldrh	r2, [r7, #8]
 8008f7c:	1ad3      	subs	r3, r2, r3
 8008f7e:	813b      	strh	r3, [r7, #8]

    u8g2->ll_hvline(u8g2, x, y, len, dir);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8008f84:	88f8      	ldrh	r0, [r7, #6]
 8008f86:	893a      	ldrh	r2, [r7, #8]
 8008f88:	8979      	ldrh	r1, [r7, #10]
 8008f8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008f8e:	9300      	str	r3, [sp, #0]
 8008f90:	4603      	mov	r3, r0
 8008f92:	68f8      	ldr	r0, [r7, #12]
 8008f94:	47a0      	blx	r4
}
 8008f96:	bf00      	nop
 8008f98:	3714      	adds	r7, #20
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd90      	pop	{r4, r7, pc}

08008f9e <u8g2_DrawHVLine>:
  This function should be called by the user.

  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t* u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8008f9e:	b590      	push	{r4, r7, lr}
 8008fa0:	b087      	sub	sp, #28
 8008fa2:	af02      	add	r7, sp, #8
 8008fa4:	60f8      	str	r0, [r7, #12]
 8008fa6:	4608      	mov	r0, r1
 8008fa8:	4611      	mov	r1, r2
 8008faa:	461a      	mov	r2, r3
 8008fac:	4603      	mov	r3, r0
 8008fae:	817b      	strh	r3, [r7, #10]
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	813b      	strh	r3, [r7, #8]
 8008fb4:	4613      	mov	r3, r2
 8008fb6:	80fb      	strh	r3, [r7, #6]
    /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
    /* The callback may rotate the hv line */
    /* after rotation this will call u8g2_draw_hv_line_4dir() */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
    if (u8g2->is_page_clip_window_intersection != 0)
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d075      	beq.n	80090ae <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
        if (len != 0) {
 8008fc2:	88fb      	ldrh	r3, [r7, #6]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d072      	beq.n	80090ae <u8g2_DrawHVLine+0x110>
            /* convert to two directions */
            if (len > 1) {
 8008fc8:	88fb      	ldrh	r3, [r7, #6]
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d91a      	bls.n	8009004 <u8g2_DrawHVLine+0x66>
                if (dir == 2) {
 8008fce:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	d109      	bne.n	8008fea <u8g2_DrawHVLine+0x4c>
                    x -= len;
 8008fd6:	897a      	ldrh	r2, [r7, #10]
 8008fd8:	88fb      	ldrh	r3, [r7, #6]
 8008fda:	1ad3      	subs	r3, r2, r3
 8008fdc:	b29b      	uxth	r3, r3
 8008fde:	817b      	strh	r3, [r7, #10]
                    x++;
 8008fe0:	897b      	ldrh	r3, [r7, #10]
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	817b      	strh	r3, [r7, #10]
 8008fe8:	e00c      	b.n	8009004 <u8g2_DrawHVLine+0x66>
                } else if (dir == 3) {
 8008fea:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008fee:	2b03      	cmp	r3, #3
 8008ff0:	d108      	bne.n	8009004 <u8g2_DrawHVLine+0x66>
                    y -= len;
 8008ff2:	893a      	ldrh	r2, [r7, #8]
 8008ff4:	88fb      	ldrh	r3, [r7, #6]
 8008ff6:	1ad3      	subs	r3, r2, r3
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	813b      	strh	r3, [r7, #8]
                    y++;
 8008ffc:	893b      	ldrh	r3, [r7, #8]
 8008ffe:	3301      	adds	r3, #1
 8009000:	b29b      	uxth	r3, r3
 8009002:	813b      	strh	r3, [r7, #8]
                }
            }
            dir &= 1;
 8009004:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009008:	f003 0301 	and.w	r3, r3, #1
 800900c:	f887 3020 	strb.w	r3, [r7, #32]

            /* clip against the user window */
            if (dir == 0) {
 8009010:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d11a      	bne.n	800904e <u8g2_DrawHVLine+0xb0>
                if (y < u8g2->user_y0)
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 800901e:	893b      	ldrh	r3, [r7, #8]
 8009020:	429a      	cmp	r2, r3
 8009022:	d83b      	bhi.n	800909c <u8g2_DrawHVLine+0xfe>
                    return;
                if (y >= u8g2->user_y1)
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 800902a:	893b      	ldrh	r3, [r7, #8]
 800902c:	429a      	cmp	r2, r3
 800902e:	d937      	bls.n	80090a0 <u8g2_DrawHVLine+0x102>
                    return;
                if (u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0)
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800903c:	1db9      	adds	r1, r7, #6
 800903e:	f107 000a 	add.w	r0, r7, #10
 8009042:	f7ff ff3d 	bl	8008ec0 <u8g2_clip_intersection2>
 8009046:	4603      	mov	r3, r0
 8009048:	2b00      	cmp	r3, #0
 800904a:	d11a      	bne.n	8009082 <u8g2_DrawHVLine+0xe4>
                    return;
 800904c:	e02f      	b.n	80090ae <u8g2_DrawHVLine+0x110>
            } else {
                if (x < u8g2->user_x0)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009054:	897b      	ldrh	r3, [r7, #10]
 8009056:	429a      	cmp	r2, r3
 8009058:	d824      	bhi.n	80090a4 <u8g2_DrawHVLine+0x106>
                    return;
                if (x >= u8g2->user_x1)
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009060:	897b      	ldrh	r3, [r7, #10]
 8009062:	429a      	cmp	r2, r3
 8009064:	d920      	bls.n	80090a8 <u8g2_DrawHVLine+0x10a>
                    return;
                if (u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0)
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8009072:	1db9      	adds	r1, r7, #6
 8009074:	f107 0008 	add.w	r0, r7, #8
 8009078:	f7ff ff22 	bl	8008ec0 <u8g2_clip_intersection2>
 800907c:	4603      	mov	r3, r0
 800907e:	2b00      	cmp	r3, #0
 8009080:	d014      	beq.n	80090ac <u8g2_DrawHVLine+0x10e>
                    return;
            }

            u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009086:	689c      	ldr	r4, [r3, #8]
 8009088:	8979      	ldrh	r1, [r7, #10]
 800908a:	893a      	ldrh	r2, [r7, #8]
 800908c:	88f8      	ldrh	r0, [r7, #6]
 800908e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009092:	9300      	str	r3, [sp, #0]
 8009094:	4603      	mov	r3, r0
 8009096:	68f8      	ldr	r0, [r7, #12]
 8009098:	47a0      	blx	r4
 800909a:	e008      	b.n	80090ae <u8g2_DrawHVLine+0x110>
                    return;
 800909c:	bf00      	nop
 800909e:	e006      	b.n	80090ae <u8g2_DrawHVLine+0x110>
                    return;
 80090a0:	bf00      	nop
 80090a2:	e004      	b.n	80090ae <u8g2_DrawHVLine+0x110>
                    return;
 80090a4:	bf00      	nop
 80090a6:	e002      	b.n	80090ae <u8g2_DrawHVLine+0x110>
                    return;
 80090a8:	bf00      	nop
 80090aa:	e000      	b.n	80090ae <u8g2_DrawHVLine+0x110>
                    return;
 80090ac:	bf00      	nop
        }
}
 80090ae:	3714      	adds	r7, #20
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd90      	pop	{r4, r7, pc}

080090b4 <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t* u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b086      	sub	sp, #24
 80090b8:	af02      	add	r7, sp, #8
 80090ba:	60f8      	str	r0, [r7, #12]
 80090bc:	4608      	mov	r0, r1
 80090be:	4611      	mov	r1, r2
 80090c0:	461a      	mov	r2, r3
 80090c2:	4603      	mov	r3, r0
 80090c4:	817b      	strh	r3, [r7, #10]
 80090c6:	460b      	mov	r3, r1
 80090c8:	813b      	strh	r3, [r7, #8]
 80090ca:	4613      	mov	r3, r2
 80090cc:	80fb      	strh	r3, [r7, #6]
    // #ifdef U8G2_WITH_INTERSECTION
    //   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 )
    //     return;
    // #endif /* U8G2_WITH_INTERSECTION */
    u8g2_DrawHVLine(u8g2, x, y, len, 0);
 80090ce:	88fb      	ldrh	r3, [r7, #6]
 80090d0:	893a      	ldrh	r2, [r7, #8]
 80090d2:	8979      	ldrh	r1, [r7, #10]
 80090d4:	2000      	movs	r0, #0
 80090d6:	9000      	str	r0, [sp, #0]
 80090d8:	68f8      	ldr	r0, [r7, #12]
 80090da:	f7ff ff60 	bl	8008f9e <u8g2_DrawHVLine>
}
 80090de:	bf00      	nop
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t* u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b086      	sub	sp, #24
 80090ea:	af02      	add	r7, sp, #8
 80090ec:	60f8      	str	r0, [r7, #12]
 80090ee:	4608      	mov	r0, r1
 80090f0:	4611      	mov	r1, r2
 80090f2:	461a      	mov	r2, r3
 80090f4:	4603      	mov	r3, r0
 80090f6:	817b      	strh	r3, [r7, #10]
 80090f8:	460b      	mov	r3, r1
 80090fa:	813b      	strh	r3, [r7, #8]
 80090fc:	4613      	mov	r3, r2
 80090fe:	80fb      	strh	r3, [r7, #6]
    // #ifdef U8G2_WITH_INTERSECTION
    //   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 )
    //     return;
    // #endif /* U8G2_WITH_INTERSECTION */
    u8g2_DrawHVLine(u8g2, x, y, len, 1);
 8009100:	88fb      	ldrh	r3, [r7, #6]
 8009102:	893a      	ldrh	r2, [r7, #8]
 8009104:	8979      	ldrh	r1, [r7, #10]
 8009106:	2001      	movs	r0, #1
 8009108:	9000      	str	r0, [sp, #0]
 800910a:	68f8      	ldr	r0, [r7, #12]
 800910c:	f7ff ff47 	bl	8008f9e <u8g2_DrawHVLine>
}
 8009110:	bf00      	nop
 8009112:	3710      	adds	r7, #16
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t* u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af02      	add	r7, sp, #8
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	460b      	mov	r3, r1
 8009122:	807b      	strh	r3, [r7, #2]
 8009124:	4613      	mov	r3, r2
 8009126:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_INTERSECTION
    if (y < u8g2->user_y0)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800912e:	883a      	ldrh	r2, [r7, #0]
 8009130:	429a      	cmp	r2, r3
 8009132:	d31a      	bcc.n	800916a <u8g2_DrawPixel+0x52>
        return;
    if (y >= u8g2->user_y1)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800913a:	883a      	ldrh	r2, [r7, #0]
 800913c:	429a      	cmp	r2, r3
 800913e:	d216      	bcs.n	800916e <u8g2_DrawPixel+0x56>
        return;
    if (x < u8g2->user_x0)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009146:	887a      	ldrh	r2, [r7, #2]
 8009148:	429a      	cmp	r2, r3
 800914a:	d312      	bcc.n	8009172 <u8g2_DrawPixel+0x5a>
        return;
    if (x >= u8g2->user_x1)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8009152:	887a      	ldrh	r2, [r7, #2]
 8009154:	429a      	cmp	r2, r3
 8009156:	d20e      	bcs.n	8009176 <u8g2_DrawPixel+0x5e>
        return;
#endif /* U8G2_WITH_INTERSECTION */
    u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8009158:	883a      	ldrh	r2, [r7, #0]
 800915a:	8879      	ldrh	r1, [r7, #2]
 800915c:	2300      	movs	r3, #0
 800915e:	9300      	str	r3, [sp, #0]
 8009160:	2301      	movs	r3, #1
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f7ff ff1b 	bl	8008f9e <u8g2_DrawHVLine>
 8009168:	e006      	b.n	8009178 <u8g2_DrawPixel+0x60>
        return;
 800916a:	bf00      	nop
 800916c:	e004      	b.n	8009178 <u8g2_DrawPixel+0x60>
        return;
 800916e:	bf00      	nop
 8009170:	e002      	b.n	8009178 <u8g2_DrawPixel+0x60>
        return;
 8009172:	bf00      	nop
 8009174:	e000      	b.n	8009178 <u8g2_DrawPixel+0x60>
        return;
 8009176:	bf00      	nop
}
 8009178:	3708      	adds	r7, #8
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.

*/
void u8g2_SetDrawColor(u8g2_t* u8g2, uint8_t color)
{
 800917e:	b480      	push	{r7}
 8009180:	b083      	sub	sp, #12
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
 8009186:	460b      	mov	r3, r1
 8009188:	70fb      	strb	r3, [r7, #3]
    u8g2->draw_color = color; /* u8g2_SetDrawColor: just assign the argument */
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	78fa      	ldrb	r2, [r7, #3]
 800918e:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
    if (color >= 3)
 8009192:	78fb      	ldrb	r3, [r7, #3]
 8009194:	2b02      	cmp	r3, #2
 8009196:	d903      	bls.n	80091a0 <u8g2_SetDrawColor+0x22>
        u8g2->draw_color = 1; /* u8g2_SetDrawColor: make color as one if arg is invalid */
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2201      	movs	r2, #1
 800919c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
}
 80091a0:	bf00      	nop
 80091a2:	370c      	adds	r7, #12
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 80091ac:	b490      	push	{r4, r7}
 80091ae:	b082      	sub	sp, #8
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	4604      	mov	r4, r0
 80091b4:	4608      	mov	r0, r1
 80091b6:	4611      	mov	r1, r2
 80091b8:	461a      	mov	r2, r3
 80091ba:	4623      	mov	r3, r4
 80091bc:	80fb      	strh	r3, [r7, #6]
 80091be:	4603      	mov	r3, r0
 80091c0:	80bb      	strh	r3, [r7, #4]
 80091c2:	460b      	mov	r3, r1
 80091c4:	807b      	strh	r3, [r7, #2]
 80091c6:	4613      	mov	r3, r2
 80091c8:	803b      	strh	r3, [r7, #0]
    if (v0 < a1)  // v0 <= a1
 80091ca:	887a      	ldrh	r2, [r7, #2]
 80091cc:	88bb      	ldrh	r3, [r7, #4]
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d20d      	bcs.n	80091ee <u8g2_is_intersection_decision_tree+0x42>
    {
        if (v1 > a0)  // v1 >= a0
 80091d2:	883a      	ldrh	r2, [r7, #0]
 80091d4:	88fb      	ldrh	r3, [r7, #6]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d901      	bls.n	80091de <u8g2_is_intersection_decision_tree+0x32>
        {
            return 1;
 80091da:	2301      	movs	r3, #1
 80091dc:	e014      	b.n	8009208 <u8g2_is_intersection_decision_tree+0x5c>
        } else {
            if (v0 > v1)  // v0 > v1
 80091de:	887a      	ldrh	r2, [r7, #2]
 80091e0:	883b      	ldrh	r3, [r7, #0]
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d901      	bls.n	80091ea <u8g2_is_intersection_decision_tree+0x3e>
            {
                return 1;
 80091e6:	2301      	movs	r3, #1
 80091e8:	e00e      	b.n	8009208 <u8g2_is_intersection_decision_tree+0x5c>
            } else {
                return 0;
 80091ea:	2300      	movs	r3, #0
 80091ec:	e00c      	b.n	8009208 <u8g2_is_intersection_decision_tree+0x5c>
            }
        }
    } else {
        if (v1 > a0)  // v1 >= a0
 80091ee:	883a      	ldrh	r2, [r7, #0]
 80091f0:	88fb      	ldrh	r3, [r7, #6]
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d907      	bls.n	8009206 <u8g2_is_intersection_decision_tree+0x5a>
        {
            if (v0 > v1)  // v0 > v1
 80091f6:	887a      	ldrh	r2, [r7, #2]
 80091f8:	883b      	ldrh	r3, [r7, #0]
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d901      	bls.n	8009202 <u8g2_is_intersection_decision_tree+0x56>
            {
                return 1;
 80091fe:	2301      	movs	r3, #1
 8009200:	e002      	b.n	8009208 <u8g2_is_intersection_decision_tree+0x5c>
            } else {
                return 0;
 8009202:	2300      	movs	r3, #0
 8009204:	e000      	b.n	8009208 <u8g2_is_intersection_decision_tree+0x5c>
            }
        } else {
            return 0;
 8009206:	2300      	movs	r3, #0
        }
    }
}
 8009208:	4618      	mov	r0, r3
 800920a:	3708      	adds	r7, #8
 800920c:	46bd      	mov	sp, r7
 800920e:	bc90      	pop	{r4, r7}
 8009210:	4770      	bx	lr

08009212 <u8g2_IsIntersection>:

/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t* u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8009212:	b580      	push	{r7, lr}
 8009214:	b084      	sub	sp, #16
 8009216:	af00      	add	r7, sp, #0
 8009218:	60f8      	str	r0, [r7, #12]
 800921a:	4608      	mov	r0, r1
 800921c:	4611      	mov	r1, r2
 800921e:	461a      	mov	r2, r3
 8009220:	4603      	mov	r3, r0
 8009222:	817b      	strh	r3, [r7, #10]
 8009224:	460b      	mov	r3, r1
 8009226:	813b      	strh	r3, [r7, #8]
 8009228:	4613      	mov	r3, r2
 800922a:	80fb      	strh	r3, [r7, #6]
    if (u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0)
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 8009238:	8b3b      	ldrh	r3, [r7, #24]
 800923a:	893a      	ldrh	r2, [r7, #8]
 800923c:	f7ff ffb6 	bl	80091ac <u8g2_is_intersection_decision_tree>
 8009240:	4603      	mov	r3, r0
 8009242:	2b00      	cmp	r3, #0
 8009244:	d101      	bne.n	800924a <u8g2_IsIntersection+0x38>
        return 0;
 8009246:	2300      	movs	r3, #0
 8009248:	e00a      	b.n	8009260 <u8g2_IsIntersection+0x4e>

    return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8009256:	88fb      	ldrh	r3, [r7, #6]
 8009258:	897a      	ldrh	r2, [r7, #10]
 800925a:	f7ff ffa7 	bl	80091ac <u8g2_is_intersection_decision_tree>
 800925e:	4603      	mov	r3, r0
}
 8009260:	4618      	mov	r0, r3
 8009262:	3710      	adds	r7, #16
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <u8g2_DrawLine>:

#include "u8g2.h"


void u8g2_DrawLine(u8g2_t *u8g2, u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b088      	sub	sp, #32
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	4608      	mov	r0, r1
 8009272:	4611      	mov	r1, r2
 8009274:	461a      	mov	r2, r3
 8009276:	4603      	mov	r3, r0
 8009278:	817b      	strh	r3, [r7, #10]
 800927a:	460b      	mov	r3, r1
 800927c:	813b      	strh	r3, [r7, #8]
 800927e:	4613      	mov	r3, r2
 8009280:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t x,y;
  u8g2_uint_t dx, dy;
  u8g2_int_t err;
  u8g2_int_t ystep;

  uint8_t swapxy = 0;
 8009282:	2300      	movs	r3, #0
 8009284:	74fb      	strb	r3, [r7, #19]
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
 8009286:	897a      	ldrh	r2, [r7, #10]
 8009288:	88fb      	ldrh	r3, [r7, #6]
 800928a:	429a      	cmp	r2, r3
 800928c:	d904      	bls.n	8009298 <u8g2_DrawLine+0x30>
 800928e:	897a      	ldrh	r2, [r7, #10]
 8009290:	88fb      	ldrh	r3, [r7, #6]
 8009292:	1ad3      	subs	r3, r2, r3
 8009294:	837b      	strh	r3, [r7, #26]
 8009296:	e003      	b.n	80092a0 <u8g2_DrawLine+0x38>
 8009298:	88fa      	ldrh	r2, [r7, #6]
 800929a:	897b      	ldrh	r3, [r7, #10]
 800929c:	1ad3      	subs	r3, r2, r3
 800929e:	837b      	strh	r3, [r7, #26]
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
 80092a0:	893a      	ldrh	r2, [r7, #8]
 80092a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d904      	bls.n	80092b2 <u8g2_DrawLine+0x4a>
 80092a8:	893a      	ldrh	r2, [r7, #8]
 80092aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80092ac:	1ad3      	subs	r3, r2, r3
 80092ae:	833b      	strh	r3, [r7, #24]
 80092b0:	e003      	b.n	80092ba <u8g2_DrawLine+0x52>
 80092b2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80092b4:	893b      	ldrh	r3, [r7, #8]
 80092b6:	1ad3      	subs	r3, r2, r3
 80092b8:	833b      	strh	r3, [r7, #24]

  if ( dy > dx ) 
 80092ba:	8b3a      	ldrh	r2, [r7, #24]
 80092bc:	8b7b      	ldrh	r3, [r7, #26]
 80092be:	429a      	cmp	r2, r3
 80092c0:	d913      	bls.n	80092ea <u8g2_DrawLine+0x82>
  {
    swapxy = 1;
 80092c2:	2301      	movs	r3, #1
 80092c4:	74fb      	strb	r3, [r7, #19]
    tmp = dx; dx =dy; dy = tmp;
 80092c6:	8b7b      	ldrh	r3, [r7, #26]
 80092c8:	823b      	strh	r3, [r7, #16]
 80092ca:	8b3b      	ldrh	r3, [r7, #24]
 80092cc:	837b      	strh	r3, [r7, #26]
 80092ce:	8a3b      	ldrh	r3, [r7, #16]
 80092d0:	833b      	strh	r3, [r7, #24]
    tmp = x1; x1 =y1; y1 = tmp;
 80092d2:	897b      	ldrh	r3, [r7, #10]
 80092d4:	823b      	strh	r3, [r7, #16]
 80092d6:	893b      	ldrh	r3, [r7, #8]
 80092d8:	817b      	strh	r3, [r7, #10]
 80092da:	8a3b      	ldrh	r3, [r7, #16]
 80092dc:	813b      	strh	r3, [r7, #8]
    tmp = x2; x2 =y2; y2 = tmp;
 80092de:	88fb      	ldrh	r3, [r7, #6]
 80092e0:	823b      	strh	r3, [r7, #16]
 80092e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80092e4:	80fb      	strh	r3, [r7, #6]
 80092e6:	8a3b      	ldrh	r3, [r7, #16]
 80092e8:	853b      	strh	r3, [r7, #40]	; 0x28
  }
  if ( x1 > x2 ) 
 80092ea:	897a      	ldrh	r2, [r7, #10]
 80092ec:	88fb      	ldrh	r3, [r7, #6]
 80092ee:	429a      	cmp	r2, r3
 80092f0:	d90b      	bls.n	800930a <u8g2_DrawLine+0xa2>
  {
    tmp = x1; x1 =x2; x2 = tmp;
 80092f2:	897b      	ldrh	r3, [r7, #10]
 80092f4:	823b      	strh	r3, [r7, #16]
 80092f6:	88fb      	ldrh	r3, [r7, #6]
 80092f8:	817b      	strh	r3, [r7, #10]
 80092fa:	8a3b      	ldrh	r3, [r7, #16]
 80092fc:	80fb      	strh	r3, [r7, #6]
    tmp = y1; y1 =y2; y2 = tmp;
 80092fe:	893b      	ldrh	r3, [r7, #8]
 8009300:	823b      	strh	r3, [r7, #16]
 8009302:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009304:	813b      	strh	r3, [r7, #8]
 8009306:	8a3b      	ldrh	r3, [r7, #16]
 8009308:	853b      	strh	r3, [r7, #40]	; 0x28
  }
  err = dx >> 1;
 800930a:	8b7b      	ldrh	r3, [r7, #26]
 800930c:	085b      	lsrs	r3, r3, #1
 800930e:	b29b      	uxth	r3, r3
 8009310:	82fb      	strh	r3, [r7, #22]
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
 8009312:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009314:	893b      	ldrh	r3, [r7, #8]
 8009316:	429a      	cmp	r2, r3
 8009318:	d902      	bls.n	8009320 <u8g2_DrawLine+0xb8>
 800931a:	2301      	movs	r3, #1
 800931c:	82bb      	strh	r3, [r7, #20]
 800931e:	e002      	b.n	8009326 <u8g2_DrawLine+0xbe>
 8009320:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009324:	82bb      	strh	r3, [r7, #20]
  y = y1;
 8009326:	893b      	ldrh	r3, [r7, #8]
 8009328:	83bb      	strh	r3, [r7, #28]

#ifndef  U8G2_16BIT
  if ( x2 == 255 )
    x2--;
#else
  if ( x2 == 0xffff )
 800932a:	88fb      	ldrh	r3, [r7, #6]
 800932c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009330:	4293      	cmp	r3, r2
 8009332:	d102      	bne.n	800933a <u8g2_DrawLine+0xd2>
    x2--;
 8009334:	88fb      	ldrh	r3, [r7, #6]
 8009336:	3b01      	subs	r3, #1
 8009338:	80fb      	strh	r3, [r7, #6]
#endif

  for( x = x1; x <= x2; x++ )
 800933a:	897b      	ldrh	r3, [r7, #10]
 800933c:	83fb      	strh	r3, [r7, #30]
 800933e:	e024      	b.n	800938a <u8g2_DrawLine+0x122>
  {
    if ( swapxy == 0 ) 
 8009340:	7cfb      	ldrb	r3, [r7, #19]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d106      	bne.n	8009354 <u8g2_DrawLine+0xec>
      u8g2_DrawPixel(u8g2, x, y); 
 8009346:	8bba      	ldrh	r2, [r7, #28]
 8009348:	8bfb      	ldrh	r3, [r7, #30]
 800934a:	4619      	mov	r1, r3
 800934c:	68f8      	ldr	r0, [r7, #12]
 800934e:	f7ff fee3 	bl	8009118 <u8g2_DrawPixel>
 8009352:	e005      	b.n	8009360 <u8g2_DrawLine+0xf8>
    else 
      u8g2_DrawPixel(u8g2, y, x); 
 8009354:	8bfa      	ldrh	r2, [r7, #30]
 8009356:	8bbb      	ldrh	r3, [r7, #28]
 8009358:	4619      	mov	r1, r3
 800935a:	68f8      	ldr	r0, [r7, #12]
 800935c:	f7ff fedc 	bl	8009118 <u8g2_DrawPixel>
    err -= (u8g2_uint_t)dy;
 8009360:	8afa      	ldrh	r2, [r7, #22]
 8009362:	8b3b      	ldrh	r3, [r7, #24]
 8009364:	1ad3      	subs	r3, r2, r3
 8009366:	b29b      	uxth	r3, r3
 8009368:	82fb      	strh	r3, [r7, #22]
    if ( err < 0 ) 
 800936a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800936e:	2b00      	cmp	r3, #0
 8009370:	da08      	bge.n	8009384 <u8g2_DrawLine+0x11c>
    {
      y += (u8g2_uint_t)ystep;
 8009372:	8aba      	ldrh	r2, [r7, #20]
 8009374:	8bbb      	ldrh	r3, [r7, #28]
 8009376:	4413      	add	r3, r2
 8009378:	83bb      	strh	r3, [r7, #28]
      err += (u8g2_uint_t)dx;
 800937a:	8afa      	ldrh	r2, [r7, #22]
 800937c:	8b7b      	ldrh	r3, [r7, #26]
 800937e:	4413      	add	r3, r2
 8009380:	b29b      	uxth	r3, r3
 8009382:	82fb      	strh	r3, [r7, #22]
  for( x = x1; x <= x2; x++ )
 8009384:	8bfb      	ldrh	r3, [r7, #30]
 8009386:	3301      	adds	r3, #1
 8009388:	83fb      	strh	r3, [r7, #30]
 800938a:	8bfa      	ldrh	r2, [r7, #30]
 800938c:	88fb      	ldrh	r3, [r7, #6]
 800938e:	429a      	cmp	r2, r3
 8009390:	d9d6      	bls.n	8009340 <u8g2_DrawLine+0xd8>
    }
  }
}
 8009392:	bf00      	nop
 8009394:	bf00      	nop
 8009396:	3720      	adds	r7, #32
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800939c:	b480      	push	{r7}
 800939e:	b089      	sub	sp, #36	; 0x24
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	60f8      	str	r0, [r7, #12]
 80093a4:	4608      	mov	r0, r1
 80093a6:	4611      	mov	r1, r2
 80093a8:	461a      	mov	r2, r3
 80093aa:	4603      	mov	r3, r0
 80093ac:	817b      	strh	r3, [r7, #10]
 80093ae:	460b      	mov	r3, r1
 80093b0:	813b      	strh	r3, [r7, #8]
 80093b2:	4613      	mov	r3, r2
 80093b4:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 80093b6:	893b      	ldrh	r3, [r7, #8]
 80093b8:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 80093ba:	7efb      	ldrb	r3, [r7, #27]
 80093bc:	f003 0307 	and.w	r3, r3, #7
 80093c0:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 80093c2:	2301      	movs	r3, #1
 80093c4:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 80093c6:	7e3a      	ldrb	r2, [r7, #24]
 80093c8:	7efb      	ldrb	r3, [r7, #27]
 80093ca:	fa02 f303 	lsl.w	r3, r2, r3
 80093ce:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 80093d0:	2300      	movs	r3, #0
 80093d2:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 80093d4:	2300      	movs	r3, #0
 80093d6:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80093de:	2b01      	cmp	r3, #1
 80093e0:	d801      	bhi.n	80093e6 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 80093e2:	7e3b      	ldrb	r3, [r7, #24]
 80093e4:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d001      	beq.n	80093f4 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 80093f0:	7e3b      	ldrb	r3, [r7, #24]
 80093f2:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 80093f4:	893b      	ldrh	r3, [r7, #8]
 80093f6:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 80093f8:	8afb      	ldrh	r3, [r7, #22]
 80093fa:	f023 0307 	bic.w	r3, r3, #7
 80093fe:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	7c1b      	ldrb	r3, [r3, #16]
 8009406:	b29b      	uxth	r3, r3
 8009408:	8afa      	ldrh	r2, [r7, #22]
 800940a:	fb12 f303 	smulbb	r3, r2, r3
 800940e:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009414:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8009416:	8afb      	ldrh	r3, [r7, #22]
 8009418:	69fa      	ldr	r2, [r7, #28]
 800941a:	4413      	add	r3, r2
 800941c:	61fb      	str	r3, [r7, #28]
  ptr += x;
 800941e:	897b      	ldrh	r3, [r7, #10]
 8009420:	69fa      	ldr	r2, [r7, #28]
 8009422:	4413      	add	r3, r2
 8009424:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8009426:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800942a:	2b00      	cmp	r3, #0
 800942c:	d117      	bne.n	800945e <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 800942e:	69fb      	ldr	r3, [r7, #28]
 8009430:	781a      	ldrb	r2, [r3, #0]
 8009432:	7ebb      	ldrb	r3, [r7, #26]
 8009434:	4313      	orrs	r3, r2
 8009436:	b2da      	uxtb	r2, r3
 8009438:	69fb      	ldr	r3, [r7, #28]
 800943a:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 800943c:	69fb      	ldr	r3, [r7, #28]
 800943e:	781a      	ldrb	r2, [r3, #0]
 8009440:	7e7b      	ldrb	r3, [r7, #25]
 8009442:	4053      	eors	r3, r2
 8009444:	b2da      	uxtb	r2, r3
 8009446:	69fb      	ldr	r3, [r7, #28]
 8009448:	701a      	strb	r2, [r3, #0]
	ptr++;
 800944a:	69fb      	ldr	r3, [r7, #28]
 800944c:	3301      	adds	r3, #1
 800944e:	61fb      	str	r3, [r7, #28]
	len--;
 8009450:	88fb      	ldrh	r3, [r7, #6]
 8009452:	3b01      	subs	r3, #1
 8009454:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8009456:	88fb      	ldrh	r3, [r7, #6]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d1e8      	bne.n	800942e <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 800945c:	e038      	b.n	80094d0 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 800945e:	69fb      	ldr	r3, [r7, #28]
 8009460:	781a      	ldrb	r2, [r3, #0]
 8009462:	7ebb      	ldrb	r3, [r7, #26]
 8009464:	4313      	orrs	r3, r2
 8009466:	b2da      	uxtb	r2, r3
 8009468:	69fb      	ldr	r3, [r7, #28]
 800946a:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	781a      	ldrb	r2, [r3, #0]
 8009470:	7e7b      	ldrb	r3, [r7, #25]
 8009472:	4053      	eors	r3, r2
 8009474:	b2da      	uxtb	r2, r3
 8009476:	69fb      	ldr	r3, [r7, #28]
 8009478:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 800947a:	7efb      	ldrb	r3, [r7, #27]
 800947c:	3301      	adds	r3, #1
 800947e:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8009480:	7efb      	ldrb	r3, [r7, #27]
 8009482:	f003 0307 	and.w	r3, r3, #7
 8009486:	76fb      	strb	r3, [r7, #27]
      len--;
 8009488:	88fb      	ldrh	r3, [r7, #6]
 800948a:	3b01      	subs	r3, #1
 800948c:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 800948e:	7efb      	ldrb	r3, [r7, #27]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d114      	bne.n	80094be <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8009498:	461a      	mov	r2, r3
 800949a:	69fb      	ldr	r3, [r7, #28]
 800949c:	4413      	add	r3, r2
 800949e:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d801      	bhi.n	80094ae <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 80094aa:	2301      	movs	r3, #1
 80094ac:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d008      	beq.n	80094ca <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 80094b8:	2301      	movs	r3, #1
 80094ba:	767b      	strb	r3, [r7, #25]
 80094bc:	e005      	b.n	80094ca <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 80094be:	7ebb      	ldrb	r3, [r7, #26]
 80094c0:	005b      	lsls	r3, r3, #1
 80094c2:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 80094c4:	7e7b      	ldrb	r3, [r7, #25]
 80094c6:	005b      	lsls	r3, r3, #1
 80094c8:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 80094ca:	88fb      	ldrh	r3, [r7, #6]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d1c6      	bne.n	800945e <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 80094d0:	bf00      	nop
 80094d2:	3724      	adds	r7, #36	; 0x24
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr

080094dc <pge_Next>:

/*===========================================*/
/* line draw algorithm */

static uint8_t pge_Next(struct pg_edge_struct *pge)
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  if ( pge->current_y >= pge->max_y )
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80094f0:	429a      	cmp	r2, r3
 80094f2:	db01      	blt.n	80094f8 <pge_Next+0x1c>
    return 0;
 80094f4:	2300      	movs	r3, #0
 80094f6:	e042      	b.n	800957e <pge_Next+0xa2>
  
  pge->current_x += pge->current_x_offset;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80094fe:	b29a      	uxth	r2, r3
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009506:	b29b      	uxth	r3, r3
 8009508:	4413      	add	r3, r2
 800950a:	b29b      	uxth	r3, r3
 800950c:	b21a      	sxth	r2, r3
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	819a      	strh	r2, [r3, #12]
  pge->error += pge->error_offset;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8009518:	b29a      	uxth	r2, r3
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009520:	b29b      	uxth	r3, r3
 8009522:	4413      	add	r3, r2
 8009524:	b29b      	uxth	r3, r3
 8009526:	b21a      	sxth	r2, r3
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	81da      	strh	r2, [r3, #14]
  if ( pge->error > 0 )
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8009532:	2b00      	cmp	r3, #0
 8009534:	dd19      	ble.n	800956a <pge_Next+0x8e>
  {
    pge->current_x += pge->x_direction;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800953c:	b29a      	uxth	r2, r3
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009544:	b29b      	uxth	r3, r3
 8009546:	4413      	add	r3, r2
 8009548:	b29b      	uxth	r3, r3
 800954a:	b21a      	sxth	r2, r3
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	819a      	strh	r2, [r3, #12]
    pge->error -= pge->height;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8009556:	b29a      	uxth	r2, r3
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800955e:	b29b      	uxth	r3, r3
 8009560:	1ad3      	subs	r3, r2, r3
 8009562:	b29b      	uxth	r3, r3
 8009564:	b21a      	sxth	r2, r3
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	81da      	strh	r2, [r3, #14]
  }  
  
  pge->current_y++;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009570:	b29b      	uxth	r3, r3
 8009572:	3301      	adds	r3, #1
 8009574:	b29b      	uxth	r3, r3
 8009576:	b21a      	sxth	r2, r3
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	811a      	strh	r2, [r3, #8]
  return 1;
 800957c:	2301      	movs	r3, #1
}
 800957e:	4618      	mov	r0, r3
 8009580:	370c      	adds	r7, #12
 8009582:	46bd      	mov	sp, r7
 8009584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009588:	4770      	bx	lr

0800958a <pge_Init>:

/* assumes y2 > y1 */
static void pge_Init(struct pg_edge_struct *pge, pg_word_t x1, pg_word_t y1, pg_word_t x2, pg_word_t y2)
{
 800958a:	b480      	push	{r7}
 800958c:	b087      	sub	sp, #28
 800958e:	af00      	add	r7, sp, #0
 8009590:	60f8      	str	r0, [r7, #12]
 8009592:	4608      	mov	r0, r1
 8009594:	4611      	mov	r1, r2
 8009596:	461a      	mov	r2, r3
 8009598:	4603      	mov	r3, r0
 800959a:	817b      	strh	r3, [r7, #10]
 800959c:	460b      	mov	r3, r1
 800959e:	813b      	strh	r3, [r7, #8]
 80095a0:	4613      	mov	r3, r2
 80095a2:	80fb      	strh	r3, [r7, #6]
  pg_word_t dx = x2 - x1;
 80095a4:	88fa      	ldrh	r2, [r7, #6]
 80095a6:	897b      	ldrh	r3, [r7, #10]
 80095a8:	1ad3      	subs	r3, r2, r3
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	82bb      	strh	r3, [r7, #20]
  pg_word_t width;

  pge->height = y2 - y1;
 80095ae:	8c3a      	ldrh	r2, [r7, #32]
 80095b0:	893b      	ldrh	r3, [r7, #8]
 80095b2:	1ad3      	subs	r3, r2, r3
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	b21a      	sxth	r2, r3
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	805a      	strh	r2, [r3, #2]
  pge->max_y = y2;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	8c3a      	ldrh	r2, [r7, #32]
 80095c0:	815a      	strh	r2, [r3, #10]
  pge->current_y = y1;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	893a      	ldrh	r2, [r7, #8]
 80095c6:	811a      	strh	r2, [r3, #8]
  pge->current_x = x1;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	897a      	ldrh	r2, [r7, #10]
 80095cc:	819a      	strh	r2, [r3, #12]

  if ( dx >= 0 )
 80095ce:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	db08      	blt.n	80095e8 <pge_Init+0x5e>
  {
    pge->x_direction = 1;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2201      	movs	r2, #1
 80095da:	801a      	strh	r2, [r3, #0]
    width = dx;
 80095dc:	8abb      	ldrh	r3, [r7, #20]
 80095de:	82fb      	strh	r3, [r7, #22]
    pge->error = 0;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	2200      	movs	r2, #0
 80095e4:	81da      	strh	r2, [r3, #14]
 80095e6:	e011      	b.n	800960c <pge_Init+0x82>
  }
  else
  {
    pge->x_direction = -1;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80095ee:	801a      	strh	r2, [r3, #0]
    width = -dx;
 80095f0:	8abb      	ldrh	r3, [r7, #20]
 80095f2:	425b      	negs	r3, r3
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	82fb      	strh	r3, [r7, #22]
    pge->error = 1 - pge->height;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80095fe:	b29b      	uxth	r3, r3
 8009600:	f1c3 0301 	rsb	r3, r3, #1
 8009604:	b29b      	uxth	r3, r3
 8009606:	b21a      	sxth	r2, r3
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	81da      	strh	r2, [r3, #14]
  }
  
  pge->current_x_offset = dx / pge->height;
 800960c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009610:	68fa      	ldr	r2, [r7, #12]
 8009612:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8009616:	fb93 f3f2 	sdiv	r3, r3, r2
 800961a:	b21a      	sxth	r2, r3
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	809a      	strh	r2, [r3, #4]
  pge->error_offset = width % pge->height;
 8009620:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009624:	68fa      	ldr	r2, [r7, #12]
 8009626:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800962a:	fb93 f1f2 	sdiv	r1, r3, r2
 800962e:	fb01 f202 	mul.w	r2, r1, r2
 8009632:	1a9b      	subs	r3, r3, r2
 8009634:	b21a      	sxth	r2, r3
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	80da      	strh	r2, [r3, #6]
}
 800963a:	bf00      	nop
 800963c:	371c      	adds	r7, #28
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr

08009646 <pg_inc>:

/*===========================================*/
/* convex polygon algorithm */

static uint8_t pg_inc(pg_struct *pg, uint8_t i)
{
 8009646:	b480      	push	{r7}
 8009648:	b083      	sub	sp, #12
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
 800964e:	460b      	mov	r3, r1
 8009650:	70fb      	strb	r3, [r7, #3]
    i++;
 8009652:	78fb      	ldrb	r3, [r7, #3]
 8009654:	3301      	adds	r3, #1
 8009656:	70fb      	strb	r3, [r7, #3]
    if ( i >= pg->cnt )
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	7e1b      	ldrb	r3, [r3, #24]
 800965c:	78fa      	ldrb	r2, [r7, #3]
 800965e:	429a      	cmp	r2, r3
 8009660:	d301      	bcc.n	8009666 <pg_inc+0x20>
      i = 0;
 8009662:	2300      	movs	r3, #0
 8009664:	70fb      	strb	r3, [r7, #3]
    return i;
 8009666:	78fb      	ldrb	r3, [r7, #3]
}
 8009668:	4618      	mov	r0, r3
 800966a:	370c      	adds	r7, #12
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr

08009674 <pg_dec>:

static uint8_t pg_dec(pg_struct *pg, uint8_t i)
{
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	460b      	mov	r3, r1
 800967e:	70fb      	strb	r3, [r7, #3]
    i--;
 8009680:	78fb      	ldrb	r3, [r7, #3]
 8009682:	3b01      	subs	r3, #1
 8009684:	70fb      	strb	r3, [r7, #3]
    if ( i >= pg->cnt )
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	7e1b      	ldrb	r3, [r3, #24]
 800968a:	78fa      	ldrb	r2, [r7, #3]
 800968c:	429a      	cmp	r2, r3
 800968e:	d303      	bcc.n	8009698 <pg_dec+0x24>
      i = pg->cnt-1;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	7e1b      	ldrb	r3, [r3, #24]
 8009694:	3b01      	subs	r3, #1
 8009696:	70fb      	strb	r3, [r7, #3]
    return i;
 8009698:	78fb      	ldrb	r3, [r7, #3]
}
 800969a:	4618      	mov	r0, r3
 800969c:	370c      	adds	r7, #12
 800969e:	46bd      	mov	sp, r7
 80096a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a4:	4770      	bx	lr

080096a6 <pg_expand_min_y>:

static void pg_expand_min_y(pg_struct *pg, pg_word_t min_y, uint8_t pge_idx)
{
 80096a6:	b580      	push	{r7, lr}
 80096a8:	b084      	sub	sp, #16
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
 80096ae:	460b      	mov	r3, r1
 80096b0:	807b      	strh	r3, [r7, #2]
 80096b2:	4613      	mov	r3, r2
 80096b4:	707b      	strb	r3, [r7, #1]
  uint8_t i = pg->pge[pge_idx].curr_idx;
 80096b6:	787a      	ldrb	r2, [r7, #1]
 80096b8:	6879      	ldr	r1, [r7, #4]
 80096ba:	4613      	mov	r3, r2
 80096bc:	005b      	lsls	r3, r3, #1
 80096be:	4413      	add	r3, r2
 80096c0:	00db      	lsls	r3, r3, #3
 80096c2:	440b      	add	r3, r1
 80096c4:	3330      	adds	r3, #48	; 0x30
 80096c6:	781b      	ldrb	r3, [r3, #0]
 80096c8:	73fb      	strb	r3, [r7, #15]
  for(;;)
  {
    i = pg->pge[pge_idx].next_idx_fn(pg, i);
 80096ca:	787a      	ldrb	r2, [r7, #1]
 80096cc:	6879      	ldr	r1, [r7, #4]
 80096ce:	4613      	mov	r3, r2
 80096d0:	005b      	lsls	r3, r3, #1
 80096d2:	4413      	add	r3, r2
 80096d4:	00db      	lsls	r3, r3, #3
 80096d6:	440b      	add	r3, r1
 80096d8:	332c      	adds	r3, #44	; 0x2c
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	7bfa      	ldrb	r2, [r7, #15]
 80096de:	4611      	mov	r1, r2
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	4798      	blx	r3
 80096e4:	4603      	mov	r3, r0
 80096e6:	73fb      	strb	r3, [r7, #15]
    if ( pg->list[i].y != min_y )
 80096e8:	7bfb      	ldrb	r3, [r7, #15]
 80096ea:	687a      	ldr	r2, [r7, #4]
 80096ec:	009b      	lsls	r3, r3, #2
 80096ee:	4413      	add	r3, r2
 80096f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80096f4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d10a      	bne.n	8009712 <pg_expand_min_y+0x6c>
      break;	
    pg->pge[pge_idx].curr_idx = i;
 80096fc:	787a      	ldrb	r2, [r7, #1]
 80096fe:	6879      	ldr	r1, [r7, #4]
 8009700:	4613      	mov	r3, r2
 8009702:	005b      	lsls	r3, r3, #1
 8009704:	4413      	add	r3, r2
 8009706:	00db      	lsls	r3, r3, #3
 8009708:	440b      	add	r3, r1
 800970a:	3330      	adds	r3, #48	; 0x30
 800970c:	7bfa      	ldrb	r2, [r7, #15]
 800970e:	701a      	strb	r2, [r3, #0]
    i = pg->pge[pge_idx].next_idx_fn(pg, i);
 8009710:	e7db      	b.n	80096ca <pg_expand_min_y+0x24>
      break;	
 8009712:	bf00      	nop
  }
}
 8009714:	bf00      	nop
 8009716:	3710      	adds	r7, #16
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <pg_prepare>:

static uint8_t pg_prepare(pg_struct *pg)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b084      	sub	sp, #16
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  pg_word_t max_y;
  pg_word_t min_y;
  uint8_t i;

  /* setup the next index procedures */
  pg->pge[PG_RIGHT].next_idx_fn = pg_inc;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	4a49      	ldr	r2, [pc, #292]	; (800984c <pg_prepare+0x130>)
 8009728:	645a      	str	r2, [r3, #68]	; 0x44
  pg->pge[PG_LEFT].next_idx_fn = pg_dec;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	4a48      	ldr	r2, [pc, #288]	; (8009850 <pg_prepare+0x134>)
 800972e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* search for highest and lowest point */
  max_y = pg->list[0].y;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	885b      	ldrh	r3, [r3, #2]
 8009734:	81fb      	strh	r3, [r7, #14]
  min_y = pg->list[0].y;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	885b      	ldrh	r3, [r3, #2]
 800973a:	81bb      	strh	r3, [r7, #12]
  pg->pge[PG_LEFT].curr_idx = 0;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2200      	movs	r2, #0
 8009740:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  for( i = 1; i < pg->cnt; i++ )
 8009744:	2301      	movs	r3, #1
 8009746:	72fb      	strb	r3, [r7, #11]
 8009748:	e026      	b.n	8009798 <pg_prepare+0x7c>
  {
    if ( max_y < pg->list[i].y )
 800974a:	7afb      	ldrb	r3, [r7, #11]
 800974c:	687a      	ldr	r2, [r7, #4]
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	4413      	add	r3, r2
 8009752:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009756:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800975a:	429a      	cmp	r2, r3
 800975c:	da05      	bge.n	800976a <pg_prepare+0x4e>
    {
      max_y = pg->list[i].y;
 800975e:	7afb      	ldrb	r3, [r7, #11]
 8009760:	687a      	ldr	r2, [r7, #4]
 8009762:	009b      	lsls	r3, r3, #2
 8009764:	4413      	add	r3, r2
 8009766:	885b      	ldrh	r3, [r3, #2]
 8009768:	81fb      	strh	r3, [r7, #14]
    }
    if ( min_y > pg->list[i].y )
 800976a:	7afb      	ldrb	r3, [r7, #11]
 800976c:	687a      	ldr	r2, [r7, #4]
 800976e:	009b      	lsls	r3, r3, #2
 8009770:	4413      	add	r3, r2
 8009772:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009776:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800977a:	429a      	cmp	r2, r3
 800977c:	dd09      	ble.n	8009792 <pg_prepare+0x76>
    {
      pg->pge[PG_LEFT].curr_idx = i;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	7afa      	ldrb	r2, [r7, #11]
 8009782:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      min_y = pg->list[i].y;
 8009786:	7afb      	ldrb	r3, [r7, #11]
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	009b      	lsls	r3, r3, #2
 800978c:	4413      	add	r3, r2
 800978e:	885b      	ldrh	r3, [r3, #2]
 8009790:	81bb      	strh	r3, [r7, #12]
  for( i = 1; i < pg->cnt; i++ )
 8009792:	7afb      	ldrb	r3, [r7, #11]
 8009794:	3301      	adds	r3, #1
 8009796:	72fb      	strb	r3, [r7, #11]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	7e1b      	ldrb	r3, [r3, #24]
 800979c:	7afa      	ldrb	r2, [r7, #11]
 800979e:	429a      	cmp	r2, r3
 80097a0:	d3d3      	bcc.n	800974a <pg_prepare+0x2e>
    }
  }

  /* calculate total number of scan lines */
  pg->total_scan_line_cnt = max_y;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	89fa      	ldrh	r2, [r7, #14]
 80097a6:	835a      	strh	r2, [r3, #26]
  pg->total_scan_line_cnt -= min_y;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80097ae:	b29a      	uxth	r2, r3
 80097b0:	89bb      	ldrh	r3, [r7, #12]
 80097b2:	1ad3      	subs	r3, r2, r3
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	b21a      	sxth	r2, r3
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	835a      	strh	r2, [r3, #26]
  
  /* exit if polygon height is zero */
  if ( pg->total_scan_line_cnt == 0 )
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d101      	bne.n	80097ca <pg_prepare+0xae>
    return 0;
 80097c6:	2300      	movs	r3, #0
 80097c8:	e03b      	b.n	8009842 <pg_prepare+0x126>
  
  /* if the minimum y side is flat, try to find the lowest and highest x points */
  pg->pge[PG_RIGHT].curr_idx = pg->pge[PG_LEFT].curr_idx;  
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  pg_expand_min_y(pg, min_y, PG_RIGHT);
 80097d6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80097da:	2201      	movs	r2, #1
 80097dc:	4619      	mov	r1, r3
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f7ff ff61 	bl	80096a6 <pg_expand_min_y>
  pg_expand_min_y(pg, min_y, PG_LEFT);
 80097e4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80097e8:	2200      	movs	r2, #0
 80097ea:	4619      	mov	r1, r3
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f7ff ff5a 	bl	80096a6 <pg_expand_min_y>
  
  /* check if the min side is really flat (depends on the x values) */
  pg->is_min_y_not_flat = 1;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2201      	movs	r2, #1
 80097f6:	765a      	strb	r2, [r3, #25]
  if ( pg->list[pg->pge[PG_LEFT].curr_idx].x != pg->list[pg->pge[PG_RIGHT].curr_idx].x )
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80097fe:	461a      	mov	r2, r3
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f933 2022 	ldrsh.w	r2, [r3, r2, lsl #2]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800980c:	4619      	mov	r1, r3
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f933 3021 	ldrsh.w	r3, [r3, r1, lsl #2]
 8009814:	429a      	cmp	r2, r3
 8009816:	d003      	beq.n	8009820 <pg_prepare+0x104>
  {
    pg->is_min_y_not_flat = 0;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2200      	movs	r2, #0
 800981c:	765a      	strb	r2, [r3, #25]
 800981e:	e00f      	b.n	8009840 <pg_prepare+0x124>
  }
  else
  {
    pg->total_scan_line_cnt--;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8009826:	b29b      	uxth	r3, r3
 8009828:	3b01      	subs	r3, #1
 800982a:	b29b      	uxth	r3, r3
 800982c:	b21a      	sxth	r2, r3
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	835a      	strh	r2, [r3, #26]
    if ( pg->total_scan_line_cnt == 0 )
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d101      	bne.n	8009840 <pg_prepare+0x124>
      return 0;
 800983c:	2300      	movs	r3, #0
 800983e:	e000      	b.n	8009842 <pg_prepare+0x126>
  }

  return 1;
 8009840:	2301      	movs	r3, #1
}
 8009842:	4618      	mov	r0, r3
 8009844:	3710      	adds	r7, #16
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
 800984a:	bf00      	nop
 800984c:	08009647 	.word	0x08009647
 8009850:	08009675 	.word	0x08009675

08009854 <pg_hline>:

static void pg_hline(pg_struct *pg, u8g2_t *u8g2)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	6039      	str	r1, [r7, #0]
  pg_word_t x1, x2, y;
  x1 = pg->pge[PG_LEFT].current_x;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009862:	81fb      	strh	r3, [r7, #14]
  x2 = pg->pge[PG_RIGHT].current_x;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800986a:	81bb      	strh	r3, [r7, #12]
  y = pg->pge[PG_RIGHT].current_y;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8009870:	817b      	strh	r3, [r7, #10]
  
  if ( y < 0 )
 8009872:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8009876:	2b00      	cmp	r3, #0
 8009878:	db5a      	blt.n	8009930 <pg_hline+0xdc>
    return;
  if ( y >= u8g2_GetDisplayHeight(u8g2) )  // does not work for 256x64 display???
 800987a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800987e:	683a      	ldr	r2, [r7, #0]
 8009880:	f8b2 2046 	ldrh.w	r2, [r2, #70]	; 0x46
 8009884:	4293      	cmp	r3, r2
 8009886:	da55      	bge.n	8009934 <pg_hline+0xe0>
    return;
  if ( x1 < x2 )
 8009888:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800988c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009890:	429a      	cmp	r2, r3
 8009892:	da26      	bge.n	80098e2 <pg_hline+0x8e>
  {
    if ( x2 < 0 )
 8009894:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009898:	2b00      	cmp	r3, #0
 800989a:	db4d      	blt.n	8009938 <pg_hline+0xe4>
      return;
    if ( x1 >= u8g2_GetDisplayWidth(u8g2) )
 800989c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80098a0:	683a      	ldr	r2, [r7, #0]
 80098a2:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 80098a6:	4293      	cmp	r3, r2
 80098a8:	da48      	bge.n	800993c <pg_hline+0xe8>
      return;
    if ( x1 < 0 )
 80098aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	da01      	bge.n	80098b6 <pg_hline+0x62>
      x1 = 0;
 80098b2:	2300      	movs	r3, #0
 80098b4:	81fb      	strh	r3, [r7, #14]
    if ( x2 >= u8g2_GetDisplayWidth(u8g2) )
 80098b6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80098ba:	683a      	ldr	r2, [r7, #0]
 80098bc:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 80098c0:	4293      	cmp	r3, r2
 80098c2:	db03      	blt.n	80098cc <pg_hline+0x78>
      x2 = u8g2_GetDisplayWidth(u8g2);
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80098ca:	81bb      	strh	r3, [r7, #12]
    u8g2_DrawHLine(u8g2, x1, y, x2 - x1);
 80098cc:	89f9      	ldrh	r1, [r7, #14]
 80098ce:	8978      	ldrh	r0, [r7, #10]
 80098d0:	89ba      	ldrh	r2, [r7, #12]
 80098d2:	89fb      	ldrh	r3, [r7, #14]
 80098d4:	1ad3      	subs	r3, r2, r3
 80098d6:	b29b      	uxth	r3, r3
 80098d8:	4602      	mov	r2, r0
 80098da:	6838      	ldr	r0, [r7, #0]
 80098dc:	f7ff fbea 	bl	80090b4 <u8g2_DrawHLine>
 80098e0:	e031      	b.n	8009946 <pg_hline+0xf2>
  }
  else
  {
    if ( x1 < 0 )
 80098e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	db2a      	blt.n	8009940 <pg_hline+0xec>
      return;
    if ( x2 >= u8g2_GetDisplayWidth(u8g2) )
 80098ea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80098ee:	683a      	ldr	r2, [r7, #0]
 80098f0:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 80098f4:	4293      	cmp	r3, r2
 80098f6:	da25      	bge.n	8009944 <pg_hline+0xf0>
      return;
    if ( x2 < 0 )
 80098f8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	da01      	bge.n	8009904 <pg_hline+0xb0>
      x1 = 0;
 8009900:	2300      	movs	r3, #0
 8009902:	81fb      	strh	r3, [r7, #14]
    if ( x1 >= u8g2_GetDisplayWidth(u8g2) )
 8009904:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009908:	683a      	ldr	r2, [r7, #0]
 800990a:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 800990e:	4293      	cmp	r3, r2
 8009910:	db03      	blt.n	800991a <pg_hline+0xc6>
      x1 = u8g2_GetDisplayWidth(u8g2);
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009918:	81fb      	strh	r3, [r7, #14]
    u8g2_DrawHLine(u8g2, x2, y, x1 - x2);
 800991a:	89b9      	ldrh	r1, [r7, #12]
 800991c:	8978      	ldrh	r0, [r7, #10]
 800991e:	89fa      	ldrh	r2, [r7, #14]
 8009920:	89bb      	ldrh	r3, [r7, #12]
 8009922:	1ad3      	subs	r3, r2, r3
 8009924:	b29b      	uxth	r3, r3
 8009926:	4602      	mov	r2, r0
 8009928:	6838      	ldr	r0, [r7, #0]
 800992a:	f7ff fbc3 	bl	80090b4 <u8g2_DrawHLine>
 800992e:	e00a      	b.n	8009946 <pg_hline+0xf2>
    return;
 8009930:	bf00      	nop
 8009932:	e008      	b.n	8009946 <pg_hline+0xf2>
    return;
 8009934:	bf00      	nop
 8009936:	e006      	b.n	8009946 <pg_hline+0xf2>
      return;
 8009938:	bf00      	nop
 800993a:	e004      	b.n	8009946 <pg_hline+0xf2>
      return;
 800993c:	bf00      	nop
 800993e:	e002      	b.n	8009946 <pg_hline+0xf2>
      return;
 8009940:	bf00      	nop
 8009942:	e000      	b.n	8009946 <pg_hline+0xf2>
      return;
 8009944:	bf00      	nop
  }
}
 8009946:	3710      	adds	r7, #16
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}

0800994c <pg_line_init>:

static void pg_line_init(pg_struct * const pg, uint8_t pge_index)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b088      	sub	sp, #32
 8009950:	af02      	add	r7, sp, #8
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	460b      	mov	r3, r1
 8009956:	70fb      	strb	r3, [r7, #3]
  struct pg_edge_struct  *pge = pg->pge+pge_index;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f103 011c 	add.w	r1, r3, #28
 800995e:	78fa      	ldrb	r2, [r7, #3]
 8009960:	4613      	mov	r3, r2
 8009962:	005b      	lsls	r3, r3, #1
 8009964:	4413      	add	r3, r2
 8009966:	00db      	lsls	r3, r3, #3
 8009968:	440b      	add	r3, r1
 800996a:	617b      	str	r3, [r7, #20]
  pg_word_t x1;
  pg_word_t y1;
  pg_word_t x2;
  pg_word_t y2;

  idx = pge->curr_idx;  
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	7d1b      	ldrb	r3, [r3, #20]
 8009970:	74fb      	strb	r3, [r7, #19]
  y1 = pg->list[idx].y;
 8009972:	7cfb      	ldrb	r3, [r7, #19]
 8009974:	687a      	ldr	r2, [r7, #4]
 8009976:	009b      	lsls	r3, r3, #2
 8009978:	4413      	add	r3, r2
 800997a:	885b      	ldrh	r3, [r3, #2]
 800997c:	823b      	strh	r3, [r7, #16]
  x1 = pg->list[idx].x;
 800997e:	7cfa      	ldrb	r2, [r7, #19]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8009986:	81fb      	strh	r3, [r7, #14]
  idx = pge->next_idx_fn(pg, idx);
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	691b      	ldr	r3, [r3, #16]
 800998c:	7cfa      	ldrb	r2, [r7, #19]
 800998e:	4611      	mov	r1, r2
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	4798      	blx	r3
 8009994:	4603      	mov	r3, r0
 8009996:	74fb      	strb	r3, [r7, #19]
  y2 = pg->list[idx].y;
 8009998:	7cfb      	ldrb	r3, [r7, #19]
 800999a:	687a      	ldr	r2, [r7, #4]
 800999c:	009b      	lsls	r3, r3, #2
 800999e:	4413      	add	r3, r2
 80099a0:	885b      	ldrh	r3, [r3, #2]
 80099a2:	81bb      	strh	r3, [r7, #12]
  x2 = pg->list[idx].x; 
 80099a4:	7cfa      	ldrb	r2, [r7, #19]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 80099ac:	817b      	strh	r3, [r7, #10]
  pge->curr_idx = idx;
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	7cfa      	ldrb	r2, [r7, #19]
 80099b2:	751a      	strb	r2, [r3, #20]
  
  pge_Init(pge, x1, y1, x2, y2);
 80099b4:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 80099b8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80099bc:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80099c0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80099c4:	9300      	str	r3, [sp, #0]
 80099c6:	4603      	mov	r3, r0
 80099c8:	6978      	ldr	r0, [r7, #20]
 80099ca:	f7ff fdde 	bl	800958a <pge_Init>
}
 80099ce:	bf00      	nop
 80099d0:	3718      	adds	r7, #24
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}

080099d6 <pg_exec>:

static void pg_exec(pg_struct *pg, u8g2_t *u8g2)
{
 80099d6:	b580      	push	{r7, lr}
 80099d8:	b084      	sub	sp, #16
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
 80099de:	6039      	str	r1, [r7, #0]
  pg_word_t i = pg->total_scan_line_cnt;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	8b5b      	ldrh	r3, [r3, #26]
 80099e4:	81fb      	strh	r3, [r7, #14]

  /* first line is skipped if the min y line is not flat */
  pg_line_init(pg, PG_LEFT);		
 80099e6:	2100      	movs	r1, #0
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f7ff ffaf 	bl	800994c <pg_line_init>
  pg_line_init(pg, PG_RIGHT);
 80099ee:	2101      	movs	r1, #1
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f7ff ffab 	bl	800994c <pg_line_init>
  
  if ( pg->is_min_y_not_flat != 0 )
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	7e5b      	ldrb	r3, [r3, #25]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d009      	beq.n	8009a12 <pg_exec+0x3c>
  {
    pge_Next(&(pg->pge[PG_LEFT])); 
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	331c      	adds	r3, #28
 8009a02:	4618      	mov	r0, r3
 8009a04:	f7ff fd6a 	bl	80094dc <pge_Next>
    pge_Next(&(pg->pge[PG_RIGHT]));
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	3334      	adds	r3, #52	; 0x34
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f7ff fd65 	bl	80094dc <pge_Next>
  }

  do
  {
    pg_hline(pg, u8g2);
 8009a12:	6839      	ldr	r1, [r7, #0]
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f7ff ff1d 	bl	8009854 <pg_hline>
    while ( pge_Next(&(pg->pge[PG_LEFT])) == 0 )
 8009a1a:	e003      	b.n	8009a24 <pg_exec+0x4e>
    {
      pg_line_init(pg, PG_LEFT);
 8009a1c:	2100      	movs	r1, #0
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f7ff ff94 	bl	800994c <pg_line_init>
    while ( pge_Next(&(pg->pge[PG_LEFT])) == 0 )
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	331c      	adds	r3, #28
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f7ff fd57 	bl	80094dc <pge_Next>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d0f3      	beq.n	8009a1c <pg_exec+0x46>
    }
    while ( pge_Next(&(pg->pge[PG_RIGHT])) == 0 )
 8009a34:	e003      	b.n	8009a3e <pg_exec+0x68>
    {
      pg_line_init(pg, PG_RIGHT);
 8009a36:	2101      	movs	r1, #1
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f7ff ff87 	bl	800994c <pg_line_init>
    while ( pge_Next(&(pg->pge[PG_RIGHT])) == 0 )
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	3334      	adds	r3, #52	; 0x34
 8009a42:	4618      	mov	r0, r3
 8009a44:	f7ff fd4a 	bl	80094dc <pge_Next>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d0f3      	beq.n	8009a36 <pg_exec+0x60>
    }
    i--;
 8009a4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	3b01      	subs	r3, #1
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	81fb      	strh	r3, [r7, #14]
  } while( i > 0 );
 8009a5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	dcd7      	bgt.n	8009a12 <pg_exec+0x3c>
}
 8009a62:	bf00      	nop
 8009a64:	bf00      	nop
 8009a66:	3710      	adds	r7, #16
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <pg_ClearPolygonXY>:

/*===========================================*/
/* API procedures */

static void pg_ClearPolygonXY(pg_struct *pg)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  pg->cnt = 0;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2200      	movs	r2, #0
 8009a78:	761a      	strb	r2, [r3, #24]
}
 8009a7a:	bf00      	nop
 8009a7c:	370c      	adds	r7, #12
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr

08009a86 <pg_AddPolygonXY>:

static void pg_AddPolygonXY(pg_struct *pg, int16_t x, int16_t y)
{
 8009a86:	b480      	push	{r7}
 8009a88:	b083      	sub	sp, #12
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	6078      	str	r0, [r7, #4]
 8009a8e:	460b      	mov	r3, r1
 8009a90:	807b      	strh	r3, [r7, #2]
 8009a92:	4613      	mov	r3, r2
 8009a94:	803b      	strh	r3, [r7, #0]
  if ( pg->cnt < PG_MAX_POINTS )
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	7e1b      	ldrb	r3, [r3, #24]
 8009a9a:	2b05      	cmp	r3, #5
 8009a9c:	d813      	bhi.n	8009ac6 <pg_AddPolygonXY+0x40>
  {
    pg->list[pg->cnt].x = x;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	7e1b      	ldrb	r3, [r3, #24]
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	887a      	ldrh	r2, [r7, #2]
 8009aa8:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    pg->list[pg->cnt].y = y;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	7e1b      	ldrb	r3, [r3, #24]
 8009ab0:	687a      	ldr	r2, [r7, #4]
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	4413      	add	r3, r2
 8009ab6:	883a      	ldrh	r2, [r7, #0]
 8009ab8:	805a      	strh	r2, [r3, #2]
    pg->cnt++;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	7e1b      	ldrb	r3, [r3, #24]
 8009abe:	3301      	adds	r3, #1
 8009ac0:	b2da      	uxtb	r2, r3
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	761a      	strb	r2, [r3, #24]
  }
}
 8009ac6:	bf00      	nop
 8009ac8:	370c      	adds	r7, #12
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr

08009ad2 <pg_DrawPolygon>:

static void pg_DrawPolygon(pg_struct *pg, u8g2_t *u8g2)
{
 8009ad2:	b580      	push	{r7, lr}
 8009ad4:	b082      	sub	sp, #8
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
 8009ada:	6039      	str	r1, [r7, #0]
  if ( pg_prepare(pg) == 0 )
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f7ff fe1d 	bl	800971c <pg_prepare>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d004      	beq.n	8009af2 <pg_DrawPolygon+0x20>
    return;
  pg_exec(pg, u8g2);
 8009ae8:	6839      	ldr	r1, [r7, #0]
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f7ff ff73 	bl	80099d6 <pg_exec>
 8009af0:	e000      	b.n	8009af4 <pg_DrawPolygon+0x22>
    return;
 8009af2:	bf00      	nop
}
 8009af4:	3708      	adds	r7, #8
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
	...

08009afc <u8g2_ClearPolygonXY>:

pg_struct u8g2_pg;

void u8g2_ClearPolygonXY(void)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	af00      	add	r7, sp, #0
  pg_ClearPolygonXY(&u8g2_pg);
 8009b00:	4802      	ldr	r0, [pc, #8]	; (8009b0c <u8g2_ClearPolygonXY+0x10>)
 8009b02:	f7ff ffb3 	bl	8009a6c <pg_ClearPolygonXY>
}
 8009b06:	bf00      	nop
 8009b08:	bd80      	pop	{r7, pc}
 8009b0a:	bf00      	nop
 8009b0c:	200006f4 	.word	0x200006f4

08009b10 <u8g2_AddPolygonXY>:

void u8g2_AddPolygonXY(U8X8_UNUSED u8g2_t *u8g2, int16_t x, int16_t y)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b082      	sub	sp, #8
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	460b      	mov	r3, r1
 8009b1a:	807b      	strh	r3, [r7, #2]
 8009b1c:	4613      	mov	r3, r2
 8009b1e:	803b      	strh	r3, [r7, #0]
  pg_AddPolygonXY(&u8g2_pg, x, y);
 8009b20:	f9b7 2000 	ldrsh.w	r2, [r7]
 8009b24:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009b28:	4619      	mov	r1, r3
 8009b2a:	4803      	ldr	r0, [pc, #12]	; (8009b38 <u8g2_AddPolygonXY+0x28>)
 8009b2c:	f7ff ffab 	bl	8009a86 <pg_AddPolygonXY>
}
 8009b30:	bf00      	nop
 8009b32:	3708      	adds	r7, #8
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}
 8009b38:	200006f4 	.word	0x200006f4

08009b3c <u8g2_DrawPolygon>:

void u8g2_DrawPolygon(u8g2_t *u8g2)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  pg_DrawPolygon(&u8g2_pg, u8g2);
 8009b44:	6879      	ldr	r1, [r7, #4]
 8009b46:	4803      	ldr	r0, [pc, #12]	; (8009b54 <u8g2_DrawPolygon+0x18>)
 8009b48:	f7ff ffc3 	bl	8009ad2 <pg_DrawPolygon>
}
 8009b4c:	bf00      	nop
 8009b4e:	3708      	adds	r7, #8
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}
 8009b54:	200006f4 	.word	0x200006f4

08009b58 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b082      	sub	sp, #8
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2200      	movs	r2, #0
 8009b64:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b76:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b88:	685b      	ldr	r3, [r3, #4]
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	4798      	blx	r3
}
 8009b8e:	bf00      	nop
 8009b90:	3708      	adds	r7, #8
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}

08009b96 <u8g2_SetClipWindow>:

void u8g2_SetClipWindow(u8g2_t *u8g2, u8g2_uint_t clip_x0, u8g2_uint_t clip_y0, u8g2_uint_t clip_x1, u8g2_uint_t clip_y1 )
{
 8009b96:	b580      	push	{r7, lr}
 8009b98:	b084      	sub	sp, #16
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	60f8      	str	r0, [r7, #12]
 8009b9e:	4608      	mov	r0, r1
 8009ba0:	4611      	mov	r1, r2
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	817b      	strh	r3, [r7, #10]
 8009ba8:	460b      	mov	r3, r1
 8009baa:	813b      	strh	r3, [r7, #8]
 8009bac:	4613      	mov	r3, r2
 8009bae:	80fb      	strh	r3, [r7, #6]
  u8g2->clip_x0 = clip_x0;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	897a      	ldrh	r2, [r7, #10]
 8009bb4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = clip_y0;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	893a      	ldrh	r2, [r7, #8]
 8009bbc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = clip_x1;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	88fa      	ldrh	r2, [r7, #6]
 8009bc4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = clip_y1;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	8b3a      	ldrh	r2, [r7, #24]
 8009bcc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  u8g2->cb->update_page_win(u8g2);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	68f8      	ldr	r0, [r7, #12]
 8009bd8:	4798      	blx	r3
}
 8009bda:	bf00      	nop
 8009bdc:	3710      	adds	r7, #16
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}

08009be2 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8009be2:	b580      	push	{r7, lr}
 8009be4:	b084      	sub	sp, #16
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	60f8      	str	r0, [r7, #12]
 8009bea:	60b9      	str	r1, [r7, #8]
 8009bec:	603b      	str	r3, [r7, #0]
 8009bee:	4613      	mov	r3, r2
 8009bf0:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	683a      	ldr	r2, [r7, #0]
 8009bfc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	68ba      	ldr	r2, [r7, #8]
 8009c02:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	79fa      	ldrb	r2, [r7, #7]
 8009c08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2200      	movs	r2, #0
 8009c18:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2200      	movs	r2, #0
 8009c28:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  u8g2->draw_color = 1;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	2201      	movs	r2, #1
 8009c30:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	2201      	movs	r2, #1
 8009c38:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	69ba      	ldr	r2, [r7, #24]
 8009c40:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	68f8      	ldr	r0, [r7, #12]
 8009c4a:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8009c4c:	68f8      	ldr	r0, [r7, #12]
 8009c4e:	f7ff ff83 	bl	8009b58 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8009c52:	68f8      	ldr	r0, [r7, #12]
 8009c54:	f7ff f892 	bl	8008d7c <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 8009c60:	bf00      	nop
 8009c62:	3710      	adds	r7, #16
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b085      	sub	sp, #20
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009c7c:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8009c7e:	89fb      	ldrh	r3, [r7, #14]
 8009c80:	00db      	lsls	r3, r3, #3
 8009c82:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	89fa      	ldrh	r2, [r7, #14]
 8009c88:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	7c1b      	ldrb	r3, [r3, #16]
 8009c8e:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8009c90:	89fb      	ldrh	r3, [r7, #14]
 8009c92:	00db      	lsls	r3, r3, #3
 8009c94:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	89fa      	ldrh	r2, [r7, #14]
 8009c9a:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009ca2:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8009ca4:	89fb      	ldrh	r3, [r7, #14]
 8009ca6:	00db      	lsls	r3, r3, #3
 8009ca8:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	89fa      	ldrh	r2, [r7, #14]
 8009cae:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009cb6:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8009cb8:	89fb      	ldrh	r3, [r7, #14]
 8009cba:	687a      	ldr	r2, [r7, #4]
 8009cbc:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8009cc0:	4413      	add	r3, r2
 8009cc2:	68ba      	ldr	r2, [r7, #8]
 8009cc4:	7c52      	ldrb	r2, [r2, #17]
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	dd08      	ble.n	8009cdc <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	7c5b      	ldrb	r3, [r3, #17]
 8009cce:	b29a      	uxth	r2, r3
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009cd6:	b29b      	uxth	r3, r3
 8009cd8:	1ad3      	subs	r3, r2, r3
 8009cda:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8009cdc:	89fb      	ldrh	r3, [r7, #14]
 8009cde:	00db      	lsls	r3, r3, #3
 8009ce0:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8009cfe:	89fb      	ldrh	r3, [r7, #14]
 8009d00:	4413      	add	r3, r2
 8009d02:	b29a      	uxth	r2, r3
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	8a9a      	ldrh	r2, [r3, #20]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	8ada      	ldrh	r2, [r3, #22]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8009d1e:	bf00      	nop
 8009d20:	3714      	adds	r7, #20
 8009d22:	46bd      	mov	sp, r7
 8009d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d28:	4770      	bx	lr

08009d2a <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8009d2a:	b580      	push	{r7, lr}
 8009d2c:	b084      	sub	sp, #16
 8009d2e:	af02      	add	r7, sp, #8
 8009d30:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009d4a:	9300      	str	r3, [sp, #0]
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f7ff fa5f 	bl	8009212 <u8g2_IsIntersection>
 8009d54:	4603      	mov	r3, r0
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d104      	bne.n	8009d64 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8009d62:	e03b      	b.n	8009ddc <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2201      	movs	r2, #1
 8009d68:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d205      	bcs.n	8009d88 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009d94:	429a      	cmp	r2, r3
 8009d96:	d905      	bls.n	8009da4 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d205      	bcs.n	8009dc0 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d905      	bls.n	8009ddc <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8009ddc:	bf00      	nop
 8009dde:	3708      	adds	r7, #8
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b082      	sub	sp, #8
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f7ff ff3b 	bl	8009c68 <u8g2_update_dimension_common>
}
 8009df2:	bf00      	nop
 8009df4:	3708      	adds	r7, #8
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}

08009dfa <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8009dfa:	b580      	push	{r7, lr}
 8009dfc:	b082      	sub	sp, #8
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2200      	movs	r2, #0
 8009e06:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f7ff ff7b 	bl	8009d2a <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8009e34:	bf00      	nop
 8009e36:	3708      	adds	r7, #8
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b086      	sub	sp, #24
 8009e40:	af02      	add	r7, sp, #8
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	4608      	mov	r0, r1
 8009e46:	4611      	mov	r1, r2
 8009e48:	461a      	mov	r2, r3
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	817b      	strh	r3, [r7, #10]
 8009e4e:	460b      	mov	r3, r1
 8009e50:	813b      	strh	r3, [r7, #8]
 8009e52:	4613      	mov	r3, r2
 8009e54:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8009e56:	88f8      	ldrh	r0, [r7, #6]
 8009e58:	893a      	ldrh	r2, [r7, #8]
 8009e5a:	8979      	ldrh	r1, [r7, #10]
 8009e5c:	7e3b      	ldrb	r3, [r7, #24]
 8009e5e:	9300      	str	r3, [sp, #0]
 8009e60:	4603      	mov	r3, r0
 8009e62:	68f8      	ldr	r0, [r7, #12]
 8009e64:	f7ff f87a 	bl	8008f5c <u8g2_draw_hv_line_2dir>
}
 8009e68:	bf00      	nop
 8009e6a:	3710      	adds	r7, #16
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b083      	sub	sp, #12
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8009e80:	bf00      	nop
 8009e82:	370c      	adds	r7, #12
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr

08009e8c <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	460b      	mov	r3, r1
 8009e96:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8009e98:	78fb      	ldrb	r3, [r7, #3]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d002      	beq.n	8009ea4 <u8x8_ascii_next+0x18>
 8009e9e:	78fb      	ldrb	r3, [r7, #3]
 8009ea0:	2b0a      	cmp	r3, #10
 8009ea2:	d102      	bne.n	8009eaa <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8009ea4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009ea8:	e001      	b.n	8009eae <u8x8_ascii_next+0x22>
  return b;
 8009eaa:	78fb      	ldrb	r3, [r7, #3]
 8009eac:	b29b      	uxth	r3, r3
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	370c      	adds	r7, #12
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr

08009eba <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8009eba:	b590      	push	{r4, r7, lr}
 8009ebc:	b085      	sub	sp, #20
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	60f8      	str	r0, [r7, #12]
 8009ec2:	460b      	mov	r3, r1
 8009ec4:	607a      	str	r2, [r7, #4]
 8009ec6:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	691c      	ldr	r4, [r3, #16]
 8009ecc:	7afa      	ldrb	r2, [r7, #11]
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2117      	movs	r1, #23
 8009ed2:	68f8      	ldr	r0, [r7, #12]
 8009ed4:	47a0      	blx	r4
 8009ed6:	4603      	mov	r3, r0
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3714      	adds	r7, #20
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd90      	pop	{r4, r7, pc}

08009ee0 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b082      	sub	sp, #8
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	460b      	mov	r3, r1
 8009eea:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8009eec:	1cfb      	adds	r3, r7, #3
 8009eee:	461a      	mov	r2, r3
 8009ef0:	2101      	movs	r1, #1
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f7ff ffe1 	bl	8009eba <u8x8_byte_SendBytes>
 8009ef8:	4603      	mov	r3, r0
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3708      	adds	r7, #8
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}

08009f02 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 8009f02:	b590      	push	{r4, r7, lr}
 8009f04:	b083      	sub	sp, #12
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	691c      	ldr	r4, [r3, #16]
 8009f0e:	2300      	movs	r3, #0
 8009f10:	2200      	movs	r2, #0
 8009f12:	2118      	movs	r1, #24
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	47a0      	blx	r4
 8009f18:	4603      	mov	r3, r0
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	370c      	adds	r7, #12
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd90      	pop	{r4, r7, pc}

08009f22 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 8009f22:	b590      	push	{r4, r7, lr}
 8009f24:	b083      	sub	sp, #12
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	691c      	ldr	r4, [r3, #16]
 8009f2e:	2300      	movs	r3, #0
 8009f30:	2200      	movs	r2, #0
 8009f32:	2119      	movs	r1, #25
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	47a0      	blx	r4
 8009f38:	4603      	mov	r3, r0
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	370c      	adds	r7, #12
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd90      	pop	{r4, r7, pc}

08009f42 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8009f42:	b590      	push	{r4, r7, lr}
 8009f44:	b083      	sub	sp, #12
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
 8009f4a:	460b      	mov	r3, r1
 8009f4c:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	68dc      	ldr	r4, [r3, #12]
 8009f52:	78fa      	ldrb	r2, [r7, #3]
 8009f54:	2300      	movs	r3, #0
 8009f56:	2115      	movs	r1, #21
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	47a0      	blx	r4
 8009f5c:	4603      	mov	r3, r0
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	370c      	adds	r7, #12
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd90      	pop	{r4, r7, pc}

08009f66 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8009f66:	b590      	push	{r4, r7, lr}
 8009f68:	b083      	sub	sp, #12
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	6078      	str	r0, [r7, #4]
 8009f6e:	460b      	mov	r3, r1
 8009f70:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	68dc      	ldr	r4, [r3, #12]
 8009f76:	78fa      	ldrb	r2, [r7, #3]
 8009f78:	2300      	movs	r3, #0
 8009f7a:	2116      	movs	r1, #22
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	47a0      	blx	r4
 8009f80:	4603      	mov	r3, r0
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	370c      	adds	r7, #12
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd90      	pop	{r4, r7, pc}

08009f8a <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8009f8a:	b590      	push	{r4, r7, lr}
 8009f8c:	b085      	sub	sp, #20
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	60f8      	str	r0, [r7, #12]
 8009f92:	460b      	mov	r3, r1
 8009f94:	607a      	str	r2, [r7, #4]
 8009f96:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	68dc      	ldr	r4, [r3, #12]
 8009f9c:	7afa      	ldrb	r2, [r7, #11]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2117      	movs	r1, #23
 8009fa2:	68f8      	ldr	r0, [r7, #12]
 8009fa4:	47a0      	blx	r4
 8009fa6:	4603      	mov	r3, r0
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3714      	adds	r7, #20
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd90      	pop	{r4, r7, pc}

08009fb0 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8009fb0:	b590      	push	{r4, r7, lr}
 8009fb2:	b083      	sub	sp, #12
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	68dc      	ldr	r4, [r3, #12]
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	2118      	movs	r1, #24
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	47a0      	blx	r4
 8009fc6:	4603      	mov	r3, r0
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	370c      	adds	r7, #12
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd90      	pop	{r4, r7, pc}

08009fd0 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8009fd0:	b590      	push	{r4, r7, lr}
 8009fd2:	b083      	sub	sp, #12
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	68dc      	ldr	r4, [r3, #12]
 8009fdc:	2300      	movs	r3, #0
 8009fde:	2200      	movs	r2, #0
 8009fe0:	2119      	movs	r1, #25
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	47a0      	blx	r4
 8009fe6:	4603      	mov	r3, r0
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	370c      	adds	r7, #12
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd90      	pop	{r4, r7, pc}

08009ff0 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8009ff0:	b590      	push	{r4, r7, lr}
 8009ff2:	b085      	sub	sp, #20
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	73fb      	strb	r3, [r7, #15]
    data++;
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	3301      	adds	r3, #1
 800a004:	603b      	str	r3, [r7, #0]
    switch( cmd )
 800a006:	7bfb      	ldrb	r3, [r7, #15]
 800a008:	2bfe      	cmp	r3, #254	; 0xfe
 800a00a:	d031      	beq.n	800a070 <u8x8_cad_SendSequence+0x80>
 800a00c:	2bfe      	cmp	r3, #254	; 0xfe
 800a00e:	dc3d      	bgt.n	800a08c <u8x8_cad_SendSequence+0x9c>
 800a010:	2b19      	cmp	r3, #25
 800a012:	dc3b      	bgt.n	800a08c <u8x8_cad_SendSequence+0x9c>
 800a014:	2b18      	cmp	r3, #24
 800a016:	da23      	bge.n	800a060 <u8x8_cad_SendSequence+0x70>
 800a018:	2b16      	cmp	r3, #22
 800a01a:	dc02      	bgt.n	800a022 <u8x8_cad_SendSequence+0x32>
 800a01c:	2b15      	cmp	r3, #21
 800a01e:	da03      	bge.n	800a028 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 800a020:	e034      	b.n	800a08c <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 800a022:	2b17      	cmp	r3, #23
 800a024:	d00e      	beq.n	800a044 <u8x8_cad_SendSequence+0x54>
	return;
 800a026:	e031      	b.n	800a08c <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	781b      	ldrb	r3, [r3, #0]
 800a02c:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	68dc      	ldr	r4, [r3, #12]
 800a032:	7bba      	ldrb	r2, [r7, #14]
 800a034:	7bf9      	ldrb	r1, [r7, #15]
 800a036:	2300      	movs	r3, #0
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	47a0      	blx	r4
	  data++;
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	3301      	adds	r3, #1
 800a040:	603b      	str	r3, [r7, #0]
	  break;
 800a042:	e022      	b.n	800a08a <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 800a04a:	f107 030e 	add.w	r3, r7, #14
 800a04e:	461a      	mov	r2, r3
 800a050:	2101      	movs	r1, #1
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f7ff ff99 	bl	8009f8a <u8x8_cad_SendData>
	  data++;
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	3301      	adds	r3, #1
 800a05c:	603b      	str	r3, [r7, #0]
	  break;
 800a05e:	e014      	b.n	800a08a <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	68dc      	ldr	r4, [r3, #12]
 800a064:	7bf9      	ldrb	r1, [r7, #15]
 800a066:	2300      	movs	r3, #0
 800a068:	2200      	movs	r2, #0
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	47a0      	blx	r4
	  break;
 800a06e:	e00c      	b.n	800a08a <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	781b      	ldrb	r3, [r3, #0]
 800a074:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 800a076:	7bbb      	ldrb	r3, [r7, #14]
 800a078:	461a      	mov	r2, r3
 800a07a:	2129      	movs	r1, #41	; 0x29
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 fa36 	bl	800a4ee <u8x8_gpio_call>
	  data++;
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	3301      	adds	r3, #1
 800a086:	603b      	str	r3, [r7, #0]
	  break;
 800a088:	bf00      	nop
    cmd = *data;
 800a08a:	e7b6      	b.n	8009ffa <u8x8_cad_SendSequence+0xa>
	return;
 800a08c:	bf00      	nop
    }
  }
}
 800a08e:	3714      	adds	r7, #20
 800a090:	46bd      	mov	sp, r7
 800a092:	bd90      	pop	{r4, r7, pc}

0800a094 <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 800a094:	b590      	push	{r4, r7, lr}
 800a096:	b085      	sub	sp, #20
 800a098:	af00      	add	r7, sp, #0
 800a09a:	60f8      	str	r0, [r7, #12]
 800a09c:	460b      	mov	r3, r1
 800a09e:	607a      	str	r2, [r7, #4]
 800a0a0:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 800a0a2:	68f8      	ldr	r0, [r7, #12]
 800a0a4:	f7ff ff2d 	bl	8009f02 <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 800a0a8:	2140      	movs	r1, #64	; 0x40
 800a0aa:	68f8      	ldr	r0, [r7, #12]
 800a0ac:	f7ff ff18 	bl	8009ee0 <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	691c      	ldr	r4, [r3, #16]
 800a0b4:	7afa      	ldrb	r2, [r7, #11]
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2117      	movs	r1, #23
 800a0ba:	68f8      	ldr	r0, [r7, #12]
 800a0bc:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 800a0be:	68f8      	ldr	r0, [r7, #12]
 800a0c0:	f7ff ff2f 	bl	8009f22 <u8x8_byte_EndTransfer>
}
 800a0c4:	bf00      	nop
 800a0c6:	3714      	adds	r7, #20
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd90      	pop	{r4, r7, pc}

0800a0cc <u8x8_cad_ssd13xx_fast_i2c>:
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800a0cc:	b590      	push	{r4, r7, lr}
 800a0ce:	b087      	sub	sp, #28
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	60f8      	str	r0, [r7, #12]
 800a0d4:	607b      	str	r3, [r7, #4]
 800a0d6:	460b      	mov	r3, r1
 800a0d8:	72fb      	strb	r3, [r7, #11]
 800a0da:	4613      	mov	r3, r2
 800a0dc:	72bb      	strb	r3, [r7, #10]
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 800a0de:	7afb      	ldrb	r3, [r7, #11]
 800a0e0:	3b14      	subs	r3, #20
 800a0e2:	2b05      	cmp	r3, #5
 800a0e4:	d86e      	bhi.n	800a1c4 <u8x8_cad_ssd13xx_fast_i2c+0xf8>
 800a0e6:	a201      	add	r2, pc, #4	; (adr r2, 800a0ec <u8x8_cad_ssd13xx_fast_i2c+0x20>)
 800a0e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ec:	0800a183 	.word	0x0800a183
 800a0f0:	0800a105 	.word	0x0800a105
 800a0f4:	0800a133 	.word	0x0800a133
 800a0f8:	0800a13f 	.word	0x0800a13f
 800a0fc:	0800a1a7 	.word	0x0800a1a7
 800a100:	0800a1af 	.word	0x0800a1af
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 800a104:	4b33      	ldr	r3, [pc, #204]	; (800a1d4 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d002      	beq.n	800a112 <u8x8_cad_ssd13xx_fast_i2c+0x46>
	 u8x8_byte_EndTransfer(u8x8); 
 800a10c:	68f8      	ldr	r0, [r7, #12]
 800a10e:	f7ff ff08 	bl	8009f22 <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
 800a112:	68f8      	ldr	r0, [r7, #12]
 800a114:	f7ff fef5 	bl	8009f02 <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 800a118:	2100      	movs	r1, #0
 800a11a:	68f8      	ldr	r0, [r7, #12]
 800a11c:	f7ff fee0 	bl	8009ee0 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 800a120:	7abb      	ldrb	r3, [r7, #10]
 800a122:	4619      	mov	r1, r3
 800a124:	68f8      	ldr	r0, [r7, #12]
 800a126:	f7ff fedb 	bl	8009ee0 <u8x8_byte_SendByte>
      in_transfer = 1;
 800a12a:	4b2a      	ldr	r3, [pc, #168]	; (800a1d4 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800a12c:	2201      	movs	r2, #1
 800a12e:	701a      	strb	r2, [r3, #0]
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
 800a130:	e04a      	b.n	800a1c8 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
 800a132:	7abb      	ldrb	r3, [r7, #10]
 800a134:	4619      	mov	r1, r3
 800a136:	68f8      	ldr	r0, [r7, #12]
 800a138:	f7ff fed2 	bl	8009ee0 <u8x8_byte_SendByte>
      break;      
 800a13c:	e044      	b.n	800a1c8 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
 800a13e:	4b25      	ldr	r3, [pc, #148]	; (800a1d4 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800a140:	781b      	ldrb	r3, [r3, #0]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d002      	beq.n	800a14c <u8x8_cad_ssd13xx_fast_i2c+0x80>
	u8x8_byte_EndTransfer(u8x8); 
 800a146:	68f8      	ldr	r0, [r7, #12]
 800a148:	f7ff feeb 	bl	8009f22 <u8x8_byte_EndTransfer>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 800a150:	e00a      	b.n	800a168 <u8x8_cad_ssd13xx_fast_i2c+0x9c>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 800a152:	697a      	ldr	r2, [r7, #20]
 800a154:	2118      	movs	r1, #24
 800a156:	68f8      	ldr	r0, [r7, #12]
 800a158:	f7ff ff9c 	bl	800a094 <u8x8_i2c_data_transfer>
	arg_int-=24;
 800a15c:	7abb      	ldrb	r3, [r7, #10]
 800a15e:	3b18      	subs	r3, #24
 800a160:	72bb      	strb	r3, [r7, #10]
	p+=24;
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	3318      	adds	r3, #24
 800a166:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 800a168:	7abb      	ldrb	r3, [r7, #10]
 800a16a:	2b18      	cmp	r3, #24
 800a16c:	d8f1      	bhi.n	800a152 <u8x8_cad_ssd13xx_fast_i2c+0x86>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 800a16e:	7abb      	ldrb	r3, [r7, #10]
 800a170:	697a      	ldr	r2, [r7, #20]
 800a172:	4619      	mov	r1, r3
 800a174:	68f8      	ldr	r0, [r7, #12]
 800a176:	f7ff ff8d 	bl	800a094 <u8x8_i2c_data_transfer>
      in_transfer = 0;
 800a17a:	4b16      	ldr	r3, [pc, #88]	; (800a1d4 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800a17c:	2200      	movs	r2, #0
 800a17e:	701a      	strb	r2, [r3, #0]
      break;
 800a180:	e022      	b.n	800a1c8 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a188:	2bff      	cmp	r3, #255	; 0xff
 800a18a:	d103      	bne.n	800a194 <u8x8_cad_ssd13xx_fast_i2c+0xc8>
	u8x8->i2c_address = 0x078;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2278      	movs	r2, #120	; 0x78
 800a190:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	691c      	ldr	r4, [r3, #16]
 800a198:	7aba      	ldrb	r2, [r7, #10]
 800a19a:	7af9      	ldrb	r1, [r7, #11]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	68f8      	ldr	r0, [r7, #12]
 800a1a0:	47a0      	blx	r4
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	e011      	b.n	800a1ca <u8x8_cad_ssd13xx_fast_i2c+0xfe>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
 800a1a6:	4b0b      	ldr	r3, [pc, #44]	; (800a1d4 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	701a      	strb	r2, [r3, #0]
      break;
 800a1ac:	e00c      	b.n	800a1c8 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 800a1ae:	4b09      	ldr	r3, [pc, #36]	; (800a1d4 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800a1b0:	781b      	ldrb	r3, [r3, #0]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d002      	beq.n	800a1bc <u8x8_cad_ssd13xx_fast_i2c+0xf0>
	u8x8_byte_EndTransfer(u8x8); 
 800a1b6:	68f8      	ldr	r0, [r7, #12]
 800a1b8:	f7ff feb3 	bl	8009f22 <u8x8_byte_EndTransfer>
      in_transfer = 0;
 800a1bc:	4b05      	ldr	r3, [pc, #20]	; (800a1d4 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800a1be:	2200      	movs	r2, #0
 800a1c0:	701a      	strb	r2, [r3, #0]
      break;
 800a1c2:	e001      	b.n	800a1c8 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    default:
      return 0;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	e000      	b.n	800a1ca <u8x8_cad_ssd13xx_fast_i2c+0xfe>
  }
  return 1;
 800a1c8:	2301      	movs	r3, #1
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	371c      	adds	r7, #28
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd90      	pop	{r4, r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	20000740 	.word	0x20000740

0800a1d8 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b086      	sub	sp, #24
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	60f8      	str	r0, [r7, #12]
 800a1e0:	607b      	str	r3, [r7, #4]
 800a1e2:	460b      	mov	r3, r1
 800a1e4:	72fb      	strb	r3, [r7, #11]
 800a1e6:	4613      	mov	r3, r2
 800a1e8:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 800a1ea:	7afb      	ldrb	r3, [r7, #11]
 800a1ec:	3b0b      	subs	r3, #11
 800a1ee:	2b04      	cmp	r3, #4
 800a1f0:	f200 808a 	bhi.w	800a308 <u8x8_d_ssd1306_sh1106_generic+0x130>
 800a1f4:	a201      	add	r2, pc, #4	; (adr r2, 800a1fc <u8x8_d_ssd1306_sh1106_generic+0x24>)
 800a1f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1fa:	bf00      	nop
 800a1fc:	0800a211 	.word	0x0800a211
 800a200:	0800a309 	.word	0x0800a309
 800a204:	0800a22b 	.word	0x0800a22b
 800a208:	0800a25d 	.word	0x0800a25d
 800a20c:	0800a27d 	.word	0x0800a27d
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 800a210:	7abb      	ldrb	r3, [r7, #10]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d104      	bne.n	800a220 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 800a216:	4940      	ldr	r1, [pc, #256]	; (800a318 <u8x8_d_ssd1306_sh1106_generic+0x140>)
 800a218:	68f8      	ldr	r0, [r7, #12]
 800a21a:	f7ff fee9 	bl	8009ff0 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 800a21e:	e075      	b.n	800a30c <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 800a220:	493e      	ldr	r1, [pc, #248]	; (800a31c <u8x8_d_ssd1306_sh1106_generic+0x144>)
 800a222:	68f8      	ldr	r0, [r7, #12]
 800a224:	f7ff fee4 	bl	8009ff0 <u8x8_cad_SendSequence>
      break;
 800a228:	e070      	b.n	800a30c <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 800a22a:	7abb      	ldrb	r3, [r7, #10]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d10a      	bne.n	800a246 <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 800a230:	493b      	ldr	r1, [pc, #236]	; (800a320 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 800a232:	68f8      	ldr	r0, [r7, #12]
 800a234:	f7ff fedc 	bl	8009ff0 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	7c9a      	ldrb	r2, [r3, #18]
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 800a244:	e062      	b.n	800a30c <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 800a246:	4937      	ldr	r1, [pc, #220]	; (800a324 <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 800a248:	68f8      	ldr	r0, [r7, #12]
 800a24a:	f7ff fed1 	bl	8009ff0 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	7cda      	ldrb	r2, [r3, #19]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 800a25a:	e057      	b.n	800a30c <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 800a25c:	68f8      	ldr	r0, [r7, #12]
 800a25e:	f7ff fea7 	bl	8009fb0 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 800a262:	2181      	movs	r1, #129	; 0x81
 800a264:	68f8      	ldr	r0, [r7, #12]
 800a266:	f7ff fe6c 	bl	8009f42 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 800a26a:	7abb      	ldrb	r3, [r7, #10]
 800a26c:	4619      	mov	r1, r3
 800a26e:	68f8      	ldr	r0, [r7, #12]
 800a270:	f7ff fe79 	bl	8009f66 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 800a274:	68f8      	ldr	r0, [r7, #12]
 800a276:	f7ff feab 	bl	8009fd0 <u8x8_cad_EndTransfer>
      break;
 800a27a:	e047      	b.n	800a30c <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 800a27c:	68f8      	ldr	r0, [r7, #12]
 800a27e:	f7ff fe97 	bl	8009fb0 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	795b      	ldrb	r3, [r3, #5]
 800a286:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 800a288:	7dfb      	ldrb	r3, [r7, #23]
 800a28a:	00db      	lsls	r3, r3, #3
 800a28c:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800a294:	7dfb      	ldrb	r3, [r7, #23]
 800a296:	4413      	add	r3, r2
 800a298:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 800a29a:	2140      	movs	r1, #64	; 0x40
 800a29c:	68f8      	ldr	r0, [r7, #12]
 800a29e:	f7ff fe50 	bl	8009f42 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 800a2a2:	7dfb      	ldrb	r3, [r7, #23]
 800a2a4:	091b      	lsrs	r3, r3, #4
 800a2a6:	b2db      	uxtb	r3, r3
 800a2a8:	f043 0310 	orr.w	r3, r3, #16
 800a2ac:	b2db      	uxtb	r3, r3
 800a2ae:	4619      	mov	r1, r3
 800a2b0:	68f8      	ldr	r0, [r7, #12]
 800a2b2:	f7ff fe46 	bl	8009f42 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 800a2b6:	7dfb      	ldrb	r3, [r7, #23]
 800a2b8:	f003 030f 	and.w	r3, r3, #15
 800a2bc:	b2db      	uxtb	r3, r3
 800a2be:	4619      	mov	r1, r3
 800a2c0:	68f8      	ldr	r0, [r7, #12]
 800a2c2:	f7ff fe50 	bl	8009f66 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	799b      	ldrb	r3, [r3, #6]
 800a2ca:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800a2ce:	b2db      	uxtb	r3, r3
 800a2d0:	4619      	mov	r1, r3
 800a2d2:	68f8      	ldr	r0, [r7, #12]
 800a2d4:	f7ff fe47 	bl	8009f66 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	791b      	ldrb	r3, [r3, #4]
 800a2dc:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 800a2e4:	7dbb      	ldrb	r3, [r7, #22]
 800a2e6:	00db      	lsls	r3, r3, #3
 800a2e8:	b2db      	uxtb	r3, r3
 800a2ea:	693a      	ldr	r2, [r7, #16]
 800a2ec:	4619      	mov	r1, r3
 800a2ee:	68f8      	ldr	r0, [r7, #12]
 800a2f0:	f7ff fe4b 	bl	8009f8a <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 800a2f4:	7abb      	ldrb	r3, [r7, #10]
 800a2f6:	3b01      	subs	r3, #1
 800a2f8:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 800a2fa:	7abb      	ldrb	r3, [r7, #10]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d1eb      	bne.n	800a2d8 <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 800a300:	68f8      	ldr	r0, [r7, #12]
 800a302:	f7ff fe65 	bl	8009fd0 <u8x8_cad_EndTransfer>
      break;
 800a306:	e001      	b.n	800a30c <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 800a308:	2300      	movs	r3, #0
 800a30a:	e000      	b.n	800a30e <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 800a30c:	2301      	movs	r3, #1
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3718      	adds	r7, #24
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
 800a316:	bf00      	nop
 800a318:	080109d8 	.word	0x080109d8
 800a31c:	080109e0 	.word	0x080109e0
 800a320:	080109e8 	.word	0x080109e8
 800a324:	080109f0 	.word	0x080109f0

0800a328 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b084      	sub	sp, #16
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	60f8      	str	r0, [r7, #12]
 800a330:	607b      	str	r3, [r7, #4]
 800a332:	460b      	mov	r3, r1
 800a334:	72fb      	strb	r3, [r7, #11]
 800a336:	4613      	mov	r3, r2
 800a338:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 800a33a:	7aba      	ldrb	r2, [r7, #10]
 800a33c:	7af9      	ldrb	r1, [r7, #11]
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	68f8      	ldr	r0, [r7, #12]
 800a342:	f7ff ff49 	bl	800a1d8 <u8x8_d_ssd1306_sh1106_generic>
 800a346:	4603      	mov	r3, r0
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d001      	beq.n	800a350 <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 800a34c:	2301      	movs	r3, #1
 800a34e:	e014      	b.n	800a37a <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 800a350:	7afb      	ldrb	r3, [r7, #11]
 800a352:	2b09      	cmp	r3, #9
 800a354:	d009      	beq.n	800a36a <u8x8_d_ssd1306_128x64_noname+0x42>
 800a356:	2b0a      	cmp	r3, #10
 800a358:	d10c      	bne.n	800a374 <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 800a35a:	68f8      	ldr	r0, [r7, #12]
 800a35c:	f000 f82a 	bl	800a3b4 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 800a360:	4908      	ldr	r1, [pc, #32]	; (800a384 <u8x8_d_ssd1306_128x64_noname+0x5c>)
 800a362:	68f8      	ldr	r0, [r7, #12]
 800a364:	f7ff fe44 	bl	8009ff0 <u8x8_cad_SendSequence>
      break;
 800a368:	e006      	b.n	800a378 <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 800a36a:	4907      	ldr	r1, [pc, #28]	; (800a388 <u8x8_d_ssd1306_128x64_noname+0x60>)
 800a36c:	68f8      	ldr	r0, [r7, #12]
 800a36e:	f000 f80d 	bl	800a38c <u8x8_d_helper_display_setup_memory>
      break;
 800a372:	e001      	b.n	800a378 <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 800a374:	2300      	movs	r3, #0
 800a376:	e000      	b.n	800a37a <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 800a378:	2301      	movs	r3, #1
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3710      	adds	r7, #16
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
 800a382:	bf00      	nop
 800a384:	080109a0 	.word	0x080109a0
 800a388:	080109f8 	.word	0x080109f8

0800a38c <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b083      	sub	sp, #12
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	683a      	ldr	r2, [r7, #0]
 800a39a:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	7c9a      	ldrb	r2, [r3, #18]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 800a3a8:	bf00      	nop
 800a3aa:	370c      	adds	r7, #12
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr

0800a3b4 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 800a3b4:	b590      	push	{r4, r7, lr}
 800a3b6:	b083      	sub	sp, #12
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	695c      	ldr	r4, [r3, #20]
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	2128      	movs	r1, #40	; 0x28
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	68dc      	ldr	r4, [r3, #12]
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	2114      	movs	r1, #20
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 800a3d8:	2201      	movs	r2, #1
 800a3da:	214b      	movs	r1, #75	; 0x4b
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f000 f886 	bl	800a4ee <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	791b      	ldrb	r3, [r3, #4]
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	2129      	movs	r1, #41	; 0x29
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f000 f87e 	bl	800a4ee <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	214b      	movs	r1, #75	; 0x4b
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f000 f879 	bl	800a4ee <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	791b      	ldrb	r3, [r3, #4]
 800a402:	461a      	mov	r2, r3
 800a404:	2129      	movs	r1, #41	; 0x29
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f000 f871 	bl	800a4ee <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 800a40c:	2201      	movs	r2, #1
 800a40e:	214b      	movs	r1, #75	; 0x4b
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f000 f86c 	bl	800a4ee <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	795b      	ldrb	r3, [r3, #5]
 800a41c:	461a      	mov	r2, r3
 800a41e:	2129      	movs	r1, #41	; 0x29
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f000 f864 	bl	800a4ee <u8x8_gpio_call>
}    
 800a426:	bf00      	nop
 800a428:	370c      	adds	r7, #12
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd90      	pop	{r4, r7, pc}

0800a42e <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 800a42e:	b590      	push	{r4, r7, lr}
 800a430:	b085      	sub	sp, #20
 800a432:	af00      	add	r7, sp, #0
 800a434:	6078      	str	r0, [r7, #4]
 800a436:	4608      	mov	r0, r1
 800a438:	4611      	mov	r1, r2
 800a43a:	461a      	mov	r2, r3
 800a43c:	4603      	mov	r3, r0
 800a43e:	70fb      	strb	r3, [r7, #3]
 800a440:	460b      	mov	r3, r1
 800a442:	70bb      	strb	r3, [r7, #2]
 800a444:	4613      	mov	r3, r2
 800a446:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 800a448:	78fb      	ldrb	r3, [r7, #3]
 800a44a:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 800a44c:	78bb      	ldrb	r3, [r7, #2]
 800a44e:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 800a450:	787b      	ldrb	r3, [r7, #1]
 800a452:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 800a454:	6a3b      	ldr	r3, [r7, #32]
 800a456:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	689c      	ldr	r4, [r3, #8]
 800a45c:	f107 0308 	add.w	r3, r7, #8
 800a460:	2201      	movs	r2, #1
 800a462:	210f      	movs	r1, #15
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	47a0      	blx	r4
 800a468:	4603      	mov	r3, r0
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3714      	adds	r7, #20
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd90      	pop	{r4, r7, pc}

0800a472 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 800a472:	b590      	push	{r4, r7, lr}
 800a474:	b083      	sub	sp, #12
 800a476:	af00      	add	r7, sp, #0
 800a478:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	689c      	ldr	r4, [r3, #8]
 800a47e:	2300      	movs	r3, #0
 800a480:	2200      	movs	r2, #0
 800a482:	2109      	movs	r1, #9
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	47a0      	blx	r4
}
 800a488:	bf00      	nop
 800a48a:	370c      	adds	r7, #12
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd90      	pop	{r4, r7, pc}

0800a490 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 800a490:	b590      	push	{r4, r7, lr}
 800a492:	b083      	sub	sp, #12
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	689c      	ldr	r4, [r3, #8]
 800a49c:	2300      	movs	r3, #0
 800a49e:	2200      	movs	r2, #0
 800a4a0:	210a      	movs	r1, #10
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 800a4a6:	bf00      	nop
 800a4a8:	370c      	adds	r7, #12
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd90      	pop	{r4, r7, pc}

0800a4ae <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 800a4ae:	b590      	push	{r4, r7, lr}
 800a4b0:	b083      	sub	sp, #12
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	6078      	str	r0, [r7, #4]
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	689c      	ldr	r4, [r3, #8]
 800a4be:	78fa      	ldrb	r2, [r7, #3]
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	210b      	movs	r1, #11
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	47a0      	blx	r4
}
 800a4c8:	bf00      	nop
 800a4ca:	370c      	adds	r7, #12
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd90      	pop	{r4, r7, pc}

0800a4d0 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 800a4d0:	b590      	push	{r4, r7, lr}
 800a4d2:	b083      	sub	sp, #12
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	689c      	ldr	r4, [r3, #8]
 800a4dc:	2300      	movs	r3, #0
 800a4de:	2200      	movs	r2, #0
 800a4e0:	2110      	movs	r1, #16
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	47a0      	blx	r4
}
 800a4e6:	bf00      	nop
 800a4e8:	370c      	adds	r7, #12
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd90      	pop	{r4, r7, pc}

0800a4ee <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 800a4ee:	b590      	push	{r4, r7, lr}
 800a4f0:	b083      	sub	sp, #12
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	6078      	str	r0, [r7, #4]
 800a4f6:	460b      	mov	r3, r1
 800a4f8:	70fb      	strb	r3, [r7, #3]
 800a4fa:	4613      	mov	r3, r2
 800a4fc:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	695c      	ldr	r4, [r3, #20]
 800a502:	78ba      	ldrb	r2, [r7, #2]
 800a504:	78f9      	ldrb	r1, [r7, #3]
 800a506:	2300      	movs	r3, #0
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	47a0      	blx	r4
}
 800a50c:	bf00      	nop
 800a50e:	370c      	adds	r7, #12
 800a510:	46bd      	mov	sp, r7
 800a512:	bd90      	pop	{r4, r7, pc}

0800a514 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 800a514:	b480      	push	{r7}
 800a516:	b085      	sub	sp, #20
 800a518:	af00      	add	r7, sp, #0
 800a51a:	60f8      	str	r0, [r7, #12]
 800a51c:	607b      	str	r3, [r7, #4]
 800a51e:	460b      	mov	r3, r1
 800a520:	72fb      	strb	r3, [r7, #11]
 800a522:	4613      	mov	r3, r2
 800a524:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 800a526:	2300      	movs	r3, #0
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3714      	adds	r7, #20
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr

0800a534 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 800a534:	b480      	push	{r7}
 800a536:	b083      	sub	sp, #12
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2200      	movs	r2, #0
 800a540:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	4a11      	ldr	r2, [pc, #68]	; (800a58c <u8x8_SetupDefaults+0x58>)
 800a546:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	4a10      	ldr	r2, [pc, #64]	; (800a58c <u8x8_SetupDefaults+0x58>)
 800a54c:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	4a0e      	ldr	r2, [pc, #56]	; (800a58c <u8x8_SetupDefaults+0x58>)
 800a552:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	4a0d      	ldr	r2, [pc, #52]	; (800a58c <u8x8_SetupDefaults+0x58>)
 800a558:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2200      	movs	r2, #0
 800a55e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2200      	movs	r2, #0
 800a566:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2200      	movs	r2, #0
 800a56e:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	22ff      	movs	r2, #255	; 0xff
 800a574:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	22ff      	movs	r2, #255	; 0xff
 800a57c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 800a580:	bf00      	nop
 800a582:	370c      	adds	r7, #12
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr
 800a58c:	0800a515 	.word	0x0800a515

0800a590 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b084      	sub	sp, #16
 800a594:	af00      	add	r7, sp, #0
 800a596:	60f8      	str	r0, [r7, #12]
 800a598:	60b9      	str	r1, [r7, #8]
 800a59a:	607a      	str	r2, [r7, #4]
 800a59c:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 800a59e:	68f8      	ldr	r0, [r7, #12]
 800a5a0:	f7ff ffc8 	bl	800a534 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	68ba      	ldr	r2, [r7, #8]
 800a5a8:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	687a      	ldr	r2, [r7, #4]
 800a5ae:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	683a      	ldr	r2, [r7, #0]
 800a5b4:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	69ba      	ldr	r2, [r7, #24]
 800a5ba:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 800a5bc:	68f8      	ldr	r0, [r7, #12]
 800a5be:	f7ff ff58 	bl	800a472 <u8x8_SetupMemory>
}
 800a5c2:	bf00      	nop
 800a5c4:	3710      	adds	r7, #16
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}
	...

0800a5cc <std>:
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	b510      	push	{r4, lr}
 800a5d0:	4604      	mov	r4, r0
 800a5d2:	e9c0 3300 	strd	r3, r3, [r0]
 800a5d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a5da:	6083      	str	r3, [r0, #8]
 800a5dc:	8181      	strh	r1, [r0, #12]
 800a5de:	6643      	str	r3, [r0, #100]	; 0x64
 800a5e0:	81c2      	strh	r2, [r0, #14]
 800a5e2:	6183      	str	r3, [r0, #24]
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	2208      	movs	r2, #8
 800a5e8:	305c      	adds	r0, #92	; 0x5c
 800a5ea:	f000 fa17 	bl	800aa1c <memset>
 800a5ee:	4b0d      	ldr	r3, [pc, #52]	; (800a624 <std+0x58>)
 800a5f0:	6263      	str	r3, [r4, #36]	; 0x24
 800a5f2:	4b0d      	ldr	r3, [pc, #52]	; (800a628 <std+0x5c>)
 800a5f4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a5f6:	4b0d      	ldr	r3, [pc, #52]	; (800a62c <std+0x60>)
 800a5f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a5fa:	4b0d      	ldr	r3, [pc, #52]	; (800a630 <std+0x64>)
 800a5fc:	6323      	str	r3, [r4, #48]	; 0x30
 800a5fe:	4b0d      	ldr	r3, [pc, #52]	; (800a634 <std+0x68>)
 800a600:	6224      	str	r4, [r4, #32]
 800a602:	429c      	cmp	r4, r3
 800a604:	d006      	beq.n	800a614 <std+0x48>
 800a606:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a60a:	4294      	cmp	r4, r2
 800a60c:	d002      	beq.n	800a614 <std+0x48>
 800a60e:	33d0      	adds	r3, #208	; 0xd0
 800a610:	429c      	cmp	r4, r3
 800a612:	d105      	bne.n	800a620 <std+0x54>
 800a614:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a61c:	f000 ba76 	b.w	800ab0c <__retarget_lock_init_recursive>
 800a620:	bd10      	pop	{r4, pc}
 800a622:	bf00      	nop
 800a624:	0800a86d 	.word	0x0800a86d
 800a628:	0800a88f 	.word	0x0800a88f
 800a62c:	0800a8c7 	.word	0x0800a8c7
 800a630:	0800a8eb 	.word	0x0800a8eb
 800a634:	20000744 	.word	0x20000744

0800a638 <stdio_exit_handler>:
 800a638:	4a02      	ldr	r2, [pc, #8]	; (800a644 <stdio_exit_handler+0xc>)
 800a63a:	4903      	ldr	r1, [pc, #12]	; (800a648 <stdio_exit_handler+0x10>)
 800a63c:	4803      	ldr	r0, [pc, #12]	; (800a64c <stdio_exit_handler+0x14>)
 800a63e:	f000 b869 	b.w	800a714 <_fwalk_sglue>
 800a642:	bf00      	nop
 800a644:	2000006c 	.word	0x2000006c
 800a648:	0800b685 	.word	0x0800b685
 800a64c:	20000078 	.word	0x20000078

0800a650 <cleanup_stdio>:
 800a650:	6841      	ldr	r1, [r0, #4]
 800a652:	4b0c      	ldr	r3, [pc, #48]	; (800a684 <cleanup_stdio+0x34>)
 800a654:	4299      	cmp	r1, r3
 800a656:	b510      	push	{r4, lr}
 800a658:	4604      	mov	r4, r0
 800a65a:	d001      	beq.n	800a660 <cleanup_stdio+0x10>
 800a65c:	f001 f812 	bl	800b684 <_fflush_r>
 800a660:	68a1      	ldr	r1, [r4, #8]
 800a662:	4b09      	ldr	r3, [pc, #36]	; (800a688 <cleanup_stdio+0x38>)
 800a664:	4299      	cmp	r1, r3
 800a666:	d002      	beq.n	800a66e <cleanup_stdio+0x1e>
 800a668:	4620      	mov	r0, r4
 800a66a:	f001 f80b 	bl	800b684 <_fflush_r>
 800a66e:	68e1      	ldr	r1, [r4, #12]
 800a670:	4b06      	ldr	r3, [pc, #24]	; (800a68c <cleanup_stdio+0x3c>)
 800a672:	4299      	cmp	r1, r3
 800a674:	d004      	beq.n	800a680 <cleanup_stdio+0x30>
 800a676:	4620      	mov	r0, r4
 800a678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a67c:	f001 b802 	b.w	800b684 <_fflush_r>
 800a680:	bd10      	pop	{r4, pc}
 800a682:	bf00      	nop
 800a684:	20000744 	.word	0x20000744
 800a688:	200007ac 	.word	0x200007ac
 800a68c:	20000814 	.word	0x20000814

0800a690 <global_stdio_init.part.0>:
 800a690:	b510      	push	{r4, lr}
 800a692:	4b0b      	ldr	r3, [pc, #44]	; (800a6c0 <global_stdio_init.part.0+0x30>)
 800a694:	4c0b      	ldr	r4, [pc, #44]	; (800a6c4 <global_stdio_init.part.0+0x34>)
 800a696:	4a0c      	ldr	r2, [pc, #48]	; (800a6c8 <global_stdio_init.part.0+0x38>)
 800a698:	601a      	str	r2, [r3, #0]
 800a69a:	4620      	mov	r0, r4
 800a69c:	2200      	movs	r2, #0
 800a69e:	2104      	movs	r1, #4
 800a6a0:	f7ff ff94 	bl	800a5cc <std>
 800a6a4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	2109      	movs	r1, #9
 800a6ac:	f7ff ff8e 	bl	800a5cc <std>
 800a6b0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a6b4:	2202      	movs	r2, #2
 800a6b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6ba:	2112      	movs	r1, #18
 800a6bc:	f7ff bf86 	b.w	800a5cc <std>
 800a6c0:	2000087c 	.word	0x2000087c
 800a6c4:	20000744 	.word	0x20000744
 800a6c8:	0800a639 	.word	0x0800a639

0800a6cc <__sfp_lock_acquire>:
 800a6cc:	4801      	ldr	r0, [pc, #4]	; (800a6d4 <__sfp_lock_acquire+0x8>)
 800a6ce:	f000 ba1e 	b.w	800ab0e <__retarget_lock_acquire_recursive>
 800a6d2:	bf00      	nop
 800a6d4:	20000885 	.word	0x20000885

0800a6d8 <__sfp_lock_release>:
 800a6d8:	4801      	ldr	r0, [pc, #4]	; (800a6e0 <__sfp_lock_release+0x8>)
 800a6da:	f000 ba19 	b.w	800ab10 <__retarget_lock_release_recursive>
 800a6de:	bf00      	nop
 800a6e0:	20000885 	.word	0x20000885

0800a6e4 <__sinit>:
 800a6e4:	b510      	push	{r4, lr}
 800a6e6:	4604      	mov	r4, r0
 800a6e8:	f7ff fff0 	bl	800a6cc <__sfp_lock_acquire>
 800a6ec:	6a23      	ldr	r3, [r4, #32]
 800a6ee:	b11b      	cbz	r3, 800a6f8 <__sinit+0x14>
 800a6f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6f4:	f7ff bff0 	b.w	800a6d8 <__sfp_lock_release>
 800a6f8:	4b04      	ldr	r3, [pc, #16]	; (800a70c <__sinit+0x28>)
 800a6fa:	6223      	str	r3, [r4, #32]
 800a6fc:	4b04      	ldr	r3, [pc, #16]	; (800a710 <__sinit+0x2c>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d1f5      	bne.n	800a6f0 <__sinit+0xc>
 800a704:	f7ff ffc4 	bl	800a690 <global_stdio_init.part.0>
 800a708:	e7f2      	b.n	800a6f0 <__sinit+0xc>
 800a70a:	bf00      	nop
 800a70c:	0800a651 	.word	0x0800a651
 800a710:	2000087c 	.word	0x2000087c

0800a714 <_fwalk_sglue>:
 800a714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a718:	4607      	mov	r7, r0
 800a71a:	4688      	mov	r8, r1
 800a71c:	4614      	mov	r4, r2
 800a71e:	2600      	movs	r6, #0
 800a720:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a724:	f1b9 0901 	subs.w	r9, r9, #1
 800a728:	d505      	bpl.n	800a736 <_fwalk_sglue+0x22>
 800a72a:	6824      	ldr	r4, [r4, #0]
 800a72c:	2c00      	cmp	r4, #0
 800a72e:	d1f7      	bne.n	800a720 <_fwalk_sglue+0xc>
 800a730:	4630      	mov	r0, r6
 800a732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a736:	89ab      	ldrh	r3, [r5, #12]
 800a738:	2b01      	cmp	r3, #1
 800a73a:	d907      	bls.n	800a74c <_fwalk_sglue+0x38>
 800a73c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a740:	3301      	adds	r3, #1
 800a742:	d003      	beq.n	800a74c <_fwalk_sglue+0x38>
 800a744:	4629      	mov	r1, r5
 800a746:	4638      	mov	r0, r7
 800a748:	47c0      	blx	r8
 800a74a:	4306      	orrs	r6, r0
 800a74c:	3568      	adds	r5, #104	; 0x68
 800a74e:	e7e9      	b.n	800a724 <_fwalk_sglue+0x10>

0800a750 <iprintf>:
 800a750:	b40f      	push	{r0, r1, r2, r3}
 800a752:	b507      	push	{r0, r1, r2, lr}
 800a754:	4906      	ldr	r1, [pc, #24]	; (800a770 <iprintf+0x20>)
 800a756:	ab04      	add	r3, sp, #16
 800a758:	6808      	ldr	r0, [r1, #0]
 800a75a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a75e:	6881      	ldr	r1, [r0, #8]
 800a760:	9301      	str	r3, [sp, #4]
 800a762:	f000 fc5f 	bl	800b024 <_vfiprintf_r>
 800a766:	b003      	add	sp, #12
 800a768:	f85d eb04 	ldr.w	lr, [sp], #4
 800a76c:	b004      	add	sp, #16
 800a76e:	4770      	bx	lr
 800a770:	200000c4 	.word	0x200000c4

0800a774 <_puts_r>:
 800a774:	6a03      	ldr	r3, [r0, #32]
 800a776:	b570      	push	{r4, r5, r6, lr}
 800a778:	6884      	ldr	r4, [r0, #8]
 800a77a:	4605      	mov	r5, r0
 800a77c:	460e      	mov	r6, r1
 800a77e:	b90b      	cbnz	r3, 800a784 <_puts_r+0x10>
 800a780:	f7ff ffb0 	bl	800a6e4 <__sinit>
 800a784:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a786:	07db      	lsls	r3, r3, #31
 800a788:	d405      	bmi.n	800a796 <_puts_r+0x22>
 800a78a:	89a3      	ldrh	r3, [r4, #12]
 800a78c:	0598      	lsls	r0, r3, #22
 800a78e:	d402      	bmi.n	800a796 <_puts_r+0x22>
 800a790:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a792:	f000 f9bc 	bl	800ab0e <__retarget_lock_acquire_recursive>
 800a796:	89a3      	ldrh	r3, [r4, #12]
 800a798:	0719      	lsls	r1, r3, #28
 800a79a:	d513      	bpl.n	800a7c4 <_puts_r+0x50>
 800a79c:	6923      	ldr	r3, [r4, #16]
 800a79e:	b18b      	cbz	r3, 800a7c4 <_puts_r+0x50>
 800a7a0:	3e01      	subs	r6, #1
 800a7a2:	68a3      	ldr	r3, [r4, #8]
 800a7a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a7a8:	3b01      	subs	r3, #1
 800a7aa:	60a3      	str	r3, [r4, #8]
 800a7ac:	b9e9      	cbnz	r1, 800a7ea <_puts_r+0x76>
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	da2e      	bge.n	800a810 <_puts_r+0x9c>
 800a7b2:	4622      	mov	r2, r4
 800a7b4:	210a      	movs	r1, #10
 800a7b6:	4628      	mov	r0, r5
 800a7b8:	f000 f89b 	bl	800a8f2 <__swbuf_r>
 800a7bc:	3001      	adds	r0, #1
 800a7be:	d007      	beq.n	800a7d0 <_puts_r+0x5c>
 800a7c0:	250a      	movs	r5, #10
 800a7c2:	e007      	b.n	800a7d4 <_puts_r+0x60>
 800a7c4:	4621      	mov	r1, r4
 800a7c6:	4628      	mov	r0, r5
 800a7c8:	f000 f8d0 	bl	800a96c <__swsetup_r>
 800a7cc:	2800      	cmp	r0, #0
 800a7ce:	d0e7      	beq.n	800a7a0 <_puts_r+0x2c>
 800a7d0:	f04f 35ff 	mov.w	r5, #4294967295
 800a7d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a7d6:	07da      	lsls	r2, r3, #31
 800a7d8:	d405      	bmi.n	800a7e6 <_puts_r+0x72>
 800a7da:	89a3      	ldrh	r3, [r4, #12]
 800a7dc:	059b      	lsls	r3, r3, #22
 800a7de:	d402      	bmi.n	800a7e6 <_puts_r+0x72>
 800a7e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a7e2:	f000 f995 	bl	800ab10 <__retarget_lock_release_recursive>
 800a7e6:	4628      	mov	r0, r5
 800a7e8:	bd70      	pop	{r4, r5, r6, pc}
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	da04      	bge.n	800a7f8 <_puts_r+0x84>
 800a7ee:	69a2      	ldr	r2, [r4, #24]
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	dc06      	bgt.n	800a802 <_puts_r+0x8e>
 800a7f4:	290a      	cmp	r1, #10
 800a7f6:	d004      	beq.n	800a802 <_puts_r+0x8e>
 800a7f8:	6823      	ldr	r3, [r4, #0]
 800a7fa:	1c5a      	adds	r2, r3, #1
 800a7fc:	6022      	str	r2, [r4, #0]
 800a7fe:	7019      	strb	r1, [r3, #0]
 800a800:	e7cf      	b.n	800a7a2 <_puts_r+0x2e>
 800a802:	4622      	mov	r2, r4
 800a804:	4628      	mov	r0, r5
 800a806:	f000 f874 	bl	800a8f2 <__swbuf_r>
 800a80a:	3001      	adds	r0, #1
 800a80c:	d1c9      	bne.n	800a7a2 <_puts_r+0x2e>
 800a80e:	e7df      	b.n	800a7d0 <_puts_r+0x5c>
 800a810:	6823      	ldr	r3, [r4, #0]
 800a812:	250a      	movs	r5, #10
 800a814:	1c5a      	adds	r2, r3, #1
 800a816:	6022      	str	r2, [r4, #0]
 800a818:	701d      	strb	r5, [r3, #0]
 800a81a:	e7db      	b.n	800a7d4 <_puts_r+0x60>

0800a81c <puts>:
 800a81c:	4b02      	ldr	r3, [pc, #8]	; (800a828 <puts+0xc>)
 800a81e:	4601      	mov	r1, r0
 800a820:	6818      	ldr	r0, [r3, #0]
 800a822:	f7ff bfa7 	b.w	800a774 <_puts_r>
 800a826:	bf00      	nop
 800a828:	200000c4 	.word	0x200000c4

0800a82c <siprintf>:
 800a82c:	b40e      	push	{r1, r2, r3}
 800a82e:	b500      	push	{lr}
 800a830:	b09c      	sub	sp, #112	; 0x70
 800a832:	ab1d      	add	r3, sp, #116	; 0x74
 800a834:	9002      	str	r0, [sp, #8]
 800a836:	9006      	str	r0, [sp, #24]
 800a838:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a83c:	4809      	ldr	r0, [pc, #36]	; (800a864 <siprintf+0x38>)
 800a83e:	9107      	str	r1, [sp, #28]
 800a840:	9104      	str	r1, [sp, #16]
 800a842:	4909      	ldr	r1, [pc, #36]	; (800a868 <siprintf+0x3c>)
 800a844:	f853 2b04 	ldr.w	r2, [r3], #4
 800a848:	9105      	str	r1, [sp, #20]
 800a84a:	6800      	ldr	r0, [r0, #0]
 800a84c:	9301      	str	r3, [sp, #4]
 800a84e:	a902      	add	r1, sp, #8
 800a850:	f000 fac0 	bl	800add4 <_svfiprintf_r>
 800a854:	9b02      	ldr	r3, [sp, #8]
 800a856:	2200      	movs	r2, #0
 800a858:	701a      	strb	r2, [r3, #0]
 800a85a:	b01c      	add	sp, #112	; 0x70
 800a85c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a860:	b003      	add	sp, #12
 800a862:	4770      	bx	lr
 800a864:	200000c4 	.word	0x200000c4
 800a868:	ffff0208 	.word	0xffff0208

0800a86c <__sread>:
 800a86c:	b510      	push	{r4, lr}
 800a86e:	460c      	mov	r4, r1
 800a870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a874:	f000 f8fc 	bl	800aa70 <_read_r>
 800a878:	2800      	cmp	r0, #0
 800a87a:	bfab      	itete	ge
 800a87c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a87e:	89a3      	ldrhlt	r3, [r4, #12]
 800a880:	181b      	addge	r3, r3, r0
 800a882:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a886:	bfac      	ite	ge
 800a888:	6563      	strge	r3, [r4, #84]	; 0x54
 800a88a:	81a3      	strhlt	r3, [r4, #12]
 800a88c:	bd10      	pop	{r4, pc}

0800a88e <__swrite>:
 800a88e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a892:	461f      	mov	r7, r3
 800a894:	898b      	ldrh	r3, [r1, #12]
 800a896:	05db      	lsls	r3, r3, #23
 800a898:	4605      	mov	r5, r0
 800a89a:	460c      	mov	r4, r1
 800a89c:	4616      	mov	r6, r2
 800a89e:	d505      	bpl.n	800a8ac <__swrite+0x1e>
 800a8a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8a4:	2302      	movs	r3, #2
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	f000 f8d0 	bl	800aa4c <_lseek_r>
 800a8ac:	89a3      	ldrh	r3, [r4, #12]
 800a8ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8b6:	81a3      	strh	r3, [r4, #12]
 800a8b8:	4632      	mov	r2, r6
 800a8ba:	463b      	mov	r3, r7
 800a8bc:	4628      	mov	r0, r5
 800a8be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8c2:	f000 b8e7 	b.w	800aa94 <_write_r>

0800a8c6 <__sseek>:
 800a8c6:	b510      	push	{r4, lr}
 800a8c8:	460c      	mov	r4, r1
 800a8ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8ce:	f000 f8bd 	bl	800aa4c <_lseek_r>
 800a8d2:	1c43      	adds	r3, r0, #1
 800a8d4:	89a3      	ldrh	r3, [r4, #12]
 800a8d6:	bf15      	itete	ne
 800a8d8:	6560      	strne	r0, [r4, #84]	; 0x54
 800a8da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a8de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a8e2:	81a3      	strheq	r3, [r4, #12]
 800a8e4:	bf18      	it	ne
 800a8e6:	81a3      	strhne	r3, [r4, #12]
 800a8e8:	bd10      	pop	{r4, pc}

0800a8ea <__sclose>:
 800a8ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8ee:	f000 b89d 	b.w	800aa2c <_close_r>

0800a8f2 <__swbuf_r>:
 800a8f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8f4:	460e      	mov	r6, r1
 800a8f6:	4614      	mov	r4, r2
 800a8f8:	4605      	mov	r5, r0
 800a8fa:	b118      	cbz	r0, 800a904 <__swbuf_r+0x12>
 800a8fc:	6a03      	ldr	r3, [r0, #32]
 800a8fe:	b90b      	cbnz	r3, 800a904 <__swbuf_r+0x12>
 800a900:	f7ff fef0 	bl	800a6e4 <__sinit>
 800a904:	69a3      	ldr	r3, [r4, #24]
 800a906:	60a3      	str	r3, [r4, #8]
 800a908:	89a3      	ldrh	r3, [r4, #12]
 800a90a:	071a      	lsls	r2, r3, #28
 800a90c:	d525      	bpl.n	800a95a <__swbuf_r+0x68>
 800a90e:	6923      	ldr	r3, [r4, #16]
 800a910:	b31b      	cbz	r3, 800a95a <__swbuf_r+0x68>
 800a912:	6823      	ldr	r3, [r4, #0]
 800a914:	6922      	ldr	r2, [r4, #16]
 800a916:	1a98      	subs	r0, r3, r2
 800a918:	6963      	ldr	r3, [r4, #20]
 800a91a:	b2f6      	uxtb	r6, r6
 800a91c:	4283      	cmp	r3, r0
 800a91e:	4637      	mov	r7, r6
 800a920:	dc04      	bgt.n	800a92c <__swbuf_r+0x3a>
 800a922:	4621      	mov	r1, r4
 800a924:	4628      	mov	r0, r5
 800a926:	f000 fead 	bl	800b684 <_fflush_r>
 800a92a:	b9e0      	cbnz	r0, 800a966 <__swbuf_r+0x74>
 800a92c:	68a3      	ldr	r3, [r4, #8]
 800a92e:	3b01      	subs	r3, #1
 800a930:	60a3      	str	r3, [r4, #8]
 800a932:	6823      	ldr	r3, [r4, #0]
 800a934:	1c5a      	adds	r2, r3, #1
 800a936:	6022      	str	r2, [r4, #0]
 800a938:	701e      	strb	r6, [r3, #0]
 800a93a:	6962      	ldr	r2, [r4, #20]
 800a93c:	1c43      	adds	r3, r0, #1
 800a93e:	429a      	cmp	r2, r3
 800a940:	d004      	beq.n	800a94c <__swbuf_r+0x5a>
 800a942:	89a3      	ldrh	r3, [r4, #12]
 800a944:	07db      	lsls	r3, r3, #31
 800a946:	d506      	bpl.n	800a956 <__swbuf_r+0x64>
 800a948:	2e0a      	cmp	r6, #10
 800a94a:	d104      	bne.n	800a956 <__swbuf_r+0x64>
 800a94c:	4621      	mov	r1, r4
 800a94e:	4628      	mov	r0, r5
 800a950:	f000 fe98 	bl	800b684 <_fflush_r>
 800a954:	b938      	cbnz	r0, 800a966 <__swbuf_r+0x74>
 800a956:	4638      	mov	r0, r7
 800a958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a95a:	4621      	mov	r1, r4
 800a95c:	4628      	mov	r0, r5
 800a95e:	f000 f805 	bl	800a96c <__swsetup_r>
 800a962:	2800      	cmp	r0, #0
 800a964:	d0d5      	beq.n	800a912 <__swbuf_r+0x20>
 800a966:	f04f 37ff 	mov.w	r7, #4294967295
 800a96a:	e7f4      	b.n	800a956 <__swbuf_r+0x64>

0800a96c <__swsetup_r>:
 800a96c:	b538      	push	{r3, r4, r5, lr}
 800a96e:	4b2a      	ldr	r3, [pc, #168]	; (800aa18 <__swsetup_r+0xac>)
 800a970:	4605      	mov	r5, r0
 800a972:	6818      	ldr	r0, [r3, #0]
 800a974:	460c      	mov	r4, r1
 800a976:	b118      	cbz	r0, 800a980 <__swsetup_r+0x14>
 800a978:	6a03      	ldr	r3, [r0, #32]
 800a97a:	b90b      	cbnz	r3, 800a980 <__swsetup_r+0x14>
 800a97c:	f7ff feb2 	bl	800a6e4 <__sinit>
 800a980:	89a3      	ldrh	r3, [r4, #12]
 800a982:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a986:	0718      	lsls	r0, r3, #28
 800a988:	d422      	bmi.n	800a9d0 <__swsetup_r+0x64>
 800a98a:	06d9      	lsls	r1, r3, #27
 800a98c:	d407      	bmi.n	800a99e <__swsetup_r+0x32>
 800a98e:	2309      	movs	r3, #9
 800a990:	602b      	str	r3, [r5, #0]
 800a992:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a996:	81a3      	strh	r3, [r4, #12]
 800a998:	f04f 30ff 	mov.w	r0, #4294967295
 800a99c:	e034      	b.n	800aa08 <__swsetup_r+0x9c>
 800a99e:	0758      	lsls	r0, r3, #29
 800a9a0:	d512      	bpl.n	800a9c8 <__swsetup_r+0x5c>
 800a9a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9a4:	b141      	cbz	r1, 800a9b8 <__swsetup_r+0x4c>
 800a9a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9aa:	4299      	cmp	r1, r3
 800a9ac:	d002      	beq.n	800a9b4 <__swsetup_r+0x48>
 800a9ae:	4628      	mov	r0, r5
 800a9b0:	f000 f8be 	bl	800ab30 <_free_r>
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	6363      	str	r3, [r4, #52]	; 0x34
 800a9b8:	89a3      	ldrh	r3, [r4, #12]
 800a9ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a9be:	81a3      	strh	r3, [r4, #12]
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	6063      	str	r3, [r4, #4]
 800a9c4:	6923      	ldr	r3, [r4, #16]
 800a9c6:	6023      	str	r3, [r4, #0]
 800a9c8:	89a3      	ldrh	r3, [r4, #12]
 800a9ca:	f043 0308 	orr.w	r3, r3, #8
 800a9ce:	81a3      	strh	r3, [r4, #12]
 800a9d0:	6923      	ldr	r3, [r4, #16]
 800a9d2:	b94b      	cbnz	r3, 800a9e8 <__swsetup_r+0x7c>
 800a9d4:	89a3      	ldrh	r3, [r4, #12]
 800a9d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a9da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9de:	d003      	beq.n	800a9e8 <__swsetup_r+0x7c>
 800a9e0:	4621      	mov	r1, r4
 800a9e2:	4628      	mov	r0, r5
 800a9e4:	f000 fe9c 	bl	800b720 <__smakebuf_r>
 800a9e8:	89a0      	ldrh	r0, [r4, #12]
 800a9ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a9ee:	f010 0301 	ands.w	r3, r0, #1
 800a9f2:	d00a      	beq.n	800aa0a <__swsetup_r+0x9e>
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	60a3      	str	r3, [r4, #8]
 800a9f8:	6963      	ldr	r3, [r4, #20]
 800a9fa:	425b      	negs	r3, r3
 800a9fc:	61a3      	str	r3, [r4, #24]
 800a9fe:	6923      	ldr	r3, [r4, #16]
 800aa00:	b943      	cbnz	r3, 800aa14 <__swsetup_r+0xa8>
 800aa02:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aa06:	d1c4      	bne.n	800a992 <__swsetup_r+0x26>
 800aa08:	bd38      	pop	{r3, r4, r5, pc}
 800aa0a:	0781      	lsls	r1, r0, #30
 800aa0c:	bf58      	it	pl
 800aa0e:	6963      	ldrpl	r3, [r4, #20]
 800aa10:	60a3      	str	r3, [r4, #8]
 800aa12:	e7f4      	b.n	800a9fe <__swsetup_r+0x92>
 800aa14:	2000      	movs	r0, #0
 800aa16:	e7f7      	b.n	800aa08 <__swsetup_r+0x9c>
 800aa18:	200000c4 	.word	0x200000c4

0800aa1c <memset>:
 800aa1c:	4402      	add	r2, r0
 800aa1e:	4603      	mov	r3, r0
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d100      	bne.n	800aa26 <memset+0xa>
 800aa24:	4770      	bx	lr
 800aa26:	f803 1b01 	strb.w	r1, [r3], #1
 800aa2a:	e7f9      	b.n	800aa20 <memset+0x4>

0800aa2c <_close_r>:
 800aa2c:	b538      	push	{r3, r4, r5, lr}
 800aa2e:	4d06      	ldr	r5, [pc, #24]	; (800aa48 <_close_r+0x1c>)
 800aa30:	2300      	movs	r3, #0
 800aa32:	4604      	mov	r4, r0
 800aa34:	4608      	mov	r0, r1
 800aa36:	602b      	str	r3, [r5, #0]
 800aa38:	f7f7 fe5b 	bl	80026f2 <_close>
 800aa3c:	1c43      	adds	r3, r0, #1
 800aa3e:	d102      	bne.n	800aa46 <_close_r+0x1a>
 800aa40:	682b      	ldr	r3, [r5, #0]
 800aa42:	b103      	cbz	r3, 800aa46 <_close_r+0x1a>
 800aa44:	6023      	str	r3, [r4, #0]
 800aa46:	bd38      	pop	{r3, r4, r5, pc}
 800aa48:	20000880 	.word	0x20000880

0800aa4c <_lseek_r>:
 800aa4c:	b538      	push	{r3, r4, r5, lr}
 800aa4e:	4d07      	ldr	r5, [pc, #28]	; (800aa6c <_lseek_r+0x20>)
 800aa50:	4604      	mov	r4, r0
 800aa52:	4608      	mov	r0, r1
 800aa54:	4611      	mov	r1, r2
 800aa56:	2200      	movs	r2, #0
 800aa58:	602a      	str	r2, [r5, #0]
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	f7f7 fe70 	bl	8002740 <_lseek>
 800aa60:	1c43      	adds	r3, r0, #1
 800aa62:	d102      	bne.n	800aa6a <_lseek_r+0x1e>
 800aa64:	682b      	ldr	r3, [r5, #0]
 800aa66:	b103      	cbz	r3, 800aa6a <_lseek_r+0x1e>
 800aa68:	6023      	str	r3, [r4, #0]
 800aa6a:	bd38      	pop	{r3, r4, r5, pc}
 800aa6c:	20000880 	.word	0x20000880

0800aa70 <_read_r>:
 800aa70:	b538      	push	{r3, r4, r5, lr}
 800aa72:	4d07      	ldr	r5, [pc, #28]	; (800aa90 <_read_r+0x20>)
 800aa74:	4604      	mov	r4, r0
 800aa76:	4608      	mov	r0, r1
 800aa78:	4611      	mov	r1, r2
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	602a      	str	r2, [r5, #0]
 800aa7e:	461a      	mov	r2, r3
 800aa80:	f7f7 fdfe 	bl	8002680 <_read>
 800aa84:	1c43      	adds	r3, r0, #1
 800aa86:	d102      	bne.n	800aa8e <_read_r+0x1e>
 800aa88:	682b      	ldr	r3, [r5, #0]
 800aa8a:	b103      	cbz	r3, 800aa8e <_read_r+0x1e>
 800aa8c:	6023      	str	r3, [r4, #0]
 800aa8e:	bd38      	pop	{r3, r4, r5, pc}
 800aa90:	20000880 	.word	0x20000880

0800aa94 <_write_r>:
 800aa94:	b538      	push	{r3, r4, r5, lr}
 800aa96:	4d07      	ldr	r5, [pc, #28]	; (800aab4 <_write_r+0x20>)
 800aa98:	4604      	mov	r4, r0
 800aa9a:	4608      	mov	r0, r1
 800aa9c:	4611      	mov	r1, r2
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	602a      	str	r2, [r5, #0]
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	f7f7 fe09 	bl	80026ba <_write>
 800aaa8:	1c43      	adds	r3, r0, #1
 800aaaa:	d102      	bne.n	800aab2 <_write_r+0x1e>
 800aaac:	682b      	ldr	r3, [r5, #0]
 800aaae:	b103      	cbz	r3, 800aab2 <_write_r+0x1e>
 800aab0:	6023      	str	r3, [r4, #0]
 800aab2:	bd38      	pop	{r3, r4, r5, pc}
 800aab4:	20000880 	.word	0x20000880

0800aab8 <__errno>:
 800aab8:	4b01      	ldr	r3, [pc, #4]	; (800aac0 <__errno+0x8>)
 800aaba:	6818      	ldr	r0, [r3, #0]
 800aabc:	4770      	bx	lr
 800aabe:	bf00      	nop
 800aac0:	200000c4 	.word	0x200000c4

0800aac4 <__libc_init_array>:
 800aac4:	b570      	push	{r4, r5, r6, lr}
 800aac6:	4d0d      	ldr	r5, [pc, #52]	; (800aafc <__libc_init_array+0x38>)
 800aac8:	4c0d      	ldr	r4, [pc, #52]	; (800ab00 <__libc_init_array+0x3c>)
 800aaca:	1b64      	subs	r4, r4, r5
 800aacc:	10a4      	asrs	r4, r4, #2
 800aace:	2600      	movs	r6, #0
 800aad0:	42a6      	cmp	r6, r4
 800aad2:	d109      	bne.n	800aae8 <__libc_init_array+0x24>
 800aad4:	4d0b      	ldr	r5, [pc, #44]	; (800ab04 <__libc_init_array+0x40>)
 800aad6:	4c0c      	ldr	r4, [pc, #48]	; (800ab08 <__libc_init_array+0x44>)
 800aad8:	f003 f864 	bl	800dba4 <_init>
 800aadc:	1b64      	subs	r4, r4, r5
 800aade:	10a4      	asrs	r4, r4, #2
 800aae0:	2600      	movs	r6, #0
 800aae2:	42a6      	cmp	r6, r4
 800aae4:	d105      	bne.n	800aaf2 <__libc_init_array+0x2e>
 800aae6:	bd70      	pop	{r4, r5, r6, pc}
 800aae8:	f855 3b04 	ldr.w	r3, [r5], #4
 800aaec:	4798      	blx	r3
 800aaee:	3601      	adds	r6, #1
 800aaf0:	e7ee      	b.n	800aad0 <__libc_init_array+0xc>
 800aaf2:	f855 3b04 	ldr.w	r3, [r5], #4
 800aaf6:	4798      	blx	r3
 800aaf8:	3601      	adds	r6, #1
 800aafa:	e7f2      	b.n	800aae2 <__libc_init_array+0x1e>
 800aafc:	08011010 	.word	0x08011010
 800ab00:	08011010 	.word	0x08011010
 800ab04:	08011010 	.word	0x08011010
 800ab08:	08011014 	.word	0x08011014

0800ab0c <__retarget_lock_init_recursive>:
 800ab0c:	4770      	bx	lr

0800ab0e <__retarget_lock_acquire_recursive>:
 800ab0e:	4770      	bx	lr

0800ab10 <__retarget_lock_release_recursive>:
 800ab10:	4770      	bx	lr

0800ab12 <memcpy>:
 800ab12:	440a      	add	r2, r1
 800ab14:	4291      	cmp	r1, r2
 800ab16:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab1a:	d100      	bne.n	800ab1e <memcpy+0xc>
 800ab1c:	4770      	bx	lr
 800ab1e:	b510      	push	{r4, lr}
 800ab20:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab24:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab28:	4291      	cmp	r1, r2
 800ab2a:	d1f9      	bne.n	800ab20 <memcpy+0xe>
 800ab2c:	bd10      	pop	{r4, pc}
	...

0800ab30 <_free_r>:
 800ab30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab32:	2900      	cmp	r1, #0
 800ab34:	d044      	beq.n	800abc0 <_free_r+0x90>
 800ab36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab3a:	9001      	str	r0, [sp, #4]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	f1a1 0404 	sub.w	r4, r1, #4
 800ab42:	bfb8      	it	lt
 800ab44:	18e4      	addlt	r4, r4, r3
 800ab46:	f000 f8df 	bl	800ad08 <__malloc_lock>
 800ab4a:	4a1e      	ldr	r2, [pc, #120]	; (800abc4 <_free_r+0x94>)
 800ab4c:	9801      	ldr	r0, [sp, #4]
 800ab4e:	6813      	ldr	r3, [r2, #0]
 800ab50:	b933      	cbnz	r3, 800ab60 <_free_r+0x30>
 800ab52:	6063      	str	r3, [r4, #4]
 800ab54:	6014      	str	r4, [r2, #0]
 800ab56:	b003      	add	sp, #12
 800ab58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab5c:	f000 b8da 	b.w	800ad14 <__malloc_unlock>
 800ab60:	42a3      	cmp	r3, r4
 800ab62:	d908      	bls.n	800ab76 <_free_r+0x46>
 800ab64:	6825      	ldr	r5, [r4, #0]
 800ab66:	1961      	adds	r1, r4, r5
 800ab68:	428b      	cmp	r3, r1
 800ab6a:	bf01      	itttt	eq
 800ab6c:	6819      	ldreq	r1, [r3, #0]
 800ab6e:	685b      	ldreq	r3, [r3, #4]
 800ab70:	1949      	addeq	r1, r1, r5
 800ab72:	6021      	streq	r1, [r4, #0]
 800ab74:	e7ed      	b.n	800ab52 <_free_r+0x22>
 800ab76:	461a      	mov	r2, r3
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	b10b      	cbz	r3, 800ab80 <_free_r+0x50>
 800ab7c:	42a3      	cmp	r3, r4
 800ab7e:	d9fa      	bls.n	800ab76 <_free_r+0x46>
 800ab80:	6811      	ldr	r1, [r2, #0]
 800ab82:	1855      	adds	r5, r2, r1
 800ab84:	42a5      	cmp	r5, r4
 800ab86:	d10b      	bne.n	800aba0 <_free_r+0x70>
 800ab88:	6824      	ldr	r4, [r4, #0]
 800ab8a:	4421      	add	r1, r4
 800ab8c:	1854      	adds	r4, r2, r1
 800ab8e:	42a3      	cmp	r3, r4
 800ab90:	6011      	str	r1, [r2, #0]
 800ab92:	d1e0      	bne.n	800ab56 <_free_r+0x26>
 800ab94:	681c      	ldr	r4, [r3, #0]
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	6053      	str	r3, [r2, #4]
 800ab9a:	440c      	add	r4, r1
 800ab9c:	6014      	str	r4, [r2, #0]
 800ab9e:	e7da      	b.n	800ab56 <_free_r+0x26>
 800aba0:	d902      	bls.n	800aba8 <_free_r+0x78>
 800aba2:	230c      	movs	r3, #12
 800aba4:	6003      	str	r3, [r0, #0]
 800aba6:	e7d6      	b.n	800ab56 <_free_r+0x26>
 800aba8:	6825      	ldr	r5, [r4, #0]
 800abaa:	1961      	adds	r1, r4, r5
 800abac:	428b      	cmp	r3, r1
 800abae:	bf04      	itt	eq
 800abb0:	6819      	ldreq	r1, [r3, #0]
 800abb2:	685b      	ldreq	r3, [r3, #4]
 800abb4:	6063      	str	r3, [r4, #4]
 800abb6:	bf04      	itt	eq
 800abb8:	1949      	addeq	r1, r1, r5
 800abba:	6021      	streq	r1, [r4, #0]
 800abbc:	6054      	str	r4, [r2, #4]
 800abbe:	e7ca      	b.n	800ab56 <_free_r+0x26>
 800abc0:	b003      	add	sp, #12
 800abc2:	bd30      	pop	{r4, r5, pc}
 800abc4:	20000888 	.word	0x20000888

0800abc8 <sbrk_aligned>:
 800abc8:	b570      	push	{r4, r5, r6, lr}
 800abca:	4e0e      	ldr	r6, [pc, #56]	; (800ac04 <sbrk_aligned+0x3c>)
 800abcc:	460c      	mov	r4, r1
 800abce:	6831      	ldr	r1, [r6, #0]
 800abd0:	4605      	mov	r5, r0
 800abd2:	b911      	cbnz	r1, 800abda <sbrk_aligned+0x12>
 800abd4:	f000 fe1c 	bl	800b810 <_sbrk_r>
 800abd8:	6030      	str	r0, [r6, #0]
 800abda:	4621      	mov	r1, r4
 800abdc:	4628      	mov	r0, r5
 800abde:	f000 fe17 	bl	800b810 <_sbrk_r>
 800abe2:	1c43      	adds	r3, r0, #1
 800abe4:	d00a      	beq.n	800abfc <sbrk_aligned+0x34>
 800abe6:	1cc4      	adds	r4, r0, #3
 800abe8:	f024 0403 	bic.w	r4, r4, #3
 800abec:	42a0      	cmp	r0, r4
 800abee:	d007      	beq.n	800ac00 <sbrk_aligned+0x38>
 800abf0:	1a21      	subs	r1, r4, r0
 800abf2:	4628      	mov	r0, r5
 800abf4:	f000 fe0c 	bl	800b810 <_sbrk_r>
 800abf8:	3001      	adds	r0, #1
 800abfa:	d101      	bne.n	800ac00 <sbrk_aligned+0x38>
 800abfc:	f04f 34ff 	mov.w	r4, #4294967295
 800ac00:	4620      	mov	r0, r4
 800ac02:	bd70      	pop	{r4, r5, r6, pc}
 800ac04:	2000088c 	.word	0x2000088c

0800ac08 <_malloc_r>:
 800ac08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac0c:	1ccd      	adds	r5, r1, #3
 800ac0e:	f025 0503 	bic.w	r5, r5, #3
 800ac12:	3508      	adds	r5, #8
 800ac14:	2d0c      	cmp	r5, #12
 800ac16:	bf38      	it	cc
 800ac18:	250c      	movcc	r5, #12
 800ac1a:	2d00      	cmp	r5, #0
 800ac1c:	4607      	mov	r7, r0
 800ac1e:	db01      	blt.n	800ac24 <_malloc_r+0x1c>
 800ac20:	42a9      	cmp	r1, r5
 800ac22:	d905      	bls.n	800ac30 <_malloc_r+0x28>
 800ac24:	230c      	movs	r3, #12
 800ac26:	603b      	str	r3, [r7, #0]
 800ac28:	2600      	movs	r6, #0
 800ac2a:	4630      	mov	r0, r6
 800ac2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac30:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ad04 <_malloc_r+0xfc>
 800ac34:	f000 f868 	bl	800ad08 <__malloc_lock>
 800ac38:	f8d8 3000 	ldr.w	r3, [r8]
 800ac3c:	461c      	mov	r4, r3
 800ac3e:	bb5c      	cbnz	r4, 800ac98 <_malloc_r+0x90>
 800ac40:	4629      	mov	r1, r5
 800ac42:	4638      	mov	r0, r7
 800ac44:	f7ff ffc0 	bl	800abc8 <sbrk_aligned>
 800ac48:	1c43      	adds	r3, r0, #1
 800ac4a:	4604      	mov	r4, r0
 800ac4c:	d155      	bne.n	800acfa <_malloc_r+0xf2>
 800ac4e:	f8d8 4000 	ldr.w	r4, [r8]
 800ac52:	4626      	mov	r6, r4
 800ac54:	2e00      	cmp	r6, #0
 800ac56:	d145      	bne.n	800ace4 <_malloc_r+0xdc>
 800ac58:	2c00      	cmp	r4, #0
 800ac5a:	d048      	beq.n	800acee <_malloc_r+0xe6>
 800ac5c:	6823      	ldr	r3, [r4, #0]
 800ac5e:	4631      	mov	r1, r6
 800ac60:	4638      	mov	r0, r7
 800ac62:	eb04 0903 	add.w	r9, r4, r3
 800ac66:	f000 fdd3 	bl	800b810 <_sbrk_r>
 800ac6a:	4581      	cmp	r9, r0
 800ac6c:	d13f      	bne.n	800acee <_malloc_r+0xe6>
 800ac6e:	6821      	ldr	r1, [r4, #0]
 800ac70:	1a6d      	subs	r5, r5, r1
 800ac72:	4629      	mov	r1, r5
 800ac74:	4638      	mov	r0, r7
 800ac76:	f7ff ffa7 	bl	800abc8 <sbrk_aligned>
 800ac7a:	3001      	adds	r0, #1
 800ac7c:	d037      	beq.n	800acee <_malloc_r+0xe6>
 800ac7e:	6823      	ldr	r3, [r4, #0]
 800ac80:	442b      	add	r3, r5
 800ac82:	6023      	str	r3, [r4, #0]
 800ac84:	f8d8 3000 	ldr.w	r3, [r8]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d038      	beq.n	800acfe <_malloc_r+0xf6>
 800ac8c:	685a      	ldr	r2, [r3, #4]
 800ac8e:	42a2      	cmp	r2, r4
 800ac90:	d12b      	bne.n	800acea <_malloc_r+0xe2>
 800ac92:	2200      	movs	r2, #0
 800ac94:	605a      	str	r2, [r3, #4]
 800ac96:	e00f      	b.n	800acb8 <_malloc_r+0xb0>
 800ac98:	6822      	ldr	r2, [r4, #0]
 800ac9a:	1b52      	subs	r2, r2, r5
 800ac9c:	d41f      	bmi.n	800acde <_malloc_r+0xd6>
 800ac9e:	2a0b      	cmp	r2, #11
 800aca0:	d917      	bls.n	800acd2 <_malloc_r+0xca>
 800aca2:	1961      	adds	r1, r4, r5
 800aca4:	42a3      	cmp	r3, r4
 800aca6:	6025      	str	r5, [r4, #0]
 800aca8:	bf18      	it	ne
 800acaa:	6059      	strne	r1, [r3, #4]
 800acac:	6863      	ldr	r3, [r4, #4]
 800acae:	bf08      	it	eq
 800acb0:	f8c8 1000 	streq.w	r1, [r8]
 800acb4:	5162      	str	r2, [r4, r5]
 800acb6:	604b      	str	r3, [r1, #4]
 800acb8:	4638      	mov	r0, r7
 800acba:	f104 060b 	add.w	r6, r4, #11
 800acbe:	f000 f829 	bl	800ad14 <__malloc_unlock>
 800acc2:	f026 0607 	bic.w	r6, r6, #7
 800acc6:	1d23      	adds	r3, r4, #4
 800acc8:	1af2      	subs	r2, r6, r3
 800acca:	d0ae      	beq.n	800ac2a <_malloc_r+0x22>
 800accc:	1b9b      	subs	r3, r3, r6
 800acce:	50a3      	str	r3, [r4, r2]
 800acd0:	e7ab      	b.n	800ac2a <_malloc_r+0x22>
 800acd2:	42a3      	cmp	r3, r4
 800acd4:	6862      	ldr	r2, [r4, #4]
 800acd6:	d1dd      	bne.n	800ac94 <_malloc_r+0x8c>
 800acd8:	f8c8 2000 	str.w	r2, [r8]
 800acdc:	e7ec      	b.n	800acb8 <_malloc_r+0xb0>
 800acde:	4623      	mov	r3, r4
 800ace0:	6864      	ldr	r4, [r4, #4]
 800ace2:	e7ac      	b.n	800ac3e <_malloc_r+0x36>
 800ace4:	4634      	mov	r4, r6
 800ace6:	6876      	ldr	r6, [r6, #4]
 800ace8:	e7b4      	b.n	800ac54 <_malloc_r+0x4c>
 800acea:	4613      	mov	r3, r2
 800acec:	e7cc      	b.n	800ac88 <_malloc_r+0x80>
 800acee:	230c      	movs	r3, #12
 800acf0:	603b      	str	r3, [r7, #0]
 800acf2:	4638      	mov	r0, r7
 800acf4:	f000 f80e 	bl	800ad14 <__malloc_unlock>
 800acf8:	e797      	b.n	800ac2a <_malloc_r+0x22>
 800acfa:	6025      	str	r5, [r4, #0]
 800acfc:	e7dc      	b.n	800acb8 <_malloc_r+0xb0>
 800acfe:	605b      	str	r3, [r3, #4]
 800ad00:	deff      	udf	#255	; 0xff
 800ad02:	bf00      	nop
 800ad04:	20000888 	.word	0x20000888

0800ad08 <__malloc_lock>:
 800ad08:	4801      	ldr	r0, [pc, #4]	; (800ad10 <__malloc_lock+0x8>)
 800ad0a:	f7ff bf00 	b.w	800ab0e <__retarget_lock_acquire_recursive>
 800ad0e:	bf00      	nop
 800ad10:	20000884 	.word	0x20000884

0800ad14 <__malloc_unlock>:
 800ad14:	4801      	ldr	r0, [pc, #4]	; (800ad1c <__malloc_unlock+0x8>)
 800ad16:	f7ff befb 	b.w	800ab10 <__retarget_lock_release_recursive>
 800ad1a:	bf00      	nop
 800ad1c:	20000884 	.word	0x20000884

0800ad20 <__ssputs_r>:
 800ad20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad24:	688e      	ldr	r6, [r1, #8]
 800ad26:	461f      	mov	r7, r3
 800ad28:	42be      	cmp	r6, r7
 800ad2a:	680b      	ldr	r3, [r1, #0]
 800ad2c:	4682      	mov	sl, r0
 800ad2e:	460c      	mov	r4, r1
 800ad30:	4690      	mov	r8, r2
 800ad32:	d82c      	bhi.n	800ad8e <__ssputs_r+0x6e>
 800ad34:	898a      	ldrh	r2, [r1, #12]
 800ad36:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ad3a:	d026      	beq.n	800ad8a <__ssputs_r+0x6a>
 800ad3c:	6965      	ldr	r5, [r4, #20]
 800ad3e:	6909      	ldr	r1, [r1, #16]
 800ad40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad44:	eba3 0901 	sub.w	r9, r3, r1
 800ad48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad4c:	1c7b      	adds	r3, r7, #1
 800ad4e:	444b      	add	r3, r9
 800ad50:	106d      	asrs	r5, r5, #1
 800ad52:	429d      	cmp	r5, r3
 800ad54:	bf38      	it	cc
 800ad56:	461d      	movcc	r5, r3
 800ad58:	0553      	lsls	r3, r2, #21
 800ad5a:	d527      	bpl.n	800adac <__ssputs_r+0x8c>
 800ad5c:	4629      	mov	r1, r5
 800ad5e:	f7ff ff53 	bl	800ac08 <_malloc_r>
 800ad62:	4606      	mov	r6, r0
 800ad64:	b360      	cbz	r0, 800adc0 <__ssputs_r+0xa0>
 800ad66:	6921      	ldr	r1, [r4, #16]
 800ad68:	464a      	mov	r2, r9
 800ad6a:	f7ff fed2 	bl	800ab12 <memcpy>
 800ad6e:	89a3      	ldrh	r3, [r4, #12]
 800ad70:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ad74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad78:	81a3      	strh	r3, [r4, #12]
 800ad7a:	6126      	str	r6, [r4, #16]
 800ad7c:	6165      	str	r5, [r4, #20]
 800ad7e:	444e      	add	r6, r9
 800ad80:	eba5 0509 	sub.w	r5, r5, r9
 800ad84:	6026      	str	r6, [r4, #0]
 800ad86:	60a5      	str	r5, [r4, #8]
 800ad88:	463e      	mov	r6, r7
 800ad8a:	42be      	cmp	r6, r7
 800ad8c:	d900      	bls.n	800ad90 <__ssputs_r+0x70>
 800ad8e:	463e      	mov	r6, r7
 800ad90:	6820      	ldr	r0, [r4, #0]
 800ad92:	4632      	mov	r2, r6
 800ad94:	4641      	mov	r1, r8
 800ad96:	f000 fcff 	bl	800b798 <memmove>
 800ad9a:	68a3      	ldr	r3, [r4, #8]
 800ad9c:	1b9b      	subs	r3, r3, r6
 800ad9e:	60a3      	str	r3, [r4, #8]
 800ada0:	6823      	ldr	r3, [r4, #0]
 800ada2:	4433      	add	r3, r6
 800ada4:	6023      	str	r3, [r4, #0]
 800ada6:	2000      	movs	r0, #0
 800ada8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adac:	462a      	mov	r2, r5
 800adae:	f000 fd3f 	bl	800b830 <_realloc_r>
 800adb2:	4606      	mov	r6, r0
 800adb4:	2800      	cmp	r0, #0
 800adb6:	d1e0      	bne.n	800ad7a <__ssputs_r+0x5a>
 800adb8:	6921      	ldr	r1, [r4, #16]
 800adba:	4650      	mov	r0, sl
 800adbc:	f7ff feb8 	bl	800ab30 <_free_r>
 800adc0:	230c      	movs	r3, #12
 800adc2:	f8ca 3000 	str.w	r3, [sl]
 800adc6:	89a3      	ldrh	r3, [r4, #12]
 800adc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adcc:	81a3      	strh	r3, [r4, #12]
 800adce:	f04f 30ff 	mov.w	r0, #4294967295
 800add2:	e7e9      	b.n	800ada8 <__ssputs_r+0x88>

0800add4 <_svfiprintf_r>:
 800add4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800add8:	4698      	mov	r8, r3
 800adda:	898b      	ldrh	r3, [r1, #12]
 800addc:	061b      	lsls	r3, r3, #24
 800adde:	b09d      	sub	sp, #116	; 0x74
 800ade0:	4607      	mov	r7, r0
 800ade2:	460d      	mov	r5, r1
 800ade4:	4614      	mov	r4, r2
 800ade6:	d50e      	bpl.n	800ae06 <_svfiprintf_r+0x32>
 800ade8:	690b      	ldr	r3, [r1, #16]
 800adea:	b963      	cbnz	r3, 800ae06 <_svfiprintf_r+0x32>
 800adec:	2140      	movs	r1, #64	; 0x40
 800adee:	f7ff ff0b 	bl	800ac08 <_malloc_r>
 800adf2:	6028      	str	r0, [r5, #0]
 800adf4:	6128      	str	r0, [r5, #16]
 800adf6:	b920      	cbnz	r0, 800ae02 <_svfiprintf_r+0x2e>
 800adf8:	230c      	movs	r3, #12
 800adfa:	603b      	str	r3, [r7, #0]
 800adfc:	f04f 30ff 	mov.w	r0, #4294967295
 800ae00:	e0d0      	b.n	800afa4 <_svfiprintf_r+0x1d0>
 800ae02:	2340      	movs	r3, #64	; 0x40
 800ae04:	616b      	str	r3, [r5, #20]
 800ae06:	2300      	movs	r3, #0
 800ae08:	9309      	str	r3, [sp, #36]	; 0x24
 800ae0a:	2320      	movs	r3, #32
 800ae0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae10:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae14:	2330      	movs	r3, #48	; 0x30
 800ae16:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800afbc <_svfiprintf_r+0x1e8>
 800ae1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae1e:	f04f 0901 	mov.w	r9, #1
 800ae22:	4623      	mov	r3, r4
 800ae24:	469a      	mov	sl, r3
 800ae26:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae2a:	b10a      	cbz	r2, 800ae30 <_svfiprintf_r+0x5c>
 800ae2c:	2a25      	cmp	r2, #37	; 0x25
 800ae2e:	d1f9      	bne.n	800ae24 <_svfiprintf_r+0x50>
 800ae30:	ebba 0b04 	subs.w	fp, sl, r4
 800ae34:	d00b      	beq.n	800ae4e <_svfiprintf_r+0x7a>
 800ae36:	465b      	mov	r3, fp
 800ae38:	4622      	mov	r2, r4
 800ae3a:	4629      	mov	r1, r5
 800ae3c:	4638      	mov	r0, r7
 800ae3e:	f7ff ff6f 	bl	800ad20 <__ssputs_r>
 800ae42:	3001      	adds	r0, #1
 800ae44:	f000 80a9 	beq.w	800af9a <_svfiprintf_r+0x1c6>
 800ae48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae4a:	445a      	add	r2, fp
 800ae4c:	9209      	str	r2, [sp, #36]	; 0x24
 800ae4e:	f89a 3000 	ldrb.w	r3, [sl]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	f000 80a1 	beq.w	800af9a <_svfiprintf_r+0x1c6>
 800ae58:	2300      	movs	r3, #0
 800ae5a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae62:	f10a 0a01 	add.w	sl, sl, #1
 800ae66:	9304      	str	r3, [sp, #16]
 800ae68:	9307      	str	r3, [sp, #28]
 800ae6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae6e:	931a      	str	r3, [sp, #104]	; 0x68
 800ae70:	4654      	mov	r4, sl
 800ae72:	2205      	movs	r2, #5
 800ae74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae78:	4850      	ldr	r0, [pc, #320]	; (800afbc <_svfiprintf_r+0x1e8>)
 800ae7a:	f7f5 f9b1 	bl	80001e0 <memchr>
 800ae7e:	9a04      	ldr	r2, [sp, #16]
 800ae80:	b9d8      	cbnz	r0, 800aeba <_svfiprintf_r+0xe6>
 800ae82:	06d0      	lsls	r0, r2, #27
 800ae84:	bf44      	itt	mi
 800ae86:	2320      	movmi	r3, #32
 800ae88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae8c:	0711      	lsls	r1, r2, #28
 800ae8e:	bf44      	itt	mi
 800ae90:	232b      	movmi	r3, #43	; 0x2b
 800ae92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae96:	f89a 3000 	ldrb.w	r3, [sl]
 800ae9a:	2b2a      	cmp	r3, #42	; 0x2a
 800ae9c:	d015      	beq.n	800aeca <_svfiprintf_r+0xf6>
 800ae9e:	9a07      	ldr	r2, [sp, #28]
 800aea0:	4654      	mov	r4, sl
 800aea2:	2000      	movs	r0, #0
 800aea4:	f04f 0c0a 	mov.w	ip, #10
 800aea8:	4621      	mov	r1, r4
 800aeaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aeae:	3b30      	subs	r3, #48	; 0x30
 800aeb0:	2b09      	cmp	r3, #9
 800aeb2:	d94d      	bls.n	800af50 <_svfiprintf_r+0x17c>
 800aeb4:	b1b0      	cbz	r0, 800aee4 <_svfiprintf_r+0x110>
 800aeb6:	9207      	str	r2, [sp, #28]
 800aeb8:	e014      	b.n	800aee4 <_svfiprintf_r+0x110>
 800aeba:	eba0 0308 	sub.w	r3, r0, r8
 800aebe:	fa09 f303 	lsl.w	r3, r9, r3
 800aec2:	4313      	orrs	r3, r2
 800aec4:	9304      	str	r3, [sp, #16]
 800aec6:	46a2      	mov	sl, r4
 800aec8:	e7d2      	b.n	800ae70 <_svfiprintf_r+0x9c>
 800aeca:	9b03      	ldr	r3, [sp, #12]
 800aecc:	1d19      	adds	r1, r3, #4
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	9103      	str	r1, [sp, #12]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	bfbb      	ittet	lt
 800aed6:	425b      	neglt	r3, r3
 800aed8:	f042 0202 	orrlt.w	r2, r2, #2
 800aedc:	9307      	strge	r3, [sp, #28]
 800aede:	9307      	strlt	r3, [sp, #28]
 800aee0:	bfb8      	it	lt
 800aee2:	9204      	strlt	r2, [sp, #16]
 800aee4:	7823      	ldrb	r3, [r4, #0]
 800aee6:	2b2e      	cmp	r3, #46	; 0x2e
 800aee8:	d10c      	bne.n	800af04 <_svfiprintf_r+0x130>
 800aeea:	7863      	ldrb	r3, [r4, #1]
 800aeec:	2b2a      	cmp	r3, #42	; 0x2a
 800aeee:	d134      	bne.n	800af5a <_svfiprintf_r+0x186>
 800aef0:	9b03      	ldr	r3, [sp, #12]
 800aef2:	1d1a      	adds	r2, r3, #4
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	9203      	str	r2, [sp, #12]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	bfb8      	it	lt
 800aefc:	f04f 33ff 	movlt.w	r3, #4294967295
 800af00:	3402      	adds	r4, #2
 800af02:	9305      	str	r3, [sp, #20]
 800af04:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800afcc <_svfiprintf_r+0x1f8>
 800af08:	7821      	ldrb	r1, [r4, #0]
 800af0a:	2203      	movs	r2, #3
 800af0c:	4650      	mov	r0, sl
 800af0e:	f7f5 f967 	bl	80001e0 <memchr>
 800af12:	b138      	cbz	r0, 800af24 <_svfiprintf_r+0x150>
 800af14:	9b04      	ldr	r3, [sp, #16]
 800af16:	eba0 000a 	sub.w	r0, r0, sl
 800af1a:	2240      	movs	r2, #64	; 0x40
 800af1c:	4082      	lsls	r2, r0
 800af1e:	4313      	orrs	r3, r2
 800af20:	3401      	adds	r4, #1
 800af22:	9304      	str	r3, [sp, #16]
 800af24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af28:	4825      	ldr	r0, [pc, #148]	; (800afc0 <_svfiprintf_r+0x1ec>)
 800af2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af2e:	2206      	movs	r2, #6
 800af30:	f7f5 f956 	bl	80001e0 <memchr>
 800af34:	2800      	cmp	r0, #0
 800af36:	d038      	beq.n	800afaa <_svfiprintf_r+0x1d6>
 800af38:	4b22      	ldr	r3, [pc, #136]	; (800afc4 <_svfiprintf_r+0x1f0>)
 800af3a:	bb1b      	cbnz	r3, 800af84 <_svfiprintf_r+0x1b0>
 800af3c:	9b03      	ldr	r3, [sp, #12]
 800af3e:	3307      	adds	r3, #7
 800af40:	f023 0307 	bic.w	r3, r3, #7
 800af44:	3308      	adds	r3, #8
 800af46:	9303      	str	r3, [sp, #12]
 800af48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af4a:	4433      	add	r3, r6
 800af4c:	9309      	str	r3, [sp, #36]	; 0x24
 800af4e:	e768      	b.n	800ae22 <_svfiprintf_r+0x4e>
 800af50:	fb0c 3202 	mla	r2, ip, r2, r3
 800af54:	460c      	mov	r4, r1
 800af56:	2001      	movs	r0, #1
 800af58:	e7a6      	b.n	800aea8 <_svfiprintf_r+0xd4>
 800af5a:	2300      	movs	r3, #0
 800af5c:	3401      	adds	r4, #1
 800af5e:	9305      	str	r3, [sp, #20]
 800af60:	4619      	mov	r1, r3
 800af62:	f04f 0c0a 	mov.w	ip, #10
 800af66:	4620      	mov	r0, r4
 800af68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af6c:	3a30      	subs	r2, #48	; 0x30
 800af6e:	2a09      	cmp	r2, #9
 800af70:	d903      	bls.n	800af7a <_svfiprintf_r+0x1a6>
 800af72:	2b00      	cmp	r3, #0
 800af74:	d0c6      	beq.n	800af04 <_svfiprintf_r+0x130>
 800af76:	9105      	str	r1, [sp, #20]
 800af78:	e7c4      	b.n	800af04 <_svfiprintf_r+0x130>
 800af7a:	fb0c 2101 	mla	r1, ip, r1, r2
 800af7e:	4604      	mov	r4, r0
 800af80:	2301      	movs	r3, #1
 800af82:	e7f0      	b.n	800af66 <_svfiprintf_r+0x192>
 800af84:	ab03      	add	r3, sp, #12
 800af86:	9300      	str	r3, [sp, #0]
 800af88:	462a      	mov	r2, r5
 800af8a:	4b0f      	ldr	r3, [pc, #60]	; (800afc8 <_svfiprintf_r+0x1f4>)
 800af8c:	a904      	add	r1, sp, #16
 800af8e:	4638      	mov	r0, r7
 800af90:	f3af 8000 	nop.w
 800af94:	1c42      	adds	r2, r0, #1
 800af96:	4606      	mov	r6, r0
 800af98:	d1d6      	bne.n	800af48 <_svfiprintf_r+0x174>
 800af9a:	89ab      	ldrh	r3, [r5, #12]
 800af9c:	065b      	lsls	r3, r3, #25
 800af9e:	f53f af2d 	bmi.w	800adfc <_svfiprintf_r+0x28>
 800afa2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800afa4:	b01d      	add	sp, #116	; 0x74
 800afa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afaa:	ab03      	add	r3, sp, #12
 800afac:	9300      	str	r3, [sp, #0]
 800afae:	462a      	mov	r2, r5
 800afb0:	4b05      	ldr	r3, [pc, #20]	; (800afc8 <_svfiprintf_r+0x1f4>)
 800afb2:	a904      	add	r1, sp, #16
 800afb4:	4638      	mov	r0, r7
 800afb6:	f000 f9bd 	bl	800b334 <_printf_i>
 800afba:	e7eb      	b.n	800af94 <_svfiprintf_r+0x1c0>
 800afbc:	08010a10 	.word	0x08010a10
 800afc0:	08010a1a 	.word	0x08010a1a
 800afc4:	00000000 	.word	0x00000000
 800afc8:	0800ad21 	.word	0x0800ad21
 800afcc:	08010a16 	.word	0x08010a16

0800afd0 <__sfputc_r>:
 800afd0:	6893      	ldr	r3, [r2, #8]
 800afd2:	3b01      	subs	r3, #1
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	b410      	push	{r4}
 800afd8:	6093      	str	r3, [r2, #8]
 800afda:	da08      	bge.n	800afee <__sfputc_r+0x1e>
 800afdc:	6994      	ldr	r4, [r2, #24]
 800afde:	42a3      	cmp	r3, r4
 800afe0:	db01      	blt.n	800afe6 <__sfputc_r+0x16>
 800afe2:	290a      	cmp	r1, #10
 800afe4:	d103      	bne.n	800afee <__sfputc_r+0x1e>
 800afe6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800afea:	f7ff bc82 	b.w	800a8f2 <__swbuf_r>
 800afee:	6813      	ldr	r3, [r2, #0]
 800aff0:	1c58      	adds	r0, r3, #1
 800aff2:	6010      	str	r0, [r2, #0]
 800aff4:	7019      	strb	r1, [r3, #0]
 800aff6:	4608      	mov	r0, r1
 800aff8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800affc:	4770      	bx	lr

0800affe <__sfputs_r>:
 800affe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b000:	4606      	mov	r6, r0
 800b002:	460f      	mov	r7, r1
 800b004:	4614      	mov	r4, r2
 800b006:	18d5      	adds	r5, r2, r3
 800b008:	42ac      	cmp	r4, r5
 800b00a:	d101      	bne.n	800b010 <__sfputs_r+0x12>
 800b00c:	2000      	movs	r0, #0
 800b00e:	e007      	b.n	800b020 <__sfputs_r+0x22>
 800b010:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b014:	463a      	mov	r2, r7
 800b016:	4630      	mov	r0, r6
 800b018:	f7ff ffda 	bl	800afd0 <__sfputc_r>
 800b01c:	1c43      	adds	r3, r0, #1
 800b01e:	d1f3      	bne.n	800b008 <__sfputs_r+0xa>
 800b020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b024 <_vfiprintf_r>:
 800b024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b028:	460d      	mov	r5, r1
 800b02a:	b09d      	sub	sp, #116	; 0x74
 800b02c:	4614      	mov	r4, r2
 800b02e:	4698      	mov	r8, r3
 800b030:	4606      	mov	r6, r0
 800b032:	b118      	cbz	r0, 800b03c <_vfiprintf_r+0x18>
 800b034:	6a03      	ldr	r3, [r0, #32]
 800b036:	b90b      	cbnz	r3, 800b03c <_vfiprintf_r+0x18>
 800b038:	f7ff fb54 	bl	800a6e4 <__sinit>
 800b03c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b03e:	07d9      	lsls	r1, r3, #31
 800b040:	d405      	bmi.n	800b04e <_vfiprintf_r+0x2a>
 800b042:	89ab      	ldrh	r3, [r5, #12]
 800b044:	059a      	lsls	r2, r3, #22
 800b046:	d402      	bmi.n	800b04e <_vfiprintf_r+0x2a>
 800b048:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b04a:	f7ff fd60 	bl	800ab0e <__retarget_lock_acquire_recursive>
 800b04e:	89ab      	ldrh	r3, [r5, #12]
 800b050:	071b      	lsls	r3, r3, #28
 800b052:	d501      	bpl.n	800b058 <_vfiprintf_r+0x34>
 800b054:	692b      	ldr	r3, [r5, #16]
 800b056:	b99b      	cbnz	r3, 800b080 <_vfiprintf_r+0x5c>
 800b058:	4629      	mov	r1, r5
 800b05a:	4630      	mov	r0, r6
 800b05c:	f7ff fc86 	bl	800a96c <__swsetup_r>
 800b060:	b170      	cbz	r0, 800b080 <_vfiprintf_r+0x5c>
 800b062:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b064:	07dc      	lsls	r4, r3, #31
 800b066:	d504      	bpl.n	800b072 <_vfiprintf_r+0x4e>
 800b068:	f04f 30ff 	mov.w	r0, #4294967295
 800b06c:	b01d      	add	sp, #116	; 0x74
 800b06e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b072:	89ab      	ldrh	r3, [r5, #12]
 800b074:	0598      	lsls	r0, r3, #22
 800b076:	d4f7      	bmi.n	800b068 <_vfiprintf_r+0x44>
 800b078:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b07a:	f7ff fd49 	bl	800ab10 <__retarget_lock_release_recursive>
 800b07e:	e7f3      	b.n	800b068 <_vfiprintf_r+0x44>
 800b080:	2300      	movs	r3, #0
 800b082:	9309      	str	r3, [sp, #36]	; 0x24
 800b084:	2320      	movs	r3, #32
 800b086:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b08a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b08e:	2330      	movs	r3, #48	; 0x30
 800b090:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b244 <_vfiprintf_r+0x220>
 800b094:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b098:	f04f 0901 	mov.w	r9, #1
 800b09c:	4623      	mov	r3, r4
 800b09e:	469a      	mov	sl, r3
 800b0a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0a4:	b10a      	cbz	r2, 800b0aa <_vfiprintf_r+0x86>
 800b0a6:	2a25      	cmp	r2, #37	; 0x25
 800b0a8:	d1f9      	bne.n	800b09e <_vfiprintf_r+0x7a>
 800b0aa:	ebba 0b04 	subs.w	fp, sl, r4
 800b0ae:	d00b      	beq.n	800b0c8 <_vfiprintf_r+0xa4>
 800b0b0:	465b      	mov	r3, fp
 800b0b2:	4622      	mov	r2, r4
 800b0b4:	4629      	mov	r1, r5
 800b0b6:	4630      	mov	r0, r6
 800b0b8:	f7ff ffa1 	bl	800affe <__sfputs_r>
 800b0bc:	3001      	adds	r0, #1
 800b0be:	f000 80a9 	beq.w	800b214 <_vfiprintf_r+0x1f0>
 800b0c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0c4:	445a      	add	r2, fp
 800b0c6:	9209      	str	r2, [sp, #36]	; 0x24
 800b0c8:	f89a 3000 	ldrb.w	r3, [sl]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	f000 80a1 	beq.w	800b214 <_vfiprintf_r+0x1f0>
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	f04f 32ff 	mov.w	r2, #4294967295
 800b0d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b0dc:	f10a 0a01 	add.w	sl, sl, #1
 800b0e0:	9304      	str	r3, [sp, #16]
 800b0e2:	9307      	str	r3, [sp, #28]
 800b0e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b0e8:	931a      	str	r3, [sp, #104]	; 0x68
 800b0ea:	4654      	mov	r4, sl
 800b0ec:	2205      	movs	r2, #5
 800b0ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0f2:	4854      	ldr	r0, [pc, #336]	; (800b244 <_vfiprintf_r+0x220>)
 800b0f4:	f7f5 f874 	bl	80001e0 <memchr>
 800b0f8:	9a04      	ldr	r2, [sp, #16]
 800b0fa:	b9d8      	cbnz	r0, 800b134 <_vfiprintf_r+0x110>
 800b0fc:	06d1      	lsls	r1, r2, #27
 800b0fe:	bf44      	itt	mi
 800b100:	2320      	movmi	r3, #32
 800b102:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b106:	0713      	lsls	r3, r2, #28
 800b108:	bf44      	itt	mi
 800b10a:	232b      	movmi	r3, #43	; 0x2b
 800b10c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b110:	f89a 3000 	ldrb.w	r3, [sl]
 800b114:	2b2a      	cmp	r3, #42	; 0x2a
 800b116:	d015      	beq.n	800b144 <_vfiprintf_r+0x120>
 800b118:	9a07      	ldr	r2, [sp, #28]
 800b11a:	4654      	mov	r4, sl
 800b11c:	2000      	movs	r0, #0
 800b11e:	f04f 0c0a 	mov.w	ip, #10
 800b122:	4621      	mov	r1, r4
 800b124:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b128:	3b30      	subs	r3, #48	; 0x30
 800b12a:	2b09      	cmp	r3, #9
 800b12c:	d94d      	bls.n	800b1ca <_vfiprintf_r+0x1a6>
 800b12e:	b1b0      	cbz	r0, 800b15e <_vfiprintf_r+0x13a>
 800b130:	9207      	str	r2, [sp, #28]
 800b132:	e014      	b.n	800b15e <_vfiprintf_r+0x13a>
 800b134:	eba0 0308 	sub.w	r3, r0, r8
 800b138:	fa09 f303 	lsl.w	r3, r9, r3
 800b13c:	4313      	orrs	r3, r2
 800b13e:	9304      	str	r3, [sp, #16]
 800b140:	46a2      	mov	sl, r4
 800b142:	e7d2      	b.n	800b0ea <_vfiprintf_r+0xc6>
 800b144:	9b03      	ldr	r3, [sp, #12]
 800b146:	1d19      	adds	r1, r3, #4
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	9103      	str	r1, [sp, #12]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	bfbb      	ittet	lt
 800b150:	425b      	neglt	r3, r3
 800b152:	f042 0202 	orrlt.w	r2, r2, #2
 800b156:	9307      	strge	r3, [sp, #28]
 800b158:	9307      	strlt	r3, [sp, #28]
 800b15a:	bfb8      	it	lt
 800b15c:	9204      	strlt	r2, [sp, #16]
 800b15e:	7823      	ldrb	r3, [r4, #0]
 800b160:	2b2e      	cmp	r3, #46	; 0x2e
 800b162:	d10c      	bne.n	800b17e <_vfiprintf_r+0x15a>
 800b164:	7863      	ldrb	r3, [r4, #1]
 800b166:	2b2a      	cmp	r3, #42	; 0x2a
 800b168:	d134      	bne.n	800b1d4 <_vfiprintf_r+0x1b0>
 800b16a:	9b03      	ldr	r3, [sp, #12]
 800b16c:	1d1a      	adds	r2, r3, #4
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	9203      	str	r2, [sp, #12]
 800b172:	2b00      	cmp	r3, #0
 800b174:	bfb8      	it	lt
 800b176:	f04f 33ff 	movlt.w	r3, #4294967295
 800b17a:	3402      	adds	r4, #2
 800b17c:	9305      	str	r3, [sp, #20]
 800b17e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b254 <_vfiprintf_r+0x230>
 800b182:	7821      	ldrb	r1, [r4, #0]
 800b184:	2203      	movs	r2, #3
 800b186:	4650      	mov	r0, sl
 800b188:	f7f5 f82a 	bl	80001e0 <memchr>
 800b18c:	b138      	cbz	r0, 800b19e <_vfiprintf_r+0x17a>
 800b18e:	9b04      	ldr	r3, [sp, #16]
 800b190:	eba0 000a 	sub.w	r0, r0, sl
 800b194:	2240      	movs	r2, #64	; 0x40
 800b196:	4082      	lsls	r2, r0
 800b198:	4313      	orrs	r3, r2
 800b19a:	3401      	adds	r4, #1
 800b19c:	9304      	str	r3, [sp, #16]
 800b19e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1a2:	4829      	ldr	r0, [pc, #164]	; (800b248 <_vfiprintf_r+0x224>)
 800b1a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b1a8:	2206      	movs	r2, #6
 800b1aa:	f7f5 f819 	bl	80001e0 <memchr>
 800b1ae:	2800      	cmp	r0, #0
 800b1b0:	d03f      	beq.n	800b232 <_vfiprintf_r+0x20e>
 800b1b2:	4b26      	ldr	r3, [pc, #152]	; (800b24c <_vfiprintf_r+0x228>)
 800b1b4:	bb1b      	cbnz	r3, 800b1fe <_vfiprintf_r+0x1da>
 800b1b6:	9b03      	ldr	r3, [sp, #12]
 800b1b8:	3307      	adds	r3, #7
 800b1ba:	f023 0307 	bic.w	r3, r3, #7
 800b1be:	3308      	adds	r3, #8
 800b1c0:	9303      	str	r3, [sp, #12]
 800b1c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1c4:	443b      	add	r3, r7
 800b1c6:	9309      	str	r3, [sp, #36]	; 0x24
 800b1c8:	e768      	b.n	800b09c <_vfiprintf_r+0x78>
 800b1ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800b1ce:	460c      	mov	r4, r1
 800b1d0:	2001      	movs	r0, #1
 800b1d2:	e7a6      	b.n	800b122 <_vfiprintf_r+0xfe>
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	3401      	adds	r4, #1
 800b1d8:	9305      	str	r3, [sp, #20]
 800b1da:	4619      	mov	r1, r3
 800b1dc:	f04f 0c0a 	mov.w	ip, #10
 800b1e0:	4620      	mov	r0, r4
 800b1e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1e6:	3a30      	subs	r2, #48	; 0x30
 800b1e8:	2a09      	cmp	r2, #9
 800b1ea:	d903      	bls.n	800b1f4 <_vfiprintf_r+0x1d0>
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d0c6      	beq.n	800b17e <_vfiprintf_r+0x15a>
 800b1f0:	9105      	str	r1, [sp, #20]
 800b1f2:	e7c4      	b.n	800b17e <_vfiprintf_r+0x15a>
 800b1f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1f8:	4604      	mov	r4, r0
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	e7f0      	b.n	800b1e0 <_vfiprintf_r+0x1bc>
 800b1fe:	ab03      	add	r3, sp, #12
 800b200:	9300      	str	r3, [sp, #0]
 800b202:	462a      	mov	r2, r5
 800b204:	4b12      	ldr	r3, [pc, #72]	; (800b250 <_vfiprintf_r+0x22c>)
 800b206:	a904      	add	r1, sp, #16
 800b208:	4630      	mov	r0, r6
 800b20a:	f3af 8000 	nop.w
 800b20e:	4607      	mov	r7, r0
 800b210:	1c78      	adds	r0, r7, #1
 800b212:	d1d6      	bne.n	800b1c2 <_vfiprintf_r+0x19e>
 800b214:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b216:	07d9      	lsls	r1, r3, #31
 800b218:	d405      	bmi.n	800b226 <_vfiprintf_r+0x202>
 800b21a:	89ab      	ldrh	r3, [r5, #12]
 800b21c:	059a      	lsls	r2, r3, #22
 800b21e:	d402      	bmi.n	800b226 <_vfiprintf_r+0x202>
 800b220:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b222:	f7ff fc75 	bl	800ab10 <__retarget_lock_release_recursive>
 800b226:	89ab      	ldrh	r3, [r5, #12]
 800b228:	065b      	lsls	r3, r3, #25
 800b22a:	f53f af1d 	bmi.w	800b068 <_vfiprintf_r+0x44>
 800b22e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b230:	e71c      	b.n	800b06c <_vfiprintf_r+0x48>
 800b232:	ab03      	add	r3, sp, #12
 800b234:	9300      	str	r3, [sp, #0]
 800b236:	462a      	mov	r2, r5
 800b238:	4b05      	ldr	r3, [pc, #20]	; (800b250 <_vfiprintf_r+0x22c>)
 800b23a:	a904      	add	r1, sp, #16
 800b23c:	4630      	mov	r0, r6
 800b23e:	f000 f879 	bl	800b334 <_printf_i>
 800b242:	e7e4      	b.n	800b20e <_vfiprintf_r+0x1ea>
 800b244:	08010a10 	.word	0x08010a10
 800b248:	08010a1a 	.word	0x08010a1a
 800b24c:	00000000 	.word	0x00000000
 800b250:	0800afff 	.word	0x0800afff
 800b254:	08010a16 	.word	0x08010a16

0800b258 <_printf_common>:
 800b258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b25c:	4616      	mov	r6, r2
 800b25e:	4699      	mov	r9, r3
 800b260:	688a      	ldr	r2, [r1, #8]
 800b262:	690b      	ldr	r3, [r1, #16]
 800b264:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b268:	4293      	cmp	r3, r2
 800b26a:	bfb8      	it	lt
 800b26c:	4613      	movlt	r3, r2
 800b26e:	6033      	str	r3, [r6, #0]
 800b270:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b274:	4607      	mov	r7, r0
 800b276:	460c      	mov	r4, r1
 800b278:	b10a      	cbz	r2, 800b27e <_printf_common+0x26>
 800b27a:	3301      	adds	r3, #1
 800b27c:	6033      	str	r3, [r6, #0]
 800b27e:	6823      	ldr	r3, [r4, #0]
 800b280:	0699      	lsls	r1, r3, #26
 800b282:	bf42      	ittt	mi
 800b284:	6833      	ldrmi	r3, [r6, #0]
 800b286:	3302      	addmi	r3, #2
 800b288:	6033      	strmi	r3, [r6, #0]
 800b28a:	6825      	ldr	r5, [r4, #0]
 800b28c:	f015 0506 	ands.w	r5, r5, #6
 800b290:	d106      	bne.n	800b2a0 <_printf_common+0x48>
 800b292:	f104 0a19 	add.w	sl, r4, #25
 800b296:	68e3      	ldr	r3, [r4, #12]
 800b298:	6832      	ldr	r2, [r6, #0]
 800b29a:	1a9b      	subs	r3, r3, r2
 800b29c:	42ab      	cmp	r3, r5
 800b29e:	dc26      	bgt.n	800b2ee <_printf_common+0x96>
 800b2a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b2a4:	1e13      	subs	r3, r2, #0
 800b2a6:	6822      	ldr	r2, [r4, #0]
 800b2a8:	bf18      	it	ne
 800b2aa:	2301      	movne	r3, #1
 800b2ac:	0692      	lsls	r2, r2, #26
 800b2ae:	d42b      	bmi.n	800b308 <_printf_common+0xb0>
 800b2b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b2b4:	4649      	mov	r1, r9
 800b2b6:	4638      	mov	r0, r7
 800b2b8:	47c0      	blx	r8
 800b2ba:	3001      	adds	r0, #1
 800b2bc:	d01e      	beq.n	800b2fc <_printf_common+0xa4>
 800b2be:	6823      	ldr	r3, [r4, #0]
 800b2c0:	6922      	ldr	r2, [r4, #16]
 800b2c2:	f003 0306 	and.w	r3, r3, #6
 800b2c6:	2b04      	cmp	r3, #4
 800b2c8:	bf02      	ittt	eq
 800b2ca:	68e5      	ldreq	r5, [r4, #12]
 800b2cc:	6833      	ldreq	r3, [r6, #0]
 800b2ce:	1aed      	subeq	r5, r5, r3
 800b2d0:	68a3      	ldr	r3, [r4, #8]
 800b2d2:	bf0c      	ite	eq
 800b2d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b2d8:	2500      	movne	r5, #0
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	bfc4      	itt	gt
 800b2de:	1a9b      	subgt	r3, r3, r2
 800b2e0:	18ed      	addgt	r5, r5, r3
 800b2e2:	2600      	movs	r6, #0
 800b2e4:	341a      	adds	r4, #26
 800b2e6:	42b5      	cmp	r5, r6
 800b2e8:	d11a      	bne.n	800b320 <_printf_common+0xc8>
 800b2ea:	2000      	movs	r0, #0
 800b2ec:	e008      	b.n	800b300 <_printf_common+0xa8>
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	4652      	mov	r2, sl
 800b2f2:	4649      	mov	r1, r9
 800b2f4:	4638      	mov	r0, r7
 800b2f6:	47c0      	blx	r8
 800b2f8:	3001      	adds	r0, #1
 800b2fa:	d103      	bne.n	800b304 <_printf_common+0xac>
 800b2fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b304:	3501      	adds	r5, #1
 800b306:	e7c6      	b.n	800b296 <_printf_common+0x3e>
 800b308:	18e1      	adds	r1, r4, r3
 800b30a:	1c5a      	adds	r2, r3, #1
 800b30c:	2030      	movs	r0, #48	; 0x30
 800b30e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b312:	4422      	add	r2, r4
 800b314:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b318:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b31c:	3302      	adds	r3, #2
 800b31e:	e7c7      	b.n	800b2b0 <_printf_common+0x58>
 800b320:	2301      	movs	r3, #1
 800b322:	4622      	mov	r2, r4
 800b324:	4649      	mov	r1, r9
 800b326:	4638      	mov	r0, r7
 800b328:	47c0      	blx	r8
 800b32a:	3001      	adds	r0, #1
 800b32c:	d0e6      	beq.n	800b2fc <_printf_common+0xa4>
 800b32e:	3601      	adds	r6, #1
 800b330:	e7d9      	b.n	800b2e6 <_printf_common+0x8e>
	...

0800b334 <_printf_i>:
 800b334:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b338:	7e0f      	ldrb	r7, [r1, #24]
 800b33a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b33c:	2f78      	cmp	r7, #120	; 0x78
 800b33e:	4691      	mov	r9, r2
 800b340:	4680      	mov	r8, r0
 800b342:	460c      	mov	r4, r1
 800b344:	469a      	mov	sl, r3
 800b346:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b34a:	d807      	bhi.n	800b35c <_printf_i+0x28>
 800b34c:	2f62      	cmp	r7, #98	; 0x62
 800b34e:	d80a      	bhi.n	800b366 <_printf_i+0x32>
 800b350:	2f00      	cmp	r7, #0
 800b352:	f000 80d4 	beq.w	800b4fe <_printf_i+0x1ca>
 800b356:	2f58      	cmp	r7, #88	; 0x58
 800b358:	f000 80c0 	beq.w	800b4dc <_printf_i+0x1a8>
 800b35c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b360:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b364:	e03a      	b.n	800b3dc <_printf_i+0xa8>
 800b366:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b36a:	2b15      	cmp	r3, #21
 800b36c:	d8f6      	bhi.n	800b35c <_printf_i+0x28>
 800b36e:	a101      	add	r1, pc, #4	; (adr r1, 800b374 <_printf_i+0x40>)
 800b370:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b374:	0800b3cd 	.word	0x0800b3cd
 800b378:	0800b3e1 	.word	0x0800b3e1
 800b37c:	0800b35d 	.word	0x0800b35d
 800b380:	0800b35d 	.word	0x0800b35d
 800b384:	0800b35d 	.word	0x0800b35d
 800b388:	0800b35d 	.word	0x0800b35d
 800b38c:	0800b3e1 	.word	0x0800b3e1
 800b390:	0800b35d 	.word	0x0800b35d
 800b394:	0800b35d 	.word	0x0800b35d
 800b398:	0800b35d 	.word	0x0800b35d
 800b39c:	0800b35d 	.word	0x0800b35d
 800b3a0:	0800b4e5 	.word	0x0800b4e5
 800b3a4:	0800b40d 	.word	0x0800b40d
 800b3a8:	0800b49f 	.word	0x0800b49f
 800b3ac:	0800b35d 	.word	0x0800b35d
 800b3b0:	0800b35d 	.word	0x0800b35d
 800b3b4:	0800b507 	.word	0x0800b507
 800b3b8:	0800b35d 	.word	0x0800b35d
 800b3bc:	0800b40d 	.word	0x0800b40d
 800b3c0:	0800b35d 	.word	0x0800b35d
 800b3c4:	0800b35d 	.word	0x0800b35d
 800b3c8:	0800b4a7 	.word	0x0800b4a7
 800b3cc:	682b      	ldr	r3, [r5, #0]
 800b3ce:	1d1a      	adds	r2, r3, #4
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	602a      	str	r2, [r5, #0]
 800b3d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b3d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b3dc:	2301      	movs	r3, #1
 800b3de:	e09f      	b.n	800b520 <_printf_i+0x1ec>
 800b3e0:	6820      	ldr	r0, [r4, #0]
 800b3e2:	682b      	ldr	r3, [r5, #0]
 800b3e4:	0607      	lsls	r7, r0, #24
 800b3e6:	f103 0104 	add.w	r1, r3, #4
 800b3ea:	6029      	str	r1, [r5, #0]
 800b3ec:	d501      	bpl.n	800b3f2 <_printf_i+0xbe>
 800b3ee:	681e      	ldr	r6, [r3, #0]
 800b3f0:	e003      	b.n	800b3fa <_printf_i+0xc6>
 800b3f2:	0646      	lsls	r6, r0, #25
 800b3f4:	d5fb      	bpl.n	800b3ee <_printf_i+0xba>
 800b3f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b3fa:	2e00      	cmp	r6, #0
 800b3fc:	da03      	bge.n	800b406 <_printf_i+0xd2>
 800b3fe:	232d      	movs	r3, #45	; 0x2d
 800b400:	4276      	negs	r6, r6
 800b402:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b406:	485a      	ldr	r0, [pc, #360]	; (800b570 <_printf_i+0x23c>)
 800b408:	230a      	movs	r3, #10
 800b40a:	e012      	b.n	800b432 <_printf_i+0xfe>
 800b40c:	682b      	ldr	r3, [r5, #0]
 800b40e:	6820      	ldr	r0, [r4, #0]
 800b410:	1d19      	adds	r1, r3, #4
 800b412:	6029      	str	r1, [r5, #0]
 800b414:	0605      	lsls	r5, r0, #24
 800b416:	d501      	bpl.n	800b41c <_printf_i+0xe8>
 800b418:	681e      	ldr	r6, [r3, #0]
 800b41a:	e002      	b.n	800b422 <_printf_i+0xee>
 800b41c:	0641      	lsls	r1, r0, #25
 800b41e:	d5fb      	bpl.n	800b418 <_printf_i+0xe4>
 800b420:	881e      	ldrh	r6, [r3, #0]
 800b422:	4853      	ldr	r0, [pc, #332]	; (800b570 <_printf_i+0x23c>)
 800b424:	2f6f      	cmp	r7, #111	; 0x6f
 800b426:	bf0c      	ite	eq
 800b428:	2308      	moveq	r3, #8
 800b42a:	230a      	movne	r3, #10
 800b42c:	2100      	movs	r1, #0
 800b42e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b432:	6865      	ldr	r5, [r4, #4]
 800b434:	60a5      	str	r5, [r4, #8]
 800b436:	2d00      	cmp	r5, #0
 800b438:	bfa2      	ittt	ge
 800b43a:	6821      	ldrge	r1, [r4, #0]
 800b43c:	f021 0104 	bicge.w	r1, r1, #4
 800b440:	6021      	strge	r1, [r4, #0]
 800b442:	b90e      	cbnz	r6, 800b448 <_printf_i+0x114>
 800b444:	2d00      	cmp	r5, #0
 800b446:	d04b      	beq.n	800b4e0 <_printf_i+0x1ac>
 800b448:	4615      	mov	r5, r2
 800b44a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b44e:	fb03 6711 	mls	r7, r3, r1, r6
 800b452:	5dc7      	ldrb	r7, [r0, r7]
 800b454:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b458:	4637      	mov	r7, r6
 800b45a:	42bb      	cmp	r3, r7
 800b45c:	460e      	mov	r6, r1
 800b45e:	d9f4      	bls.n	800b44a <_printf_i+0x116>
 800b460:	2b08      	cmp	r3, #8
 800b462:	d10b      	bne.n	800b47c <_printf_i+0x148>
 800b464:	6823      	ldr	r3, [r4, #0]
 800b466:	07de      	lsls	r6, r3, #31
 800b468:	d508      	bpl.n	800b47c <_printf_i+0x148>
 800b46a:	6923      	ldr	r3, [r4, #16]
 800b46c:	6861      	ldr	r1, [r4, #4]
 800b46e:	4299      	cmp	r1, r3
 800b470:	bfde      	ittt	le
 800b472:	2330      	movle	r3, #48	; 0x30
 800b474:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b478:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b47c:	1b52      	subs	r2, r2, r5
 800b47e:	6122      	str	r2, [r4, #16]
 800b480:	f8cd a000 	str.w	sl, [sp]
 800b484:	464b      	mov	r3, r9
 800b486:	aa03      	add	r2, sp, #12
 800b488:	4621      	mov	r1, r4
 800b48a:	4640      	mov	r0, r8
 800b48c:	f7ff fee4 	bl	800b258 <_printf_common>
 800b490:	3001      	adds	r0, #1
 800b492:	d14a      	bne.n	800b52a <_printf_i+0x1f6>
 800b494:	f04f 30ff 	mov.w	r0, #4294967295
 800b498:	b004      	add	sp, #16
 800b49a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b49e:	6823      	ldr	r3, [r4, #0]
 800b4a0:	f043 0320 	orr.w	r3, r3, #32
 800b4a4:	6023      	str	r3, [r4, #0]
 800b4a6:	4833      	ldr	r0, [pc, #204]	; (800b574 <_printf_i+0x240>)
 800b4a8:	2778      	movs	r7, #120	; 0x78
 800b4aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b4ae:	6823      	ldr	r3, [r4, #0]
 800b4b0:	6829      	ldr	r1, [r5, #0]
 800b4b2:	061f      	lsls	r7, r3, #24
 800b4b4:	f851 6b04 	ldr.w	r6, [r1], #4
 800b4b8:	d402      	bmi.n	800b4c0 <_printf_i+0x18c>
 800b4ba:	065f      	lsls	r7, r3, #25
 800b4bc:	bf48      	it	mi
 800b4be:	b2b6      	uxthmi	r6, r6
 800b4c0:	07df      	lsls	r7, r3, #31
 800b4c2:	bf48      	it	mi
 800b4c4:	f043 0320 	orrmi.w	r3, r3, #32
 800b4c8:	6029      	str	r1, [r5, #0]
 800b4ca:	bf48      	it	mi
 800b4cc:	6023      	strmi	r3, [r4, #0]
 800b4ce:	b91e      	cbnz	r6, 800b4d8 <_printf_i+0x1a4>
 800b4d0:	6823      	ldr	r3, [r4, #0]
 800b4d2:	f023 0320 	bic.w	r3, r3, #32
 800b4d6:	6023      	str	r3, [r4, #0]
 800b4d8:	2310      	movs	r3, #16
 800b4da:	e7a7      	b.n	800b42c <_printf_i+0xf8>
 800b4dc:	4824      	ldr	r0, [pc, #144]	; (800b570 <_printf_i+0x23c>)
 800b4de:	e7e4      	b.n	800b4aa <_printf_i+0x176>
 800b4e0:	4615      	mov	r5, r2
 800b4e2:	e7bd      	b.n	800b460 <_printf_i+0x12c>
 800b4e4:	682b      	ldr	r3, [r5, #0]
 800b4e6:	6826      	ldr	r6, [r4, #0]
 800b4e8:	6961      	ldr	r1, [r4, #20]
 800b4ea:	1d18      	adds	r0, r3, #4
 800b4ec:	6028      	str	r0, [r5, #0]
 800b4ee:	0635      	lsls	r5, r6, #24
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	d501      	bpl.n	800b4f8 <_printf_i+0x1c4>
 800b4f4:	6019      	str	r1, [r3, #0]
 800b4f6:	e002      	b.n	800b4fe <_printf_i+0x1ca>
 800b4f8:	0670      	lsls	r0, r6, #25
 800b4fa:	d5fb      	bpl.n	800b4f4 <_printf_i+0x1c0>
 800b4fc:	8019      	strh	r1, [r3, #0]
 800b4fe:	2300      	movs	r3, #0
 800b500:	6123      	str	r3, [r4, #16]
 800b502:	4615      	mov	r5, r2
 800b504:	e7bc      	b.n	800b480 <_printf_i+0x14c>
 800b506:	682b      	ldr	r3, [r5, #0]
 800b508:	1d1a      	adds	r2, r3, #4
 800b50a:	602a      	str	r2, [r5, #0]
 800b50c:	681d      	ldr	r5, [r3, #0]
 800b50e:	6862      	ldr	r2, [r4, #4]
 800b510:	2100      	movs	r1, #0
 800b512:	4628      	mov	r0, r5
 800b514:	f7f4 fe64 	bl	80001e0 <memchr>
 800b518:	b108      	cbz	r0, 800b51e <_printf_i+0x1ea>
 800b51a:	1b40      	subs	r0, r0, r5
 800b51c:	6060      	str	r0, [r4, #4]
 800b51e:	6863      	ldr	r3, [r4, #4]
 800b520:	6123      	str	r3, [r4, #16]
 800b522:	2300      	movs	r3, #0
 800b524:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b528:	e7aa      	b.n	800b480 <_printf_i+0x14c>
 800b52a:	6923      	ldr	r3, [r4, #16]
 800b52c:	462a      	mov	r2, r5
 800b52e:	4649      	mov	r1, r9
 800b530:	4640      	mov	r0, r8
 800b532:	47d0      	blx	sl
 800b534:	3001      	adds	r0, #1
 800b536:	d0ad      	beq.n	800b494 <_printf_i+0x160>
 800b538:	6823      	ldr	r3, [r4, #0]
 800b53a:	079b      	lsls	r3, r3, #30
 800b53c:	d413      	bmi.n	800b566 <_printf_i+0x232>
 800b53e:	68e0      	ldr	r0, [r4, #12]
 800b540:	9b03      	ldr	r3, [sp, #12]
 800b542:	4298      	cmp	r0, r3
 800b544:	bfb8      	it	lt
 800b546:	4618      	movlt	r0, r3
 800b548:	e7a6      	b.n	800b498 <_printf_i+0x164>
 800b54a:	2301      	movs	r3, #1
 800b54c:	4632      	mov	r2, r6
 800b54e:	4649      	mov	r1, r9
 800b550:	4640      	mov	r0, r8
 800b552:	47d0      	blx	sl
 800b554:	3001      	adds	r0, #1
 800b556:	d09d      	beq.n	800b494 <_printf_i+0x160>
 800b558:	3501      	adds	r5, #1
 800b55a:	68e3      	ldr	r3, [r4, #12]
 800b55c:	9903      	ldr	r1, [sp, #12]
 800b55e:	1a5b      	subs	r3, r3, r1
 800b560:	42ab      	cmp	r3, r5
 800b562:	dcf2      	bgt.n	800b54a <_printf_i+0x216>
 800b564:	e7eb      	b.n	800b53e <_printf_i+0x20a>
 800b566:	2500      	movs	r5, #0
 800b568:	f104 0619 	add.w	r6, r4, #25
 800b56c:	e7f5      	b.n	800b55a <_printf_i+0x226>
 800b56e:	bf00      	nop
 800b570:	08010a21 	.word	0x08010a21
 800b574:	08010a32 	.word	0x08010a32

0800b578 <__sflush_r>:
 800b578:	898a      	ldrh	r2, [r1, #12]
 800b57a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b57e:	4605      	mov	r5, r0
 800b580:	0710      	lsls	r0, r2, #28
 800b582:	460c      	mov	r4, r1
 800b584:	d458      	bmi.n	800b638 <__sflush_r+0xc0>
 800b586:	684b      	ldr	r3, [r1, #4]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	dc05      	bgt.n	800b598 <__sflush_r+0x20>
 800b58c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b58e:	2b00      	cmp	r3, #0
 800b590:	dc02      	bgt.n	800b598 <__sflush_r+0x20>
 800b592:	2000      	movs	r0, #0
 800b594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b598:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b59a:	2e00      	cmp	r6, #0
 800b59c:	d0f9      	beq.n	800b592 <__sflush_r+0x1a>
 800b59e:	2300      	movs	r3, #0
 800b5a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b5a4:	682f      	ldr	r7, [r5, #0]
 800b5a6:	6a21      	ldr	r1, [r4, #32]
 800b5a8:	602b      	str	r3, [r5, #0]
 800b5aa:	d032      	beq.n	800b612 <__sflush_r+0x9a>
 800b5ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b5ae:	89a3      	ldrh	r3, [r4, #12]
 800b5b0:	075a      	lsls	r2, r3, #29
 800b5b2:	d505      	bpl.n	800b5c0 <__sflush_r+0x48>
 800b5b4:	6863      	ldr	r3, [r4, #4]
 800b5b6:	1ac0      	subs	r0, r0, r3
 800b5b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b5ba:	b10b      	cbz	r3, 800b5c0 <__sflush_r+0x48>
 800b5bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b5be:	1ac0      	subs	r0, r0, r3
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	4602      	mov	r2, r0
 800b5c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b5c6:	6a21      	ldr	r1, [r4, #32]
 800b5c8:	4628      	mov	r0, r5
 800b5ca:	47b0      	blx	r6
 800b5cc:	1c43      	adds	r3, r0, #1
 800b5ce:	89a3      	ldrh	r3, [r4, #12]
 800b5d0:	d106      	bne.n	800b5e0 <__sflush_r+0x68>
 800b5d2:	6829      	ldr	r1, [r5, #0]
 800b5d4:	291d      	cmp	r1, #29
 800b5d6:	d82b      	bhi.n	800b630 <__sflush_r+0xb8>
 800b5d8:	4a29      	ldr	r2, [pc, #164]	; (800b680 <__sflush_r+0x108>)
 800b5da:	410a      	asrs	r2, r1
 800b5dc:	07d6      	lsls	r6, r2, #31
 800b5de:	d427      	bmi.n	800b630 <__sflush_r+0xb8>
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	6062      	str	r2, [r4, #4]
 800b5e4:	04d9      	lsls	r1, r3, #19
 800b5e6:	6922      	ldr	r2, [r4, #16]
 800b5e8:	6022      	str	r2, [r4, #0]
 800b5ea:	d504      	bpl.n	800b5f6 <__sflush_r+0x7e>
 800b5ec:	1c42      	adds	r2, r0, #1
 800b5ee:	d101      	bne.n	800b5f4 <__sflush_r+0x7c>
 800b5f0:	682b      	ldr	r3, [r5, #0]
 800b5f2:	b903      	cbnz	r3, 800b5f6 <__sflush_r+0x7e>
 800b5f4:	6560      	str	r0, [r4, #84]	; 0x54
 800b5f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5f8:	602f      	str	r7, [r5, #0]
 800b5fa:	2900      	cmp	r1, #0
 800b5fc:	d0c9      	beq.n	800b592 <__sflush_r+0x1a>
 800b5fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b602:	4299      	cmp	r1, r3
 800b604:	d002      	beq.n	800b60c <__sflush_r+0x94>
 800b606:	4628      	mov	r0, r5
 800b608:	f7ff fa92 	bl	800ab30 <_free_r>
 800b60c:	2000      	movs	r0, #0
 800b60e:	6360      	str	r0, [r4, #52]	; 0x34
 800b610:	e7c0      	b.n	800b594 <__sflush_r+0x1c>
 800b612:	2301      	movs	r3, #1
 800b614:	4628      	mov	r0, r5
 800b616:	47b0      	blx	r6
 800b618:	1c41      	adds	r1, r0, #1
 800b61a:	d1c8      	bne.n	800b5ae <__sflush_r+0x36>
 800b61c:	682b      	ldr	r3, [r5, #0]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d0c5      	beq.n	800b5ae <__sflush_r+0x36>
 800b622:	2b1d      	cmp	r3, #29
 800b624:	d001      	beq.n	800b62a <__sflush_r+0xb2>
 800b626:	2b16      	cmp	r3, #22
 800b628:	d101      	bne.n	800b62e <__sflush_r+0xb6>
 800b62a:	602f      	str	r7, [r5, #0]
 800b62c:	e7b1      	b.n	800b592 <__sflush_r+0x1a>
 800b62e:	89a3      	ldrh	r3, [r4, #12]
 800b630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b634:	81a3      	strh	r3, [r4, #12]
 800b636:	e7ad      	b.n	800b594 <__sflush_r+0x1c>
 800b638:	690f      	ldr	r7, [r1, #16]
 800b63a:	2f00      	cmp	r7, #0
 800b63c:	d0a9      	beq.n	800b592 <__sflush_r+0x1a>
 800b63e:	0793      	lsls	r3, r2, #30
 800b640:	680e      	ldr	r6, [r1, #0]
 800b642:	bf08      	it	eq
 800b644:	694b      	ldreq	r3, [r1, #20]
 800b646:	600f      	str	r7, [r1, #0]
 800b648:	bf18      	it	ne
 800b64a:	2300      	movne	r3, #0
 800b64c:	eba6 0807 	sub.w	r8, r6, r7
 800b650:	608b      	str	r3, [r1, #8]
 800b652:	f1b8 0f00 	cmp.w	r8, #0
 800b656:	dd9c      	ble.n	800b592 <__sflush_r+0x1a>
 800b658:	6a21      	ldr	r1, [r4, #32]
 800b65a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b65c:	4643      	mov	r3, r8
 800b65e:	463a      	mov	r2, r7
 800b660:	4628      	mov	r0, r5
 800b662:	47b0      	blx	r6
 800b664:	2800      	cmp	r0, #0
 800b666:	dc06      	bgt.n	800b676 <__sflush_r+0xfe>
 800b668:	89a3      	ldrh	r3, [r4, #12]
 800b66a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b66e:	81a3      	strh	r3, [r4, #12]
 800b670:	f04f 30ff 	mov.w	r0, #4294967295
 800b674:	e78e      	b.n	800b594 <__sflush_r+0x1c>
 800b676:	4407      	add	r7, r0
 800b678:	eba8 0800 	sub.w	r8, r8, r0
 800b67c:	e7e9      	b.n	800b652 <__sflush_r+0xda>
 800b67e:	bf00      	nop
 800b680:	dfbffffe 	.word	0xdfbffffe

0800b684 <_fflush_r>:
 800b684:	b538      	push	{r3, r4, r5, lr}
 800b686:	690b      	ldr	r3, [r1, #16]
 800b688:	4605      	mov	r5, r0
 800b68a:	460c      	mov	r4, r1
 800b68c:	b913      	cbnz	r3, 800b694 <_fflush_r+0x10>
 800b68e:	2500      	movs	r5, #0
 800b690:	4628      	mov	r0, r5
 800b692:	bd38      	pop	{r3, r4, r5, pc}
 800b694:	b118      	cbz	r0, 800b69e <_fflush_r+0x1a>
 800b696:	6a03      	ldr	r3, [r0, #32]
 800b698:	b90b      	cbnz	r3, 800b69e <_fflush_r+0x1a>
 800b69a:	f7ff f823 	bl	800a6e4 <__sinit>
 800b69e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d0f3      	beq.n	800b68e <_fflush_r+0xa>
 800b6a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b6a8:	07d0      	lsls	r0, r2, #31
 800b6aa:	d404      	bmi.n	800b6b6 <_fflush_r+0x32>
 800b6ac:	0599      	lsls	r1, r3, #22
 800b6ae:	d402      	bmi.n	800b6b6 <_fflush_r+0x32>
 800b6b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6b2:	f7ff fa2c 	bl	800ab0e <__retarget_lock_acquire_recursive>
 800b6b6:	4628      	mov	r0, r5
 800b6b8:	4621      	mov	r1, r4
 800b6ba:	f7ff ff5d 	bl	800b578 <__sflush_r>
 800b6be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b6c0:	07da      	lsls	r2, r3, #31
 800b6c2:	4605      	mov	r5, r0
 800b6c4:	d4e4      	bmi.n	800b690 <_fflush_r+0xc>
 800b6c6:	89a3      	ldrh	r3, [r4, #12]
 800b6c8:	059b      	lsls	r3, r3, #22
 800b6ca:	d4e1      	bmi.n	800b690 <_fflush_r+0xc>
 800b6cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6ce:	f7ff fa1f 	bl	800ab10 <__retarget_lock_release_recursive>
 800b6d2:	e7dd      	b.n	800b690 <_fflush_r+0xc>

0800b6d4 <__swhatbuf_r>:
 800b6d4:	b570      	push	{r4, r5, r6, lr}
 800b6d6:	460c      	mov	r4, r1
 800b6d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6dc:	2900      	cmp	r1, #0
 800b6de:	b096      	sub	sp, #88	; 0x58
 800b6e0:	4615      	mov	r5, r2
 800b6e2:	461e      	mov	r6, r3
 800b6e4:	da0d      	bge.n	800b702 <__swhatbuf_r+0x2e>
 800b6e6:	89a3      	ldrh	r3, [r4, #12]
 800b6e8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b6ec:	f04f 0100 	mov.w	r1, #0
 800b6f0:	bf0c      	ite	eq
 800b6f2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b6f6:	2340      	movne	r3, #64	; 0x40
 800b6f8:	2000      	movs	r0, #0
 800b6fa:	6031      	str	r1, [r6, #0]
 800b6fc:	602b      	str	r3, [r5, #0]
 800b6fe:	b016      	add	sp, #88	; 0x58
 800b700:	bd70      	pop	{r4, r5, r6, pc}
 800b702:	466a      	mov	r2, sp
 800b704:	f000 f862 	bl	800b7cc <_fstat_r>
 800b708:	2800      	cmp	r0, #0
 800b70a:	dbec      	blt.n	800b6e6 <__swhatbuf_r+0x12>
 800b70c:	9901      	ldr	r1, [sp, #4]
 800b70e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b712:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b716:	4259      	negs	r1, r3
 800b718:	4159      	adcs	r1, r3
 800b71a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b71e:	e7eb      	b.n	800b6f8 <__swhatbuf_r+0x24>

0800b720 <__smakebuf_r>:
 800b720:	898b      	ldrh	r3, [r1, #12]
 800b722:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b724:	079d      	lsls	r5, r3, #30
 800b726:	4606      	mov	r6, r0
 800b728:	460c      	mov	r4, r1
 800b72a:	d507      	bpl.n	800b73c <__smakebuf_r+0x1c>
 800b72c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b730:	6023      	str	r3, [r4, #0]
 800b732:	6123      	str	r3, [r4, #16]
 800b734:	2301      	movs	r3, #1
 800b736:	6163      	str	r3, [r4, #20]
 800b738:	b002      	add	sp, #8
 800b73a:	bd70      	pop	{r4, r5, r6, pc}
 800b73c:	ab01      	add	r3, sp, #4
 800b73e:	466a      	mov	r2, sp
 800b740:	f7ff ffc8 	bl	800b6d4 <__swhatbuf_r>
 800b744:	9900      	ldr	r1, [sp, #0]
 800b746:	4605      	mov	r5, r0
 800b748:	4630      	mov	r0, r6
 800b74a:	f7ff fa5d 	bl	800ac08 <_malloc_r>
 800b74e:	b948      	cbnz	r0, 800b764 <__smakebuf_r+0x44>
 800b750:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b754:	059a      	lsls	r2, r3, #22
 800b756:	d4ef      	bmi.n	800b738 <__smakebuf_r+0x18>
 800b758:	f023 0303 	bic.w	r3, r3, #3
 800b75c:	f043 0302 	orr.w	r3, r3, #2
 800b760:	81a3      	strh	r3, [r4, #12]
 800b762:	e7e3      	b.n	800b72c <__smakebuf_r+0xc>
 800b764:	89a3      	ldrh	r3, [r4, #12]
 800b766:	6020      	str	r0, [r4, #0]
 800b768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b76c:	81a3      	strh	r3, [r4, #12]
 800b76e:	9b00      	ldr	r3, [sp, #0]
 800b770:	6163      	str	r3, [r4, #20]
 800b772:	9b01      	ldr	r3, [sp, #4]
 800b774:	6120      	str	r0, [r4, #16]
 800b776:	b15b      	cbz	r3, 800b790 <__smakebuf_r+0x70>
 800b778:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b77c:	4630      	mov	r0, r6
 800b77e:	f000 f837 	bl	800b7f0 <_isatty_r>
 800b782:	b128      	cbz	r0, 800b790 <__smakebuf_r+0x70>
 800b784:	89a3      	ldrh	r3, [r4, #12]
 800b786:	f023 0303 	bic.w	r3, r3, #3
 800b78a:	f043 0301 	orr.w	r3, r3, #1
 800b78e:	81a3      	strh	r3, [r4, #12]
 800b790:	89a3      	ldrh	r3, [r4, #12]
 800b792:	431d      	orrs	r5, r3
 800b794:	81a5      	strh	r5, [r4, #12]
 800b796:	e7cf      	b.n	800b738 <__smakebuf_r+0x18>

0800b798 <memmove>:
 800b798:	4288      	cmp	r0, r1
 800b79a:	b510      	push	{r4, lr}
 800b79c:	eb01 0402 	add.w	r4, r1, r2
 800b7a0:	d902      	bls.n	800b7a8 <memmove+0x10>
 800b7a2:	4284      	cmp	r4, r0
 800b7a4:	4623      	mov	r3, r4
 800b7a6:	d807      	bhi.n	800b7b8 <memmove+0x20>
 800b7a8:	1e43      	subs	r3, r0, #1
 800b7aa:	42a1      	cmp	r1, r4
 800b7ac:	d008      	beq.n	800b7c0 <memmove+0x28>
 800b7ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b7b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b7b6:	e7f8      	b.n	800b7aa <memmove+0x12>
 800b7b8:	4402      	add	r2, r0
 800b7ba:	4601      	mov	r1, r0
 800b7bc:	428a      	cmp	r2, r1
 800b7be:	d100      	bne.n	800b7c2 <memmove+0x2a>
 800b7c0:	bd10      	pop	{r4, pc}
 800b7c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b7c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b7ca:	e7f7      	b.n	800b7bc <memmove+0x24>

0800b7cc <_fstat_r>:
 800b7cc:	b538      	push	{r3, r4, r5, lr}
 800b7ce:	4d07      	ldr	r5, [pc, #28]	; (800b7ec <_fstat_r+0x20>)
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	4604      	mov	r4, r0
 800b7d4:	4608      	mov	r0, r1
 800b7d6:	4611      	mov	r1, r2
 800b7d8:	602b      	str	r3, [r5, #0]
 800b7da:	f7f6 ff96 	bl	800270a <_fstat>
 800b7de:	1c43      	adds	r3, r0, #1
 800b7e0:	d102      	bne.n	800b7e8 <_fstat_r+0x1c>
 800b7e2:	682b      	ldr	r3, [r5, #0]
 800b7e4:	b103      	cbz	r3, 800b7e8 <_fstat_r+0x1c>
 800b7e6:	6023      	str	r3, [r4, #0]
 800b7e8:	bd38      	pop	{r3, r4, r5, pc}
 800b7ea:	bf00      	nop
 800b7ec:	20000880 	.word	0x20000880

0800b7f0 <_isatty_r>:
 800b7f0:	b538      	push	{r3, r4, r5, lr}
 800b7f2:	4d06      	ldr	r5, [pc, #24]	; (800b80c <_isatty_r+0x1c>)
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	4604      	mov	r4, r0
 800b7f8:	4608      	mov	r0, r1
 800b7fa:	602b      	str	r3, [r5, #0]
 800b7fc:	f7f6 ff95 	bl	800272a <_isatty>
 800b800:	1c43      	adds	r3, r0, #1
 800b802:	d102      	bne.n	800b80a <_isatty_r+0x1a>
 800b804:	682b      	ldr	r3, [r5, #0]
 800b806:	b103      	cbz	r3, 800b80a <_isatty_r+0x1a>
 800b808:	6023      	str	r3, [r4, #0]
 800b80a:	bd38      	pop	{r3, r4, r5, pc}
 800b80c:	20000880 	.word	0x20000880

0800b810 <_sbrk_r>:
 800b810:	b538      	push	{r3, r4, r5, lr}
 800b812:	4d06      	ldr	r5, [pc, #24]	; (800b82c <_sbrk_r+0x1c>)
 800b814:	2300      	movs	r3, #0
 800b816:	4604      	mov	r4, r0
 800b818:	4608      	mov	r0, r1
 800b81a:	602b      	str	r3, [r5, #0]
 800b81c:	f7f6 ff9e 	bl	800275c <_sbrk>
 800b820:	1c43      	adds	r3, r0, #1
 800b822:	d102      	bne.n	800b82a <_sbrk_r+0x1a>
 800b824:	682b      	ldr	r3, [r5, #0]
 800b826:	b103      	cbz	r3, 800b82a <_sbrk_r+0x1a>
 800b828:	6023      	str	r3, [r4, #0]
 800b82a:	bd38      	pop	{r3, r4, r5, pc}
 800b82c:	20000880 	.word	0x20000880

0800b830 <_realloc_r>:
 800b830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b834:	4680      	mov	r8, r0
 800b836:	4614      	mov	r4, r2
 800b838:	460e      	mov	r6, r1
 800b83a:	b921      	cbnz	r1, 800b846 <_realloc_r+0x16>
 800b83c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b840:	4611      	mov	r1, r2
 800b842:	f7ff b9e1 	b.w	800ac08 <_malloc_r>
 800b846:	b92a      	cbnz	r2, 800b854 <_realloc_r+0x24>
 800b848:	f7ff f972 	bl	800ab30 <_free_r>
 800b84c:	4625      	mov	r5, r4
 800b84e:	4628      	mov	r0, r5
 800b850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b854:	f000 f81b 	bl	800b88e <_malloc_usable_size_r>
 800b858:	4284      	cmp	r4, r0
 800b85a:	4607      	mov	r7, r0
 800b85c:	d802      	bhi.n	800b864 <_realloc_r+0x34>
 800b85e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b862:	d812      	bhi.n	800b88a <_realloc_r+0x5a>
 800b864:	4621      	mov	r1, r4
 800b866:	4640      	mov	r0, r8
 800b868:	f7ff f9ce 	bl	800ac08 <_malloc_r>
 800b86c:	4605      	mov	r5, r0
 800b86e:	2800      	cmp	r0, #0
 800b870:	d0ed      	beq.n	800b84e <_realloc_r+0x1e>
 800b872:	42bc      	cmp	r4, r7
 800b874:	4622      	mov	r2, r4
 800b876:	4631      	mov	r1, r6
 800b878:	bf28      	it	cs
 800b87a:	463a      	movcs	r2, r7
 800b87c:	f7ff f949 	bl	800ab12 <memcpy>
 800b880:	4631      	mov	r1, r6
 800b882:	4640      	mov	r0, r8
 800b884:	f7ff f954 	bl	800ab30 <_free_r>
 800b888:	e7e1      	b.n	800b84e <_realloc_r+0x1e>
 800b88a:	4635      	mov	r5, r6
 800b88c:	e7df      	b.n	800b84e <_realloc_r+0x1e>

0800b88e <_malloc_usable_size_r>:
 800b88e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b892:	1f18      	subs	r0, r3, #4
 800b894:	2b00      	cmp	r3, #0
 800b896:	bfbc      	itt	lt
 800b898:	580b      	ldrlt	r3, [r1, r0]
 800b89a:	18c0      	addlt	r0, r0, r3
 800b89c:	4770      	bx	lr
	...

0800b8a0 <cos>:
 800b8a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b8a2:	ec53 2b10 	vmov	r2, r3, d0
 800b8a6:	4826      	ldr	r0, [pc, #152]	; (800b940 <cos+0xa0>)
 800b8a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b8ac:	4281      	cmp	r1, r0
 800b8ae:	dc06      	bgt.n	800b8be <cos+0x1e>
 800b8b0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800b938 <cos+0x98>
 800b8b4:	b005      	add	sp, #20
 800b8b6:	f85d eb04 	ldr.w	lr, [sp], #4
 800b8ba:	f000 b9ad 	b.w	800bc18 <__kernel_cos>
 800b8be:	4821      	ldr	r0, [pc, #132]	; (800b944 <cos+0xa4>)
 800b8c0:	4281      	cmp	r1, r0
 800b8c2:	dd09      	ble.n	800b8d8 <cos+0x38>
 800b8c4:	ee10 0a10 	vmov	r0, s0
 800b8c8:	4619      	mov	r1, r3
 800b8ca:	f7f4 fe07 	bl	80004dc <__aeabi_dsub>
 800b8ce:	ec41 0b10 	vmov	d0, r0, r1
 800b8d2:	b005      	add	sp, #20
 800b8d4:	f85d fb04 	ldr.w	pc, [sp], #4
 800b8d8:	4668      	mov	r0, sp
 800b8da:	f000 fb25 	bl	800bf28 <__ieee754_rem_pio2>
 800b8de:	f000 0003 	and.w	r0, r0, #3
 800b8e2:	2801      	cmp	r0, #1
 800b8e4:	d00b      	beq.n	800b8fe <cos+0x5e>
 800b8e6:	2802      	cmp	r0, #2
 800b8e8:	d016      	beq.n	800b918 <cos+0x78>
 800b8ea:	b9e0      	cbnz	r0, 800b926 <cos+0x86>
 800b8ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b8f0:	ed9d 0b00 	vldr	d0, [sp]
 800b8f4:	f000 f990 	bl	800bc18 <__kernel_cos>
 800b8f8:	ec51 0b10 	vmov	r0, r1, d0
 800b8fc:	e7e7      	b.n	800b8ce <cos+0x2e>
 800b8fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b902:	ed9d 0b00 	vldr	d0, [sp]
 800b906:	f000 fa4f 	bl	800bda8 <__kernel_sin>
 800b90a:	ec53 2b10 	vmov	r2, r3, d0
 800b90e:	ee10 0a10 	vmov	r0, s0
 800b912:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b916:	e7da      	b.n	800b8ce <cos+0x2e>
 800b918:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b91c:	ed9d 0b00 	vldr	d0, [sp]
 800b920:	f000 f97a 	bl	800bc18 <__kernel_cos>
 800b924:	e7f1      	b.n	800b90a <cos+0x6a>
 800b926:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b92a:	ed9d 0b00 	vldr	d0, [sp]
 800b92e:	2001      	movs	r0, #1
 800b930:	f000 fa3a 	bl	800bda8 <__kernel_sin>
 800b934:	e7e0      	b.n	800b8f8 <cos+0x58>
 800b936:	bf00      	nop
	...
 800b940:	3fe921fb 	.word	0x3fe921fb
 800b944:	7fefffff 	.word	0x7fefffff

0800b948 <sin>:
 800b948:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b94a:	ec53 2b10 	vmov	r2, r3, d0
 800b94e:	4828      	ldr	r0, [pc, #160]	; (800b9f0 <sin+0xa8>)
 800b950:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b954:	4281      	cmp	r1, r0
 800b956:	dc07      	bgt.n	800b968 <sin+0x20>
 800b958:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800b9e8 <sin+0xa0>
 800b95c:	2000      	movs	r0, #0
 800b95e:	b005      	add	sp, #20
 800b960:	f85d eb04 	ldr.w	lr, [sp], #4
 800b964:	f000 ba20 	b.w	800bda8 <__kernel_sin>
 800b968:	4822      	ldr	r0, [pc, #136]	; (800b9f4 <sin+0xac>)
 800b96a:	4281      	cmp	r1, r0
 800b96c:	dd09      	ble.n	800b982 <sin+0x3a>
 800b96e:	ee10 0a10 	vmov	r0, s0
 800b972:	4619      	mov	r1, r3
 800b974:	f7f4 fdb2 	bl	80004dc <__aeabi_dsub>
 800b978:	ec41 0b10 	vmov	d0, r0, r1
 800b97c:	b005      	add	sp, #20
 800b97e:	f85d fb04 	ldr.w	pc, [sp], #4
 800b982:	4668      	mov	r0, sp
 800b984:	f000 fad0 	bl	800bf28 <__ieee754_rem_pio2>
 800b988:	f000 0003 	and.w	r0, r0, #3
 800b98c:	2801      	cmp	r0, #1
 800b98e:	d00c      	beq.n	800b9aa <sin+0x62>
 800b990:	2802      	cmp	r0, #2
 800b992:	d011      	beq.n	800b9b8 <sin+0x70>
 800b994:	b9f0      	cbnz	r0, 800b9d4 <sin+0x8c>
 800b996:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b99a:	ed9d 0b00 	vldr	d0, [sp]
 800b99e:	2001      	movs	r0, #1
 800b9a0:	f000 fa02 	bl	800bda8 <__kernel_sin>
 800b9a4:	ec51 0b10 	vmov	r0, r1, d0
 800b9a8:	e7e6      	b.n	800b978 <sin+0x30>
 800b9aa:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b9ae:	ed9d 0b00 	vldr	d0, [sp]
 800b9b2:	f000 f931 	bl	800bc18 <__kernel_cos>
 800b9b6:	e7f5      	b.n	800b9a4 <sin+0x5c>
 800b9b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b9bc:	ed9d 0b00 	vldr	d0, [sp]
 800b9c0:	2001      	movs	r0, #1
 800b9c2:	f000 f9f1 	bl	800bda8 <__kernel_sin>
 800b9c6:	ec53 2b10 	vmov	r2, r3, d0
 800b9ca:	ee10 0a10 	vmov	r0, s0
 800b9ce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b9d2:	e7d1      	b.n	800b978 <sin+0x30>
 800b9d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b9d8:	ed9d 0b00 	vldr	d0, [sp]
 800b9dc:	f000 f91c 	bl	800bc18 <__kernel_cos>
 800b9e0:	e7f1      	b.n	800b9c6 <sin+0x7e>
 800b9e2:	bf00      	nop
 800b9e4:	f3af 8000 	nop.w
	...
 800b9f0:	3fe921fb 	.word	0x3fe921fb
 800b9f4:	7fefffff 	.word	0x7fefffff

0800b9f8 <powf>:
 800b9f8:	b508      	push	{r3, lr}
 800b9fa:	ed2d 8b04 	vpush	{d8-d9}
 800b9fe:	eeb0 8a60 	vmov.f32	s16, s1
 800ba02:	eeb0 9a40 	vmov.f32	s18, s0
 800ba06:	f000 fd45 	bl	800c494 <__ieee754_powf>
 800ba0a:	eeb4 8a48 	vcmp.f32	s16, s16
 800ba0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba12:	eef0 8a40 	vmov.f32	s17, s0
 800ba16:	d63e      	bvs.n	800ba96 <powf+0x9e>
 800ba18:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800ba1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba20:	d112      	bne.n	800ba48 <powf+0x50>
 800ba22:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ba26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba2a:	d039      	beq.n	800baa0 <powf+0xa8>
 800ba2c:	eeb0 0a48 	vmov.f32	s0, s16
 800ba30:	f000 f8e2 	bl	800bbf8 <finitef>
 800ba34:	b378      	cbz	r0, 800ba96 <powf+0x9e>
 800ba36:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ba3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba3e:	d52a      	bpl.n	800ba96 <powf+0x9e>
 800ba40:	f7ff f83a 	bl	800aab8 <__errno>
 800ba44:	2322      	movs	r3, #34	; 0x22
 800ba46:	e014      	b.n	800ba72 <powf+0x7a>
 800ba48:	f000 f8d6 	bl	800bbf8 <finitef>
 800ba4c:	b998      	cbnz	r0, 800ba76 <powf+0x7e>
 800ba4e:	eeb0 0a49 	vmov.f32	s0, s18
 800ba52:	f000 f8d1 	bl	800bbf8 <finitef>
 800ba56:	b170      	cbz	r0, 800ba76 <powf+0x7e>
 800ba58:	eeb0 0a48 	vmov.f32	s0, s16
 800ba5c:	f000 f8cc 	bl	800bbf8 <finitef>
 800ba60:	b148      	cbz	r0, 800ba76 <powf+0x7e>
 800ba62:	eef4 8a68 	vcmp.f32	s17, s17
 800ba66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba6a:	d7e9      	bvc.n	800ba40 <powf+0x48>
 800ba6c:	f7ff f824 	bl	800aab8 <__errno>
 800ba70:	2321      	movs	r3, #33	; 0x21
 800ba72:	6003      	str	r3, [r0, #0]
 800ba74:	e00f      	b.n	800ba96 <powf+0x9e>
 800ba76:	eef5 8a40 	vcmp.f32	s17, #0.0
 800ba7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba7e:	d10a      	bne.n	800ba96 <powf+0x9e>
 800ba80:	eeb0 0a49 	vmov.f32	s0, s18
 800ba84:	f000 f8b8 	bl	800bbf8 <finitef>
 800ba88:	b128      	cbz	r0, 800ba96 <powf+0x9e>
 800ba8a:	eeb0 0a48 	vmov.f32	s0, s16
 800ba8e:	f000 f8b3 	bl	800bbf8 <finitef>
 800ba92:	2800      	cmp	r0, #0
 800ba94:	d1d4      	bne.n	800ba40 <powf+0x48>
 800ba96:	eeb0 0a68 	vmov.f32	s0, s17
 800ba9a:	ecbd 8b04 	vpop	{d8-d9}
 800ba9e:	bd08      	pop	{r3, pc}
 800baa0:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800baa4:	e7f7      	b.n	800ba96 <powf+0x9e>
	...

0800baa8 <sqrtf>:
 800baa8:	b508      	push	{r3, lr}
 800baaa:	ed2d 8b02 	vpush	{d8}
 800baae:	eeb0 8a40 	vmov.f32	s16, s0
 800bab2:	f000 f8ae 	bl	800bc12 <__ieee754_sqrtf>
 800bab6:	eeb4 8a48 	vcmp.f32	s16, s16
 800baba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800babe:	d60c      	bvs.n	800bada <sqrtf+0x32>
 800bac0:	eddf 8a07 	vldr	s17, [pc, #28]	; 800bae0 <sqrtf+0x38>
 800bac4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800bac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bacc:	d505      	bpl.n	800bada <sqrtf+0x32>
 800bace:	f7fe fff3 	bl	800aab8 <__errno>
 800bad2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800bad6:	2321      	movs	r3, #33	; 0x21
 800bad8:	6003      	str	r3, [r0, #0]
 800bada:	ecbd 8b02 	vpop	{d8}
 800bade:	bd08      	pop	{r3, pc}
 800bae0:	00000000 	.word	0x00000000

0800bae4 <cosf>:
 800bae4:	ee10 3a10 	vmov	r3, s0
 800bae8:	b507      	push	{r0, r1, r2, lr}
 800baea:	4a1e      	ldr	r2, [pc, #120]	; (800bb64 <cosf+0x80>)
 800baec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800baf0:	4293      	cmp	r3, r2
 800baf2:	dc06      	bgt.n	800bb02 <cosf+0x1e>
 800baf4:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800bb68 <cosf+0x84>
 800baf8:	b003      	add	sp, #12
 800bafa:	f85d eb04 	ldr.w	lr, [sp], #4
 800bafe:	f000 bc23 	b.w	800c348 <__kernel_cosf>
 800bb02:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800bb06:	db04      	blt.n	800bb12 <cosf+0x2e>
 800bb08:	ee30 0a40 	vsub.f32	s0, s0, s0
 800bb0c:	b003      	add	sp, #12
 800bb0e:	f85d fb04 	ldr.w	pc, [sp], #4
 800bb12:	4668      	mov	r0, sp
 800bb14:	f000 ff88 	bl	800ca28 <__ieee754_rem_pio2f>
 800bb18:	f000 0003 	and.w	r0, r0, #3
 800bb1c:	2801      	cmp	r0, #1
 800bb1e:	d009      	beq.n	800bb34 <cosf+0x50>
 800bb20:	2802      	cmp	r0, #2
 800bb22:	d010      	beq.n	800bb46 <cosf+0x62>
 800bb24:	b9b0      	cbnz	r0, 800bb54 <cosf+0x70>
 800bb26:	eddd 0a01 	vldr	s1, [sp, #4]
 800bb2a:	ed9d 0a00 	vldr	s0, [sp]
 800bb2e:	f000 fc0b 	bl	800c348 <__kernel_cosf>
 800bb32:	e7eb      	b.n	800bb0c <cosf+0x28>
 800bb34:	eddd 0a01 	vldr	s1, [sp, #4]
 800bb38:	ed9d 0a00 	vldr	s0, [sp]
 800bb3c:	f000 fc62 	bl	800c404 <__kernel_sinf>
 800bb40:	eeb1 0a40 	vneg.f32	s0, s0
 800bb44:	e7e2      	b.n	800bb0c <cosf+0x28>
 800bb46:	eddd 0a01 	vldr	s1, [sp, #4]
 800bb4a:	ed9d 0a00 	vldr	s0, [sp]
 800bb4e:	f000 fbfb 	bl	800c348 <__kernel_cosf>
 800bb52:	e7f5      	b.n	800bb40 <cosf+0x5c>
 800bb54:	eddd 0a01 	vldr	s1, [sp, #4]
 800bb58:	ed9d 0a00 	vldr	s0, [sp]
 800bb5c:	2001      	movs	r0, #1
 800bb5e:	f000 fc51 	bl	800c404 <__kernel_sinf>
 800bb62:	e7d3      	b.n	800bb0c <cosf+0x28>
 800bb64:	3f490fd8 	.word	0x3f490fd8
 800bb68:	00000000 	.word	0x00000000

0800bb6c <sinf>:
 800bb6c:	ee10 3a10 	vmov	r3, s0
 800bb70:	b507      	push	{r0, r1, r2, lr}
 800bb72:	4a1f      	ldr	r2, [pc, #124]	; (800bbf0 <sinf+0x84>)
 800bb74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	dc07      	bgt.n	800bb8c <sinf+0x20>
 800bb7c:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800bbf4 <sinf+0x88>
 800bb80:	2000      	movs	r0, #0
 800bb82:	b003      	add	sp, #12
 800bb84:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb88:	f000 bc3c 	b.w	800c404 <__kernel_sinf>
 800bb8c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800bb90:	db04      	blt.n	800bb9c <sinf+0x30>
 800bb92:	ee30 0a40 	vsub.f32	s0, s0, s0
 800bb96:	b003      	add	sp, #12
 800bb98:	f85d fb04 	ldr.w	pc, [sp], #4
 800bb9c:	4668      	mov	r0, sp
 800bb9e:	f000 ff43 	bl	800ca28 <__ieee754_rem_pio2f>
 800bba2:	f000 0003 	and.w	r0, r0, #3
 800bba6:	2801      	cmp	r0, #1
 800bba8:	d00a      	beq.n	800bbc0 <sinf+0x54>
 800bbaa:	2802      	cmp	r0, #2
 800bbac:	d00f      	beq.n	800bbce <sinf+0x62>
 800bbae:	b9c0      	cbnz	r0, 800bbe2 <sinf+0x76>
 800bbb0:	eddd 0a01 	vldr	s1, [sp, #4]
 800bbb4:	ed9d 0a00 	vldr	s0, [sp]
 800bbb8:	2001      	movs	r0, #1
 800bbba:	f000 fc23 	bl	800c404 <__kernel_sinf>
 800bbbe:	e7ea      	b.n	800bb96 <sinf+0x2a>
 800bbc0:	eddd 0a01 	vldr	s1, [sp, #4]
 800bbc4:	ed9d 0a00 	vldr	s0, [sp]
 800bbc8:	f000 fbbe 	bl	800c348 <__kernel_cosf>
 800bbcc:	e7e3      	b.n	800bb96 <sinf+0x2a>
 800bbce:	eddd 0a01 	vldr	s1, [sp, #4]
 800bbd2:	ed9d 0a00 	vldr	s0, [sp]
 800bbd6:	2001      	movs	r0, #1
 800bbd8:	f000 fc14 	bl	800c404 <__kernel_sinf>
 800bbdc:	eeb1 0a40 	vneg.f32	s0, s0
 800bbe0:	e7d9      	b.n	800bb96 <sinf+0x2a>
 800bbe2:	eddd 0a01 	vldr	s1, [sp, #4]
 800bbe6:	ed9d 0a00 	vldr	s0, [sp]
 800bbea:	f000 fbad 	bl	800c348 <__kernel_cosf>
 800bbee:	e7f5      	b.n	800bbdc <sinf+0x70>
 800bbf0:	3f490fd8 	.word	0x3f490fd8
 800bbf4:	00000000 	.word	0x00000000

0800bbf8 <finitef>:
 800bbf8:	b082      	sub	sp, #8
 800bbfa:	ed8d 0a01 	vstr	s0, [sp, #4]
 800bbfe:	9801      	ldr	r0, [sp, #4]
 800bc00:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800bc04:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800bc08:	bfac      	ite	ge
 800bc0a:	2000      	movge	r0, #0
 800bc0c:	2001      	movlt	r0, #1
 800bc0e:	b002      	add	sp, #8
 800bc10:	4770      	bx	lr

0800bc12 <__ieee754_sqrtf>:
 800bc12:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800bc16:	4770      	bx	lr

0800bc18 <__kernel_cos>:
 800bc18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc1c:	ec57 6b10 	vmov	r6, r7, d0
 800bc20:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800bc24:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800bc28:	ed8d 1b00 	vstr	d1, [sp]
 800bc2c:	da07      	bge.n	800bc3e <__kernel_cos+0x26>
 800bc2e:	ee10 0a10 	vmov	r0, s0
 800bc32:	4639      	mov	r1, r7
 800bc34:	f7f4 fe92 	bl	800095c <__aeabi_d2iz>
 800bc38:	2800      	cmp	r0, #0
 800bc3a:	f000 8088 	beq.w	800bd4e <__kernel_cos+0x136>
 800bc3e:	4632      	mov	r2, r6
 800bc40:	463b      	mov	r3, r7
 800bc42:	4630      	mov	r0, r6
 800bc44:	4639      	mov	r1, r7
 800bc46:	f7f4 fb1b 	bl	8000280 <__aeabi_dmul>
 800bc4a:	4b51      	ldr	r3, [pc, #324]	; (800bd90 <__kernel_cos+0x178>)
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	4604      	mov	r4, r0
 800bc50:	460d      	mov	r5, r1
 800bc52:	f7f4 fb15 	bl	8000280 <__aeabi_dmul>
 800bc56:	a340      	add	r3, pc, #256	; (adr r3, 800bd58 <__kernel_cos+0x140>)
 800bc58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc5c:	4682      	mov	sl, r0
 800bc5e:	468b      	mov	fp, r1
 800bc60:	4620      	mov	r0, r4
 800bc62:	4629      	mov	r1, r5
 800bc64:	f7f4 fb0c 	bl	8000280 <__aeabi_dmul>
 800bc68:	a33d      	add	r3, pc, #244	; (adr r3, 800bd60 <__kernel_cos+0x148>)
 800bc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc6e:	f7f4 fc37 	bl	80004e0 <__adddf3>
 800bc72:	4622      	mov	r2, r4
 800bc74:	462b      	mov	r3, r5
 800bc76:	f7f4 fb03 	bl	8000280 <__aeabi_dmul>
 800bc7a:	a33b      	add	r3, pc, #236	; (adr r3, 800bd68 <__kernel_cos+0x150>)
 800bc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc80:	f7f4 fc2c 	bl	80004dc <__aeabi_dsub>
 800bc84:	4622      	mov	r2, r4
 800bc86:	462b      	mov	r3, r5
 800bc88:	f7f4 fafa 	bl	8000280 <__aeabi_dmul>
 800bc8c:	a338      	add	r3, pc, #224	; (adr r3, 800bd70 <__kernel_cos+0x158>)
 800bc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc92:	f7f4 fc25 	bl	80004e0 <__adddf3>
 800bc96:	4622      	mov	r2, r4
 800bc98:	462b      	mov	r3, r5
 800bc9a:	f7f4 faf1 	bl	8000280 <__aeabi_dmul>
 800bc9e:	a336      	add	r3, pc, #216	; (adr r3, 800bd78 <__kernel_cos+0x160>)
 800bca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca4:	f7f4 fc1a 	bl	80004dc <__aeabi_dsub>
 800bca8:	4622      	mov	r2, r4
 800bcaa:	462b      	mov	r3, r5
 800bcac:	f7f4 fae8 	bl	8000280 <__aeabi_dmul>
 800bcb0:	a333      	add	r3, pc, #204	; (adr r3, 800bd80 <__kernel_cos+0x168>)
 800bcb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb6:	f7f4 fc13 	bl	80004e0 <__adddf3>
 800bcba:	4622      	mov	r2, r4
 800bcbc:	462b      	mov	r3, r5
 800bcbe:	f7f4 fadf 	bl	8000280 <__aeabi_dmul>
 800bcc2:	4622      	mov	r2, r4
 800bcc4:	462b      	mov	r3, r5
 800bcc6:	f7f4 fadb 	bl	8000280 <__aeabi_dmul>
 800bcca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcce:	4604      	mov	r4, r0
 800bcd0:	460d      	mov	r5, r1
 800bcd2:	4630      	mov	r0, r6
 800bcd4:	4639      	mov	r1, r7
 800bcd6:	f7f4 fad3 	bl	8000280 <__aeabi_dmul>
 800bcda:	460b      	mov	r3, r1
 800bcdc:	4602      	mov	r2, r0
 800bcde:	4629      	mov	r1, r5
 800bce0:	4620      	mov	r0, r4
 800bce2:	f7f4 fbfb 	bl	80004dc <__aeabi_dsub>
 800bce6:	4b2b      	ldr	r3, [pc, #172]	; (800bd94 <__kernel_cos+0x17c>)
 800bce8:	4598      	cmp	r8, r3
 800bcea:	4606      	mov	r6, r0
 800bcec:	460f      	mov	r7, r1
 800bcee:	dc10      	bgt.n	800bd12 <__kernel_cos+0xfa>
 800bcf0:	4602      	mov	r2, r0
 800bcf2:	460b      	mov	r3, r1
 800bcf4:	4650      	mov	r0, sl
 800bcf6:	4659      	mov	r1, fp
 800bcf8:	f7f4 fbf0 	bl	80004dc <__aeabi_dsub>
 800bcfc:	460b      	mov	r3, r1
 800bcfe:	4926      	ldr	r1, [pc, #152]	; (800bd98 <__kernel_cos+0x180>)
 800bd00:	4602      	mov	r2, r0
 800bd02:	2000      	movs	r0, #0
 800bd04:	f7f4 fbea 	bl	80004dc <__aeabi_dsub>
 800bd08:	ec41 0b10 	vmov	d0, r0, r1
 800bd0c:	b003      	add	sp, #12
 800bd0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd12:	4b22      	ldr	r3, [pc, #136]	; (800bd9c <__kernel_cos+0x184>)
 800bd14:	4920      	ldr	r1, [pc, #128]	; (800bd98 <__kernel_cos+0x180>)
 800bd16:	4598      	cmp	r8, r3
 800bd18:	bfcc      	ite	gt
 800bd1a:	4d21      	ldrgt	r5, [pc, #132]	; (800bda0 <__kernel_cos+0x188>)
 800bd1c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800bd20:	2400      	movs	r4, #0
 800bd22:	4622      	mov	r2, r4
 800bd24:	462b      	mov	r3, r5
 800bd26:	2000      	movs	r0, #0
 800bd28:	f7f4 fbd8 	bl	80004dc <__aeabi_dsub>
 800bd2c:	4622      	mov	r2, r4
 800bd2e:	4680      	mov	r8, r0
 800bd30:	4689      	mov	r9, r1
 800bd32:	462b      	mov	r3, r5
 800bd34:	4650      	mov	r0, sl
 800bd36:	4659      	mov	r1, fp
 800bd38:	f7f4 fbd0 	bl	80004dc <__aeabi_dsub>
 800bd3c:	4632      	mov	r2, r6
 800bd3e:	463b      	mov	r3, r7
 800bd40:	f7f4 fbcc 	bl	80004dc <__aeabi_dsub>
 800bd44:	4602      	mov	r2, r0
 800bd46:	460b      	mov	r3, r1
 800bd48:	4640      	mov	r0, r8
 800bd4a:	4649      	mov	r1, r9
 800bd4c:	e7da      	b.n	800bd04 <__kernel_cos+0xec>
 800bd4e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800bd88 <__kernel_cos+0x170>
 800bd52:	e7db      	b.n	800bd0c <__kernel_cos+0xf4>
 800bd54:	f3af 8000 	nop.w
 800bd58:	be8838d4 	.word	0xbe8838d4
 800bd5c:	bda8fae9 	.word	0xbda8fae9
 800bd60:	bdb4b1c4 	.word	0xbdb4b1c4
 800bd64:	3e21ee9e 	.word	0x3e21ee9e
 800bd68:	809c52ad 	.word	0x809c52ad
 800bd6c:	3e927e4f 	.word	0x3e927e4f
 800bd70:	19cb1590 	.word	0x19cb1590
 800bd74:	3efa01a0 	.word	0x3efa01a0
 800bd78:	16c15177 	.word	0x16c15177
 800bd7c:	3f56c16c 	.word	0x3f56c16c
 800bd80:	5555554c 	.word	0x5555554c
 800bd84:	3fa55555 	.word	0x3fa55555
 800bd88:	00000000 	.word	0x00000000
 800bd8c:	3ff00000 	.word	0x3ff00000
 800bd90:	3fe00000 	.word	0x3fe00000
 800bd94:	3fd33332 	.word	0x3fd33332
 800bd98:	3ff00000 	.word	0x3ff00000
 800bd9c:	3fe90000 	.word	0x3fe90000
 800bda0:	3fd20000 	.word	0x3fd20000
 800bda4:	00000000 	.word	0x00000000

0800bda8 <__kernel_sin>:
 800bda8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdac:	ed2d 8b04 	vpush	{d8-d9}
 800bdb0:	eeb0 8a41 	vmov.f32	s16, s2
 800bdb4:	eef0 8a61 	vmov.f32	s17, s3
 800bdb8:	ec55 4b10 	vmov	r4, r5, d0
 800bdbc:	b083      	sub	sp, #12
 800bdbe:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bdc2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800bdc6:	9001      	str	r0, [sp, #4]
 800bdc8:	da06      	bge.n	800bdd8 <__kernel_sin+0x30>
 800bdca:	ee10 0a10 	vmov	r0, s0
 800bdce:	4629      	mov	r1, r5
 800bdd0:	f7f4 fdc4 	bl	800095c <__aeabi_d2iz>
 800bdd4:	2800      	cmp	r0, #0
 800bdd6:	d051      	beq.n	800be7c <__kernel_sin+0xd4>
 800bdd8:	4622      	mov	r2, r4
 800bdda:	462b      	mov	r3, r5
 800bddc:	4620      	mov	r0, r4
 800bdde:	4629      	mov	r1, r5
 800bde0:	f7f4 fa4e 	bl	8000280 <__aeabi_dmul>
 800bde4:	4682      	mov	sl, r0
 800bde6:	468b      	mov	fp, r1
 800bde8:	4602      	mov	r2, r0
 800bdea:	460b      	mov	r3, r1
 800bdec:	4620      	mov	r0, r4
 800bdee:	4629      	mov	r1, r5
 800bdf0:	f7f4 fa46 	bl	8000280 <__aeabi_dmul>
 800bdf4:	a341      	add	r3, pc, #260	; (adr r3, 800befc <__kernel_sin+0x154>)
 800bdf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdfa:	4680      	mov	r8, r0
 800bdfc:	4689      	mov	r9, r1
 800bdfe:	4650      	mov	r0, sl
 800be00:	4659      	mov	r1, fp
 800be02:	f7f4 fa3d 	bl	8000280 <__aeabi_dmul>
 800be06:	a33f      	add	r3, pc, #252	; (adr r3, 800bf04 <__kernel_sin+0x15c>)
 800be08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be0c:	f7f4 fb66 	bl	80004dc <__aeabi_dsub>
 800be10:	4652      	mov	r2, sl
 800be12:	465b      	mov	r3, fp
 800be14:	f7f4 fa34 	bl	8000280 <__aeabi_dmul>
 800be18:	a33c      	add	r3, pc, #240	; (adr r3, 800bf0c <__kernel_sin+0x164>)
 800be1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be1e:	f7f4 fb5f 	bl	80004e0 <__adddf3>
 800be22:	4652      	mov	r2, sl
 800be24:	465b      	mov	r3, fp
 800be26:	f7f4 fa2b 	bl	8000280 <__aeabi_dmul>
 800be2a:	a33a      	add	r3, pc, #232	; (adr r3, 800bf14 <__kernel_sin+0x16c>)
 800be2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be30:	f7f4 fb54 	bl	80004dc <__aeabi_dsub>
 800be34:	4652      	mov	r2, sl
 800be36:	465b      	mov	r3, fp
 800be38:	f7f4 fa22 	bl	8000280 <__aeabi_dmul>
 800be3c:	a337      	add	r3, pc, #220	; (adr r3, 800bf1c <__kernel_sin+0x174>)
 800be3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be42:	f7f4 fb4d 	bl	80004e0 <__adddf3>
 800be46:	9b01      	ldr	r3, [sp, #4]
 800be48:	4606      	mov	r6, r0
 800be4a:	460f      	mov	r7, r1
 800be4c:	b9eb      	cbnz	r3, 800be8a <__kernel_sin+0xe2>
 800be4e:	4602      	mov	r2, r0
 800be50:	460b      	mov	r3, r1
 800be52:	4650      	mov	r0, sl
 800be54:	4659      	mov	r1, fp
 800be56:	f7f4 fa13 	bl	8000280 <__aeabi_dmul>
 800be5a:	a325      	add	r3, pc, #148	; (adr r3, 800bef0 <__kernel_sin+0x148>)
 800be5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be60:	f7f4 fb3c 	bl	80004dc <__aeabi_dsub>
 800be64:	4642      	mov	r2, r8
 800be66:	464b      	mov	r3, r9
 800be68:	f7f4 fa0a 	bl	8000280 <__aeabi_dmul>
 800be6c:	4602      	mov	r2, r0
 800be6e:	460b      	mov	r3, r1
 800be70:	4620      	mov	r0, r4
 800be72:	4629      	mov	r1, r5
 800be74:	f7f4 fb34 	bl	80004e0 <__adddf3>
 800be78:	4604      	mov	r4, r0
 800be7a:	460d      	mov	r5, r1
 800be7c:	ec45 4b10 	vmov	d0, r4, r5
 800be80:	b003      	add	sp, #12
 800be82:	ecbd 8b04 	vpop	{d8-d9}
 800be86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be8a:	4b1b      	ldr	r3, [pc, #108]	; (800bef8 <__kernel_sin+0x150>)
 800be8c:	ec51 0b18 	vmov	r0, r1, d8
 800be90:	2200      	movs	r2, #0
 800be92:	f7f4 f9f5 	bl	8000280 <__aeabi_dmul>
 800be96:	4632      	mov	r2, r6
 800be98:	ec41 0b19 	vmov	d9, r0, r1
 800be9c:	463b      	mov	r3, r7
 800be9e:	4640      	mov	r0, r8
 800bea0:	4649      	mov	r1, r9
 800bea2:	f7f4 f9ed 	bl	8000280 <__aeabi_dmul>
 800bea6:	4602      	mov	r2, r0
 800bea8:	460b      	mov	r3, r1
 800beaa:	ec51 0b19 	vmov	r0, r1, d9
 800beae:	f7f4 fb15 	bl	80004dc <__aeabi_dsub>
 800beb2:	4652      	mov	r2, sl
 800beb4:	465b      	mov	r3, fp
 800beb6:	f7f4 f9e3 	bl	8000280 <__aeabi_dmul>
 800beba:	ec53 2b18 	vmov	r2, r3, d8
 800bebe:	f7f4 fb0d 	bl	80004dc <__aeabi_dsub>
 800bec2:	a30b      	add	r3, pc, #44	; (adr r3, 800bef0 <__kernel_sin+0x148>)
 800bec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec8:	4606      	mov	r6, r0
 800beca:	460f      	mov	r7, r1
 800becc:	4640      	mov	r0, r8
 800bece:	4649      	mov	r1, r9
 800bed0:	f7f4 f9d6 	bl	8000280 <__aeabi_dmul>
 800bed4:	4602      	mov	r2, r0
 800bed6:	460b      	mov	r3, r1
 800bed8:	4630      	mov	r0, r6
 800beda:	4639      	mov	r1, r7
 800bedc:	f7f4 fb00 	bl	80004e0 <__adddf3>
 800bee0:	4602      	mov	r2, r0
 800bee2:	460b      	mov	r3, r1
 800bee4:	4620      	mov	r0, r4
 800bee6:	4629      	mov	r1, r5
 800bee8:	f7f4 faf8 	bl	80004dc <__aeabi_dsub>
 800beec:	e7c4      	b.n	800be78 <__kernel_sin+0xd0>
 800beee:	bf00      	nop
 800bef0:	55555549 	.word	0x55555549
 800bef4:	3fc55555 	.word	0x3fc55555
 800bef8:	3fe00000 	.word	0x3fe00000
 800befc:	5acfd57c 	.word	0x5acfd57c
 800bf00:	3de5d93a 	.word	0x3de5d93a
 800bf04:	8a2b9ceb 	.word	0x8a2b9ceb
 800bf08:	3e5ae5e6 	.word	0x3e5ae5e6
 800bf0c:	57b1fe7d 	.word	0x57b1fe7d
 800bf10:	3ec71de3 	.word	0x3ec71de3
 800bf14:	19c161d5 	.word	0x19c161d5
 800bf18:	3f2a01a0 	.word	0x3f2a01a0
 800bf1c:	1110f8a6 	.word	0x1110f8a6
 800bf20:	3f811111 	.word	0x3f811111
 800bf24:	00000000 	.word	0x00000000

0800bf28 <__ieee754_rem_pio2>:
 800bf28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf2c:	ed2d 8b02 	vpush	{d8}
 800bf30:	ec55 4b10 	vmov	r4, r5, d0
 800bf34:	4bca      	ldr	r3, [pc, #808]	; (800c260 <__ieee754_rem_pio2+0x338>)
 800bf36:	b08b      	sub	sp, #44	; 0x2c
 800bf38:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800bf3c:	4598      	cmp	r8, r3
 800bf3e:	4682      	mov	sl, r0
 800bf40:	9502      	str	r5, [sp, #8]
 800bf42:	dc08      	bgt.n	800bf56 <__ieee754_rem_pio2+0x2e>
 800bf44:	2200      	movs	r2, #0
 800bf46:	2300      	movs	r3, #0
 800bf48:	ed80 0b00 	vstr	d0, [r0]
 800bf4c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800bf50:	f04f 0b00 	mov.w	fp, #0
 800bf54:	e028      	b.n	800bfa8 <__ieee754_rem_pio2+0x80>
 800bf56:	4bc3      	ldr	r3, [pc, #780]	; (800c264 <__ieee754_rem_pio2+0x33c>)
 800bf58:	4598      	cmp	r8, r3
 800bf5a:	dc78      	bgt.n	800c04e <__ieee754_rem_pio2+0x126>
 800bf5c:	9b02      	ldr	r3, [sp, #8]
 800bf5e:	4ec2      	ldr	r6, [pc, #776]	; (800c268 <__ieee754_rem_pio2+0x340>)
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	ee10 0a10 	vmov	r0, s0
 800bf66:	a3b0      	add	r3, pc, #704	; (adr r3, 800c228 <__ieee754_rem_pio2+0x300>)
 800bf68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf6c:	4629      	mov	r1, r5
 800bf6e:	dd39      	ble.n	800bfe4 <__ieee754_rem_pio2+0xbc>
 800bf70:	f7f4 fab4 	bl	80004dc <__aeabi_dsub>
 800bf74:	45b0      	cmp	r8, r6
 800bf76:	4604      	mov	r4, r0
 800bf78:	460d      	mov	r5, r1
 800bf7a:	d01b      	beq.n	800bfb4 <__ieee754_rem_pio2+0x8c>
 800bf7c:	a3ac      	add	r3, pc, #688	; (adr r3, 800c230 <__ieee754_rem_pio2+0x308>)
 800bf7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf82:	f7f4 faab 	bl	80004dc <__aeabi_dsub>
 800bf86:	4602      	mov	r2, r0
 800bf88:	460b      	mov	r3, r1
 800bf8a:	e9ca 2300 	strd	r2, r3, [sl]
 800bf8e:	4620      	mov	r0, r4
 800bf90:	4629      	mov	r1, r5
 800bf92:	f7f4 faa3 	bl	80004dc <__aeabi_dsub>
 800bf96:	a3a6      	add	r3, pc, #664	; (adr r3, 800c230 <__ieee754_rem_pio2+0x308>)
 800bf98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf9c:	f7f4 fa9e 	bl	80004dc <__aeabi_dsub>
 800bfa0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bfa4:	f04f 0b01 	mov.w	fp, #1
 800bfa8:	4658      	mov	r0, fp
 800bfaa:	b00b      	add	sp, #44	; 0x2c
 800bfac:	ecbd 8b02 	vpop	{d8}
 800bfb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfb4:	a3a0      	add	r3, pc, #640	; (adr r3, 800c238 <__ieee754_rem_pio2+0x310>)
 800bfb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfba:	f7f4 fa8f 	bl	80004dc <__aeabi_dsub>
 800bfbe:	a3a0      	add	r3, pc, #640	; (adr r3, 800c240 <__ieee754_rem_pio2+0x318>)
 800bfc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc4:	4604      	mov	r4, r0
 800bfc6:	460d      	mov	r5, r1
 800bfc8:	f7f4 fa88 	bl	80004dc <__aeabi_dsub>
 800bfcc:	4602      	mov	r2, r0
 800bfce:	460b      	mov	r3, r1
 800bfd0:	e9ca 2300 	strd	r2, r3, [sl]
 800bfd4:	4620      	mov	r0, r4
 800bfd6:	4629      	mov	r1, r5
 800bfd8:	f7f4 fa80 	bl	80004dc <__aeabi_dsub>
 800bfdc:	a398      	add	r3, pc, #608	; (adr r3, 800c240 <__ieee754_rem_pio2+0x318>)
 800bfde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe2:	e7db      	b.n	800bf9c <__ieee754_rem_pio2+0x74>
 800bfe4:	f7f4 fa7c 	bl	80004e0 <__adddf3>
 800bfe8:	45b0      	cmp	r8, r6
 800bfea:	4604      	mov	r4, r0
 800bfec:	460d      	mov	r5, r1
 800bfee:	d016      	beq.n	800c01e <__ieee754_rem_pio2+0xf6>
 800bff0:	a38f      	add	r3, pc, #572	; (adr r3, 800c230 <__ieee754_rem_pio2+0x308>)
 800bff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff6:	f7f4 fa73 	bl	80004e0 <__adddf3>
 800bffa:	4602      	mov	r2, r0
 800bffc:	460b      	mov	r3, r1
 800bffe:	e9ca 2300 	strd	r2, r3, [sl]
 800c002:	4620      	mov	r0, r4
 800c004:	4629      	mov	r1, r5
 800c006:	f7f4 fa69 	bl	80004dc <__aeabi_dsub>
 800c00a:	a389      	add	r3, pc, #548	; (adr r3, 800c230 <__ieee754_rem_pio2+0x308>)
 800c00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c010:	f7f4 fa66 	bl	80004e0 <__adddf3>
 800c014:	f04f 3bff 	mov.w	fp, #4294967295
 800c018:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c01c:	e7c4      	b.n	800bfa8 <__ieee754_rem_pio2+0x80>
 800c01e:	a386      	add	r3, pc, #536	; (adr r3, 800c238 <__ieee754_rem_pio2+0x310>)
 800c020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c024:	f7f4 fa5c 	bl	80004e0 <__adddf3>
 800c028:	a385      	add	r3, pc, #532	; (adr r3, 800c240 <__ieee754_rem_pio2+0x318>)
 800c02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c02e:	4604      	mov	r4, r0
 800c030:	460d      	mov	r5, r1
 800c032:	f7f4 fa55 	bl	80004e0 <__adddf3>
 800c036:	4602      	mov	r2, r0
 800c038:	460b      	mov	r3, r1
 800c03a:	e9ca 2300 	strd	r2, r3, [sl]
 800c03e:	4620      	mov	r0, r4
 800c040:	4629      	mov	r1, r5
 800c042:	f7f4 fa4b 	bl	80004dc <__aeabi_dsub>
 800c046:	a37e      	add	r3, pc, #504	; (adr r3, 800c240 <__ieee754_rem_pio2+0x318>)
 800c048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c04c:	e7e0      	b.n	800c010 <__ieee754_rem_pio2+0xe8>
 800c04e:	4b87      	ldr	r3, [pc, #540]	; (800c26c <__ieee754_rem_pio2+0x344>)
 800c050:	4598      	cmp	r8, r3
 800c052:	f300 80d8 	bgt.w	800c206 <__ieee754_rem_pio2+0x2de>
 800c056:	f000 f96d 	bl	800c334 <fabs>
 800c05a:	ec55 4b10 	vmov	r4, r5, d0
 800c05e:	ee10 0a10 	vmov	r0, s0
 800c062:	a379      	add	r3, pc, #484	; (adr r3, 800c248 <__ieee754_rem_pio2+0x320>)
 800c064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c068:	4629      	mov	r1, r5
 800c06a:	f7f4 f909 	bl	8000280 <__aeabi_dmul>
 800c06e:	4b80      	ldr	r3, [pc, #512]	; (800c270 <__ieee754_rem_pio2+0x348>)
 800c070:	2200      	movs	r2, #0
 800c072:	f7f4 fa35 	bl	80004e0 <__adddf3>
 800c076:	f7f4 fc71 	bl	800095c <__aeabi_d2iz>
 800c07a:	4683      	mov	fp, r0
 800c07c:	f7f4 fb7c 	bl	8000778 <__aeabi_i2d>
 800c080:	4602      	mov	r2, r0
 800c082:	460b      	mov	r3, r1
 800c084:	ec43 2b18 	vmov	d8, r2, r3
 800c088:	a367      	add	r3, pc, #412	; (adr r3, 800c228 <__ieee754_rem_pio2+0x300>)
 800c08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c08e:	f7f4 f8f7 	bl	8000280 <__aeabi_dmul>
 800c092:	4602      	mov	r2, r0
 800c094:	460b      	mov	r3, r1
 800c096:	4620      	mov	r0, r4
 800c098:	4629      	mov	r1, r5
 800c09a:	f7f4 fa1f 	bl	80004dc <__aeabi_dsub>
 800c09e:	a364      	add	r3, pc, #400	; (adr r3, 800c230 <__ieee754_rem_pio2+0x308>)
 800c0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a4:	4606      	mov	r6, r0
 800c0a6:	460f      	mov	r7, r1
 800c0a8:	ec51 0b18 	vmov	r0, r1, d8
 800c0ac:	f7f4 f8e8 	bl	8000280 <__aeabi_dmul>
 800c0b0:	f1bb 0f1f 	cmp.w	fp, #31
 800c0b4:	4604      	mov	r4, r0
 800c0b6:	460d      	mov	r5, r1
 800c0b8:	dc0d      	bgt.n	800c0d6 <__ieee754_rem_pio2+0x1ae>
 800c0ba:	4b6e      	ldr	r3, [pc, #440]	; (800c274 <__ieee754_rem_pio2+0x34c>)
 800c0bc:	f10b 32ff 	add.w	r2, fp, #4294967295
 800c0c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0c4:	4543      	cmp	r3, r8
 800c0c6:	d006      	beq.n	800c0d6 <__ieee754_rem_pio2+0x1ae>
 800c0c8:	4622      	mov	r2, r4
 800c0ca:	462b      	mov	r3, r5
 800c0cc:	4630      	mov	r0, r6
 800c0ce:	4639      	mov	r1, r7
 800c0d0:	f7f4 fa04 	bl	80004dc <__aeabi_dsub>
 800c0d4:	e00e      	b.n	800c0f4 <__ieee754_rem_pio2+0x1cc>
 800c0d6:	462b      	mov	r3, r5
 800c0d8:	4622      	mov	r2, r4
 800c0da:	4630      	mov	r0, r6
 800c0dc:	4639      	mov	r1, r7
 800c0de:	f7f4 f9fd 	bl	80004dc <__aeabi_dsub>
 800c0e2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c0e6:	9303      	str	r3, [sp, #12]
 800c0e8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c0ec:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800c0f0:	2b10      	cmp	r3, #16
 800c0f2:	dc02      	bgt.n	800c0fa <__ieee754_rem_pio2+0x1d2>
 800c0f4:	e9ca 0100 	strd	r0, r1, [sl]
 800c0f8:	e039      	b.n	800c16e <__ieee754_rem_pio2+0x246>
 800c0fa:	a34f      	add	r3, pc, #316	; (adr r3, 800c238 <__ieee754_rem_pio2+0x310>)
 800c0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c100:	ec51 0b18 	vmov	r0, r1, d8
 800c104:	f7f4 f8bc 	bl	8000280 <__aeabi_dmul>
 800c108:	4604      	mov	r4, r0
 800c10a:	460d      	mov	r5, r1
 800c10c:	4602      	mov	r2, r0
 800c10e:	460b      	mov	r3, r1
 800c110:	4630      	mov	r0, r6
 800c112:	4639      	mov	r1, r7
 800c114:	f7f4 f9e2 	bl	80004dc <__aeabi_dsub>
 800c118:	4602      	mov	r2, r0
 800c11a:	460b      	mov	r3, r1
 800c11c:	4680      	mov	r8, r0
 800c11e:	4689      	mov	r9, r1
 800c120:	4630      	mov	r0, r6
 800c122:	4639      	mov	r1, r7
 800c124:	f7f4 f9da 	bl	80004dc <__aeabi_dsub>
 800c128:	4622      	mov	r2, r4
 800c12a:	462b      	mov	r3, r5
 800c12c:	f7f4 f9d6 	bl	80004dc <__aeabi_dsub>
 800c130:	a343      	add	r3, pc, #268	; (adr r3, 800c240 <__ieee754_rem_pio2+0x318>)
 800c132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c136:	4604      	mov	r4, r0
 800c138:	460d      	mov	r5, r1
 800c13a:	ec51 0b18 	vmov	r0, r1, d8
 800c13e:	f7f4 f89f 	bl	8000280 <__aeabi_dmul>
 800c142:	4622      	mov	r2, r4
 800c144:	462b      	mov	r3, r5
 800c146:	f7f4 f9c9 	bl	80004dc <__aeabi_dsub>
 800c14a:	4602      	mov	r2, r0
 800c14c:	460b      	mov	r3, r1
 800c14e:	4604      	mov	r4, r0
 800c150:	460d      	mov	r5, r1
 800c152:	4640      	mov	r0, r8
 800c154:	4649      	mov	r1, r9
 800c156:	f7f4 f9c1 	bl	80004dc <__aeabi_dsub>
 800c15a:	9a03      	ldr	r2, [sp, #12]
 800c15c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c160:	1ad3      	subs	r3, r2, r3
 800c162:	2b31      	cmp	r3, #49	; 0x31
 800c164:	dc24      	bgt.n	800c1b0 <__ieee754_rem_pio2+0x288>
 800c166:	e9ca 0100 	strd	r0, r1, [sl]
 800c16a:	4646      	mov	r6, r8
 800c16c:	464f      	mov	r7, r9
 800c16e:	e9da 8900 	ldrd	r8, r9, [sl]
 800c172:	4630      	mov	r0, r6
 800c174:	4642      	mov	r2, r8
 800c176:	464b      	mov	r3, r9
 800c178:	4639      	mov	r1, r7
 800c17a:	f7f4 f9af 	bl	80004dc <__aeabi_dsub>
 800c17e:	462b      	mov	r3, r5
 800c180:	4622      	mov	r2, r4
 800c182:	f7f4 f9ab 	bl	80004dc <__aeabi_dsub>
 800c186:	9b02      	ldr	r3, [sp, #8]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c18e:	f6bf af0b 	bge.w	800bfa8 <__ieee754_rem_pio2+0x80>
 800c192:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c196:	f8ca 3004 	str.w	r3, [sl, #4]
 800c19a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c19e:	f8ca 8000 	str.w	r8, [sl]
 800c1a2:	f8ca 0008 	str.w	r0, [sl, #8]
 800c1a6:	f8ca 300c 	str.w	r3, [sl, #12]
 800c1aa:	f1cb 0b00 	rsb	fp, fp, #0
 800c1ae:	e6fb      	b.n	800bfa8 <__ieee754_rem_pio2+0x80>
 800c1b0:	a327      	add	r3, pc, #156	; (adr r3, 800c250 <__ieee754_rem_pio2+0x328>)
 800c1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1b6:	ec51 0b18 	vmov	r0, r1, d8
 800c1ba:	f7f4 f861 	bl	8000280 <__aeabi_dmul>
 800c1be:	4604      	mov	r4, r0
 800c1c0:	460d      	mov	r5, r1
 800c1c2:	4602      	mov	r2, r0
 800c1c4:	460b      	mov	r3, r1
 800c1c6:	4640      	mov	r0, r8
 800c1c8:	4649      	mov	r1, r9
 800c1ca:	f7f4 f987 	bl	80004dc <__aeabi_dsub>
 800c1ce:	4602      	mov	r2, r0
 800c1d0:	460b      	mov	r3, r1
 800c1d2:	4606      	mov	r6, r0
 800c1d4:	460f      	mov	r7, r1
 800c1d6:	4640      	mov	r0, r8
 800c1d8:	4649      	mov	r1, r9
 800c1da:	f7f4 f97f 	bl	80004dc <__aeabi_dsub>
 800c1de:	4622      	mov	r2, r4
 800c1e0:	462b      	mov	r3, r5
 800c1e2:	f7f4 f97b 	bl	80004dc <__aeabi_dsub>
 800c1e6:	a31c      	add	r3, pc, #112	; (adr r3, 800c258 <__ieee754_rem_pio2+0x330>)
 800c1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ec:	4604      	mov	r4, r0
 800c1ee:	460d      	mov	r5, r1
 800c1f0:	ec51 0b18 	vmov	r0, r1, d8
 800c1f4:	f7f4 f844 	bl	8000280 <__aeabi_dmul>
 800c1f8:	4622      	mov	r2, r4
 800c1fa:	462b      	mov	r3, r5
 800c1fc:	f7f4 f96e 	bl	80004dc <__aeabi_dsub>
 800c200:	4604      	mov	r4, r0
 800c202:	460d      	mov	r5, r1
 800c204:	e760      	b.n	800c0c8 <__ieee754_rem_pio2+0x1a0>
 800c206:	4b1c      	ldr	r3, [pc, #112]	; (800c278 <__ieee754_rem_pio2+0x350>)
 800c208:	4598      	cmp	r8, r3
 800c20a:	dd37      	ble.n	800c27c <__ieee754_rem_pio2+0x354>
 800c20c:	ee10 2a10 	vmov	r2, s0
 800c210:	462b      	mov	r3, r5
 800c212:	4620      	mov	r0, r4
 800c214:	4629      	mov	r1, r5
 800c216:	f7f4 f961 	bl	80004dc <__aeabi_dsub>
 800c21a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c21e:	e9ca 0100 	strd	r0, r1, [sl]
 800c222:	e695      	b.n	800bf50 <__ieee754_rem_pio2+0x28>
 800c224:	f3af 8000 	nop.w
 800c228:	54400000 	.word	0x54400000
 800c22c:	3ff921fb 	.word	0x3ff921fb
 800c230:	1a626331 	.word	0x1a626331
 800c234:	3dd0b461 	.word	0x3dd0b461
 800c238:	1a600000 	.word	0x1a600000
 800c23c:	3dd0b461 	.word	0x3dd0b461
 800c240:	2e037073 	.word	0x2e037073
 800c244:	3ba3198a 	.word	0x3ba3198a
 800c248:	6dc9c883 	.word	0x6dc9c883
 800c24c:	3fe45f30 	.word	0x3fe45f30
 800c250:	2e000000 	.word	0x2e000000
 800c254:	3ba3198a 	.word	0x3ba3198a
 800c258:	252049c1 	.word	0x252049c1
 800c25c:	397b839a 	.word	0x397b839a
 800c260:	3fe921fb 	.word	0x3fe921fb
 800c264:	4002d97b 	.word	0x4002d97b
 800c268:	3ff921fb 	.word	0x3ff921fb
 800c26c:	413921fb 	.word	0x413921fb
 800c270:	3fe00000 	.word	0x3fe00000
 800c274:	08010a44 	.word	0x08010a44
 800c278:	7fefffff 	.word	0x7fefffff
 800c27c:	ea4f 5628 	mov.w	r6, r8, asr #20
 800c280:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800c284:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800c288:	4620      	mov	r0, r4
 800c28a:	460d      	mov	r5, r1
 800c28c:	f7f4 fb66 	bl	800095c <__aeabi_d2iz>
 800c290:	f7f4 fa72 	bl	8000778 <__aeabi_i2d>
 800c294:	4602      	mov	r2, r0
 800c296:	460b      	mov	r3, r1
 800c298:	4620      	mov	r0, r4
 800c29a:	4629      	mov	r1, r5
 800c29c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c2a0:	f7f4 f91c 	bl	80004dc <__aeabi_dsub>
 800c2a4:	4b21      	ldr	r3, [pc, #132]	; (800c32c <__ieee754_rem_pio2+0x404>)
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	f7f3 ffea 	bl	8000280 <__aeabi_dmul>
 800c2ac:	460d      	mov	r5, r1
 800c2ae:	4604      	mov	r4, r0
 800c2b0:	f7f4 fb54 	bl	800095c <__aeabi_d2iz>
 800c2b4:	f7f4 fa60 	bl	8000778 <__aeabi_i2d>
 800c2b8:	4602      	mov	r2, r0
 800c2ba:	460b      	mov	r3, r1
 800c2bc:	4620      	mov	r0, r4
 800c2be:	4629      	mov	r1, r5
 800c2c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c2c4:	f7f4 f90a 	bl	80004dc <__aeabi_dsub>
 800c2c8:	4b18      	ldr	r3, [pc, #96]	; (800c32c <__ieee754_rem_pio2+0x404>)
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	f7f3 ffd8 	bl	8000280 <__aeabi_dmul>
 800c2d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c2d4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800c2d8:	2703      	movs	r7, #3
 800c2da:	2400      	movs	r4, #0
 800c2dc:	2500      	movs	r5, #0
 800c2de:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800c2e2:	4622      	mov	r2, r4
 800c2e4:	462b      	mov	r3, r5
 800c2e6:	46b9      	mov	r9, r7
 800c2e8:	3f01      	subs	r7, #1
 800c2ea:	f7f4 fb05 	bl	80008f8 <__aeabi_dcmpeq>
 800c2ee:	2800      	cmp	r0, #0
 800c2f0:	d1f5      	bne.n	800c2de <__ieee754_rem_pio2+0x3b6>
 800c2f2:	4b0f      	ldr	r3, [pc, #60]	; (800c330 <__ieee754_rem_pio2+0x408>)
 800c2f4:	9301      	str	r3, [sp, #4]
 800c2f6:	2302      	movs	r3, #2
 800c2f8:	9300      	str	r3, [sp, #0]
 800c2fa:	4632      	mov	r2, r6
 800c2fc:	464b      	mov	r3, r9
 800c2fe:	4651      	mov	r1, sl
 800c300:	a804      	add	r0, sp, #16
 800c302:	f000 fd4d 	bl	800cda0 <__kernel_rem_pio2>
 800c306:	9b02      	ldr	r3, [sp, #8]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	4683      	mov	fp, r0
 800c30c:	f6bf ae4c 	bge.w	800bfa8 <__ieee754_rem_pio2+0x80>
 800c310:	e9da 2100 	ldrd	r2, r1, [sl]
 800c314:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c318:	e9ca 2300 	strd	r2, r3, [sl]
 800c31c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800c320:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c324:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800c328:	e73f      	b.n	800c1aa <__ieee754_rem_pio2+0x282>
 800c32a:	bf00      	nop
 800c32c:	41700000 	.word	0x41700000
 800c330:	08010ac4 	.word	0x08010ac4

0800c334 <fabs>:
 800c334:	ec51 0b10 	vmov	r0, r1, d0
 800c338:	ee10 2a10 	vmov	r2, s0
 800c33c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c340:	ec43 2b10 	vmov	d0, r2, r3
 800c344:	4770      	bx	lr
	...

0800c348 <__kernel_cosf>:
 800c348:	ee10 3a10 	vmov	r3, s0
 800c34c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c350:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800c354:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c358:	da05      	bge.n	800c366 <__kernel_cosf+0x1e>
 800c35a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c35e:	ee17 2a90 	vmov	r2, s15
 800c362:	2a00      	cmp	r2, #0
 800c364:	d03b      	beq.n	800c3de <__kernel_cosf+0x96>
 800c366:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c36a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800c3e4 <__kernel_cosf+0x9c>
 800c36e:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 800c3e8 <__kernel_cosf+0xa0>
 800c372:	4a1e      	ldr	r2, [pc, #120]	; (800c3ec <__kernel_cosf+0xa4>)
 800c374:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c378:	4293      	cmp	r3, r2
 800c37a:	eddf 7a1d 	vldr	s15, [pc, #116]	; 800c3f0 <__kernel_cosf+0xa8>
 800c37e:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c382:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 800c3f4 <__kernel_cosf+0xac>
 800c386:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c38a:	eddf 7a1b 	vldr	s15, [pc, #108]	; 800c3f8 <__kernel_cosf+0xb0>
 800c38e:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c392:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 800c3fc <__kernel_cosf+0xb4>
 800c396:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c39a:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800c39e:	ee26 6a07 	vmul.f32	s12, s12, s14
 800c3a2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c3a6:	eee7 0a06 	vfma.f32	s1, s14, s12
 800c3aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3ae:	dc04      	bgt.n	800c3ba <__kernel_cosf+0x72>
 800c3b0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800c3b4:	ee36 0ae7 	vsub.f32	s0, s13, s15
 800c3b8:	4770      	bx	lr
 800c3ba:	4a11      	ldr	r2, [pc, #68]	; (800c400 <__kernel_cosf+0xb8>)
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	bfda      	itte	le
 800c3c0:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800c3c4:	ee07 3a10 	vmovle	s14, r3
 800c3c8:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800c3cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c3d0:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800c3d4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800c3d8:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c3dc:	4770      	bx	lr
 800c3de:	eeb0 0a66 	vmov.f32	s0, s13
 800c3e2:	4770      	bx	lr
 800c3e4:	ad47d74e 	.word	0xad47d74e
 800c3e8:	310f74f6 	.word	0x310f74f6
 800c3ec:	3e999999 	.word	0x3e999999
 800c3f0:	b493f27c 	.word	0xb493f27c
 800c3f4:	37d00d01 	.word	0x37d00d01
 800c3f8:	bab60b61 	.word	0xbab60b61
 800c3fc:	3d2aaaab 	.word	0x3d2aaaab
 800c400:	3f480000 	.word	0x3f480000

0800c404 <__kernel_sinf>:
 800c404:	ee10 3a10 	vmov	r3, s0
 800c408:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c40c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800c410:	da04      	bge.n	800c41c <__kernel_sinf+0x18>
 800c412:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c416:	ee17 3a90 	vmov	r3, s15
 800c41a:	b35b      	cbz	r3, 800c474 <__kernel_sinf+0x70>
 800c41c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c420:	eddf 7a15 	vldr	s15, [pc, #84]	; 800c478 <__kernel_sinf+0x74>
 800c424:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800c47c <__kernel_sinf+0x78>
 800c428:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c42c:	eddf 7a14 	vldr	s15, [pc, #80]	; 800c480 <__kernel_sinf+0x7c>
 800c430:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c434:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800c484 <__kernel_sinf+0x80>
 800c438:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c43c:	eddf 7a12 	vldr	s15, [pc, #72]	; 800c488 <__kernel_sinf+0x84>
 800c440:	ee60 6a07 	vmul.f32	s13, s0, s14
 800c444:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c448:	b930      	cbnz	r0, 800c458 <__kernel_sinf+0x54>
 800c44a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800c48c <__kernel_sinf+0x88>
 800c44e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c452:	eea6 0a26 	vfma.f32	s0, s12, s13
 800c456:	4770      	bx	lr
 800c458:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800c45c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800c460:	eee0 7a86 	vfma.f32	s15, s1, s12
 800c464:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800c468:	eddf 7a09 	vldr	s15, [pc, #36]	; 800c490 <__kernel_sinf+0x8c>
 800c46c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800c470:	ee30 0a60 	vsub.f32	s0, s0, s1
 800c474:	4770      	bx	lr
 800c476:	bf00      	nop
 800c478:	2f2ec9d3 	.word	0x2f2ec9d3
 800c47c:	b2d72f34 	.word	0xb2d72f34
 800c480:	3638ef1b 	.word	0x3638ef1b
 800c484:	b9500d01 	.word	0xb9500d01
 800c488:	3c088889 	.word	0x3c088889
 800c48c:	be2aaaab 	.word	0xbe2aaaab
 800c490:	3e2aaaab 	.word	0x3e2aaaab

0800c494 <__ieee754_powf>:
 800c494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c498:	ee10 4a90 	vmov	r4, s1
 800c49c:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800c4a0:	ed2d 8b02 	vpush	{d8}
 800c4a4:	ee10 7a10 	vmov	r7, s0
 800c4a8:	eeb0 8a40 	vmov.f32	s16, s0
 800c4ac:	eef0 8a60 	vmov.f32	s17, s1
 800c4b0:	d10c      	bne.n	800c4cc <__ieee754_powf+0x38>
 800c4b2:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 800c4b6:	007f      	lsls	r7, r7, #1
 800c4b8:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 800c4bc:	f240 8292 	bls.w	800c9e4 <__ieee754_powf+0x550>
 800c4c0:	ee38 0a28 	vadd.f32	s0, s16, s17
 800c4c4:	ecbd 8b02 	vpop	{d8}
 800c4c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4cc:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 800c4d0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800c4d4:	dcf4      	bgt.n	800c4c0 <__ieee754_powf+0x2c>
 800c4d6:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800c4da:	dd08      	ble.n	800c4ee <__ieee754_powf+0x5a>
 800c4dc:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800c4e0:	d1ee      	bne.n	800c4c0 <__ieee754_powf+0x2c>
 800c4e2:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800c4e6:	0064      	lsls	r4, r4, #1
 800c4e8:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800c4ec:	e7e6      	b.n	800c4bc <__ieee754_powf+0x28>
 800c4ee:	2f00      	cmp	r7, #0
 800c4f0:	da20      	bge.n	800c534 <__ieee754_powf+0xa0>
 800c4f2:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800c4f6:	da2d      	bge.n	800c554 <__ieee754_powf+0xc0>
 800c4f8:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800c4fc:	f2c0 827b 	blt.w	800c9f6 <__ieee754_powf+0x562>
 800c500:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800c504:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800c508:	fa48 f603 	asr.w	r6, r8, r3
 800c50c:	fa06 f303 	lsl.w	r3, r6, r3
 800c510:	4543      	cmp	r3, r8
 800c512:	f040 8270 	bne.w	800c9f6 <__ieee754_powf+0x562>
 800c516:	f006 0601 	and.w	r6, r6, #1
 800c51a:	f1c6 0602 	rsb	r6, r6, #2
 800c51e:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800c522:	d11f      	bne.n	800c564 <__ieee754_powf+0xd0>
 800c524:	2c00      	cmp	r4, #0
 800c526:	f280 8263 	bge.w	800c9f0 <__ieee754_powf+0x55c>
 800c52a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c52e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800c532:	e7c7      	b.n	800c4c4 <__ieee754_powf+0x30>
 800c534:	2600      	movs	r6, #0
 800c536:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800c53a:	d1f0      	bne.n	800c51e <__ieee754_powf+0x8a>
 800c53c:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800c540:	f000 8250 	beq.w	800c9e4 <__ieee754_powf+0x550>
 800c544:	dd08      	ble.n	800c558 <__ieee754_powf+0xc4>
 800c546:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800c84c <__ieee754_powf+0x3b8>
 800c54a:	2c00      	cmp	r4, #0
 800c54c:	bfa8      	it	ge
 800c54e:	eeb0 0a68 	vmovge.f32	s0, s17
 800c552:	e7b7      	b.n	800c4c4 <__ieee754_powf+0x30>
 800c554:	2602      	movs	r6, #2
 800c556:	e7ee      	b.n	800c536 <__ieee754_powf+0xa2>
 800c558:	2c00      	cmp	r4, #0
 800c55a:	f280 8246 	bge.w	800c9ea <__ieee754_powf+0x556>
 800c55e:	eeb1 0a68 	vneg.f32	s0, s17
 800c562:	e7af      	b.n	800c4c4 <__ieee754_powf+0x30>
 800c564:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800c568:	d102      	bne.n	800c570 <__ieee754_powf+0xdc>
 800c56a:	ee28 0a08 	vmul.f32	s0, s16, s16
 800c56e:	e7a9      	b.n	800c4c4 <__ieee754_powf+0x30>
 800c570:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800c574:	eeb0 0a48 	vmov.f32	s0, s16
 800c578:	d107      	bne.n	800c58a <__ieee754_powf+0xf6>
 800c57a:	2f00      	cmp	r7, #0
 800c57c:	db05      	blt.n	800c58a <__ieee754_powf+0xf6>
 800c57e:	ecbd 8b02 	vpop	{d8}
 800c582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c586:	f7ff bb44 	b.w	800bc12 <__ieee754_sqrtf>
 800c58a:	f000 fb79 	bl	800cc80 <fabsf>
 800c58e:	b125      	cbz	r5, 800c59a <__ieee754_powf+0x106>
 800c590:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 800c594:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800c598:	d115      	bne.n	800c5c6 <__ieee754_powf+0x132>
 800c59a:	2c00      	cmp	r4, #0
 800c59c:	bfbc      	itt	lt
 800c59e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800c5a2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800c5a6:	2f00      	cmp	r7, #0
 800c5a8:	da8c      	bge.n	800c4c4 <__ieee754_powf+0x30>
 800c5aa:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800c5ae:	4335      	orrs	r5, r6
 800c5b0:	d104      	bne.n	800c5bc <__ieee754_powf+0x128>
 800c5b2:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c5b6:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800c5ba:	e783      	b.n	800c4c4 <__ieee754_powf+0x30>
 800c5bc:	2e01      	cmp	r6, #1
 800c5be:	d181      	bne.n	800c4c4 <__ieee754_powf+0x30>
 800c5c0:	eeb1 0a40 	vneg.f32	s0, s0
 800c5c4:	e77e      	b.n	800c4c4 <__ieee754_powf+0x30>
 800c5c6:	0ff8      	lsrs	r0, r7, #31
 800c5c8:	3801      	subs	r0, #1
 800c5ca:	ea56 0300 	orrs.w	r3, r6, r0
 800c5ce:	d104      	bne.n	800c5da <__ieee754_powf+0x146>
 800c5d0:	ee38 8a48 	vsub.f32	s16, s16, s16
 800c5d4:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800c5d8:	e774      	b.n	800c4c4 <__ieee754_powf+0x30>
 800c5da:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800c5de:	dd73      	ble.n	800c6c8 <__ieee754_powf+0x234>
 800c5e0:	4b9b      	ldr	r3, [pc, #620]	; (800c850 <__ieee754_powf+0x3bc>)
 800c5e2:	429d      	cmp	r5, r3
 800c5e4:	dc08      	bgt.n	800c5f8 <__ieee754_powf+0x164>
 800c5e6:	2c00      	cmp	r4, #0
 800c5e8:	da0b      	bge.n	800c602 <__ieee754_powf+0x16e>
 800c5ea:	2000      	movs	r0, #0
 800c5ec:	ecbd 8b02 	vpop	{d8}
 800c5f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5f4:	f000 bbce 	b.w	800cd94 <__math_oflowf>
 800c5f8:	4b96      	ldr	r3, [pc, #600]	; (800c854 <__ieee754_powf+0x3c0>)
 800c5fa:	429d      	cmp	r5, r3
 800c5fc:	dd08      	ble.n	800c610 <__ieee754_powf+0x17c>
 800c5fe:	2c00      	cmp	r4, #0
 800c600:	dcf3      	bgt.n	800c5ea <__ieee754_powf+0x156>
 800c602:	2000      	movs	r0, #0
 800c604:	ecbd 8b02 	vpop	{d8}
 800c608:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c60c:	f000 bbbc 	b.w	800cd88 <__math_uflowf>
 800c610:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c614:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c618:	eddf 6a8f 	vldr	s13, [pc, #572]	; 800c858 <__ieee754_powf+0x3c4>
 800c61c:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800c620:	eee0 6a67 	vfms.f32	s13, s0, s15
 800c624:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c628:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800c62c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c630:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c634:	eddf 7a89 	vldr	s15, [pc, #548]	; 800c85c <__ieee754_powf+0x3c8>
 800c638:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800c63c:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800c860 <__ieee754_powf+0x3cc>
 800c640:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c644:	ed9f 7a87 	vldr	s14, [pc, #540]	; 800c864 <__ieee754_powf+0x3d0>
 800c648:	eef0 6a67 	vmov.f32	s13, s15
 800c64c:	eee0 6a07 	vfma.f32	s13, s0, s14
 800c650:	ee16 3a90 	vmov	r3, s13
 800c654:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c658:	f023 030f 	bic.w	r3, r3, #15
 800c65c:	ee06 3a90 	vmov	s13, r3
 800c660:	eee0 6a47 	vfms.f32	s13, s0, s14
 800c664:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c668:	3e01      	subs	r6, #1
 800c66a:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800c66e:	4306      	orrs	r6, r0
 800c670:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800c674:	f024 040f 	bic.w	r4, r4, #15
 800c678:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800c67c:	bf08      	it	eq
 800c67e:	eeb0 8a47 	vmoveq.f32	s16, s14
 800c682:	ee07 4a10 	vmov	s14, r4
 800c686:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800c68a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800c68e:	ee07 3a90 	vmov	s15, r3
 800c692:	eee7 0a27 	vfma.f32	s1, s14, s15
 800c696:	ee07 4a10 	vmov	s14, r4
 800c69a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c69e:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800c6a2:	ee17 1a10 	vmov	r1, s14
 800c6a6:	2900      	cmp	r1, #0
 800c6a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c6ac:	f340 817c 	ble.w	800c9a8 <__ieee754_powf+0x514>
 800c6b0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800c6b4:	f340 80f8 	ble.w	800c8a8 <__ieee754_powf+0x414>
 800c6b8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c6bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6c0:	bf4c      	ite	mi
 800c6c2:	2001      	movmi	r0, #1
 800c6c4:	2000      	movpl	r0, #0
 800c6c6:	e791      	b.n	800c5ec <__ieee754_powf+0x158>
 800c6c8:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 800c6cc:	bf01      	itttt	eq
 800c6ce:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800c868 <__ieee754_powf+0x3d4>
 800c6d2:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800c6d6:	f06f 0317 	mvneq.w	r3, #23
 800c6da:	ee17 5a90 	vmoveq	r5, s15
 800c6de:	ea4f 52e5 	mov.w	r2, r5, asr #23
 800c6e2:	bf18      	it	ne
 800c6e4:	2300      	movne	r3, #0
 800c6e6:	3a7f      	subs	r2, #127	; 0x7f
 800c6e8:	441a      	add	r2, r3
 800c6ea:	4b60      	ldr	r3, [pc, #384]	; (800c86c <__ieee754_powf+0x3d8>)
 800c6ec:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800c6f0:	429d      	cmp	r5, r3
 800c6f2:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800c6f6:	dd06      	ble.n	800c706 <__ieee754_powf+0x272>
 800c6f8:	4b5d      	ldr	r3, [pc, #372]	; (800c870 <__ieee754_powf+0x3dc>)
 800c6fa:	429d      	cmp	r5, r3
 800c6fc:	f340 80a4 	ble.w	800c848 <__ieee754_powf+0x3b4>
 800c700:	3201      	adds	r2, #1
 800c702:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800c706:	2500      	movs	r5, #0
 800c708:	4b5a      	ldr	r3, [pc, #360]	; (800c874 <__ieee754_powf+0x3e0>)
 800c70a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800c70e:	ee07 1a10 	vmov	s14, r1
 800c712:	edd3 5a00 	vldr	s11, [r3]
 800c716:	4b58      	ldr	r3, [pc, #352]	; (800c878 <__ieee754_powf+0x3e4>)
 800c718:	ee75 7a87 	vadd.f32	s15, s11, s14
 800c71c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c720:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800c724:	1049      	asrs	r1, r1, #1
 800c726:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800c72a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800c72e:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800c732:	ee37 6a65 	vsub.f32	s12, s14, s11
 800c736:	ee07 1a90 	vmov	s15, r1
 800c73a:	ee26 5a24 	vmul.f32	s10, s12, s9
 800c73e:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800c742:	ee15 7a10 	vmov	r7, s10
 800c746:	401f      	ands	r7, r3
 800c748:	ee06 7a90 	vmov	s13, r7
 800c74c:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800c750:	ee37 7a65 	vsub.f32	s14, s14, s11
 800c754:	ee65 7a05 	vmul.f32	s15, s10, s10
 800c758:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800c75c:	eddf 5a47 	vldr	s11, [pc, #284]	; 800c87c <__ieee754_powf+0x3e8>
 800c760:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800c880 <__ieee754_powf+0x3ec>
 800c764:	eee7 5a87 	vfma.f32	s11, s15, s14
 800c768:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800c884 <__ieee754_powf+0x3f0>
 800c76c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800c770:	eddf 5a39 	vldr	s11, [pc, #228]	; 800c858 <__ieee754_powf+0x3c4>
 800c774:	eee7 5a27 	vfma.f32	s11, s14, s15
 800c778:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800c888 <__ieee754_powf+0x3f4>
 800c77c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800c780:	eddf 5a42 	vldr	s11, [pc, #264]	; 800c88c <__ieee754_powf+0x3f8>
 800c784:	ee26 6a24 	vmul.f32	s12, s12, s9
 800c788:	eee7 5a27 	vfma.f32	s11, s14, s15
 800c78c:	ee35 7a26 	vadd.f32	s14, s10, s13
 800c790:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800c794:	ee27 7a06 	vmul.f32	s14, s14, s12
 800c798:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800c79c:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800c7a0:	eef0 5a67 	vmov.f32	s11, s15
 800c7a4:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800c7a8:	ee75 5a87 	vadd.f32	s11, s11, s14
 800c7ac:	ee15 1a90 	vmov	r1, s11
 800c7b0:	4019      	ands	r1, r3
 800c7b2:	ee05 1a90 	vmov	s11, r1
 800c7b6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800c7ba:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800c7be:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c7c2:	ee67 7a85 	vmul.f32	s15, s15, s10
 800c7c6:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c7ca:	eeb0 6a67 	vmov.f32	s12, s15
 800c7ce:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800c7d2:	ee16 1a10 	vmov	r1, s12
 800c7d6:	4019      	ands	r1, r3
 800c7d8:	ee07 1a10 	vmov	s14, r1
 800c7dc:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800c7e0:	ee06 1a10 	vmov	s12, r1
 800c7e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c7e8:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800c890 <__ieee754_powf+0x3fc>
 800c7ec:	4929      	ldr	r1, [pc, #164]	; (800c894 <__ieee754_powf+0x400>)
 800c7ee:	eddf 5a2a 	vldr	s11, [pc, #168]	; 800c898 <__ieee754_powf+0x404>
 800c7f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c7f6:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800c89c <__ieee754_powf+0x408>
 800c7fa:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c7fe:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800c802:	ed91 7a00 	vldr	s14, [r1]
 800c806:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c80a:	ee07 2a10 	vmov	s14, r2
 800c80e:	eef0 6a67 	vmov.f32	s13, s15
 800c812:	4a23      	ldr	r2, [pc, #140]	; (800c8a0 <__ieee754_powf+0x40c>)
 800c814:	eee6 6a25 	vfma.f32	s13, s12, s11
 800c818:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800c81c:	ed92 5a00 	vldr	s10, [r2]
 800c820:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c824:	ee76 6a85 	vadd.f32	s13, s13, s10
 800c828:	ee76 6a87 	vadd.f32	s13, s13, s14
 800c82c:	ee16 2a90 	vmov	r2, s13
 800c830:	4013      	ands	r3, r2
 800c832:	ee06 3a90 	vmov	s13, r3
 800c836:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800c83a:	ee37 7a45 	vsub.f32	s14, s14, s10
 800c83e:	eea6 7a65 	vfms.f32	s14, s12, s11
 800c842:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c846:	e70f      	b.n	800c668 <__ieee754_powf+0x1d4>
 800c848:	2501      	movs	r5, #1
 800c84a:	e75d      	b.n	800c708 <__ieee754_powf+0x274>
 800c84c:	00000000 	.word	0x00000000
 800c850:	3f7ffff3 	.word	0x3f7ffff3
 800c854:	3f800007 	.word	0x3f800007
 800c858:	3eaaaaab 	.word	0x3eaaaaab
 800c85c:	3fb8aa3b 	.word	0x3fb8aa3b
 800c860:	36eca570 	.word	0x36eca570
 800c864:	3fb8aa00 	.word	0x3fb8aa00
 800c868:	4b800000 	.word	0x4b800000
 800c86c:	001cc471 	.word	0x001cc471
 800c870:	005db3d6 	.word	0x005db3d6
 800c874:	08010bcc 	.word	0x08010bcc
 800c878:	fffff000 	.word	0xfffff000
 800c87c:	3e6c3255 	.word	0x3e6c3255
 800c880:	3e53f142 	.word	0x3e53f142
 800c884:	3e8ba305 	.word	0x3e8ba305
 800c888:	3edb6db7 	.word	0x3edb6db7
 800c88c:	3f19999a 	.word	0x3f19999a
 800c890:	3f76384f 	.word	0x3f76384f
 800c894:	08010bdc 	.word	0x08010bdc
 800c898:	3f763800 	.word	0x3f763800
 800c89c:	369dc3a0 	.word	0x369dc3a0
 800c8a0:	08010bd4 	.word	0x08010bd4
 800c8a4:	3338aa3c 	.word	0x3338aa3c
 800c8a8:	f040 8093 	bne.w	800c9d2 <__ieee754_powf+0x53e>
 800c8ac:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800c8a4 <__ieee754_powf+0x410>
 800c8b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c8b4:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800c8b8:	eef4 6ac7 	vcmpe.f32	s13, s14
 800c8bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8c0:	f73f aefa 	bgt.w	800c6b8 <__ieee754_powf+0x224>
 800c8c4:	15db      	asrs	r3, r3, #23
 800c8c6:	3b7e      	subs	r3, #126	; 0x7e
 800c8c8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800c8cc:	4118      	asrs	r0, r3
 800c8ce:	4408      	add	r0, r1
 800c8d0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800c8d4:	4a49      	ldr	r2, [pc, #292]	; (800c9fc <__ieee754_powf+0x568>)
 800c8d6:	3b7f      	subs	r3, #127	; 0x7f
 800c8d8:	411a      	asrs	r2, r3
 800c8da:	4002      	ands	r2, r0
 800c8dc:	ee07 2a10 	vmov	s14, r2
 800c8e0:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800c8e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800c8e8:	f1c3 0317 	rsb	r3, r3, #23
 800c8ec:	4118      	asrs	r0, r3
 800c8ee:	2900      	cmp	r1, #0
 800c8f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c8f4:	bfb8      	it	lt
 800c8f6:	4240      	neglt	r0, r0
 800c8f8:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800c8fc:	eddf 6a40 	vldr	s13, [pc, #256]	; 800ca00 <__ieee754_powf+0x56c>
 800c900:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800ca04 <__ieee754_powf+0x570>
 800c904:	ee17 3a10 	vmov	r3, s14
 800c908:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c90c:	f023 030f 	bic.w	r3, r3, #15
 800c910:	ee07 3a10 	vmov	s14, r3
 800c914:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c918:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c91c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800c920:	eddf 7a39 	vldr	s15, [pc, #228]	; 800ca08 <__ieee754_powf+0x574>
 800c924:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c928:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800c92c:	eef0 6a67 	vmov.f32	s13, s15
 800c930:	eee7 6a06 	vfma.f32	s13, s14, s12
 800c934:	eef0 5a66 	vmov.f32	s11, s13
 800c938:	eee7 5a46 	vfms.f32	s11, s14, s12
 800c93c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800c940:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800c944:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800ca0c <__ieee754_powf+0x578>
 800c948:	eddf 5a31 	vldr	s11, [pc, #196]	; 800ca10 <__ieee754_powf+0x57c>
 800c94c:	eea7 6a25 	vfma.f32	s12, s14, s11
 800c950:	eddf 5a30 	vldr	s11, [pc, #192]	; 800ca14 <__ieee754_powf+0x580>
 800c954:	eee6 5a07 	vfma.f32	s11, s12, s14
 800c958:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800ca18 <__ieee754_powf+0x584>
 800c95c:	eea5 6a87 	vfma.f32	s12, s11, s14
 800c960:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ca1c <__ieee754_powf+0x588>
 800c964:	eee6 5a07 	vfma.f32	s11, s12, s14
 800c968:	eeb0 6a66 	vmov.f32	s12, s13
 800c96c:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800c970:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800c974:	ee66 5a86 	vmul.f32	s11, s13, s12
 800c978:	ee36 6a47 	vsub.f32	s12, s12, s14
 800c97c:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800c980:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800c984:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c988:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c98c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c990:	ee10 3a10 	vmov	r3, s0
 800c994:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800c998:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c99c:	da1f      	bge.n	800c9de <__ieee754_powf+0x54a>
 800c99e:	f000 f977 	bl	800cc90 <scalbnf>
 800c9a2:	ee20 0a08 	vmul.f32	s0, s0, s16
 800c9a6:	e58d      	b.n	800c4c4 <__ieee754_powf+0x30>
 800c9a8:	4a1d      	ldr	r2, [pc, #116]	; (800ca20 <__ieee754_powf+0x58c>)
 800c9aa:	4293      	cmp	r3, r2
 800c9ac:	dd07      	ble.n	800c9be <__ieee754_powf+0x52a>
 800c9ae:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c9b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9b6:	bf4c      	ite	mi
 800c9b8:	2001      	movmi	r0, #1
 800c9ba:	2000      	movpl	r0, #0
 800c9bc:	e622      	b.n	800c604 <__ieee754_powf+0x170>
 800c9be:	d108      	bne.n	800c9d2 <__ieee754_powf+0x53e>
 800c9c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c9c4:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800c9c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9cc:	f6ff af7a 	blt.w	800c8c4 <__ieee754_powf+0x430>
 800c9d0:	e7ed      	b.n	800c9ae <__ieee754_powf+0x51a>
 800c9d2:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800c9d6:	f73f af75 	bgt.w	800c8c4 <__ieee754_powf+0x430>
 800c9da:	2000      	movs	r0, #0
 800c9dc:	e78c      	b.n	800c8f8 <__ieee754_powf+0x464>
 800c9de:	ee00 3a10 	vmov	s0, r3
 800c9e2:	e7de      	b.n	800c9a2 <__ieee754_powf+0x50e>
 800c9e4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c9e8:	e56c      	b.n	800c4c4 <__ieee754_powf+0x30>
 800c9ea:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800ca24 <__ieee754_powf+0x590>
 800c9ee:	e569      	b.n	800c4c4 <__ieee754_powf+0x30>
 800c9f0:	eeb0 0a48 	vmov.f32	s0, s16
 800c9f4:	e566      	b.n	800c4c4 <__ieee754_powf+0x30>
 800c9f6:	2600      	movs	r6, #0
 800c9f8:	e591      	b.n	800c51e <__ieee754_powf+0x8a>
 800c9fa:	bf00      	nop
 800c9fc:	ff800000 	.word	0xff800000
 800ca00:	3f317218 	.word	0x3f317218
 800ca04:	3f317200 	.word	0x3f317200
 800ca08:	35bfbe8c 	.word	0x35bfbe8c
 800ca0c:	b5ddea0e 	.word	0xb5ddea0e
 800ca10:	3331bb4c 	.word	0x3331bb4c
 800ca14:	388ab355 	.word	0x388ab355
 800ca18:	bb360b61 	.word	0xbb360b61
 800ca1c:	3e2aaaab 	.word	0x3e2aaaab
 800ca20:	43160000 	.word	0x43160000
 800ca24:	00000000 	.word	0x00000000

0800ca28 <__ieee754_rem_pio2f>:
 800ca28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca2a:	ee10 6a10 	vmov	r6, s0
 800ca2e:	4b86      	ldr	r3, [pc, #536]	; (800cc48 <__ieee754_rem_pio2f+0x220>)
 800ca30:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800ca34:	429d      	cmp	r5, r3
 800ca36:	b087      	sub	sp, #28
 800ca38:	4604      	mov	r4, r0
 800ca3a:	dc05      	bgt.n	800ca48 <__ieee754_rem_pio2f+0x20>
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	ed80 0a00 	vstr	s0, [r0]
 800ca42:	6043      	str	r3, [r0, #4]
 800ca44:	2000      	movs	r0, #0
 800ca46:	e020      	b.n	800ca8a <__ieee754_rem_pio2f+0x62>
 800ca48:	4b80      	ldr	r3, [pc, #512]	; (800cc4c <__ieee754_rem_pio2f+0x224>)
 800ca4a:	429d      	cmp	r5, r3
 800ca4c:	dc38      	bgt.n	800cac0 <__ieee754_rem_pio2f+0x98>
 800ca4e:	2e00      	cmp	r6, #0
 800ca50:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 800cc50 <__ieee754_rem_pio2f+0x228>
 800ca54:	4b7f      	ldr	r3, [pc, #508]	; (800cc54 <__ieee754_rem_pio2f+0x22c>)
 800ca56:	f025 050f 	bic.w	r5, r5, #15
 800ca5a:	dd18      	ble.n	800ca8e <__ieee754_rem_pio2f+0x66>
 800ca5c:	429d      	cmp	r5, r3
 800ca5e:	ee70 7a47 	vsub.f32	s15, s0, s14
 800ca62:	bf09      	itett	eq
 800ca64:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800cc58 <__ieee754_rem_pio2f+0x230>
 800ca68:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800cc5c <__ieee754_rem_pio2f+0x234>
 800ca6c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800ca70:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800cc60 <__ieee754_rem_pio2f+0x238>
 800ca74:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800ca78:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ca7c:	edc0 6a00 	vstr	s13, [r0]
 800ca80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ca84:	edc0 7a01 	vstr	s15, [r0, #4]
 800ca88:	2001      	movs	r0, #1
 800ca8a:	b007      	add	sp, #28
 800ca8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca8e:	429d      	cmp	r5, r3
 800ca90:	ee70 7a07 	vadd.f32	s15, s0, s14
 800ca94:	bf09      	itett	eq
 800ca96:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800cc58 <__ieee754_rem_pio2f+0x230>
 800ca9a:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800cc5c <__ieee754_rem_pio2f+0x234>
 800ca9e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800caa2:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800cc60 <__ieee754_rem_pio2f+0x238>
 800caa6:	ee77 6a87 	vadd.f32	s13, s15, s14
 800caaa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800caae:	edc0 6a00 	vstr	s13, [r0]
 800cab2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cab6:	edc0 7a01 	vstr	s15, [r0, #4]
 800caba:	f04f 30ff 	mov.w	r0, #4294967295
 800cabe:	e7e4      	b.n	800ca8a <__ieee754_rem_pio2f+0x62>
 800cac0:	4b68      	ldr	r3, [pc, #416]	; (800cc64 <__ieee754_rem_pio2f+0x23c>)
 800cac2:	429d      	cmp	r5, r3
 800cac4:	dc71      	bgt.n	800cbaa <__ieee754_rem_pio2f+0x182>
 800cac6:	f000 f8db 	bl	800cc80 <fabsf>
 800caca:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800cc68 <__ieee754_rem_pio2f+0x240>
 800cace:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800cad2:	eee0 7a07 	vfma.f32	s15, s0, s14
 800cad6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cada:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cade:	ee17 0a90 	vmov	r0, s15
 800cae2:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800cc50 <__ieee754_rem_pio2f+0x228>
 800cae6:	eea7 0a67 	vfms.f32	s0, s14, s15
 800caea:	281f      	cmp	r0, #31
 800caec:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800cc5c <__ieee754_rem_pio2f+0x234>
 800caf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800caf4:	eeb1 6a47 	vneg.f32	s12, s14
 800caf8:	ee70 6a67 	vsub.f32	s13, s0, s15
 800cafc:	ee16 2a90 	vmov	r2, s13
 800cb00:	dc1c      	bgt.n	800cb3c <__ieee754_rem_pio2f+0x114>
 800cb02:	495a      	ldr	r1, [pc, #360]	; (800cc6c <__ieee754_rem_pio2f+0x244>)
 800cb04:	1e47      	subs	r7, r0, #1
 800cb06:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800cb0a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800cb0e:	428b      	cmp	r3, r1
 800cb10:	d014      	beq.n	800cb3c <__ieee754_rem_pio2f+0x114>
 800cb12:	6022      	str	r2, [r4, #0]
 800cb14:	ed94 7a00 	vldr	s14, [r4]
 800cb18:	ee30 0a47 	vsub.f32	s0, s0, s14
 800cb1c:	2e00      	cmp	r6, #0
 800cb1e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cb22:	ed84 0a01 	vstr	s0, [r4, #4]
 800cb26:	dab0      	bge.n	800ca8a <__ieee754_rem_pio2f+0x62>
 800cb28:	eeb1 7a47 	vneg.f32	s14, s14
 800cb2c:	eeb1 0a40 	vneg.f32	s0, s0
 800cb30:	ed84 7a00 	vstr	s14, [r4]
 800cb34:	ed84 0a01 	vstr	s0, [r4, #4]
 800cb38:	4240      	negs	r0, r0
 800cb3a:	e7a6      	b.n	800ca8a <__ieee754_rem_pio2f+0x62>
 800cb3c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800cb40:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 800cb44:	2908      	cmp	r1, #8
 800cb46:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800cb4a:	dde2      	ble.n	800cb12 <__ieee754_rem_pio2f+0xea>
 800cb4c:	eddf 5a42 	vldr	s11, [pc, #264]	; 800cc58 <__ieee754_rem_pio2f+0x230>
 800cb50:	eef0 6a40 	vmov.f32	s13, s0
 800cb54:	eee6 6a25 	vfma.f32	s13, s12, s11
 800cb58:	ee70 7a66 	vsub.f32	s15, s0, s13
 800cb5c:	eee6 7a25 	vfma.f32	s15, s12, s11
 800cb60:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800cc60 <__ieee754_rem_pio2f+0x238>
 800cb64:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800cb68:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800cb6c:	ee15 2a90 	vmov	r2, s11
 800cb70:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800cb74:	1a5b      	subs	r3, r3, r1
 800cb76:	2b19      	cmp	r3, #25
 800cb78:	dc04      	bgt.n	800cb84 <__ieee754_rem_pio2f+0x15c>
 800cb7a:	edc4 5a00 	vstr	s11, [r4]
 800cb7e:	eeb0 0a66 	vmov.f32	s0, s13
 800cb82:	e7c7      	b.n	800cb14 <__ieee754_rem_pio2f+0xec>
 800cb84:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800cc70 <__ieee754_rem_pio2f+0x248>
 800cb88:	eeb0 0a66 	vmov.f32	s0, s13
 800cb8c:	eea6 0a25 	vfma.f32	s0, s12, s11
 800cb90:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800cb94:	eddf 6a37 	vldr	s13, [pc, #220]	; 800cc74 <__ieee754_rem_pio2f+0x24c>
 800cb98:	eee6 7a25 	vfma.f32	s15, s12, s11
 800cb9c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800cba0:	ee30 7a67 	vsub.f32	s14, s0, s15
 800cba4:	ed84 7a00 	vstr	s14, [r4]
 800cba8:	e7b4      	b.n	800cb14 <__ieee754_rem_pio2f+0xec>
 800cbaa:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800cbae:	db06      	blt.n	800cbbe <__ieee754_rem_pio2f+0x196>
 800cbb0:	ee70 7a40 	vsub.f32	s15, s0, s0
 800cbb4:	edc0 7a01 	vstr	s15, [r0, #4]
 800cbb8:	edc0 7a00 	vstr	s15, [r0]
 800cbbc:	e742      	b.n	800ca44 <__ieee754_rem_pio2f+0x1c>
 800cbbe:	15ea      	asrs	r2, r5, #23
 800cbc0:	3a86      	subs	r2, #134	; 0x86
 800cbc2:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800cbc6:	ee07 3a90 	vmov	s15, r3
 800cbca:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800cbce:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800cc78 <__ieee754_rem_pio2f+0x250>
 800cbd2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cbd6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cbda:	ed8d 7a03 	vstr	s14, [sp, #12]
 800cbde:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cbe2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800cbe6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cbea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cbee:	ed8d 7a04 	vstr	s14, [sp, #16]
 800cbf2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cbf6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cbfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbfe:	edcd 7a05 	vstr	s15, [sp, #20]
 800cc02:	d11e      	bne.n	800cc42 <__ieee754_rem_pio2f+0x21a>
 800cc04:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800cc08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc0c:	bf14      	ite	ne
 800cc0e:	2302      	movne	r3, #2
 800cc10:	2301      	moveq	r3, #1
 800cc12:	491a      	ldr	r1, [pc, #104]	; (800cc7c <__ieee754_rem_pio2f+0x254>)
 800cc14:	9101      	str	r1, [sp, #4]
 800cc16:	2102      	movs	r1, #2
 800cc18:	9100      	str	r1, [sp, #0]
 800cc1a:	a803      	add	r0, sp, #12
 800cc1c:	4621      	mov	r1, r4
 800cc1e:	f000 fc0d 	bl	800d43c <__kernel_rem_pio2f>
 800cc22:	2e00      	cmp	r6, #0
 800cc24:	f6bf af31 	bge.w	800ca8a <__ieee754_rem_pio2f+0x62>
 800cc28:	edd4 7a00 	vldr	s15, [r4]
 800cc2c:	eef1 7a67 	vneg.f32	s15, s15
 800cc30:	edc4 7a00 	vstr	s15, [r4]
 800cc34:	edd4 7a01 	vldr	s15, [r4, #4]
 800cc38:	eef1 7a67 	vneg.f32	s15, s15
 800cc3c:	edc4 7a01 	vstr	s15, [r4, #4]
 800cc40:	e77a      	b.n	800cb38 <__ieee754_rem_pio2f+0x110>
 800cc42:	2303      	movs	r3, #3
 800cc44:	e7e5      	b.n	800cc12 <__ieee754_rem_pio2f+0x1ea>
 800cc46:	bf00      	nop
 800cc48:	3f490fd8 	.word	0x3f490fd8
 800cc4c:	4016cbe3 	.word	0x4016cbe3
 800cc50:	3fc90f80 	.word	0x3fc90f80
 800cc54:	3fc90fd0 	.word	0x3fc90fd0
 800cc58:	37354400 	.word	0x37354400
 800cc5c:	37354443 	.word	0x37354443
 800cc60:	2e85a308 	.word	0x2e85a308
 800cc64:	43490f80 	.word	0x43490f80
 800cc68:	3f22f984 	.word	0x3f22f984
 800cc6c:	08010be4 	.word	0x08010be4
 800cc70:	2e85a300 	.word	0x2e85a300
 800cc74:	248d3132 	.word	0x248d3132
 800cc78:	43800000 	.word	0x43800000
 800cc7c:	08010c64 	.word	0x08010c64

0800cc80 <fabsf>:
 800cc80:	ee10 3a10 	vmov	r3, s0
 800cc84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cc88:	ee00 3a10 	vmov	s0, r3
 800cc8c:	4770      	bx	lr
	...

0800cc90 <scalbnf>:
 800cc90:	ee10 3a10 	vmov	r3, s0
 800cc94:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800cc98:	d02b      	beq.n	800ccf2 <scalbnf+0x62>
 800cc9a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800cc9e:	d302      	bcc.n	800cca6 <scalbnf+0x16>
 800cca0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cca4:	4770      	bx	lr
 800cca6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800ccaa:	d123      	bne.n	800ccf4 <scalbnf+0x64>
 800ccac:	4b24      	ldr	r3, [pc, #144]	; (800cd40 <scalbnf+0xb0>)
 800ccae:	eddf 7a25 	vldr	s15, [pc, #148]	; 800cd44 <scalbnf+0xb4>
 800ccb2:	4298      	cmp	r0, r3
 800ccb4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ccb8:	db17      	blt.n	800ccea <scalbnf+0x5a>
 800ccba:	ee10 3a10 	vmov	r3, s0
 800ccbe:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ccc2:	3a19      	subs	r2, #25
 800ccc4:	f24c 3150 	movw	r1, #50000	; 0xc350
 800ccc8:	4288      	cmp	r0, r1
 800ccca:	dd15      	ble.n	800ccf8 <scalbnf+0x68>
 800cccc:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800cd48 <scalbnf+0xb8>
 800ccd0:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800cd4c <scalbnf+0xbc>
 800ccd4:	ee10 3a10 	vmov	r3, s0
 800ccd8:	eeb0 7a67 	vmov.f32	s14, s15
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	bfb8      	it	lt
 800cce0:	eef0 7a66 	vmovlt.f32	s15, s13
 800cce4:	ee27 0a87 	vmul.f32	s0, s15, s14
 800cce8:	4770      	bx	lr
 800ccea:	eddf 7a19 	vldr	s15, [pc, #100]	; 800cd50 <scalbnf+0xc0>
 800ccee:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ccf2:	4770      	bx	lr
 800ccf4:	0dd2      	lsrs	r2, r2, #23
 800ccf6:	e7e5      	b.n	800ccc4 <scalbnf+0x34>
 800ccf8:	4410      	add	r0, r2
 800ccfa:	28fe      	cmp	r0, #254	; 0xfe
 800ccfc:	dce6      	bgt.n	800cccc <scalbnf+0x3c>
 800ccfe:	2800      	cmp	r0, #0
 800cd00:	dd06      	ble.n	800cd10 <scalbnf+0x80>
 800cd02:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cd06:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800cd0a:	ee00 3a10 	vmov	s0, r3
 800cd0e:	4770      	bx	lr
 800cd10:	f110 0f16 	cmn.w	r0, #22
 800cd14:	da09      	bge.n	800cd2a <scalbnf+0x9a>
 800cd16:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800cd50 <scalbnf+0xc0>
 800cd1a:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800cd54 <scalbnf+0xc4>
 800cd1e:	ee10 3a10 	vmov	r3, s0
 800cd22:	eeb0 7a67 	vmov.f32	s14, s15
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	e7d9      	b.n	800ccde <scalbnf+0x4e>
 800cd2a:	3019      	adds	r0, #25
 800cd2c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cd30:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800cd34:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800cd58 <scalbnf+0xc8>
 800cd38:	ee07 3a90 	vmov	s15, r3
 800cd3c:	e7d7      	b.n	800ccee <scalbnf+0x5e>
 800cd3e:	bf00      	nop
 800cd40:	ffff3cb0 	.word	0xffff3cb0
 800cd44:	4c000000 	.word	0x4c000000
 800cd48:	7149f2ca 	.word	0x7149f2ca
 800cd4c:	f149f2ca 	.word	0xf149f2ca
 800cd50:	0da24260 	.word	0x0da24260
 800cd54:	8da24260 	.word	0x8da24260
 800cd58:	33000000 	.word	0x33000000

0800cd5c <with_errnof>:
 800cd5c:	b513      	push	{r0, r1, r4, lr}
 800cd5e:	4604      	mov	r4, r0
 800cd60:	ed8d 0a01 	vstr	s0, [sp, #4]
 800cd64:	f7fd fea8 	bl	800aab8 <__errno>
 800cd68:	ed9d 0a01 	vldr	s0, [sp, #4]
 800cd6c:	6004      	str	r4, [r0, #0]
 800cd6e:	b002      	add	sp, #8
 800cd70:	bd10      	pop	{r4, pc}

0800cd72 <xflowf>:
 800cd72:	b130      	cbz	r0, 800cd82 <xflowf+0x10>
 800cd74:	eef1 7a40 	vneg.f32	s15, s0
 800cd78:	ee27 0a80 	vmul.f32	s0, s15, s0
 800cd7c:	2022      	movs	r0, #34	; 0x22
 800cd7e:	f7ff bfed 	b.w	800cd5c <with_errnof>
 800cd82:	eef0 7a40 	vmov.f32	s15, s0
 800cd86:	e7f7      	b.n	800cd78 <xflowf+0x6>

0800cd88 <__math_uflowf>:
 800cd88:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cd90 <__math_uflowf+0x8>
 800cd8c:	f7ff bff1 	b.w	800cd72 <xflowf>
 800cd90:	10000000 	.word	0x10000000

0800cd94 <__math_oflowf>:
 800cd94:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cd9c <__math_oflowf+0x8>
 800cd98:	f7ff bfeb 	b.w	800cd72 <xflowf>
 800cd9c:	70000000 	.word	0x70000000

0800cda0 <__kernel_rem_pio2>:
 800cda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cda4:	ed2d 8b02 	vpush	{d8}
 800cda8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800cdac:	f112 0f14 	cmn.w	r2, #20
 800cdb0:	9306      	str	r3, [sp, #24]
 800cdb2:	9104      	str	r1, [sp, #16]
 800cdb4:	4bc2      	ldr	r3, [pc, #776]	; (800d0c0 <__kernel_rem_pio2+0x320>)
 800cdb6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800cdb8:	9009      	str	r0, [sp, #36]	; 0x24
 800cdba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cdbe:	9300      	str	r3, [sp, #0]
 800cdc0:	9b06      	ldr	r3, [sp, #24]
 800cdc2:	f103 33ff 	add.w	r3, r3, #4294967295
 800cdc6:	bfa8      	it	ge
 800cdc8:	1ed4      	subge	r4, r2, #3
 800cdca:	9305      	str	r3, [sp, #20]
 800cdcc:	bfb2      	itee	lt
 800cdce:	2400      	movlt	r4, #0
 800cdd0:	2318      	movge	r3, #24
 800cdd2:	fb94 f4f3 	sdivge	r4, r4, r3
 800cdd6:	f06f 0317 	mvn.w	r3, #23
 800cdda:	fb04 3303 	mla	r3, r4, r3, r3
 800cdde:	eb03 0a02 	add.w	sl, r3, r2
 800cde2:	9b00      	ldr	r3, [sp, #0]
 800cde4:	9a05      	ldr	r2, [sp, #20]
 800cde6:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800d0b0 <__kernel_rem_pio2+0x310>
 800cdea:	eb03 0802 	add.w	r8, r3, r2
 800cdee:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800cdf0:	1aa7      	subs	r7, r4, r2
 800cdf2:	ae20      	add	r6, sp, #128	; 0x80
 800cdf4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800cdf8:	2500      	movs	r5, #0
 800cdfa:	4545      	cmp	r5, r8
 800cdfc:	dd13      	ble.n	800ce26 <__kernel_rem_pio2+0x86>
 800cdfe:	9b06      	ldr	r3, [sp, #24]
 800ce00:	aa20      	add	r2, sp, #128	; 0x80
 800ce02:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ce06:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800ce0a:	f04f 0800 	mov.w	r8, #0
 800ce0e:	9b00      	ldr	r3, [sp, #0]
 800ce10:	4598      	cmp	r8, r3
 800ce12:	dc31      	bgt.n	800ce78 <__kernel_rem_pio2+0xd8>
 800ce14:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800d0b0 <__kernel_rem_pio2+0x310>
 800ce18:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ce1c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ce20:	462f      	mov	r7, r5
 800ce22:	2600      	movs	r6, #0
 800ce24:	e01b      	b.n	800ce5e <__kernel_rem_pio2+0xbe>
 800ce26:	42ef      	cmn	r7, r5
 800ce28:	d407      	bmi.n	800ce3a <__kernel_rem_pio2+0x9a>
 800ce2a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ce2e:	f7f3 fca3 	bl	8000778 <__aeabi_i2d>
 800ce32:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ce36:	3501      	adds	r5, #1
 800ce38:	e7df      	b.n	800cdfa <__kernel_rem_pio2+0x5a>
 800ce3a:	ec51 0b18 	vmov	r0, r1, d8
 800ce3e:	e7f8      	b.n	800ce32 <__kernel_rem_pio2+0x92>
 800ce40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce44:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ce48:	f7f3 fa1a 	bl	8000280 <__aeabi_dmul>
 800ce4c:	4602      	mov	r2, r0
 800ce4e:	460b      	mov	r3, r1
 800ce50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce54:	f7f3 fb44 	bl	80004e0 <__adddf3>
 800ce58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce5c:	3601      	adds	r6, #1
 800ce5e:	9b05      	ldr	r3, [sp, #20]
 800ce60:	429e      	cmp	r6, r3
 800ce62:	f1a7 0708 	sub.w	r7, r7, #8
 800ce66:	ddeb      	ble.n	800ce40 <__kernel_rem_pio2+0xa0>
 800ce68:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ce6c:	f108 0801 	add.w	r8, r8, #1
 800ce70:	ecab 7b02 	vstmia	fp!, {d7}
 800ce74:	3508      	adds	r5, #8
 800ce76:	e7ca      	b.n	800ce0e <__kernel_rem_pio2+0x6e>
 800ce78:	9b00      	ldr	r3, [sp, #0]
 800ce7a:	aa0c      	add	r2, sp, #48	; 0x30
 800ce7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ce80:	930b      	str	r3, [sp, #44]	; 0x2c
 800ce82:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ce84:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ce88:	9c00      	ldr	r4, [sp, #0]
 800ce8a:	930a      	str	r3, [sp, #40]	; 0x28
 800ce8c:	00e3      	lsls	r3, r4, #3
 800ce8e:	9308      	str	r3, [sp, #32]
 800ce90:	ab98      	add	r3, sp, #608	; 0x260
 800ce92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ce96:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ce9a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800ce9e:	ab70      	add	r3, sp, #448	; 0x1c0
 800cea0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800cea4:	46c3      	mov	fp, r8
 800cea6:	46a1      	mov	r9, r4
 800cea8:	f1b9 0f00 	cmp.w	r9, #0
 800ceac:	f1a5 0508 	sub.w	r5, r5, #8
 800ceb0:	dc77      	bgt.n	800cfa2 <__kernel_rem_pio2+0x202>
 800ceb2:	ec47 6b10 	vmov	d0, r6, r7
 800ceb6:	4650      	mov	r0, sl
 800ceb8:	f000 fd32 	bl	800d920 <scalbn>
 800cebc:	ec57 6b10 	vmov	r6, r7, d0
 800cec0:	2200      	movs	r2, #0
 800cec2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800cec6:	ee10 0a10 	vmov	r0, s0
 800ceca:	4639      	mov	r1, r7
 800cecc:	f7f3 f9d8 	bl	8000280 <__aeabi_dmul>
 800ced0:	ec41 0b10 	vmov	d0, r0, r1
 800ced4:	f000 fda4 	bl	800da20 <floor>
 800ced8:	4b7a      	ldr	r3, [pc, #488]	; (800d0c4 <__kernel_rem_pio2+0x324>)
 800ceda:	ec51 0b10 	vmov	r0, r1, d0
 800cede:	2200      	movs	r2, #0
 800cee0:	f7f3 f9ce 	bl	8000280 <__aeabi_dmul>
 800cee4:	4602      	mov	r2, r0
 800cee6:	460b      	mov	r3, r1
 800cee8:	4630      	mov	r0, r6
 800ceea:	4639      	mov	r1, r7
 800ceec:	f7f3 faf6 	bl	80004dc <__aeabi_dsub>
 800cef0:	460f      	mov	r7, r1
 800cef2:	4606      	mov	r6, r0
 800cef4:	f7f3 fd32 	bl	800095c <__aeabi_d2iz>
 800cef8:	9002      	str	r0, [sp, #8]
 800cefa:	f7f3 fc3d 	bl	8000778 <__aeabi_i2d>
 800cefe:	4602      	mov	r2, r0
 800cf00:	460b      	mov	r3, r1
 800cf02:	4630      	mov	r0, r6
 800cf04:	4639      	mov	r1, r7
 800cf06:	f7f3 fae9 	bl	80004dc <__aeabi_dsub>
 800cf0a:	f1ba 0f00 	cmp.w	sl, #0
 800cf0e:	4606      	mov	r6, r0
 800cf10:	460f      	mov	r7, r1
 800cf12:	dd6d      	ble.n	800cff0 <__kernel_rem_pio2+0x250>
 800cf14:	1e61      	subs	r1, r4, #1
 800cf16:	ab0c      	add	r3, sp, #48	; 0x30
 800cf18:	9d02      	ldr	r5, [sp, #8]
 800cf1a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cf1e:	f1ca 0018 	rsb	r0, sl, #24
 800cf22:	fa43 f200 	asr.w	r2, r3, r0
 800cf26:	4415      	add	r5, r2
 800cf28:	4082      	lsls	r2, r0
 800cf2a:	1a9b      	subs	r3, r3, r2
 800cf2c:	aa0c      	add	r2, sp, #48	; 0x30
 800cf2e:	9502      	str	r5, [sp, #8]
 800cf30:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800cf34:	f1ca 0217 	rsb	r2, sl, #23
 800cf38:	fa43 fb02 	asr.w	fp, r3, r2
 800cf3c:	f1bb 0f00 	cmp.w	fp, #0
 800cf40:	dd65      	ble.n	800d00e <__kernel_rem_pio2+0x26e>
 800cf42:	9b02      	ldr	r3, [sp, #8]
 800cf44:	2200      	movs	r2, #0
 800cf46:	3301      	adds	r3, #1
 800cf48:	9302      	str	r3, [sp, #8]
 800cf4a:	4615      	mov	r5, r2
 800cf4c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800cf50:	4294      	cmp	r4, r2
 800cf52:	f300 809f 	bgt.w	800d094 <__kernel_rem_pio2+0x2f4>
 800cf56:	f1ba 0f00 	cmp.w	sl, #0
 800cf5a:	dd07      	ble.n	800cf6c <__kernel_rem_pio2+0x1cc>
 800cf5c:	f1ba 0f01 	cmp.w	sl, #1
 800cf60:	f000 80c1 	beq.w	800d0e6 <__kernel_rem_pio2+0x346>
 800cf64:	f1ba 0f02 	cmp.w	sl, #2
 800cf68:	f000 80c7 	beq.w	800d0fa <__kernel_rem_pio2+0x35a>
 800cf6c:	f1bb 0f02 	cmp.w	fp, #2
 800cf70:	d14d      	bne.n	800d00e <__kernel_rem_pio2+0x26e>
 800cf72:	4632      	mov	r2, r6
 800cf74:	463b      	mov	r3, r7
 800cf76:	4954      	ldr	r1, [pc, #336]	; (800d0c8 <__kernel_rem_pio2+0x328>)
 800cf78:	2000      	movs	r0, #0
 800cf7a:	f7f3 faaf 	bl	80004dc <__aeabi_dsub>
 800cf7e:	4606      	mov	r6, r0
 800cf80:	460f      	mov	r7, r1
 800cf82:	2d00      	cmp	r5, #0
 800cf84:	d043      	beq.n	800d00e <__kernel_rem_pio2+0x26e>
 800cf86:	4650      	mov	r0, sl
 800cf88:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800d0b8 <__kernel_rem_pio2+0x318>
 800cf8c:	f000 fcc8 	bl	800d920 <scalbn>
 800cf90:	4630      	mov	r0, r6
 800cf92:	4639      	mov	r1, r7
 800cf94:	ec53 2b10 	vmov	r2, r3, d0
 800cf98:	f7f3 faa0 	bl	80004dc <__aeabi_dsub>
 800cf9c:	4606      	mov	r6, r0
 800cf9e:	460f      	mov	r7, r1
 800cfa0:	e035      	b.n	800d00e <__kernel_rem_pio2+0x26e>
 800cfa2:	4b4a      	ldr	r3, [pc, #296]	; (800d0cc <__kernel_rem_pio2+0x32c>)
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	4630      	mov	r0, r6
 800cfa8:	4639      	mov	r1, r7
 800cfaa:	f7f3 f969 	bl	8000280 <__aeabi_dmul>
 800cfae:	f7f3 fcd5 	bl	800095c <__aeabi_d2iz>
 800cfb2:	f7f3 fbe1 	bl	8000778 <__aeabi_i2d>
 800cfb6:	4602      	mov	r2, r0
 800cfb8:	460b      	mov	r3, r1
 800cfba:	ec43 2b18 	vmov	d8, r2, r3
 800cfbe:	4b44      	ldr	r3, [pc, #272]	; (800d0d0 <__kernel_rem_pio2+0x330>)
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	f7f3 f95d 	bl	8000280 <__aeabi_dmul>
 800cfc6:	4602      	mov	r2, r0
 800cfc8:	460b      	mov	r3, r1
 800cfca:	4630      	mov	r0, r6
 800cfcc:	4639      	mov	r1, r7
 800cfce:	f7f3 fa85 	bl	80004dc <__aeabi_dsub>
 800cfd2:	f7f3 fcc3 	bl	800095c <__aeabi_d2iz>
 800cfd6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cfda:	f84b 0b04 	str.w	r0, [fp], #4
 800cfde:	ec51 0b18 	vmov	r0, r1, d8
 800cfe2:	f7f3 fa7d 	bl	80004e0 <__adddf3>
 800cfe6:	f109 39ff 	add.w	r9, r9, #4294967295
 800cfea:	4606      	mov	r6, r0
 800cfec:	460f      	mov	r7, r1
 800cfee:	e75b      	b.n	800cea8 <__kernel_rem_pio2+0x108>
 800cff0:	d106      	bne.n	800d000 <__kernel_rem_pio2+0x260>
 800cff2:	1e63      	subs	r3, r4, #1
 800cff4:	aa0c      	add	r2, sp, #48	; 0x30
 800cff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cffa:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800cffe:	e79d      	b.n	800cf3c <__kernel_rem_pio2+0x19c>
 800d000:	4b34      	ldr	r3, [pc, #208]	; (800d0d4 <__kernel_rem_pio2+0x334>)
 800d002:	2200      	movs	r2, #0
 800d004:	f7f3 fc96 	bl	8000934 <__aeabi_dcmpge>
 800d008:	2800      	cmp	r0, #0
 800d00a:	d140      	bne.n	800d08e <__kernel_rem_pio2+0x2ee>
 800d00c:	4683      	mov	fp, r0
 800d00e:	2200      	movs	r2, #0
 800d010:	2300      	movs	r3, #0
 800d012:	4630      	mov	r0, r6
 800d014:	4639      	mov	r1, r7
 800d016:	f7f3 fc6f 	bl	80008f8 <__aeabi_dcmpeq>
 800d01a:	2800      	cmp	r0, #0
 800d01c:	f000 80c1 	beq.w	800d1a2 <__kernel_rem_pio2+0x402>
 800d020:	1e65      	subs	r5, r4, #1
 800d022:	462b      	mov	r3, r5
 800d024:	2200      	movs	r2, #0
 800d026:	9900      	ldr	r1, [sp, #0]
 800d028:	428b      	cmp	r3, r1
 800d02a:	da6d      	bge.n	800d108 <__kernel_rem_pio2+0x368>
 800d02c:	2a00      	cmp	r2, #0
 800d02e:	f000 808a 	beq.w	800d146 <__kernel_rem_pio2+0x3a6>
 800d032:	ab0c      	add	r3, sp, #48	; 0x30
 800d034:	f1aa 0a18 	sub.w	sl, sl, #24
 800d038:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	f000 80ae 	beq.w	800d19e <__kernel_rem_pio2+0x3fe>
 800d042:	4650      	mov	r0, sl
 800d044:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800d0b8 <__kernel_rem_pio2+0x318>
 800d048:	f000 fc6a 	bl	800d920 <scalbn>
 800d04c:	1c6b      	adds	r3, r5, #1
 800d04e:	00da      	lsls	r2, r3, #3
 800d050:	9205      	str	r2, [sp, #20]
 800d052:	ec57 6b10 	vmov	r6, r7, d0
 800d056:	aa70      	add	r2, sp, #448	; 0x1c0
 800d058:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800d0cc <__kernel_rem_pio2+0x32c>
 800d05c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800d060:	462c      	mov	r4, r5
 800d062:	f04f 0800 	mov.w	r8, #0
 800d066:	2c00      	cmp	r4, #0
 800d068:	f280 80d4 	bge.w	800d214 <__kernel_rem_pio2+0x474>
 800d06c:	462c      	mov	r4, r5
 800d06e:	2c00      	cmp	r4, #0
 800d070:	f2c0 8102 	blt.w	800d278 <__kernel_rem_pio2+0x4d8>
 800d074:	4b18      	ldr	r3, [pc, #96]	; (800d0d8 <__kernel_rem_pio2+0x338>)
 800d076:	461e      	mov	r6, r3
 800d078:	ab70      	add	r3, sp, #448	; 0x1c0
 800d07a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800d07e:	1b2b      	subs	r3, r5, r4
 800d080:	f04f 0900 	mov.w	r9, #0
 800d084:	f04f 0a00 	mov.w	sl, #0
 800d088:	2700      	movs	r7, #0
 800d08a:	9306      	str	r3, [sp, #24]
 800d08c:	e0e6      	b.n	800d25c <__kernel_rem_pio2+0x4bc>
 800d08e:	f04f 0b02 	mov.w	fp, #2
 800d092:	e756      	b.n	800cf42 <__kernel_rem_pio2+0x1a2>
 800d094:	f8d8 3000 	ldr.w	r3, [r8]
 800d098:	bb05      	cbnz	r5, 800d0dc <__kernel_rem_pio2+0x33c>
 800d09a:	b123      	cbz	r3, 800d0a6 <__kernel_rem_pio2+0x306>
 800d09c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d0a0:	f8c8 3000 	str.w	r3, [r8]
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	3201      	adds	r2, #1
 800d0a8:	f108 0804 	add.w	r8, r8, #4
 800d0ac:	461d      	mov	r5, r3
 800d0ae:	e74f      	b.n	800cf50 <__kernel_rem_pio2+0x1b0>
	...
 800d0bc:	3ff00000 	.word	0x3ff00000
 800d0c0:	08010fc0 	.word	0x08010fc0
 800d0c4:	40200000 	.word	0x40200000
 800d0c8:	3ff00000 	.word	0x3ff00000
 800d0cc:	3e700000 	.word	0x3e700000
 800d0d0:	41700000 	.word	0x41700000
 800d0d4:	3fe00000 	.word	0x3fe00000
 800d0d8:	08010f80 	.word	0x08010f80
 800d0dc:	1acb      	subs	r3, r1, r3
 800d0de:	f8c8 3000 	str.w	r3, [r8]
 800d0e2:	462b      	mov	r3, r5
 800d0e4:	e7df      	b.n	800d0a6 <__kernel_rem_pio2+0x306>
 800d0e6:	1e62      	subs	r2, r4, #1
 800d0e8:	ab0c      	add	r3, sp, #48	; 0x30
 800d0ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0ee:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d0f2:	a90c      	add	r1, sp, #48	; 0x30
 800d0f4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d0f8:	e738      	b.n	800cf6c <__kernel_rem_pio2+0x1cc>
 800d0fa:	1e62      	subs	r2, r4, #1
 800d0fc:	ab0c      	add	r3, sp, #48	; 0x30
 800d0fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d102:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d106:	e7f4      	b.n	800d0f2 <__kernel_rem_pio2+0x352>
 800d108:	a90c      	add	r1, sp, #48	; 0x30
 800d10a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d10e:	3b01      	subs	r3, #1
 800d110:	430a      	orrs	r2, r1
 800d112:	e788      	b.n	800d026 <__kernel_rem_pio2+0x286>
 800d114:	3301      	adds	r3, #1
 800d116:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d11a:	2900      	cmp	r1, #0
 800d11c:	d0fa      	beq.n	800d114 <__kernel_rem_pio2+0x374>
 800d11e:	9a08      	ldr	r2, [sp, #32]
 800d120:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800d124:	446a      	add	r2, sp
 800d126:	3a98      	subs	r2, #152	; 0x98
 800d128:	9208      	str	r2, [sp, #32]
 800d12a:	9a06      	ldr	r2, [sp, #24]
 800d12c:	a920      	add	r1, sp, #128	; 0x80
 800d12e:	18a2      	adds	r2, r4, r2
 800d130:	18e3      	adds	r3, r4, r3
 800d132:	f104 0801 	add.w	r8, r4, #1
 800d136:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800d13a:	9302      	str	r3, [sp, #8]
 800d13c:	9b02      	ldr	r3, [sp, #8]
 800d13e:	4543      	cmp	r3, r8
 800d140:	da04      	bge.n	800d14c <__kernel_rem_pio2+0x3ac>
 800d142:	461c      	mov	r4, r3
 800d144:	e6a2      	b.n	800ce8c <__kernel_rem_pio2+0xec>
 800d146:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d148:	2301      	movs	r3, #1
 800d14a:	e7e4      	b.n	800d116 <__kernel_rem_pio2+0x376>
 800d14c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d14e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d152:	f7f3 fb11 	bl	8000778 <__aeabi_i2d>
 800d156:	e8e5 0102 	strd	r0, r1, [r5], #8
 800d15a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d15c:	46ab      	mov	fp, r5
 800d15e:	461c      	mov	r4, r3
 800d160:	f04f 0900 	mov.w	r9, #0
 800d164:	2600      	movs	r6, #0
 800d166:	2700      	movs	r7, #0
 800d168:	9b05      	ldr	r3, [sp, #20]
 800d16a:	4599      	cmp	r9, r3
 800d16c:	dd06      	ble.n	800d17c <__kernel_rem_pio2+0x3dc>
 800d16e:	9b08      	ldr	r3, [sp, #32]
 800d170:	e8e3 6702 	strd	r6, r7, [r3], #8
 800d174:	f108 0801 	add.w	r8, r8, #1
 800d178:	9308      	str	r3, [sp, #32]
 800d17a:	e7df      	b.n	800d13c <__kernel_rem_pio2+0x39c>
 800d17c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800d180:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800d184:	f7f3 f87c 	bl	8000280 <__aeabi_dmul>
 800d188:	4602      	mov	r2, r0
 800d18a:	460b      	mov	r3, r1
 800d18c:	4630      	mov	r0, r6
 800d18e:	4639      	mov	r1, r7
 800d190:	f7f3 f9a6 	bl	80004e0 <__adddf3>
 800d194:	f109 0901 	add.w	r9, r9, #1
 800d198:	4606      	mov	r6, r0
 800d19a:	460f      	mov	r7, r1
 800d19c:	e7e4      	b.n	800d168 <__kernel_rem_pio2+0x3c8>
 800d19e:	3d01      	subs	r5, #1
 800d1a0:	e747      	b.n	800d032 <__kernel_rem_pio2+0x292>
 800d1a2:	ec47 6b10 	vmov	d0, r6, r7
 800d1a6:	f1ca 0000 	rsb	r0, sl, #0
 800d1aa:	f000 fbb9 	bl	800d920 <scalbn>
 800d1ae:	ec57 6b10 	vmov	r6, r7, d0
 800d1b2:	4ba0      	ldr	r3, [pc, #640]	; (800d434 <__kernel_rem_pio2+0x694>)
 800d1b4:	ee10 0a10 	vmov	r0, s0
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	4639      	mov	r1, r7
 800d1bc:	f7f3 fbba 	bl	8000934 <__aeabi_dcmpge>
 800d1c0:	b1f8      	cbz	r0, 800d202 <__kernel_rem_pio2+0x462>
 800d1c2:	4b9d      	ldr	r3, [pc, #628]	; (800d438 <__kernel_rem_pio2+0x698>)
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	4630      	mov	r0, r6
 800d1c8:	4639      	mov	r1, r7
 800d1ca:	f7f3 f859 	bl	8000280 <__aeabi_dmul>
 800d1ce:	f7f3 fbc5 	bl	800095c <__aeabi_d2iz>
 800d1d2:	4680      	mov	r8, r0
 800d1d4:	f7f3 fad0 	bl	8000778 <__aeabi_i2d>
 800d1d8:	4b96      	ldr	r3, [pc, #600]	; (800d434 <__kernel_rem_pio2+0x694>)
 800d1da:	2200      	movs	r2, #0
 800d1dc:	f7f3 f850 	bl	8000280 <__aeabi_dmul>
 800d1e0:	460b      	mov	r3, r1
 800d1e2:	4602      	mov	r2, r0
 800d1e4:	4639      	mov	r1, r7
 800d1e6:	4630      	mov	r0, r6
 800d1e8:	f7f3 f978 	bl	80004dc <__aeabi_dsub>
 800d1ec:	f7f3 fbb6 	bl	800095c <__aeabi_d2iz>
 800d1f0:	1c65      	adds	r5, r4, #1
 800d1f2:	ab0c      	add	r3, sp, #48	; 0x30
 800d1f4:	f10a 0a18 	add.w	sl, sl, #24
 800d1f8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d1fc:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800d200:	e71f      	b.n	800d042 <__kernel_rem_pio2+0x2a2>
 800d202:	4630      	mov	r0, r6
 800d204:	4639      	mov	r1, r7
 800d206:	f7f3 fba9 	bl	800095c <__aeabi_d2iz>
 800d20a:	ab0c      	add	r3, sp, #48	; 0x30
 800d20c:	4625      	mov	r5, r4
 800d20e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d212:	e716      	b.n	800d042 <__kernel_rem_pio2+0x2a2>
 800d214:	ab0c      	add	r3, sp, #48	; 0x30
 800d216:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d21a:	f7f3 faad 	bl	8000778 <__aeabi_i2d>
 800d21e:	4632      	mov	r2, r6
 800d220:	463b      	mov	r3, r7
 800d222:	f7f3 f82d 	bl	8000280 <__aeabi_dmul>
 800d226:	4642      	mov	r2, r8
 800d228:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800d22c:	464b      	mov	r3, r9
 800d22e:	4630      	mov	r0, r6
 800d230:	4639      	mov	r1, r7
 800d232:	f7f3 f825 	bl	8000280 <__aeabi_dmul>
 800d236:	3c01      	subs	r4, #1
 800d238:	4606      	mov	r6, r0
 800d23a:	460f      	mov	r7, r1
 800d23c:	e713      	b.n	800d066 <__kernel_rem_pio2+0x2c6>
 800d23e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800d242:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800d246:	f7f3 f81b 	bl	8000280 <__aeabi_dmul>
 800d24a:	4602      	mov	r2, r0
 800d24c:	460b      	mov	r3, r1
 800d24e:	4648      	mov	r0, r9
 800d250:	4651      	mov	r1, sl
 800d252:	f7f3 f945 	bl	80004e0 <__adddf3>
 800d256:	3701      	adds	r7, #1
 800d258:	4681      	mov	r9, r0
 800d25a:	468a      	mov	sl, r1
 800d25c:	9b00      	ldr	r3, [sp, #0]
 800d25e:	429f      	cmp	r7, r3
 800d260:	dc02      	bgt.n	800d268 <__kernel_rem_pio2+0x4c8>
 800d262:	9b06      	ldr	r3, [sp, #24]
 800d264:	429f      	cmp	r7, r3
 800d266:	ddea      	ble.n	800d23e <__kernel_rem_pio2+0x49e>
 800d268:	9a06      	ldr	r2, [sp, #24]
 800d26a:	ab48      	add	r3, sp, #288	; 0x120
 800d26c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800d270:	e9c6 9a00 	strd	r9, sl, [r6]
 800d274:	3c01      	subs	r4, #1
 800d276:	e6fa      	b.n	800d06e <__kernel_rem_pio2+0x2ce>
 800d278:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d27a:	2b02      	cmp	r3, #2
 800d27c:	dc0b      	bgt.n	800d296 <__kernel_rem_pio2+0x4f6>
 800d27e:	2b00      	cmp	r3, #0
 800d280:	dc39      	bgt.n	800d2f6 <__kernel_rem_pio2+0x556>
 800d282:	d05d      	beq.n	800d340 <__kernel_rem_pio2+0x5a0>
 800d284:	9b02      	ldr	r3, [sp, #8]
 800d286:	f003 0007 	and.w	r0, r3, #7
 800d28a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800d28e:	ecbd 8b02 	vpop	{d8}
 800d292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d296:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d298:	2b03      	cmp	r3, #3
 800d29a:	d1f3      	bne.n	800d284 <__kernel_rem_pio2+0x4e4>
 800d29c:	9b05      	ldr	r3, [sp, #20]
 800d29e:	9500      	str	r5, [sp, #0]
 800d2a0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800d2a4:	eb0d 0403 	add.w	r4, sp, r3
 800d2a8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800d2ac:	46a2      	mov	sl, r4
 800d2ae:	9b00      	ldr	r3, [sp, #0]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	f1aa 0a08 	sub.w	sl, sl, #8
 800d2b6:	dc69      	bgt.n	800d38c <__kernel_rem_pio2+0x5ec>
 800d2b8:	46aa      	mov	sl, r5
 800d2ba:	f1ba 0f01 	cmp.w	sl, #1
 800d2be:	f1a4 0408 	sub.w	r4, r4, #8
 800d2c2:	f300 8083 	bgt.w	800d3cc <__kernel_rem_pio2+0x62c>
 800d2c6:	9c05      	ldr	r4, [sp, #20]
 800d2c8:	ab48      	add	r3, sp, #288	; 0x120
 800d2ca:	441c      	add	r4, r3
 800d2cc:	2000      	movs	r0, #0
 800d2ce:	2100      	movs	r1, #0
 800d2d0:	2d01      	cmp	r5, #1
 800d2d2:	f300 809a 	bgt.w	800d40a <__kernel_rem_pio2+0x66a>
 800d2d6:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800d2da:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800d2de:	f1bb 0f00 	cmp.w	fp, #0
 800d2e2:	f040 8098 	bne.w	800d416 <__kernel_rem_pio2+0x676>
 800d2e6:	9b04      	ldr	r3, [sp, #16]
 800d2e8:	e9c3 7800 	strd	r7, r8, [r3]
 800d2ec:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800d2f0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d2f4:	e7c6      	b.n	800d284 <__kernel_rem_pio2+0x4e4>
 800d2f6:	9e05      	ldr	r6, [sp, #20]
 800d2f8:	ab48      	add	r3, sp, #288	; 0x120
 800d2fa:	441e      	add	r6, r3
 800d2fc:	462c      	mov	r4, r5
 800d2fe:	2000      	movs	r0, #0
 800d300:	2100      	movs	r1, #0
 800d302:	2c00      	cmp	r4, #0
 800d304:	da33      	bge.n	800d36e <__kernel_rem_pio2+0x5ce>
 800d306:	f1bb 0f00 	cmp.w	fp, #0
 800d30a:	d036      	beq.n	800d37a <__kernel_rem_pio2+0x5da>
 800d30c:	4602      	mov	r2, r0
 800d30e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d312:	9c04      	ldr	r4, [sp, #16]
 800d314:	e9c4 2300 	strd	r2, r3, [r4]
 800d318:	4602      	mov	r2, r0
 800d31a:	460b      	mov	r3, r1
 800d31c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800d320:	f7f3 f8dc 	bl	80004dc <__aeabi_dsub>
 800d324:	ae4a      	add	r6, sp, #296	; 0x128
 800d326:	2401      	movs	r4, #1
 800d328:	42a5      	cmp	r5, r4
 800d32a:	da29      	bge.n	800d380 <__kernel_rem_pio2+0x5e0>
 800d32c:	f1bb 0f00 	cmp.w	fp, #0
 800d330:	d002      	beq.n	800d338 <__kernel_rem_pio2+0x598>
 800d332:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d336:	4619      	mov	r1, r3
 800d338:	9b04      	ldr	r3, [sp, #16]
 800d33a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d33e:	e7a1      	b.n	800d284 <__kernel_rem_pio2+0x4e4>
 800d340:	9c05      	ldr	r4, [sp, #20]
 800d342:	ab48      	add	r3, sp, #288	; 0x120
 800d344:	441c      	add	r4, r3
 800d346:	2000      	movs	r0, #0
 800d348:	2100      	movs	r1, #0
 800d34a:	2d00      	cmp	r5, #0
 800d34c:	da09      	bge.n	800d362 <__kernel_rem_pio2+0x5c2>
 800d34e:	f1bb 0f00 	cmp.w	fp, #0
 800d352:	d002      	beq.n	800d35a <__kernel_rem_pio2+0x5ba>
 800d354:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d358:	4619      	mov	r1, r3
 800d35a:	9b04      	ldr	r3, [sp, #16]
 800d35c:	e9c3 0100 	strd	r0, r1, [r3]
 800d360:	e790      	b.n	800d284 <__kernel_rem_pio2+0x4e4>
 800d362:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d366:	f7f3 f8bb 	bl	80004e0 <__adddf3>
 800d36a:	3d01      	subs	r5, #1
 800d36c:	e7ed      	b.n	800d34a <__kernel_rem_pio2+0x5aa>
 800d36e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800d372:	f7f3 f8b5 	bl	80004e0 <__adddf3>
 800d376:	3c01      	subs	r4, #1
 800d378:	e7c3      	b.n	800d302 <__kernel_rem_pio2+0x562>
 800d37a:	4602      	mov	r2, r0
 800d37c:	460b      	mov	r3, r1
 800d37e:	e7c8      	b.n	800d312 <__kernel_rem_pio2+0x572>
 800d380:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800d384:	f7f3 f8ac 	bl	80004e0 <__adddf3>
 800d388:	3401      	adds	r4, #1
 800d38a:	e7cd      	b.n	800d328 <__kernel_rem_pio2+0x588>
 800d38c:	e9da 8900 	ldrd	r8, r9, [sl]
 800d390:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800d394:	9b00      	ldr	r3, [sp, #0]
 800d396:	3b01      	subs	r3, #1
 800d398:	9300      	str	r3, [sp, #0]
 800d39a:	4632      	mov	r2, r6
 800d39c:	463b      	mov	r3, r7
 800d39e:	4640      	mov	r0, r8
 800d3a0:	4649      	mov	r1, r9
 800d3a2:	f7f3 f89d 	bl	80004e0 <__adddf3>
 800d3a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d3aa:	4602      	mov	r2, r0
 800d3ac:	460b      	mov	r3, r1
 800d3ae:	4640      	mov	r0, r8
 800d3b0:	4649      	mov	r1, r9
 800d3b2:	f7f3 f893 	bl	80004dc <__aeabi_dsub>
 800d3b6:	4632      	mov	r2, r6
 800d3b8:	463b      	mov	r3, r7
 800d3ba:	f7f3 f891 	bl	80004e0 <__adddf3>
 800d3be:	ed9d 7b06 	vldr	d7, [sp, #24]
 800d3c2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d3c6:	ed8a 7b00 	vstr	d7, [sl]
 800d3ca:	e770      	b.n	800d2ae <__kernel_rem_pio2+0x50e>
 800d3cc:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d3d0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800d3d4:	4640      	mov	r0, r8
 800d3d6:	4632      	mov	r2, r6
 800d3d8:	463b      	mov	r3, r7
 800d3da:	4649      	mov	r1, r9
 800d3dc:	f7f3 f880 	bl	80004e0 <__adddf3>
 800d3e0:	e9cd 0100 	strd	r0, r1, [sp]
 800d3e4:	4602      	mov	r2, r0
 800d3e6:	460b      	mov	r3, r1
 800d3e8:	4640      	mov	r0, r8
 800d3ea:	4649      	mov	r1, r9
 800d3ec:	f7f3 f876 	bl	80004dc <__aeabi_dsub>
 800d3f0:	4632      	mov	r2, r6
 800d3f2:	463b      	mov	r3, r7
 800d3f4:	f7f3 f874 	bl	80004e0 <__adddf3>
 800d3f8:	ed9d 7b00 	vldr	d7, [sp]
 800d3fc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d400:	ed84 7b00 	vstr	d7, [r4]
 800d404:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d408:	e757      	b.n	800d2ba <__kernel_rem_pio2+0x51a>
 800d40a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d40e:	f7f3 f867 	bl	80004e0 <__adddf3>
 800d412:	3d01      	subs	r5, #1
 800d414:	e75c      	b.n	800d2d0 <__kernel_rem_pio2+0x530>
 800d416:	9b04      	ldr	r3, [sp, #16]
 800d418:	9a04      	ldr	r2, [sp, #16]
 800d41a:	601f      	str	r7, [r3, #0]
 800d41c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800d420:	605c      	str	r4, [r3, #4]
 800d422:	609d      	str	r5, [r3, #8]
 800d424:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d428:	60d3      	str	r3, [r2, #12]
 800d42a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d42e:	6110      	str	r0, [r2, #16]
 800d430:	6153      	str	r3, [r2, #20]
 800d432:	e727      	b.n	800d284 <__kernel_rem_pio2+0x4e4>
 800d434:	41700000 	.word	0x41700000
 800d438:	3e700000 	.word	0x3e700000

0800d43c <__kernel_rem_pio2f>:
 800d43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d440:	ed2d 8b04 	vpush	{d8-d9}
 800d444:	b0d9      	sub	sp, #356	; 0x164
 800d446:	4688      	mov	r8, r1
 800d448:	9002      	str	r0, [sp, #8]
 800d44a:	49b8      	ldr	r1, [pc, #736]	; (800d72c <__kernel_rem_pio2f+0x2f0>)
 800d44c:	9866      	ldr	r0, [sp, #408]	; 0x198
 800d44e:	9301      	str	r3, [sp, #4]
 800d450:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800d454:	9901      	ldr	r1, [sp, #4]
 800d456:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 800d458:	f101 3bff 	add.w	fp, r1, #4294967295
 800d45c:	1d11      	adds	r1, r2, #4
 800d45e:	db25      	blt.n	800d4ac <__kernel_rem_pio2f+0x70>
 800d460:	1ed0      	subs	r0, r2, #3
 800d462:	bf48      	it	mi
 800d464:	1d10      	addmi	r0, r2, #4
 800d466:	10c0      	asrs	r0, r0, #3
 800d468:	1c45      	adds	r5, r0, #1
 800d46a:	00e9      	lsls	r1, r5, #3
 800d46c:	eba0 070b 	sub.w	r7, r0, fp
 800d470:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 800d73c <__kernel_rem_pio2f+0x300>
 800d474:	9103      	str	r1, [sp, #12]
 800d476:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800d47a:	eb0a 0c0b 	add.w	ip, sl, fp
 800d47e:	ae1c      	add	r6, sp, #112	; 0x70
 800d480:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 800d484:	2400      	movs	r4, #0
 800d486:	4564      	cmp	r4, ip
 800d488:	dd12      	ble.n	800d4b0 <__kernel_rem_pio2f+0x74>
 800d48a:	9901      	ldr	r1, [sp, #4]
 800d48c:	ac1c      	add	r4, sp, #112	; 0x70
 800d48e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800d492:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800d496:	f04f 0c00 	mov.w	ip, #0
 800d49a:	45d4      	cmp	ip, sl
 800d49c:	dc27      	bgt.n	800d4ee <__kernel_rem_pio2f+0xb2>
 800d49e:	f8dd e008 	ldr.w	lr, [sp, #8]
 800d4a2:	eddf 7aa6 	vldr	s15, [pc, #664]	; 800d73c <__kernel_rem_pio2f+0x300>
 800d4a6:	4627      	mov	r7, r4
 800d4a8:	2600      	movs	r6, #0
 800d4aa:	e016      	b.n	800d4da <__kernel_rem_pio2f+0x9e>
 800d4ac:	2000      	movs	r0, #0
 800d4ae:	e7db      	b.n	800d468 <__kernel_rem_pio2f+0x2c>
 800d4b0:	42e7      	cmn	r7, r4
 800d4b2:	bf5d      	ittte	pl
 800d4b4:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 800d4b8:	ee07 1a90 	vmovpl	s15, r1
 800d4bc:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800d4c0:	eef0 7a47 	vmovmi.f32	s15, s14
 800d4c4:	ece6 7a01 	vstmia	r6!, {s15}
 800d4c8:	3401      	adds	r4, #1
 800d4ca:	e7dc      	b.n	800d486 <__kernel_rem_pio2f+0x4a>
 800d4cc:	ecfe 6a01 	vldmia	lr!, {s13}
 800d4d0:	ed97 7a00 	vldr	s14, [r7]
 800d4d4:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d4d8:	3601      	adds	r6, #1
 800d4da:	455e      	cmp	r6, fp
 800d4dc:	f1a7 0704 	sub.w	r7, r7, #4
 800d4e0:	ddf4      	ble.n	800d4cc <__kernel_rem_pio2f+0x90>
 800d4e2:	ece9 7a01 	vstmia	r9!, {s15}
 800d4e6:	f10c 0c01 	add.w	ip, ip, #1
 800d4ea:	3404      	adds	r4, #4
 800d4ec:	e7d5      	b.n	800d49a <__kernel_rem_pio2f+0x5e>
 800d4ee:	a908      	add	r1, sp, #32
 800d4f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d4f4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800d4f8:	eddf 8a8f 	vldr	s17, [pc, #572]	; 800d738 <__kernel_rem_pio2f+0x2fc>
 800d4fc:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 800d734 <__kernel_rem_pio2f+0x2f8>
 800d500:	9105      	str	r1, [sp, #20]
 800d502:	9304      	str	r3, [sp, #16]
 800d504:	4656      	mov	r6, sl
 800d506:	00b3      	lsls	r3, r6, #2
 800d508:	9306      	str	r3, [sp, #24]
 800d50a:	ab58      	add	r3, sp, #352	; 0x160
 800d50c:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800d510:	ac08      	add	r4, sp, #32
 800d512:	ab44      	add	r3, sp, #272	; 0x110
 800d514:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800d518:	46a4      	mov	ip, r4
 800d51a:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800d51e:	4637      	mov	r7, r6
 800d520:	2f00      	cmp	r7, #0
 800d522:	f1a0 0004 	sub.w	r0, r0, #4
 800d526:	dc4a      	bgt.n	800d5be <__kernel_rem_pio2f+0x182>
 800d528:	4628      	mov	r0, r5
 800d52a:	9207      	str	r2, [sp, #28]
 800d52c:	f7ff fbb0 	bl	800cc90 <scalbnf>
 800d530:	eeb0 8a40 	vmov.f32	s16, s0
 800d534:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800d538:	ee28 0a00 	vmul.f32	s0, s16, s0
 800d53c:	f000 faf0 	bl	800db20 <floorf>
 800d540:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800d544:	eea0 8a67 	vfms.f32	s16, s0, s15
 800d548:	2d00      	cmp	r5, #0
 800d54a:	9a07      	ldr	r2, [sp, #28]
 800d54c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800d550:	ee17 9a90 	vmov	r9, s15
 800d554:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d558:	ee38 8a67 	vsub.f32	s16, s16, s15
 800d55c:	dd41      	ble.n	800d5e2 <__kernel_rem_pio2f+0x1a6>
 800d55e:	f106 3cff 	add.w	ip, r6, #4294967295
 800d562:	ab08      	add	r3, sp, #32
 800d564:	f1c5 0e08 	rsb	lr, r5, #8
 800d568:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800d56c:	fa47 f00e 	asr.w	r0, r7, lr
 800d570:	4481      	add	r9, r0
 800d572:	fa00 f00e 	lsl.w	r0, r0, lr
 800d576:	1a3f      	subs	r7, r7, r0
 800d578:	f1c5 0007 	rsb	r0, r5, #7
 800d57c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800d580:	4107      	asrs	r7, r0
 800d582:	2f00      	cmp	r7, #0
 800d584:	dd3c      	ble.n	800d600 <__kernel_rem_pio2f+0x1c4>
 800d586:	f04f 0e00 	mov.w	lr, #0
 800d58a:	f109 0901 	add.w	r9, r9, #1
 800d58e:	4671      	mov	r1, lr
 800d590:	4576      	cmp	r6, lr
 800d592:	dc67      	bgt.n	800d664 <__kernel_rem_pio2f+0x228>
 800d594:	2d00      	cmp	r5, #0
 800d596:	dd03      	ble.n	800d5a0 <__kernel_rem_pio2f+0x164>
 800d598:	2d01      	cmp	r5, #1
 800d59a:	d074      	beq.n	800d686 <__kernel_rem_pio2f+0x24a>
 800d59c:	2d02      	cmp	r5, #2
 800d59e:	d07b      	beq.n	800d698 <__kernel_rem_pio2f+0x25c>
 800d5a0:	2f02      	cmp	r7, #2
 800d5a2:	d12d      	bne.n	800d600 <__kernel_rem_pio2f+0x1c4>
 800d5a4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d5a8:	ee30 8a48 	vsub.f32	s16, s0, s16
 800d5ac:	b341      	cbz	r1, 800d600 <__kernel_rem_pio2f+0x1c4>
 800d5ae:	4628      	mov	r0, r5
 800d5b0:	9207      	str	r2, [sp, #28]
 800d5b2:	f7ff fb6d 	bl	800cc90 <scalbnf>
 800d5b6:	9a07      	ldr	r2, [sp, #28]
 800d5b8:	ee38 8a40 	vsub.f32	s16, s16, s0
 800d5bc:	e020      	b.n	800d600 <__kernel_rem_pio2f+0x1c4>
 800d5be:	ee60 7a28 	vmul.f32	s15, s0, s17
 800d5c2:	3f01      	subs	r7, #1
 800d5c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d5c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d5cc:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800d5d0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d5d4:	ecac 0a01 	vstmia	ip!, {s0}
 800d5d8:	ed90 0a00 	vldr	s0, [r0]
 800d5dc:	ee37 0a80 	vadd.f32	s0, s15, s0
 800d5e0:	e79e      	b.n	800d520 <__kernel_rem_pio2f+0xe4>
 800d5e2:	d105      	bne.n	800d5f0 <__kernel_rem_pio2f+0x1b4>
 800d5e4:	1e70      	subs	r0, r6, #1
 800d5e6:	ab08      	add	r3, sp, #32
 800d5e8:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800d5ec:	11ff      	asrs	r7, r7, #7
 800d5ee:	e7c8      	b.n	800d582 <__kernel_rem_pio2f+0x146>
 800d5f0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d5f4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d5f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5fc:	da30      	bge.n	800d660 <__kernel_rem_pio2f+0x224>
 800d5fe:	2700      	movs	r7, #0
 800d600:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d608:	f040 809a 	bne.w	800d740 <__kernel_rem_pio2f+0x304>
 800d60c:	1e74      	subs	r4, r6, #1
 800d60e:	46a4      	mov	ip, r4
 800d610:	2100      	movs	r1, #0
 800d612:	45d4      	cmp	ip, sl
 800d614:	da47      	bge.n	800d6a6 <__kernel_rem_pio2f+0x26a>
 800d616:	2900      	cmp	r1, #0
 800d618:	d063      	beq.n	800d6e2 <__kernel_rem_pio2f+0x2a6>
 800d61a:	ab08      	add	r3, sp, #32
 800d61c:	3d08      	subs	r5, #8
 800d61e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d07f      	beq.n	800d726 <__kernel_rem_pio2f+0x2ea>
 800d626:	4628      	mov	r0, r5
 800d628:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d62c:	f7ff fb30 	bl	800cc90 <scalbnf>
 800d630:	1c63      	adds	r3, r4, #1
 800d632:	aa44      	add	r2, sp, #272	; 0x110
 800d634:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800d738 <__kernel_rem_pio2f+0x2fc>
 800d638:	0099      	lsls	r1, r3, #2
 800d63a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d63e:	4623      	mov	r3, r4
 800d640:	2b00      	cmp	r3, #0
 800d642:	f280 80ad 	bge.w	800d7a0 <__kernel_rem_pio2f+0x364>
 800d646:	4623      	mov	r3, r4
 800d648:	2b00      	cmp	r3, #0
 800d64a:	f2c0 80cb 	blt.w	800d7e4 <__kernel_rem_pio2f+0x3a8>
 800d64e:	aa44      	add	r2, sp, #272	; 0x110
 800d650:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800d654:	4e36      	ldr	r6, [pc, #216]	; (800d730 <__kernel_rem_pio2f+0x2f4>)
 800d656:	eddf 7a39 	vldr	s15, [pc, #228]	; 800d73c <__kernel_rem_pio2f+0x300>
 800d65a:	2000      	movs	r0, #0
 800d65c:	1ae2      	subs	r2, r4, r3
 800d65e:	e0b6      	b.n	800d7ce <__kernel_rem_pio2f+0x392>
 800d660:	2702      	movs	r7, #2
 800d662:	e790      	b.n	800d586 <__kernel_rem_pio2f+0x14a>
 800d664:	6820      	ldr	r0, [r4, #0]
 800d666:	b949      	cbnz	r1, 800d67c <__kernel_rem_pio2f+0x240>
 800d668:	b118      	cbz	r0, 800d672 <__kernel_rem_pio2f+0x236>
 800d66a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800d66e:	6020      	str	r0, [r4, #0]
 800d670:	2001      	movs	r0, #1
 800d672:	f10e 0e01 	add.w	lr, lr, #1
 800d676:	3404      	adds	r4, #4
 800d678:	4601      	mov	r1, r0
 800d67a:	e789      	b.n	800d590 <__kernel_rem_pio2f+0x154>
 800d67c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800d680:	6020      	str	r0, [r4, #0]
 800d682:	4608      	mov	r0, r1
 800d684:	e7f5      	b.n	800d672 <__kernel_rem_pio2f+0x236>
 800d686:	1e74      	subs	r4, r6, #1
 800d688:	ab08      	add	r3, sp, #32
 800d68a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d68e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800d692:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d696:	e783      	b.n	800d5a0 <__kernel_rem_pio2f+0x164>
 800d698:	1e74      	subs	r4, r6, #1
 800d69a:	ab08      	add	r3, sp, #32
 800d69c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d6a0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800d6a4:	e7f5      	b.n	800d692 <__kernel_rem_pio2f+0x256>
 800d6a6:	ab08      	add	r3, sp, #32
 800d6a8:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 800d6ac:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d6b0:	4301      	orrs	r1, r0
 800d6b2:	e7ae      	b.n	800d612 <__kernel_rem_pio2f+0x1d6>
 800d6b4:	3001      	adds	r0, #1
 800d6b6:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 800d6ba:	2f00      	cmp	r7, #0
 800d6bc:	d0fa      	beq.n	800d6b4 <__kernel_rem_pio2f+0x278>
 800d6be:	9b06      	ldr	r3, [sp, #24]
 800d6c0:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800d6c4:	eb0d 0403 	add.w	r4, sp, r3
 800d6c8:	9b01      	ldr	r3, [sp, #4]
 800d6ca:	18f7      	adds	r7, r6, r3
 800d6cc:	ab1c      	add	r3, sp, #112	; 0x70
 800d6ce:	f106 0c01 	add.w	ip, r6, #1
 800d6d2:	3c4c      	subs	r4, #76	; 0x4c
 800d6d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d6d8:	4430      	add	r0, r6
 800d6da:	4560      	cmp	r0, ip
 800d6dc:	da04      	bge.n	800d6e8 <__kernel_rem_pio2f+0x2ac>
 800d6de:	4606      	mov	r6, r0
 800d6e0:	e711      	b.n	800d506 <__kernel_rem_pio2f+0xca>
 800d6e2:	9c05      	ldr	r4, [sp, #20]
 800d6e4:	2001      	movs	r0, #1
 800d6e6:	e7e6      	b.n	800d6b6 <__kernel_rem_pio2f+0x27a>
 800d6e8:	9b04      	ldr	r3, [sp, #16]
 800d6ea:	f8dd e008 	ldr.w	lr, [sp, #8]
 800d6ee:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800d6f2:	9306      	str	r3, [sp, #24]
 800d6f4:	ee07 3a90 	vmov	s15, r3
 800d6f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d6fc:	2600      	movs	r6, #0
 800d6fe:	ece7 7a01 	vstmia	r7!, {s15}
 800d702:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800d73c <__kernel_rem_pio2f+0x300>
 800d706:	46b9      	mov	r9, r7
 800d708:	455e      	cmp	r6, fp
 800d70a:	dd04      	ble.n	800d716 <__kernel_rem_pio2f+0x2da>
 800d70c:	ece4 7a01 	vstmia	r4!, {s15}
 800d710:	f10c 0c01 	add.w	ip, ip, #1
 800d714:	e7e1      	b.n	800d6da <__kernel_rem_pio2f+0x29e>
 800d716:	ecfe 6a01 	vldmia	lr!, {s13}
 800d71a:	ed39 7a01 	vldmdb	r9!, {s14}
 800d71e:	3601      	adds	r6, #1
 800d720:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d724:	e7f0      	b.n	800d708 <__kernel_rem_pio2f+0x2cc>
 800d726:	3c01      	subs	r4, #1
 800d728:	e777      	b.n	800d61a <__kernel_rem_pio2f+0x1de>
 800d72a:	bf00      	nop
 800d72c:	08010ffc 	.word	0x08010ffc
 800d730:	08010fd0 	.word	0x08010fd0
 800d734:	43800000 	.word	0x43800000
 800d738:	3b800000 	.word	0x3b800000
 800d73c:	00000000 	.word	0x00000000
 800d740:	9b03      	ldr	r3, [sp, #12]
 800d742:	eeb0 0a48 	vmov.f32	s0, s16
 800d746:	1a98      	subs	r0, r3, r2
 800d748:	f7ff faa2 	bl	800cc90 <scalbnf>
 800d74c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800d734 <__kernel_rem_pio2f+0x2f8>
 800d750:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800d754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d758:	db19      	blt.n	800d78e <__kernel_rem_pio2f+0x352>
 800d75a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800d738 <__kernel_rem_pio2f+0x2fc>
 800d75e:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d762:	aa08      	add	r2, sp, #32
 800d764:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d768:	1c74      	adds	r4, r6, #1
 800d76a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d76e:	3508      	adds	r5, #8
 800d770:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800d774:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d778:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d77c:	ee10 3a10 	vmov	r3, s0
 800d780:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800d784:	ee17 3a90 	vmov	r3, s15
 800d788:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d78c:	e74b      	b.n	800d626 <__kernel_rem_pio2f+0x1ea>
 800d78e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d792:	aa08      	add	r2, sp, #32
 800d794:	ee10 3a10 	vmov	r3, s0
 800d798:	4634      	mov	r4, r6
 800d79a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800d79e:	e742      	b.n	800d626 <__kernel_rem_pio2f+0x1ea>
 800d7a0:	a808      	add	r0, sp, #32
 800d7a2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800d7a6:	9001      	str	r0, [sp, #4]
 800d7a8:	ee07 0a90 	vmov	s15, r0
 800d7ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d7b0:	3b01      	subs	r3, #1
 800d7b2:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d7b6:	ee20 0a07 	vmul.f32	s0, s0, s14
 800d7ba:	ed62 7a01 	vstmdb	r2!, {s15}
 800d7be:	e73f      	b.n	800d640 <__kernel_rem_pio2f+0x204>
 800d7c0:	ecf6 6a01 	vldmia	r6!, {s13}
 800d7c4:	ecb5 7a01 	vldmia	r5!, {s14}
 800d7c8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d7cc:	3001      	adds	r0, #1
 800d7ce:	4550      	cmp	r0, sl
 800d7d0:	dc01      	bgt.n	800d7d6 <__kernel_rem_pio2f+0x39a>
 800d7d2:	4290      	cmp	r0, r2
 800d7d4:	ddf4      	ble.n	800d7c0 <__kernel_rem_pio2f+0x384>
 800d7d6:	a858      	add	r0, sp, #352	; 0x160
 800d7d8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800d7dc:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 800d7e0:	3b01      	subs	r3, #1
 800d7e2:	e731      	b.n	800d648 <__kernel_rem_pio2f+0x20c>
 800d7e4:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800d7e6:	2b02      	cmp	r3, #2
 800d7e8:	dc09      	bgt.n	800d7fe <__kernel_rem_pio2f+0x3c2>
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	dc2b      	bgt.n	800d846 <__kernel_rem_pio2f+0x40a>
 800d7ee:	d044      	beq.n	800d87a <__kernel_rem_pio2f+0x43e>
 800d7f0:	f009 0007 	and.w	r0, r9, #7
 800d7f4:	b059      	add	sp, #356	; 0x164
 800d7f6:	ecbd 8b04 	vpop	{d8-d9}
 800d7fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7fe:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800d800:	2b03      	cmp	r3, #3
 800d802:	d1f5      	bne.n	800d7f0 <__kernel_rem_pio2f+0x3b4>
 800d804:	aa30      	add	r2, sp, #192	; 0xc0
 800d806:	1f0b      	subs	r3, r1, #4
 800d808:	4413      	add	r3, r2
 800d80a:	461a      	mov	r2, r3
 800d80c:	4620      	mov	r0, r4
 800d80e:	2800      	cmp	r0, #0
 800d810:	f1a2 0204 	sub.w	r2, r2, #4
 800d814:	dc52      	bgt.n	800d8bc <__kernel_rem_pio2f+0x480>
 800d816:	4622      	mov	r2, r4
 800d818:	2a01      	cmp	r2, #1
 800d81a:	f1a3 0304 	sub.w	r3, r3, #4
 800d81e:	dc5d      	bgt.n	800d8dc <__kernel_rem_pio2f+0x4a0>
 800d820:	ab30      	add	r3, sp, #192	; 0xc0
 800d822:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800d73c <__kernel_rem_pio2f+0x300>
 800d826:	440b      	add	r3, r1
 800d828:	2c01      	cmp	r4, #1
 800d82a:	dc67      	bgt.n	800d8fc <__kernel_rem_pio2f+0x4c0>
 800d82c:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800d830:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800d834:	2f00      	cmp	r7, #0
 800d836:	d167      	bne.n	800d908 <__kernel_rem_pio2f+0x4cc>
 800d838:	edc8 6a00 	vstr	s13, [r8]
 800d83c:	ed88 7a01 	vstr	s14, [r8, #4]
 800d840:	edc8 7a02 	vstr	s15, [r8, #8]
 800d844:	e7d4      	b.n	800d7f0 <__kernel_rem_pio2f+0x3b4>
 800d846:	ab30      	add	r3, sp, #192	; 0xc0
 800d848:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 800d73c <__kernel_rem_pio2f+0x300>
 800d84c:	440b      	add	r3, r1
 800d84e:	4622      	mov	r2, r4
 800d850:	2a00      	cmp	r2, #0
 800d852:	da24      	bge.n	800d89e <__kernel_rem_pio2f+0x462>
 800d854:	b34f      	cbz	r7, 800d8aa <__kernel_rem_pio2f+0x46e>
 800d856:	eef1 7a47 	vneg.f32	s15, s14
 800d85a:	edc8 7a00 	vstr	s15, [r8]
 800d85e:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800d862:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d866:	aa31      	add	r2, sp, #196	; 0xc4
 800d868:	2301      	movs	r3, #1
 800d86a:	429c      	cmp	r4, r3
 800d86c:	da20      	bge.n	800d8b0 <__kernel_rem_pio2f+0x474>
 800d86e:	b10f      	cbz	r7, 800d874 <__kernel_rem_pio2f+0x438>
 800d870:	eef1 7a67 	vneg.f32	s15, s15
 800d874:	edc8 7a01 	vstr	s15, [r8, #4]
 800d878:	e7ba      	b.n	800d7f0 <__kernel_rem_pio2f+0x3b4>
 800d87a:	ab30      	add	r3, sp, #192	; 0xc0
 800d87c:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 800d73c <__kernel_rem_pio2f+0x300>
 800d880:	440b      	add	r3, r1
 800d882:	2c00      	cmp	r4, #0
 800d884:	da05      	bge.n	800d892 <__kernel_rem_pio2f+0x456>
 800d886:	b10f      	cbz	r7, 800d88c <__kernel_rem_pio2f+0x450>
 800d888:	eef1 7a67 	vneg.f32	s15, s15
 800d88c:	edc8 7a00 	vstr	s15, [r8]
 800d890:	e7ae      	b.n	800d7f0 <__kernel_rem_pio2f+0x3b4>
 800d892:	ed33 7a01 	vldmdb	r3!, {s14}
 800d896:	3c01      	subs	r4, #1
 800d898:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d89c:	e7f1      	b.n	800d882 <__kernel_rem_pio2f+0x446>
 800d89e:	ed73 7a01 	vldmdb	r3!, {s15}
 800d8a2:	3a01      	subs	r2, #1
 800d8a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d8a8:	e7d2      	b.n	800d850 <__kernel_rem_pio2f+0x414>
 800d8aa:	eef0 7a47 	vmov.f32	s15, s14
 800d8ae:	e7d4      	b.n	800d85a <__kernel_rem_pio2f+0x41e>
 800d8b0:	ecb2 7a01 	vldmia	r2!, {s14}
 800d8b4:	3301      	adds	r3, #1
 800d8b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d8ba:	e7d6      	b.n	800d86a <__kernel_rem_pio2f+0x42e>
 800d8bc:	edd2 7a00 	vldr	s15, [r2]
 800d8c0:	edd2 6a01 	vldr	s13, [r2, #4]
 800d8c4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d8c8:	3801      	subs	r0, #1
 800d8ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d8ce:	ed82 7a00 	vstr	s14, [r2]
 800d8d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d8d6:	edc2 7a01 	vstr	s15, [r2, #4]
 800d8da:	e798      	b.n	800d80e <__kernel_rem_pio2f+0x3d2>
 800d8dc:	edd3 7a00 	vldr	s15, [r3]
 800d8e0:	edd3 6a01 	vldr	s13, [r3, #4]
 800d8e4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d8e8:	3a01      	subs	r2, #1
 800d8ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d8ee:	ed83 7a00 	vstr	s14, [r3]
 800d8f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d8f6:	edc3 7a01 	vstr	s15, [r3, #4]
 800d8fa:	e78d      	b.n	800d818 <__kernel_rem_pio2f+0x3dc>
 800d8fc:	ed33 7a01 	vldmdb	r3!, {s14}
 800d900:	3c01      	subs	r4, #1
 800d902:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d906:	e78f      	b.n	800d828 <__kernel_rem_pio2f+0x3ec>
 800d908:	eef1 6a66 	vneg.f32	s13, s13
 800d90c:	eeb1 7a47 	vneg.f32	s14, s14
 800d910:	edc8 6a00 	vstr	s13, [r8]
 800d914:	ed88 7a01 	vstr	s14, [r8, #4]
 800d918:	eef1 7a67 	vneg.f32	s15, s15
 800d91c:	e790      	b.n	800d840 <__kernel_rem_pio2f+0x404>
 800d91e:	bf00      	nop

0800d920 <scalbn>:
 800d920:	b570      	push	{r4, r5, r6, lr}
 800d922:	ec55 4b10 	vmov	r4, r5, d0
 800d926:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800d92a:	4606      	mov	r6, r0
 800d92c:	462b      	mov	r3, r5
 800d92e:	b999      	cbnz	r1, 800d958 <scalbn+0x38>
 800d930:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d934:	4323      	orrs	r3, r4
 800d936:	d03f      	beq.n	800d9b8 <scalbn+0x98>
 800d938:	4b35      	ldr	r3, [pc, #212]	; (800da10 <scalbn+0xf0>)
 800d93a:	4629      	mov	r1, r5
 800d93c:	ee10 0a10 	vmov	r0, s0
 800d940:	2200      	movs	r2, #0
 800d942:	f7f2 fc9d 	bl	8000280 <__aeabi_dmul>
 800d946:	4b33      	ldr	r3, [pc, #204]	; (800da14 <scalbn+0xf4>)
 800d948:	429e      	cmp	r6, r3
 800d94a:	4604      	mov	r4, r0
 800d94c:	460d      	mov	r5, r1
 800d94e:	da10      	bge.n	800d972 <scalbn+0x52>
 800d950:	a327      	add	r3, pc, #156	; (adr r3, 800d9f0 <scalbn+0xd0>)
 800d952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d956:	e01f      	b.n	800d998 <scalbn+0x78>
 800d958:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800d95c:	4291      	cmp	r1, r2
 800d95e:	d10c      	bne.n	800d97a <scalbn+0x5a>
 800d960:	ee10 2a10 	vmov	r2, s0
 800d964:	4620      	mov	r0, r4
 800d966:	4629      	mov	r1, r5
 800d968:	f7f2 fdba 	bl	80004e0 <__adddf3>
 800d96c:	4604      	mov	r4, r0
 800d96e:	460d      	mov	r5, r1
 800d970:	e022      	b.n	800d9b8 <scalbn+0x98>
 800d972:	460b      	mov	r3, r1
 800d974:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d978:	3936      	subs	r1, #54	; 0x36
 800d97a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800d97e:	4296      	cmp	r6, r2
 800d980:	dd0d      	ble.n	800d99e <scalbn+0x7e>
 800d982:	2d00      	cmp	r5, #0
 800d984:	a11c      	add	r1, pc, #112	; (adr r1, 800d9f8 <scalbn+0xd8>)
 800d986:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d98a:	da02      	bge.n	800d992 <scalbn+0x72>
 800d98c:	a11c      	add	r1, pc, #112	; (adr r1, 800da00 <scalbn+0xe0>)
 800d98e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d992:	a319      	add	r3, pc, #100	; (adr r3, 800d9f8 <scalbn+0xd8>)
 800d994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d998:	f7f2 fc72 	bl	8000280 <__aeabi_dmul>
 800d99c:	e7e6      	b.n	800d96c <scalbn+0x4c>
 800d99e:	1872      	adds	r2, r6, r1
 800d9a0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d9a4:	428a      	cmp	r2, r1
 800d9a6:	dcec      	bgt.n	800d982 <scalbn+0x62>
 800d9a8:	2a00      	cmp	r2, #0
 800d9aa:	dd08      	ble.n	800d9be <scalbn+0x9e>
 800d9ac:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d9b0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d9b4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d9b8:	ec45 4b10 	vmov	d0, r4, r5
 800d9bc:	bd70      	pop	{r4, r5, r6, pc}
 800d9be:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d9c2:	da08      	bge.n	800d9d6 <scalbn+0xb6>
 800d9c4:	2d00      	cmp	r5, #0
 800d9c6:	a10a      	add	r1, pc, #40	; (adr r1, 800d9f0 <scalbn+0xd0>)
 800d9c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d9cc:	dac0      	bge.n	800d950 <scalbn+0x30>
 800d9ce:	a10e      	add	r1, pc, #56	; (adr r1, 800da08 <scalbn+0xe8>)
 800d9d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d9d4:	e7bc      	b.n	800d950 <scalbn+0x30>
 800d9d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d9da:	3236      	adds	r2, #54	; 0x36
 800d9dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d9e0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d9e4:	4620      	mov	r0, r4
 800d9e6:	4b0c      	ldr	r3, [pc, #48]	; (800da18 <scalbn+0xf8>)
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	e7d5      	b.n	800d998 <scalbn+0x78>
 800d9ec:	f3af 8000 	nop.w
 800d9f0:	c2f8f359 	.word	0xc2f8f359
 800d9f4:	01a56e1f 	.word	0x01a56e1f
 800d9f8:	8800759c 	.word	0x8800759c
 800d9fc:	7e37e43c 	.word	0x7e37e43c
 800da00:	8800759c 	.word	0x8800759c
 800da04:	fe37e43c 	.word	0xfe37e43c
 800da08:	c2f8f359 	.word	0xc2f8f359
 800da0c:	81a56e1f 	.word	0x81a56e1f
 800da10:	43500000 	.word	0x43500000
 800da14:	ffff3cb0 	.word	0xffff3cb0
 800da18:	3c900000 	.word	0x3c900000
 800da1c:	00000000 	.word	0x00000000

0800da20 <floor>:
 800da20:	ec51 0b10 	vmov	r0, r1, d0
 800da24:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800da28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da2c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800da30:	2e13      	cmp	r6, #19
 800da32:	ee10 5a10 	vmov	r5, s0
 800da36:	ee10 8a10 	vmov	r8, s0
 800da3a:	460c      	mov	r4, r1
 800da3c:	dc31      	bgt.n	800daa2 <floor+0x82>
 800da3e:	2e00      	cmp	r6, #0
 800da40:	da14      	bge.n	800da6c <floor+0x4c>
 800da42:	a333      	add	r3, pc, #204	; (adr r3, 800db10 <floor+0xf0>)
 800da44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da48:	f7f2 fd4a 	bl	80004e0 <__adddf3>
 800da4c:	2200      	movs	r2, #0
 800da4e:	2300      	movs	r3, #0
 800da50:	f7f2 ff7a 	bl	8000948 <__aeabi_dcmpgt>
 800da54:	b138      	cbz	r0, 800da66 <floor+0x46>
 800da56:	2c00      	cmp	r4, #0
 800da58:	da53      	bge.n	800db02 <floor+0xe2>
 800da5a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800da5e:	4325      	orrs	r5, r4
 800da60:	d052      	beq.n	800db08 <floor+0xe8>
 800da62:	4c2d      	ldr	r4, [pc, #180]	; (800db18 <floor+0xf8>)
 800da64:	2500      	movs	r5, #0
 800da66:	4621      	mov	r1, r4
 800da68:	4628      	mov	r0, r5
 800da6a:	e024      	b.n	800dab6 <floor+0x96>
 800da6c:	4f2b      	ldr	r7, [pc, #172]	; (800db1c <floor+0xfc>)
 800da6e:	4137      	asrs	r7, r6
 800da70:	ea01 0307 	and.w	r3, r1, r7
 800da74:	4303      	orrs	r3, r0
 800da76:	d01e      	beq.n	800dab6 <floor+0x96>
 800da78:	a325      	add	r3, pc, #148	; (adr r3, 800db10 <floor+0xf0>)
 800da7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da7e:	f7f2 fd2f 	bl	80004e0 <__adddf3>
 800da82:	2200      	movs	r2, #0
 800da84:	2300      	movs	r3, #0
 800da86:	f7f2 ff5f 	bl	8000948 <__aeabi_dcmpgt>
 800da8a:	2800      	cmp	r0, #0
 800da8c:	d0eb      	beq.n	800da66 <floor+0x46>
 800da8e:	2c00      	cmp	r4, #0
 800da90:	bfbe      	ittt	lt
 800da92:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800da96:	4133      	asrlt	r3, r6
 800da98:	18e4      	addlt	r4, r4, r3
 800da9a:	ea24 0407 	bic.w	r4, r4, r7
 800da9e:	2500      	movs	r5, #0
 800daa0:	e7e1      	b.n	800da66 <floor+0x46>
 800daa2:	2e33      	cmp	r6, #51	; 0x33
 800daa4:	dd0b      	ble.n	800dabe <floor+0x9e>
 800daa6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800daaa:	d104      	bne.n	800dab6 <floor+0x96>
 800daac:	ee10 2a10 	vmov	r2, s0
 800dab0:	460b      	mov	r3, r1
 800dab2:	f7f2 fd15 	bl	80004e0 <__adddf3>
 800dab6:	ec41 0b10 	vmov	d0, r0, r1
 800daba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dabe:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800dac2:	f04f 37ff 	mov.w	r7, #4294967295
 800dac6:	40df      	lsrs	r7, r3
 800dac8:	4238      	tst	r0, r7
 800daca:	d0f4      	beq.n	800dab6 <floor+0x96>
 800dacc:	a310      	add	r3, pc, #64	; (adr r3, 800db10 <floor+0xf0>)
 800dace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dad2:	f7f2 fd05 	bl	80004e0 <__adddf3>
 800dad6:	2200      	movs	r2, #0
 800dad8:	2300      	movs	r3, #0
 800dada:	f7f2 ff35 	bl	8000948 <__aeabi_dcmpgt>
 800dade:	2800      	cmp	r0, #0
 800dae0:	d0c1      	beq.n	800da66 <floor+0x46>
 800dae2:	2c00      	cmp	r4, #0
 800dae4:	da0a      	bge.n	800dafc <floor+0xdc>
 800dae6:	2e14      	cmp	r6, #20
 800dae8:	d101      	bne.n	800daee <floor+0xce>
 800daea:	3401      	adds	r4, #1
 800daec:	e006      	b.n	800dafc <floor+0xdc>
 800daee:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800daf2:	2301      	movs	r3, #1
 800daf4:	40b3      	lsls	r3, r6
 800daf6:	441d      	add	r5, r3
 800daf8:	45a8      	cmp	r8, r5
 800dafa:	d8f6      	bhi.n	800daea <floor+0xca>
 800dafc:	ea25 0507 	bic.w	r5, r5, r7
 800db00:	e7b1      	b.n	800da66 <floor+0x46>
 800db02:	2500      	movs	r5, #0
 800db04:	462c      	mov	r4, r5
 800db06:	e7ae      	b.n	800da66 <floor+0x46>
 800db08:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800db0c:	e7ab      	b.n	800da66 <floor+0x46>
 800db0e:	bf00      	nop
 800db10:	8800759c 	.word	0x8800759c
 800db14:	7e37e43c 	.word	0x7e37e43c
 800db18:	bff00000 	.word	0xbff00000
 800db1c:	000fffff 	.word	0x000fffff

0800db20 <floorf>:
 800db20:	ee10 3a10 	vmov	r3, s0
 800db24:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800db28:	3a7f      	subs	r2, #127	; 0x7f
 800db2a:	2a16      	cmp	r2, #22
 800db2c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800db30:	dc2a      	bgt.n	800db88 <floorf+0x68>
 800db32:	2a00      	cmp	r2, #0
 800db34:	da11      	bge.n	800db5a <floorf+0x3a>
 800db36:	eddf 7a18 	vldr	s15, [pc, #96]	; 800db98 <floorf+0x78>
 800db3a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800db3e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800db42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db46:	dd05      	ble.n	800db54 <floorf+0x34>
 800db48:	2b00      	cmp	r3, #0
 800db4a:	da23      	bge.n	800db94 <floorf+0x74>
 800db4c:	4a13      	ldr	r2, [pc, #76]	; (800db9c <floorf+0x7c>)
 800db4e:	2900      	cmp	r1, #0
 800db50:	bf18      	it	ne
 800db52:	4613      	movne	r3, r2
 800db54:	ee00 3a10 	vmov	s0, r3
 800db58:	4770      	bx	lr
 800db5a:	4911      	ldr	r1, [pc, #68]	; (800dba0 <floorf+0x80>)
 800db5c:	4111      	asrs	r1, r2
 800db5e:	420b      	tst	r3, r1
 800db60:	d0fa      	beq.n	800db58 <floorf+0x38>
 800db62:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800db98 <floorf+0x78>
 800db66:	ee30 0a27 	vadd.f32	s0, s0, s15
 800db6a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800db6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db72:	ddef      	ble.n	800db54 <floorf+0x34>
 800db74:	2b00      	cmp	r3, #0
 800db76:	bfbe      	ittt	lt
 800db78:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800db7c:	fa40 f202 	asrlt.w	r2, r0, r2
 800db80:	189b      	addlt	r3, r3, r2
 800db82:	ea23 0301 	bic.w	r3, r3, r1
 800db86:	e7e5      	b.n	800db54 <floorf+0x34>
 800db88:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800db8c:	d3e4      	bcc.n	800db58 <floorf+0x38>
 800db8e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800db92:	4770      	bx	lr
 800db94:	2300      	movs	r3, #0
 800db96:	e7dd      	b.n	800db54 <floorf+0x34>
 800db98:	7149f2ca 	.word	0x7149f2ca
 800db9c:	bf800000 	.word	0xbf800000
 800dba0:	007fffff 	.word	0x007fffff

0800dba4 <_init>:
 800dba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dba6:	bf00      	nop
 800dba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbaa:	bc08      	pop	{r3}
 800dbac:	469e      	mov	lr, r3
 800dbae:	4770      	bx	lr

0800dbb0 <_fini>:
 800dbb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbb2:	bf00      	nop
 800dbb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbb6:	bc08      	pop	{r3}
 800dbb8:	469e      	mov	lr, r3
 800dbba:	4770      	bx	lr
