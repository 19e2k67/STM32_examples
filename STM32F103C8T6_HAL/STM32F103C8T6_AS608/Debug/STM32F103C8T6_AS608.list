
STM32F103C8T6_AS608.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004698  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cd8  080047a4  080047a4  000147a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800547c  0800547c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  0800547c  0800547c  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800547c  0800547c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800547c  0800547c  0001547c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005480  08005480  00015480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005484  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000039c  2000007c  08005500  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  08005500  00020418  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bb43  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023b4  00000000  00000000  0002bc2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b98  00000000  00000000  0002dfe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008eb  00000000  00000000  0002eb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018003  00000000  00000000  0002f463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fe51  00000000  00000000  00047466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084e09  00000000  00000000  000572b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003374  00000000  00000000  000dc0c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000df434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800478c 	.word	0x0800478c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	0800478c 	.word	0x0800478c

0800014c <MYUSART_SendData>:



//串口发送一个字节
static void MYUSART_SendData(uint8_t data)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	while ((USART2->SR & 0X40) == 0);
 8000156:	bf00      	nop
 8000158:	4b06      	ldr	r3, [pc, #24]	; (8000174 <MYUSART_SendData+0x28>)
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000160:	2b00      	cmp	r3, #0
 8000162:	d0f9      	beq.n	8000158 <MYUSART_SendData+0xc>
	USART2->DR = data;
 8000164:	4a03      	ldr	r2, [pc, #12]	; (8000174 <MYUSART_SendData+0x28>)
 8000166:	79fb      	ldrb	r3, [r7, #7]
 8000168:	6053      	str	r3, [r2, #4]
}
 800016a:	bf00      	nop
 800016c:	370c      	adds	r7, #12
 800016e:	46bd      	mov	sp, r7
 8000170:	bc80      	pop	{r7}
 8000172:	4770      	bx	lr
 8000174:	40004400 	.word	0x40004400

08000178 <SendHead>:

//发送包头
static void SendHead(void)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	af00      	add	r7, sp, #0
	MYUSART_SendData(0xEF);
 800017c:	20ef      	movs	r0, #239	; 0xef
 800017e:	f7ff ffe5 	bl	800014c <MYUSART_SendData>
	MYUSART_SendData(0x01);
 8000182:	2001      	movs	r0, #1
 8000184:	f7ff ffe2 	bl	800014c <MYUSART_SendData>
}
 8000188:	bf00      	nop
 800018a:	bd80      	pop	{r7, pc}

0800018c <SendAddr>:

//发送地址
static void SendAddr(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	af00      	add	r7, sp, #0
	MYUSART_SendData(AS608Addr >> 24);
 8000190:	4b0e      	ldr	r3, [pc, #56]	; (80001cc <SendAddr+0x40>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	0e1b      	lsrs	r3, r3, #24
 8000196:	b2db      	uxtb	r3, r3
 8000198:	4618      	mov	r0, r3
 800019a:	f7ff ffd7 	bl	800014c <MYUSART_SendData>
	MYUSART_SendData(AS608Addr >> 16);
 800019e:	4b0b      	ldr	r3, [pc, #44]	; (80001cc <SendAddr+0x40>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	0c1b      	lsrs	r3, r3, #16
 80001a4:	b2db      	uxtb	r3, r3
 80001a6:	4618      	mov	r0, r3
 80001a8:	f7ff ffd0 	bl	800014c <MYUSART_SendData>
	MYUSART_SendData(AS608Addr >> 8);
 80001ac:	4b07      	ldr	r3, [pc, #28]	; (80001cc <SendAddr+0x40>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	0a1b      	lsrs	r3, r3, #8
 80001b2:	b2db      	uxtb	r3, r3
 80001b4:	4618      	mov	r0, r3
 80001b6:	f7ff ffc9 	bl	800014c <MYUSART_SendData>
	MYUSART_SendData(AS608Addr);
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <SendAddr+0x40>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	b2db      	uxtb	r3, r3
 80001c0:	4618      	mov	r0, r3
 80001c2:	f7ff ffc3 	bl	800014c <MYUSART_SendData>
}
 80001c6:	bf00      	nop
 80001c8:	bd80      	pop	{r7, pc}
 80001ca:	bf00      	nop
 80001cc:	20000000 	.word	0x20000000

080001d0 <SendFlag>:

//发送包标识,
static void SendFlag(uint8_t flag)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b082      	sub	sp, #8
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	4603      	mov	r3, r0
 80001d8:	71fb      	strb	r3, [r7, #7]
	MYUSART_SendData(flag);
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	4618      	mov	r0, r3
 80001de:	f7ff ffb5 	bl	800014c <MYUSART_SendData>
}
 80001e2:	bf00      	nop
 80001e4:	3708      	adds	r7, #8
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bd80      	pop	{r7, pc}

080001ea <SendLength>:

//发送包长度
static void SendLength(int length)
{
 80001ea:	b580      	push	{r7, lr}
 80001ec:	b082      	sub	sp, #8
 80001ee:	af00      	add	r7, sp, #0
 80001f0:	6078      	str	r0, [r7, #4]
	MYUSART_SendData(length >> 8);
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	121b      	asrs	r3, r3, #8
 80001f6:	b2db      	uxtb	r3, r3
 80001f8:	4618      	mov	r0, r3
 80001fa:	f7ff ffa7 	bl	800014c <MYUSART_SendData>
	MYUSART_SendData(length);
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	b2db      	uxtb	r3, r3
 8000202:	4618      	mov	r0, r3
 8000204:	f7ff ffa2 	bl	800014c <MYUSART_SendData>
}
 8000208:	bf00      	nop
 800020a:	3708      	adds	r7, #8
 800020c:	46bd      	mov	sp, r7
 800020e:	bd80      	pop	{r7, pc}

08000210 <Sendcmd>:

//发送指令码
static void Sendcmd(uint8_t cmd)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	71fb      	strb	r3, [r7, #7]
	MYUSART_SendData(cmd);
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	4618      	mov	r0, r3
 800021e:	f7ff ff95 	bl	800014c <MYUSART_SendData>
}
 8000222:	bf00      	nop
 8000224:	3708      	adds	r7, #8
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}

0800022a <SendCheck>:

//发送校验和
static void SendCheck(uint16_t check)
{
 800022a:	b580      	push	{r7, lr}
 800022c:	b082      	sub	sp, #8
 800022e:	af00      	add	r7, sp, #0
 8000230:	4603      	mov	r3, r0
 8000232:	80fb      	strh	r3, [r7, #6]
	MYUSART_SendData(check >> 8);
 8000234:	88fb      	ldrh	r3, [r7, #6]
 8000236:	0a1b      	lsrs	r3, r3, #8
 8000238:	b29b      	uxth	r3, r3
 800023a:	b2db      	uxtb	r3, r3
 800023c:	4618      	mov	r0, r3
 800023e:	f7ff ff85 	bl	800014c <MYUSART_SendData>
	MYUSART_SendData(check);
 8000242:	88fb      	ldrh	r3, [r7, #6]
 8000244:	b2db      	uxtb	r3, r3
 8000246:	4618      	mov	r0, r3
 8000248:	f7ff ff80 	bl	800014c <MYUSART_SendData>
}
 800024c:	bf00      	nop
 800024e:	3708      	adds	r7, #8
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}

08000254 <JudgeStr>:

//判断中断接收的数组有没有应答包
//waittime为等待中断接收数据的时间（单位1ms）
//返回值：数据包首地址
static uint8_t *JudgeStr(uint16_t waittime)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b086      	sub	sp, #24
 8000258:	af00      	add	r7, sp, #0
 800025a:	4603      	mov	r3, r0
 800025c:	80fb      	strh	r3, [r7, #6]
	char *data;
	uint8_t str[8];
	str[0] = 0xef;
 800025e:	23ef      	movs	r3, #239	; 0xef
 8000260:	733b      	strb	r3, [r7, #12]
	str[1] = 0x01;
 8000262:	2301      	movs	r3, #1
 8000264:	737b      	strb	r3, [r7, #13]
	str[2] = AS608Addr >> 24;
 8000266:	4b1d      	ldr	r3, [pc, #116]	; (80002dc <JudgeStr+0x88>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	0e1b      	lsrs	r3, r3, #24
 800026c:	b2db      	uxtb	r3, r3
 800026e:	73bb      	strb	r3, [r7, #14]
	str[3] = AS608Addr >> 16;
 8000270:	4b1a      	ldr	r3, [pc, #104]	; (80002dc <JudgeStr+0x88>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	0c1b      	lsrs	r3, r3, #16
 8000276:	b2db      	uxtb	r3, r3
 8000278:	73fb      	strb	r3, [r7, #15]
	str[4] = AS608Addr >> 8;
 800027a:	4b18      	ldr	r3, [pc, #96]	; (80002dc <JudgeStr+0x88>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	0a1b      	lsrs	r3, r3, #8
 8000280:	b2db      	uxtb	r3, r3
 8000282:	743b      	strb	r3, [r7, #16]
	str[5] = AS608Addr;
 8000284:	4b15      	ldr	r3, [pc, #84]	; (80002dc <JudgeStr+0x88>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	b2db      	uxtb	r3, r3
 800028a:	747b      	strb	r3, [r7, #17]
	str[6] = 0x07;
 800028c:	2307      	movs	r3, #7
 800028e:	74bb      	strb	r3, [r7, #18]
	str[7] = '\0';
 8000290:	2300      	movs	r3, #0
 8000292:	74fb      	strb	r3, [r7, #19]
//  USART2_RX_STA = 0;
	//HAL库的写法
	HAL_UART_Receive(&huart2, (uint8_t *)USART2_RX_BUF, USART2_MAX_RECV_LEN, waittime / 4); //串口三接收数据
 8000294:	88fb      	ldrh	r3, [r7, #6]
 8000296:	089b      	lsrs	r3, r3, #2
 8000298:	b29b      	uxth	r3, r3
 800029a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800029e:	4910      	ldr	r1, [pc, #64]	; (80002e0 <JudgeStr+0x8c>)
 80002a0:	4810      	ldr	r0, [pc, #64]	; (80002e4 <JudgeStr+0x90>)
 80002a2:	f002 ffb9 	bl	8003218 <HAL_UART_Receive>
	if (!memcmp(str, USART2_RX_BUF, 7)) { //比对数据
 80002a6:	f107 030c 	add.w	r3, r7, #12
 80002aa:	2207      	movs	r2, #7
 80002ac:	490c      	ldr	r1, [pc, #48]	; (80002e0 <JudgeStr+0x8c>)
 80002ae:	4618      	mov	r0, r3
 80002b0:	f003 fdb4 	bl	8003e1c <memcmp>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d10b      	bne.n	80002d2 <JudgeStr+0x7e>
		data = strstr((const char *)USART2_RX_BUF, (const char *)str);
 80002ba:	f107 030c 	add.w	r3, r7, #12
 80002be:	4619      	mov	r1, r3
 80002c0:	4807      	ldr	r0, [pc, #28]	; (80002e0 <JudgeStr+0x8c>)
 80002c2:	f003 fdc3 	bl	8003e4c <strstr>
 80002c6:	6178      	str	r0, [r7, #20]
		if (data)
 80002c8:	697b      	ldr	r3, [r7, #20]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <JudgeStr+0x7e>
			return (uint8_t *)data;
 80002ce:	697b      	ldr	r3, [r7, #20]
 80002d0:	e000      	b.n	80002d4 <JudgeStr+0x80>
//      data = strstr((const char*)USART2_RX_BUF, (const char*)str);
//      if(data)
//        return (uint8_t*)data;
//    }
//  }
	return 0;
 80002d2:	2300      	movs	r3, #0
}
 80002d4:	4618      	mov	r0, r3
 80002d6:	3718      	adds	r7, #24
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	20000000 	.word	0x20000000
 80002e0:	20000098 	.word	0x20000098
 80002e4:	20000284 	.word	0x20000284

080002e8 <PS_GetImage>:

//录入图像 PS_GetImage
//功能:探测手指，探测到后录入指纹图像存于ImageBuffer。
//模块返回确认字
uint8_t PS_GetImage(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
	uint16_t temp;
	uint8_t  ensure;
	uint8_t  *data;
	SendHead();
 80002ee:	f7ff ff43 	bl	8000178 <SendHead>
	SendAddr();
 80002f2:	f7ff ff4b 	bl	800018c <SendAddr>
	SendFlag(0x01);//命令包标识
 80002f6:	2001      	movs	r0, #1
 80002f8:	f7ff ff6a 	bl	80001d0 <SendFlag>
	SendLength(0x03);
 80002fc:	2003      	movs	r0, #3
 80002fe:	f7ff ff74 	bl	80001ea <SendLength>
	Sendcmd(0x01);
 8000302:	2001      	movs	r0, #1
 8000304:	f7ff ff84 	bl	8000210 <Sendcmd>
	temp =  0x01 + 0x03 + 0x01;
 8000308:	2305      	movs	r3, #5
 800030a:	80bb      	strh	r3, [r7, #4]
	SendCheck(temp);
 800030c:	88bb      	ldrh	r3, [r7, #4]
 800030e:	4618      	mov	r0, r3
 8000310:	f7ff ff8b 	bl	800022a <SendCheck>
	data = JudgeStr(2000);
 8000314:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000318:	f7ff ff9c 	bl	8000254 <JudgeStr>
 800031c:	6038      	str	r0, [r7, #0]
	if (data)
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d003      	beq.n	800032c <PS_GetImage+0x44>
		ensure = data[9];
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	7a5b      	ldrb	r3, [r3, #9]
 8000328:	71fb      	strb	r3, [r7, #7]
 800032a:	e001      	b.n	8000330 <PS_GetImage+0x48>
	else
		ensure = 0xff;
 800032c:	23ff      	movs	r3, #255	; 0xff
 800032e:	71fb      	strb	r3, [r7, #7]
	return ensure;
 8000330:	79fb      	ldrb	r3, [r7, #7]
}
 8000332:	4618      	mov	r0, r3
 8000334:	3708      	adds	r7, #8
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}

0800033a <PS_GenChar>:
//生成特征 PS_GenChar
//功能:将ImageBuffer中的原始图像生成指纹特征文件存于CharBuffer1或CharBuffer2
//参数:BufferID --> charBuffer1:0x01	charBuffer1:0x02
//模块返回确认字
uint8_t PS_GenChar(uint8_t BufferID)
{
 800033a:	b580      	push	{r7, lr}
 800033c:	b084      	sub	sp, #16
 800033e:	af00      	add	r7, sp, #0
 8000340:	4603      	mov	r3, r0
 8000342:	71fb      	strb	r3, [r7, #7]
	uint16_t temp;
	uint8_t  ensure;
	uint8_t  *data;
	SendHead();
 8000344:	f7ff ff18 	bl	8000178 <SendHead>
	SendAddr();
 8000348:	f7ff ff20 	bl	800018c <SendAddr>
	SendFlag(0x01);//命令包标识
 800034c:	2001      	movs	r0, #1
 800034e:	f7ff ff3f 	bl	80001d0 <SendFlag>
	SendLength(0x04);
 8000352:	2004      	movs	r0, #4
 8000354:	f7ff ff49 	bl	80001ea <SendLength>
	Sendcmd(0x02);
 8000358:	2002      	movs	r0, #2
 800035a:	f7ff ff59 	bl	8000210 <Sendcmd>
	MYUSART_SendData(BufferID);
 800035e:	79fb      	ldrb	r3, [r7, #7]
 8000360:	4618      	mov	r0, r3
 8000362:	f7ff fef3 	bl	800014c <MYUSART_SendData>
	temp = 0x01 + 0x04 + 0x02 + BufferID;
 8000366:	79fb      	ldrb	r3, [r7, #7]
 8000368:	b29b      	uxth	r3, r3
 800036a:	3307      	adds	r3, #7
 800036c:	81bb      	strh	r3, [r7, #12]
	SendCheck(temp);
 800036e:	89bb      	ldrh	r3, [r7, #12]
 8000370:	4618      	mov	r0, r3
 8000372:	f7ff ff5a 	bl	800022a <SendCheck>
	data = JudgeStr(2000);
 8000376:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800037a:	f7ff ff6b 	bl	8000254 <JudgeStr>
 800037e:	60b8      	str	r0, [r7, #8]
	if (data)
 8000380:	68bb      	ldr	r3, [r7, #8]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d003      	beq.n	800038e <PS_GenChar+0x54>
		ensure = data[9];
 8000386:	68bb      	ldr	r3, [r7, #8]
 8000388:	7a5b      	ldrb	r3, [r3, #9]
 800038a:	73fb      	strb	r3, [r7, #15]
 800038c:	e001      	b.n	8000392 <PS_GenChar+0x58>
	else
		ensure = 0xff;
 800038e:	23ff      	movs	r3, #255	; 0xff
 8000390:	73fb      	strb	r3, [r7, #15]
	return ensure;
 8000392:	7bfb      	ldrb	r3, [r7, #15]
}
 8000394:	4618      	mov	r0, r3
 8000396:	3710      	adds	r7, #16
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}

0800039c <PS_Match>:

//精确比对两枚指纹特征 PS_Match
//功能:精确比对CharBuffer1 与CharBuffer2 中的特征文件
//模块返回确认字
uint8_t PS_Match(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
	uint16_t temp;
	uint8_t  ensure;
	uint8_t  *data;
	SendHead();
 80003a2:	f7ff fee9 	bl	8000178 <SendHead>
	SendAddr();
 80003a6:	f7ff fef1 	bl	800018c <SendAddr>
	SendFlag(0x01);//命令包标识
 80003aa:	2001      	movs	r0, #1
 80003ac:	f7ff ff10 	bl	80001d0 <SendFlag>
	SendLength(0x03);
 80003b0:	2003      	movs	r0, #3
 80003b2:	f7ff ff1a 	bl	80001ea <SendLength>
	Sendcmd(0x03);
 80003b6:	2003      	movs	r0, #3
 80003b8:	f7ff ff2a 	bl	8000210 <Sendcmd>
	temp = 0x01 + 0x03 + 0x03;
 80003bc:	2307      	movs	r3, #7
 80003be:	80bb      	strh	r3, [r7, #4]
	SendCheck(temp);
 80003c0:	88bb      	ldrh	r3, [r7, #4]
 80003c2:	4618      	mov	r0, r3
 80003c4:	f7ff ff31 	bl	800022a <SendCheck>
	data = JudgeStr(2000);
 80003c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003cc:	f7ff ff42 	bl	8000254 <JudgeStr>
 80003d0:	6038      	str	r0, [r7, #0]
	if (data)
 80003d2:	683b      	ldr	r3, [r7, #0]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d003      	beq.n	80003e0 <PS_Match+0x44>
		ensure = data[9];
 80003d8:	683b      	ldr	r3, [r7, #0]
 80003da:	7a5b      	ldrb	r3, [r3, #9]
 80003dc:	71fb      	strb	r3, [r7, #7]
 80003de:	e001      	b.n	80003e4 <PS_Match+0x48>
	else
		ensure = 0xff;
 80003e0:	23ff      	movs	r3, #255	; 0xff
 80003e2:	71fb      	strb	r3, [r7, #7]
	return ensure;
 80003e4:	79fb      	ldrb	r3, [r7, #7]
}
 80003e6:	4618      	mov	r0, r3
 80003e8:	3708      	adds	r7, #8
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}

080003ee <PS_RegModel>:

//合并特征（生成模板）PS_RegModel
//功能:将CharBuffer1与CharBuffer2中的特征文件合并生成 模板,结果存于CharBuffer1与CharBuffer2
//说明:  模块返回确认字
uint8_t PS_RegModel(void)
{
 80003ee:	b580      	push	{r7, lr}
 80003f0:	b082      	sub	sp, #8
 80003f2:	af00      	add	r7, sp, #0
	uint16_t temp;
	uint8_t  ensure;
	uint8_t  *data;
	SendHead();
 80003f4:	f7ff fec0 	bl	8000178 <SendHead>
	SendAddr();
 80003f8:	f7ff fec8 	bl	800018c <SendAddr>
	SendFlag(0x01);//命令包标识
 80003fc:	2001      	movs	r0, #1
 80003fe:	f7ff fee7 	bl	80001d0 <SendFlag>
	SendLength(0x03);
 8000402:	2003      	movs	r0, #3
 8000404:	f7ff fef1 	bl	80001ea <SendLength>
	Sendcmd(0x05);
 8000408:	2005      	movs	r0, #5
 800040a:	f7ff ff01 	bl	8000210 <Sendcmd>
	temp = 0x01 + 0x03 + 0x05;
 800040e:	2309      	movs	r3, #9
 8000410:	80bb      	strh	r3, [r7, #4]
	SendCheck(temp);
 8000412:	88bb      	ldrh	r3, [r7, #4]
 8000414:	4618      	mov	r0, r3
 8000416:	f7ff ff08 	bl	800022a <SendCheck>
	data = JudgeStr(2000);
 800041a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800041e:	f7ff ff19 	bl	8000254 <JudgeStr>
 8000422:	6038      	str	r0, [r7, #0]
	if (data)
 8000424:	683b      	ldr	r3, [r7, #0]
 8000426:	2b00      	cmp	r3, #0
 8000428:	d003      	beq.n	8000432 <PS_RegModel+0x44>
		ensure = data[9];
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	7a5b      	ldrb	r3, [r3, #9]
 800042e:	71fb      	strb	r3, [r7, #7]
 8000430:	e001      	b.n	8000436 <PS_RegModel+0x48>
	else
		ensure = 0xff;
 8000432:	23ff      	movs	r3, #255	; 0xff
 8000434:	71fb      	strb	r3, [r7, #7]
	return ensure;
 8000436:	79fb      	ldrb	r3, [r7, #7]
}
 8000438:	4618      	mov	r0, r3
 800043a:	3708      	adds	r7, #8
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}

08000440 <PS_StoreChar>:
//功能:将 CharBuffer1 或 CharBuffer2 中的模板文件存到 PageID 号flash数据库位置。
//参数:  BufferID @ref charBuffer1:0x01	charBuffer1:0x02
//       PageID（指纹库位置号）
//说明:  模块返回确认字
uint8_t PS_StoreChar(uint8_t BufferID, uint16_t PageID)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
 8000446:	4603      	mov	r3, r0
 8000448:	460a      	mov	r2, r1
 800044a:	71fb      	strb	r3, [r7, #7]
 800044c:	4613      	mov	r3, r2
 800044e:	80bb      	strh	r3, [r7, #4]
	uint16_t temp;
	uint8_t  ensure;
	uint8_t  *data;
	SendHead();
 8000450:	f7ff fe92 	bl	8000178 <SendHead>
	SendAddr();
 8000454:	f7ff fe9a 	bl	800018c <SendAddr>
	SendFlag(0x01);//命令包标识
 8000458:	2001      	movs	r0, #1
 800045a:	f7ff feb9 	bl	80001d0 <SendFlag>
	SendLength(0x06);
 800045e:	2006      	movs	r0, #6
 8000460:	f7ff fec3 	bl	80001ea <SendLength>
	Sendcmd(0x06);
 8000464:	2006      	movs	r0, #6
 8000466:	f7ff fed3 	bl	8000210 <Sendcmd>
	MYUSART_SendData(BufferID);
 800046a:	79fb      	ldrb	r3, [r7, #7]
 800046c:	4618      	mov	r0, r3
 800046e:	f7ff fe6d 	bl	800014c <MYUSART_SendData>
	MYUSART_SendData(PageID >> 8);
 8000472:	88bb      	ldrh	r3, [r7, #4]
 8000474:	0a1b      	lsrs	r3, r3, #8
 8000476:	b29b      	uxth	r3, r3
 8000478:	b2db      	uxtb	r3, r3
 800047a:	4618      	mov	r0, r3
 800047c:	f7ff fe66 	bl	800014c <MYUSART_SendData>
	MYUSART_SendData(PageID);
 8000480:	88bb      	ldrh	r3, [r7, #4]
 8000482:	b2db      	uxtb	r3, r3
 8000484:	4618      	mov	r0, r3
 8000486:	f7ff fe61 	bl	800014c <MYUSART_SendData>
	temp = 0x01 + 0x06 + 0x06 + BufferID
	       + (PageID >> 8) + (uint8_t)PageID;
 800048a:	79fb      	ldrb	r3, [r7, #7]
 800048c:	b29a      	uxth	r2, r3
 800048e:	88bb      	ldrh	r3, [r7, #4]
 8000490:	0a1b      	lsrs	r3, r3, #8
 8000492:	b29b      	uxth	r3, r3
 8000494:	4413      	add	r3, r2
 8000496:	b29a      	uxth	r2, r3
 8000498:	88bb      	ldrh	r3, [r7, #4]
 800049a:	b2db      	uxtb	r3, r3
 800049c:	b29b      	uxth	r3, r3
 800049e:	4413      	add	r3, r2
 80004a0:	b29b      	uxth	r3, r3
	temp = 0x01 + 0x06 + 0x06 + BufferID
 80004a2:	330d      	adds	r3, #13
 80004a4:	81bb      	strh	r3, [r7, #12]
	SendCheck(temp);
 80004a6:	89bb      	ldrh	r3, [r7, #12]
 80004a8:	4618      	mov	r0, r3
 80004aa:	f7ff febe 	bl	800022a <SendCheck>
	data = JudgeStr(2000);
 80004ae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80004b2:	f7ff fecf 	bl	8000254 <JudgeStr>
 80004b6:	60b8      	str	r0, [r7, #8]
	if (data)
 80004b8:	68bb      	ldr	r3, [r7, #8]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d003      	beq.n	80004c6 <PS_StoreChar+0x86>
		ensure = data[9];
 80004be:	68bb      	ldr	r3, [r7, #8]
 80004c0:	7a5b      	ldrb	r3, [r3, #9]
 80004c2:	73fb      	strb	r3, [r7, #15]
 80004c4:	e001      	b.n	80004ca <PS_StoreChar+0x8a>
	else
		ensure = 0xff;
 80004c6:	23ff      	movs	r3, #255	; 0xff
 80004c8:	73fb      	strb	r3, [r7, #15]
	return ensure;
 80004ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80004cc:	4618      	mov	r0, r3
 80004ce:	3710      	adds	r7, #16
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}

080004d4 <PS_DeletChar>:
//删除模板 PS_DeletChar
//功能:  删除flash数据库中指定ID号开始的N个指纹模板
//参数:  PageID(指纹库模板号)，N删除的模板个数。
//说明:  模块返回确认字
uint8_t PS_DeletChar(uint16_t PageID, uint16_t N)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	460a      	mov	r2, r1
 80004de:	80fb      	strh	r3, [r7, #6]
 80004e0:	4613      	mov	r3, r2
 80004e2:	80bb      	strh	r3, [r7, #4]
	uint16_t temp;
	uint8_t  ensure;
	uint8_t  *data;
	SendHead();
 80004e4:	f7ff fe48 	bl	8000178 <SendHead>
	SendAddr();
 80004e8:	f7ff fe50 	bl	800018c <SendAddr>
	SendFlag(0x01);//命令包标识
 80004ec:	2001      	movs	r0, #1
 80004ee:	f7ff fe6f 	bl	80001d0 <SendFlag>
	SendLength(0x07);
 80004f2:	2007      	movs	r0, #7
 80004f4:	f7ff fe79 	bl	80001ea <SendLength>
	Sendcmd(0x0C);
 80004f8:	200c      	movs	r0, #12
 80004fa:	f7ff fe89 	bl	8000210 <Sendcmd>
	MYUSART_SendData(PageID >> 8);
 80004fe:	88fb      	ldrh	r3, [r7, #6]
 8000500:	0a1b      	lsrs	r3, r3, #8
 8000502:	b29b      	uxth	r3, r3
 8000504:	b2db      	uxtb	r3, r3
 8000506:	4618      	mov	r0, r3
 8000508:	f7ff fe20 	bl	800014c <MYUSART_SendData>
	MYUSART_SendData(PageID);
 800050c:	88fb      	ldrh	r3, [r7, #6]
 800050e:	b2db      	uxtb	r3, r3
 8000510:	4618      	mov	r0, r3
 8000512:	f7ff fe1b 	bl	800014c <MYUSART_SendData>
	MYUSART_SendData(N >> 8);
 8000516:	88bb      	ldrh	r3, [r7, #4]
 8000518:	0a1b      	lsrs	r3, r3, #8
 800051a:	b29b      	uxth	r3, r3
 800051c:	b2db      	uxtb	r3, r3
 800051e:	4618      	mov	r0, r3
 8000520:	f7ff fe14 	bl	800014c <MYUSART_SendData>
	MYUSART_SendData(N);
 8000524:	88bb      	ldrh	r3, [r7, #4]
 8000526:	b2db      	uxtb	r3, r3
 8000528:	4618      	mov	r0, r3
 800052a:	f7ff fe0f 	bl	800014c <MYUSART_SendData>
	temp = 0x01 + 0x07 + 0x0C
	       + (PageID >> 8) + (uint8_t)PageID
 800052e:	88fb      	ldrh	r3, [r7, #6]
 8000530:	0a1b      	lsrs	r3, r3, #8
 8000532:	b29a      	uxth	r2, r3
 8000534:	88fb      	ldrh	r3, [r7, #6]
 8000536:	b2db      	uxtb	r3, r3
 8000538:	b29b      	uxth	r3, r3
 800053a:	4413      	add	r3, r2
 800053c:	b29a      	uxth	r2, r3
	       + (N >> 8) + (uint8_t)N;
 800053e:	88bb      	ldrh	r3, [r7, #4]
 8000540:	0a1b      	lsrs	r3, r3, #8
 8000542:	b29b      	uxth	r3, r3
 8000544:	4413      	add	r3, r2
 8000546:	b29a      	uxth	r2, r3
 8000548:	88bb      	ldrh	r3, [r7, #4]
 800054a:	b2db      	uxtb	r3, r3
 800054c:	b29b      	uxth	r3, r3
 800054e:	4413      	add	r3, r2
 8000550:	b29b      	uxth	r3, r3
	temp = 0x01 + 0x07 + 0x0C
 8000552:	3314      	adds	r3, #20
 8000554:	81bb      	strh	r3, [r7, #12]
	SendCheck(temp);
 8000556:	89bb      	ldrh	r3, [r7, #12]
 8000558:	4618      	mov	r0, r3
 800055a:	f7ff fe66 	bl	800022a <SendCheck>
	data = JudgeStr(2000);
 800055e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000562:	f7ff fe77 	bl	8000254 <JudgeStr>
 8000566:	60b8      	str	r0, [r7, #8]
	if (data)
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d003      	beq.n	8000576 <PS_DeletChar+0xa2>
		ensure = data[9];
 800056e:	68bb      	ldr	r3, [r7, #8]
 8000570:	7a5b      	ldrb	r3, [r3, #9]
 8000572:	73fb      	strb	r3, [r7, #15]
 8000574:	e001      	b.n	800057a <PS_DeletChar+0xa6>
	else
		ensure = 0xff;
 8000576:	23ff      	movs	r3, #255	; 0xff
 8000578:	73fb      	strb	r3, [r7, #15]
	return ensure;
 800057a:	7bfb      	ldrb	r3, [r7, #15]
}
 800057c:	4618      	mov	r0, r3
 800057e:	3710      	adds	r7, #16
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <PS_Empty>:
//清空指纹库 PS_Empty
//功能:  删除flash数据库中所有指纹模板
//参数:  无
//说明:  模块返回确认字
uint8_t PS_Empty(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
	uint16_t temp;
	uint8_t  ensure;
	uint8_t  *data;
	SendHead();
 800058a:	f7ff fdf5 	bl	8000178 <SendHead>
	SendAddr();
 800058e:	f7ff fdfd 	bl	800018c <SendAddr>
	SendFlag(0x01);//命令包标识
 8000592:	2001      	movs	r0, #1
 8000594:	f7ff fe1c 	bl	80001d0 <SendFlag>
	SendLength(0x03);
 8000598:	2003      	movs	r0, #3
 800059a:	f7ff fe26 	bl	80001ea <SendLength>
	Sendcmd(0x0D);
 800059e:	200d      	movs	r0, #13
 80005a0:	f7ff fe36 	bl	8000210 <Sendcmd>
	temp = 0x01 + 0x03 + 0x0D;
 80005a4:	2311      	movs	r3, #17
 80005a6:	80bb      	strh	r3, [r7, #4]
	SendCheck(temp);
 80005a8:	88bb      	ldrh	r3, [r7, #4]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff fe3d 	bl	800022a <SendCheck>
	data = JudgeStr(2000);
 80005b0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005b4:	f7ff fe4e 	bl	8000254 <JudgeStr>
 80005b8:	6038      	str	r0, [r7, #0]
	if (data)
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d003      	beq.n	80005c8 <PS_Empty+0x44>
		ensure = data[9];
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	7a5b      	ldrb	r3, [r3, #9]
 80005c4:	71fb      	strb	r3, [r7, #7]
 80005c6:	e001      	b.n	80005cc <PS_Empty+0x48>
	else
		ensure = 0xff;
 80005c8:	23ff      	movs	r3, #255	; 0xff
 80005ca:	71fb      	strb	r3, [r7, #7]
	return ensure;
 80005cc:	79fb      	ldrb	r3, [r7, #7]
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}

080005d6 <PS_HighSpeedSearch>:
//		  若搜索到，则返回页码,该指令对于的确存在于指纹库中 ，且登录时质量
//		  很好的指纹，会很快给出搜索结果。
//参数:  BufferID， StartPage(起始页)，PageNum（页数）
//说明:  模块返回确认字+页码（相配指纹模板）
uint8_t PS_HighSpeedSearch(uint8_t BufferID, uint16_t StartPage, uint16_t PageNum, SearchResult *p)
{
 80005d6:	b580      	push	{r7, lr}
 80005d8:	b086      	sub	sp, #24
 80005da:	af00      	add	r7, sp, #0
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	4603      	mov	r3, r0
 80005e0:	73fb      	strb	r3, [r7, #15]
 80005e2:	460b      	mov	r3, r1
 80005e4:	81bb      	strh	r3, [r7, #12]
 80005e6:	4613      	mov	r3, r2
 80005e8:	817b      	strh	r3, [r7, #10]
	uint16_t temp;
	uint8_t  ensure;
	uint8_t  *data;
	SendHead();
 80005ea:	f7ff fdc5 	bl	8000178 <SendHead>
	SendAddr();
 80005ee:	f7ff fdcd 	bl	800018c <SendAddr>
	SendFlag(0x01);//命令包标识
 80005f2:	2001      	movs	r0, #1
 80005f4:	f7ff fdec 	bl	80001d0 <SendFlag>
	SendLength(0x08);
 80005f8:	2008      	movs	r0, #8
 80005fa:	f7ff fdf6 	bl	80001ea <SendLength>
	Sendcmd(0x1b);
 80005fe:	201b      	movs	r0, #27
 8000600:	f7ff fe06 	bl	8000210 <Sendcmd>
	MYUSART_SendData(BufferID);
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff fda0 	bl	800014c <MYUSART_SendData>
	MYUSART_SendData(StartPage >> 8);
 800060c:	89bb      	ldrh	r3, [r7, #12]
 800060e:	0a1b      	lsrs	r3, r3, #8
 8000610:	b29b      	uxth	r3, r3
 8000612:	b2db      	uxtb	r3, r3
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff fd99 	bl	800014c <MYUSART_SendData>
	MYUSART_SendData(StartPage);
 800061a:	89bb      	ldrh	r3, [r7, #12]
 800061c:	b2db      	uxtb	r3, r3
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff fd94 	bl	800014c <MYUSART_SendData>
	MYUSART_SendData(PageNum >> 8);
 8000624:	897b      	ldrh	r3, [r7, #10]
 8000626:	0a1b      	lsrs	r3, r3, #8
 8000628:	b29b      	uxth	r3, r3
 800062a:	b2db      	uxtb	r3, r3
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff fd8d 	bl	800014c <MYUSART_SendData>
	MYUSART_SendData(PageNum);
 8000632:	897b      	ldrh	r3, [r7, #10]
 8000634:	b2db      	uxtb	r3, r3
 8000636:	4618      	mov	r0, r3
 8000638:	f7ff fd88 	bl	800014c <MYUSART_SendData>
	temp = 0x01 + 0x08 + 0x1b + BufferID
	       + (StartPage >> 8) + (uint8_t)StartPage
 800063c:	7bfb      	ldrb	r3, [r7, #15]
 800063e:	b29a      	uxth	r2, r3
 8000640:	89bb      	ldrh	r3, [r7, #12]
 8000642:	0a1b      	lsrs	r3, r3, #8
 8000644:	b29b      	uxth	r3, r3
 8000646:	4413      	add	r3, r2
 8000648:	b29a      	uxth	r2, r3
 800064a:	89bb      	ldrh	r3, [r7, #12]
 800064c:	b2db      	uxtb	r3, r3
 800064e:	b29b      	uxth	r3, r3
 8000650:	4413      	add	r3, r2
 8000652:	b29a      	uxth	r2, r3
	       + (PageNum >> 8) + (uint8_t)PageNum;
 8000654:	897b      	ldrh	r3, [r7, #10]
 8000656:	0a1b      	lsrs	r3, r3, #8
 8000658:	b29b      	uxth	r3, r3
 800065a:	4413      	add	r3, r2
 800065c:	b29a      	uxth	r2, r3
 800065e:	897b      	ldrh	r3, [r7, #10]
 8000660:	b2db      	uxtb	r3, r3
 8000662:	b29b      	uxth	r3, r3
 8000664:	4413      	add	r3, r2
 8000666:	b29b      	uxth	r3, r3
	temp = 0x01 + 0x08 + 0x1b + BufferID
 8000668:	3324      	adds	r3, #36	; 0x24
 800066a:	82bb      	strh	r3, [r7, #20]
	SendCheck(temp);
 800066c:	8abb      	ldrh	r3, [r7, #20]
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff fddb 	bl	800022a <SendCheck>
	data = JudgeStr(2000);
 8000674:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000678:	f7ff fdec 	bl	8000254 <JudgeStr>
 800067c:	6138      	str	r0, [r7, #16]
	if (data) {
 800067e:	693b      	ldr	r3, [r7, #16]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d01f      	beq.n	80006c4 <PS_HighSpeedSearch+0xee>
		ensure = data[9];
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	7a5b      	ldrb	r3, [r3, #9]
 8000688:	75fb      	strb	r3, [r7, #23]
		p->pageID 	= (data[10] << 8) + data[11];
 800068a:	693b      	ldr	r3, [r7, #16]
 800068c:	330a      	adds	r3, #10
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	b29b      	uxth	r3, r3
 8000692:	021b      	lsls	r3, r3, #8
 8000694:	b29a      	uxth	r2, r3
 8000696:	693b      	ldr	r3, [r7, #16]
 8000698:	330b      	adds	r3, #11
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	b29b      	uxth	r3, r3
 800069e:	4413      	add	r3, r2
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	801a      	strh	r2, [r3, #0]
		p->mathscore = (data[12] << 8) + data[13];
 80006a6:	693b      	ldr	r3, [r7, #16]
 80006a8:	330c      	adds	r3, #12
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	021b      	lsls	r3, r3, #8
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	330d      	adds	r3, #13
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	4413      	add	r3, r2
 80006bc:	b29a      	uxth	r2, r3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	805a      	strh	r2, [r3, #2]
 80006c2:	e001      	b.n	80006c8 <PS_HighSpeedSearch+0xf2>
	}
	else
		ensure = 0xff;
 80006c4:	23ff      	movs	r3, #255	; 0xff
 80006c6:	75fb      	strb	r3, [r7, #23]
	return ensure;
 80006c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3718      	adds	r7, #24
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <ShowErrMessage>:
	return p;
}

//显示确认码错误信息
void ShowErrMessage(uint8_t ensure)
{
 80006d2:	b480      	push	{r7}
 80006d4:	b083      	sub	sp, #12
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	4603      	mov	r3, r0
 80006da:	71fb      	strb	r3, [r7, #7]
	//OLED_ShowMixedCH(5,0,(uint8_t*)EnsureMessage(ensure));
}
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr
	...

080006e8 <Add_FR>:
}


//录指纹
void Add_FR(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af02      	add	r7, sp, #8
	uint8_t i, ensure, processnum = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	71bb      	strb	r3, [r7, #6]
	uint8_t ID_NUM = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	717b      	strb	r3, [r7, #5]
	uint8_t key_num = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	713b      	strb	r3, [r7, #4]
	while (1) {
		switch (processnum) {
 80006fa:	79bb      	ldrb	r3, [r7, #6]
 80006fc:	2b04      	cmp	r3, #4
 80006fe:	f200 815b 	bhi.w	80009b8 <Add_FR+0x2d0>
 8000702:	a201      	add	r2, pc, #4	; (adr r2, 8000708 <Add_FR+0x20>)
 8000704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000708:	0800071d 	.word	0x0800071d
 800070c:	08000783 	.word	0x08000783
 8000710:	080007e5 	.word	0x080007e5
 8000714:	08000843 	.word	0x08000843
 8000718:	08000895 	.word	0x08000895
			case 0:
				i++;
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	3301      	adds	r3, #1
 8000720:	71fb      	strb	r3, [r7, #7]
				OLED_Clear();
 8000722:	f000 fd85 	bl	8001230 <OLED_Clear>
				OLED_ShowString(0, 0, "   press  ", 16, 0);
 8000726:	2300      	movs	r3, #0
 8000728:	9300      	str	r3, [sp, #0]
 800072a:	2310      	movs	r3, #16
 800072c:	4ab8      	ldr	r2, [pc, #736]	; (8000a10 <Add_FR+0x328>)
 800072e:	2100      	movs	r1, #0
 8000730:	2000      	movs	r0, #0
 8000732:	f000 fe95 	bl	8001460 <OLED_ShowString>
				ensure = PS_GetImage();
 8000736:	f7ff fdd7 	bl	80002e8 <PS_GetImage>
 800073a:	4603      	mov	r3, r0
 800073c:	70fb      	strb	r3, [r7, #3]
				if (ensure == 0x00) {
 800073e:	78fb      	ldrb	r3, [r7, #3]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d119      	bne.n	8000778 <Add_FR+0x90>
					ensure = PS_GenChar(CharBuffer1); //生成特征
 8000744:	2001      	movs	r0, #1
 8000746:	f7ff fdf8 	bl	800033a <PS_GenChar>
 800074a:	4603      	mov	r3, r0
 800074c:	70fb      	strb	r3, [r7, #3]
					if (ensure == 0x00) {
 800074e:	78fb      	ldrb	r3, [r7, #3]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d10c      	bne.n	800076e <Add_FR+0x86>
						OLED_ShowString(0, 0, "  Identified  ", 16, 0);
 8000754:	2300      	movs	r3, #0
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	2310      	movs	r3, #16
 800075a:	4aae      	ldr	r2, [pc, #696]	; (8000a14 <Add_FR+0x32c>)
 800075c:	2100      	movs	r1, #0
 800075e:	2000      	movs	r0, #0
 8000760:	f000 fe7e 	bl	8001460 <OLED_ShowString>
						i = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	71fb      	strb	r3, [r7, #7]
						processnum = 1; //跳到第二步
 8000768:	2301      	movs	r3, #1
 800076a:	71bb      	strb	r3, [r7, #6]
					else
						ShowErrMessage(ensure);
				}
				else
					ShowErrMessage(ensure);
				break;
 800076c:	e124      	b.n	80009b8 <Add_FR+0x2d0>
						ShowErrMessage(ensure);
 800076e:	78fb      	ldrb	r3, [r7, #3]
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff ffae 	bl	80006d2 <ShowErrMessage>
				break;
 8000776:	e11f      	b.n	80009b8 <Add_FR+0x2d0>
					ShowErrMessage(ensure);
 8000778:	78fb      	ldrb	r3, [r7, #3]
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff ffa9 	bl	80006d2 <ShowErrMessage>
				break;
 8000780:	e11a      	b.n	80009b8 <Add_FR+0x2d0>

			case 1:
				i++;
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	3301      	adds	r3, #1
 8000786:	71fb      	strb	r3, [r7, #7]
				OLED_ShowString(0, 0, "  press again   ", 16, 0);
 8000788:	2300      	movs	r3, #0
 800078a:	9300      	str	r3, [sp, #0]
 800078c:	2310      	movs	r3, #16
 800078e:	4aa2      	ldr	r2, [pc, #648]	; (8000a18 <Add_FR+0x330>)
 8000790:	2100      	movs	r1, #0
 8000792:	2000      	movs	r0, #0
 8000794:	f000 fe64 	bl	8001460 <OLED_ShowString>
				ensure = PS_GetImage();
 8000798:	f7ff fda6 	bl	80002e8 <PS_GetImage>
 800079c:	4603      	mov	r3, r0
 800079e:	70fb      	strb	r3, [r7, #3]
				if (ensure == 0x00) {
 80007a0:	78fb      	ldrb	r3, [r7, #3]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d119      	bne.n	80007da <Add_FR+0xf2>
					ensure = PS_GenChar(CharBuffer2); //生成特征
 80007a6:	2002      	movs	r0, #2
 80007a8:	f7ff fdc7 	bl	800033a <PS_GenChar>
 80007ac:	4603      	mov	r3, r0
 80007ae:	70fb      	strb	r3, [r7, #3]
					if (ensure == 0x00) {
 80007b0:	78fb      	ldrb	r3, [r7, #3]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d10c      	bne.n	80007d0 <Add_FR+0xe8>
						OLED_ShowString(0, 0, "    Waiting    ", 16, 0);
 80007b6:	2300      	movs	r3, #0
 80007b8:	9300      	str	r3, [sp, #0]
 80007ba:	2310      	movs	r3, #16
 80007bc:	4a97      	ldr	r2, [pc, #604]	; (8000a1c <Add_FR+0x334>)
 80007be:	2100      	movs	r1, #0
 80007c0:	2000      	movs	r0, #0
 80007c2:	f000 fe4d 	bl	8001460 <OLED_ShowString>
						i = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	71fb      	strb	r3, [r7, #7]
						processnum = 2; //跳到第三步
 80007ca:	2302      	movs	r3, #2
 80007cc:	71bb      	strb	r3, [r7, #6]
					else
						ShowErrMessage(ensure);
				}
				else
					ShowErrMessage(ensure);
				break;
 80007ce:	e0f3      	b.n	80009b8 <Add_FR+0x2d0>
						ShowErrMessage(ensure);
 80007d0:	78fb      	ldrb	r3, [r7, #3]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff ff7d 	bl	80006d2 <ShowErrMessage>
				break;
 80007d8:	e0ee      	b.n	80009b8 <Add_FR+0x2d0>
					ShowErrMessage(ensure);
 80007da:	78fb      	ldrb	r3, [r7, #3]
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ff78 	bl	80006d2 <ShowErrMessage>
				break;
 80007e2:	e0e9      	b.n	80009b8 <Add_FR+0x2d0>

			case 2:
				OLED_ShowString(0, 0, "     AGAIN     ", 16, 0);
 80007e4:	2300      	movs	r3, #0
 80007e6:	9300      	str	r3, [sp, #0]
 80007e8:	2310      	movs	r3, #16
 80007ea:	4a8d      	ldr	r2, [pc, #564]	; (8000a20 <Add_FR+0x338>)
 80007ec:	2100      	movs	r1, #0
 80007ee:	2000      	movs	r0, #0
 80007f0:	f000 fe36 	bl	8001460 <OLED_ShowString>
				ensure = PS_Match();
 80007f4:	f7ff fdd2 	bl	800039c <PS_Match>
 80007f8:	4603      	mov	r3, r0
 80007fa:	70fb      	strb	r3, [r7, #3]
				if (ensure == 0x00) {
 80007fc:	78fb      	ldrb	r3, [r7, #3]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d10a      	bne.n	8000818 <Add_FR+0x130>
					OLED_ShowString(0, 0, "    Success    ", 16, 0);
 8000802:	2300      	movs	r3, #0
 8000804:	9300      	str	r3, [sp, #0]
 8000806:	2310      	movs	r3, #16
 8000808:	4a86      	ldr	r2, [pc, #536]	; (8000a24 <Add_FR+0x33c>)
 800080a:	2100      	movs	r1, #0
 800080c:	2000      	movs	r0, #0
 800080e:	f000 fe27 	bl	8001460 <OLED_ShowString>
					processnum = 3; //跳到第四步
 8000812:	2303      	movs	r3, #3
 8000814:	71bb      	strb	r3, [r7, #6]
 8000816:	e00f      	b.n	8000838 <Add_FR+0x150>
				}
				else {
					OLED_ShowString(0, 0, "    failed   ", 16, 0);
 8000818:	2300      	movs	r3, #0
 800081a:	9300      	str	r3, [sp, #0]
 800081c:	2310      	movs	r3, #16
 800081e:	4a82      	ldr	r2, [pc, #520]	; (8000a28 <Add_FR+0x340>)
 8000820:	2100      	movs	r1, #0
 8000822:	2000      	movs	r0, #0
 8000824:	f000 fe1c 	bl	8001460 <OLED_ShowString>
					ShowErrMessage(ensure);
 8000828:	78fb      	ldrb	r3, [r7, #3]
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff ff51 	bl	80006d2 <ShowErrMessage>
					i = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	71fb      	strb	r3, [r7, #7]
					processnum = 0; //跳回第一步
 8000834:	2300      	movs	r3, #0
 8000836:	71bb      	strb	r3, [r7, #6]
				}
				HAL_Delay(500);
 8000838:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800083c:	f001 f860 	bl	8001900 <HAL_Delay>
				break;
 8000840:	e0ba      	b.n	80009b8 <Add_FR+0x2d0>

			case 3:
				OLED_ShowString(0, 0, "   creating   ", 16, 0);
 8000842:	2300      	movs	r3, #0
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	2310      	movs	r3, #16
 8000848:	4a78      	ldr	r2, [pc, #480]	; (8000a2c <Add_FR+0x344>)
 800084a:	2100      	movs	r1, #0
 800084c:	2000      	movs	r0, #0
 800084e:	f000 fe07 	bl	8001460 <OLED_ShowString>
				HAL_Delay(500);
 8000852:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000856:	f001 f853 	bl	8001900 <HAL_Delay>
				ensure = PS_RegModel();
 800085a:	f7ff fdc8 	bl	80003ee <PS_RegModel>
 800085e:	4603      	mov	r3, r0
 8000860:	70fb      	strb	r3, [r7, #3]
				if (ensure == 0x00) {
 8000862:	78fb      	ldrb	r3, [r7, #3]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d10a      	bne.n	800087e <Add_FR+0x196>
					OLED_ShowString(0, 0, "Creating Success", 16, 0);
 8000868:	2300      	movs	r3, #0
 800086a:	9300      	str	r3, [sp, #0]
 800086c:	2310      	movs	r3, #16
 800086e:	4a70      	ldr	r2, [pc, #448]	; (8000a30 <Add_FR+0x348>)
 8000870:	2100      	movs	r1, #0
 8000872:	2000      	movs	r0, #0
 8000874:	f000 fdf4 	bl	8001460 <OLED_ShowString>
					processnum = 4; //跳到第五步
 8000878:	2304      	movs	r3, #4
 800087a:	71bb      	strb	r3, [r7, #6]
 800087c:	e005      	b.n	800088a <Add_FR+0x1a2>
				}
				else {
					processnum = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	71bb      	strb	r3, [r7, #6]
					ShowErrMessage(ensure);
 8000882:	78fb      	ldrb	r3, [r7, #3]
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff ff24 	bl	80006d2 <ShowErrMessage>
				}
				HAL_Delay(1000);
 800088a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800088e:	f001 f837 	bl	8001900 <HAL_Delay>
				break;
 8000892:	e091      	b.n	80009b8 <Add_FR+0x2d0>

			case 4:
				OLED_Clear();
 8000894:	f000 fccc 	bl	8001230 <OLED_Clear>
				OLED_ShowString(0, 0, "k4 add k2 sub", 16, 0);
 8000898:	2300      	movs	r3, #0
 800089a:	9300      	str	r3, [sp, #0]
 800089c:	2310      	movs	r3, #16
 800089e:	4a65      	ldr	r2, [pc, #404]	; (8000a34 <Add_FR+0x34c>)
 80008a0:	2100      	movs	r1, #0
 80008a2:	2000      	movs	r0, #0
 80008a4:	f000 fddc 	bl	8001460 <OLED_ShowString>
				OLED_ShowString(0, 2, "k3 save", 16, 0);
 80008a8:	2300      	movs	r3, #0
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	2310      	movs	r3, #16
 80008ae:	4a62      	ldr	r2, [pc, #392]	; (8000a38 <Add_FR+0x350>)
 80008b0:	2102      	movs	r1, #2
 80008b2:	2000      	movs	r0, #0
 80008b4:	f000 fdd4 	bl	8001460 <OLED_ShowString>
				while (key_num != 3) {
 80008b8:	e02c      	b.n	8000914 <Add_FR+0x22c>
					key_num = KEY_Scan(0);
 80008ba:	2000      	movs	r0, #0
 80008bc:	f000 fb06 	bl	8000ecc <KEY_Scan>
 80008c0:	4603      	mov	r3, r0
 80008c2:	713b      	strb	r3, [r7, #4]
					if (key_num == 2) {
 80008c4:	793b      	ldrb	r3, [r7, #4]
 80008c6:	2b02      	cmp	r3, #2
 80008c8:	d107      	bne.n	80008da <Add_FR+0x1f2>
						key_num = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	713b      	strb	r3, [r7, #4]
						if (ID_NUM > 0)
 80008ce:	797b      	ldrb	r3, [r7, #5]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d002      	beq.n	80008da <Add_FR+0x1f2>
							ID_NUM--;
 80008d4:	797b      	ldrb	r3, [r7, #5]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	717b      	strb	r3, [r7, #5]
					}
					if (key_num == 4) {
 80008da:	793b      	ldrb	r3, [r7, #4]
 80008dc:	2b04      	cmp	r3, #4
 80008de:	d107      	bne.n	80008f0 <Add_FR+0x208>
						key_num = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	713b      	strb	r3, [r7, #4]
						if (ID_NUM < 99)
 80008e4:	797b      	ldrb	r3, [r7, #5]
 80008e6:	2b62      	cmp	r3, #98	; 0x62
 80008e8:	d802      	bhi.n	80008f0 <Add_FR+0x208>
							ID_NUM++;
 80008ea:	797b      	ldrb	r3, [r7, #5]
 80008ec:	3301      	adds	r3, #1
 80008ee:	717b      	strb	r3, [r7, #5]
					}
					OLED_ShowString(0, 4, "ID=", 16, 0);
 80008f0:	2300      	movs	r3, #0
 80008f2:	9300      	str	r3, [sp, #0]
 80008f4:	2310      	movs	r3, #16
 80008f6:	4a51      	ldr	r2, [pc, #324]	; (8000a3c <Add_FR+0x354>)
 80008f8:	2104      	movs	r1, #4
 80008fa:	2000      	movs	r0, #0
 80008fc:	f000 fdb0 	bl	8001460 <OLED_ShowString>
					OLED_ShowNum(48, 4, ID_NUM, 2, 16, 0);
 8000900:	797a      	ldrb	r2, [r7, #5]
 8000902:	2300      	movs	r3, #0
 8000904:	9301      	str	r3, [sp, #4]
 8000906:	2310      	movs	r3, #16
 8000908:	9300      	str	r3, [sp, #0]
 800090a:	2302      	movs	r3, #2
 800090c:	2104      	movs	r1, #4
 800090e:	2030      	movs	r0, #48	; 0x30
 8000910:	f000 fdf0 	bl	80014f4 <OLED_ShowNum>
				while (key_num != 3) {
 8000914:	793b      	ldrb	r3, [r7, #4]
 8000916:	2b03      	cmp	r3, #3
 8000918:	d1cf      	bne.n	80008ba <Add_FR+0x1d2>
				}
				key_num = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	713b      	strb	r3, [r7, #4]
				ensure = PS_StoreChar(CharBuffer2, ID_NUM); //储存模板
 800091e:	797b      	ldrb	r3, [r7, #5]
 8000920:	b29b      	uxth	r3, r3
 8000922:	4619      	mov	r1, r3
 8000924:	2002      	movs	r0, #2
 8000926:	f7ff fd8b 	bl	8000440 <PS_StoreChar>
 800092a:	4603      	mov	r3, r0
 800092c:	70fb      	strb	r3, [r7, #3]
				if (ensure == 0x00) {
 800092e:	78fb      	ldrb	r3, [r7, #3]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d130      	bne.n	8000996 <Add_FR+0x2ae>
					OLED_Clear();
 8000934:	f000 fc7c 	bl	8001230 <OLED_Clear>
					OLED_ShowString(0, 0, "    saved     ", 16, 0);
 8000938:	2300      	movs	r3, #0
 800093a:	9300      	str	r3, [sp, #0]
 800093c:	2310      	movs	r3, #16
 800093e:	4a40      	ldr	r2, [pc, #256]	; (8000a40 <Add_FR+0x358>)
 8000940:	2100      	movs	r1, #0
 8000942:	2000      	movs	r0, #0
 8000944:	f000 fd8c 	bl	8001460 <OLED_ShowString>
					HAL_Delay(1500);
 8000948:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800094c:	f000 ffd8 	bl	8001900 <HAL_Delay>
					OLED_Clear();
 8000950:	f000 fc6e 	bl	8001230 <OLED_Clear>
					OLED_ShowString(0, 0, "text", 16, 0);
 8000954:	2300      	movs	r3, #0
 8000956:	9300      	str	r3, [sp, #0]
 8000958:	2310      	movs	r3, #16
 800095a:	4a3a      	ldr	r2, [pc, #232]	; (8000a44 <Add_FR+0x35c>)
 800095c:	2100      	movs	r1, #0
 800095e:	2000      	movs	r0, #0
 8000960:	f000 fd7e 	bl	8001460 <OLED_ShowString>
					OLED_ShowString(0, 2, "k1 add", 16, 0);
 8000964:	2300      	movs	r3, #0
 8000966:	9300      	str	r3, [sp, #0]
 8000968:	2310      	movs	r3, #16
 800096a:	4a37      	ldr	r2, [pc, #220]	; (8000a48 <Add_FR+0x360>)
 800096c:	2102      	movs	r1, #2
 800096e:	2000      	movs	r0, #0
 8000970:	f000 fd76 	bl	8001460 <OLED_ShowString>
					OLED_ShowString(0, 4, "k3 del", 16, 0);
 8000974:	2300      	movs	r3, #0
 8000976:	9300      	str	r3, [sp, #0]
 8000978:	2310      	movs	r3, #16
 800097a:	4a34      	ldr	r2, [pc, #208]	; (8000a4c <Add_FR+0x364>)
 800097c:	2104      	movs	r1, #4
 800097e:	2000      	movs	r0, #0
 8000980:	f000 fd6e 	bl	8001460 <OLED_ShowString>
					OLED_ShowString(0, 6, "k5 ver", 16, 0);
 8000984:	2300      	movs	r3, #0
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	2310      	movs	r3, #16
 800098a:	4a31      	ldr	r2, [pc, #196]	; (8000a50 <Add_FR+0x368>)
 800098c:	2106      	movs	r1, #6
 800098e:	2000      	movs	r0, #0
 8000990:	f000 fd66 	bl	8001460 <OLED_ShowString>
					return ;
 8000994:	e038      	b.n	8000a08 <Add_FR+0x320>
				}
				else {
					OLED_Clear();
 8000996:	f000 fc4b 	bl	8001230 <OLED_Clear>
					OLED_ShowString(0, 0, "Retrying", 16, 0);
 800099a:	2300      	movs	r3, #0
 800099c:	9300      	str	r3, [sp, #0]
 800099e:	2310      	movs	r3, #16
 80009a0:	4a2c      	ldr	r2, [pc, #176]	; (8000a54 <Add_FR+0x36c>)
 80009a2:	2100      	movs	r1, #0
 80009a4:	2000      	movs	r0, #0
 80009a6:	f000 fd5b 	bl	8001460 <OLED_ShowString>
					processnum = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	71bb      	strb	r3, [r7, #6]
					ShowErrMessage(ensure);
 80009ae:	78fb      	ldrb	r3, [r7, #3]
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff fe8e 	bl	80006d2 <ShowErrMessage>
				}
				break;
 80009b6:	bf00      	nop
		}
		HAL_Delay(400);
 80009b8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80009bc:	f000 ffa0 	bl	8001900 <HAL_Delay>
		if (i == 15) { //超过15次没有按手指则退出
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	2b0f      	cmp	r3, #15
 80009c4:	f47f ae99 	bne.w	80006fa <Add_FR+0x12>
			OLED_ShowString(0, 0, "Timeout", 16, 0);
 80009c8:	2300      	movs	r3, #0
 80009ca:	9300      	str	r3, [sp, #0]
 80009cc:	2310      	movs	r3, #16
 80009ce:	4a22      	ldr	r2, [pc, #136]	; (8000a58 <Add_FR+0x370>)
 80009d0:	2100      	movs	r1, #0
 80009d2:	2000      	movs	r0, #0
 80009d4:	f000 fd44 	bl	8001460 <OLED_ShowString>
			OLED_ShowString(0, 2, "k1 add", 16, 0);
 80009d8:	2300      	movs	r3, #0
 80009da:	9300      	str	r3, [sp, #0]
 80009dc:	2310      	movs	r3, #16
 80009de:	4a1a      	ldr	r2, [pc, #104]	; (8000a48 <Add_FR+0x360>)
 80009e0:	2102      	movs	r1, #2
 80009e2:	2000      	movs	r0, #0
 80009e4:	f000 fd3c 	bl	8001460 <OLED_ShowString>
			OLED_ShowString(0, 4, "k3 del", 16, 0);
 80009e8:	2300      	movs	r3, #0
 80009ea:	9300      	str	r3, [sp, #0]
 80009ec:	2310      	movs	r3, #16
 80009ee:	4a17      	ldr	r2, [pc, #92]	; (8000a4c <Add_FR+0x364>)
 80009f0:	2104      	movs	r1, #4
 80009f2:	2000      	movs	r0, #0
 80009f4:	f000 fd34 	bl	8001460 <OLED_ShowString>
			OLED_ShowString(0, 6, "k5 ver", 16, 0);
 80009f8:	2300      	movs	r3, #0
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	2310      	movs	r3, #16
 80009fe:	4a14      	ldr	r2, [pc, #80]	; (8000a50 <Add_FR+0x368>)
 8000a00:	2106      	movs	r1, #6
 8000a02:	2000      	movs	r0, #0
 8000a04:	f000 fd2c 	bl	8001460 <OLED_ShowString>
			break;
		}
	}
}
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	08004a78 	.word	0x08004a78
 8000a14:	08004a84 	.word	0x08004a84
 8000a18:	08004a94 	.word	0x08004a94
 8000a1c:	08004aa8 	.word	0x08004aa8
 8000a20:	08004ab8 	.word	0x08004ab8
 8000a24:	08004ac8 	.word	0x08004ac8
 8000a28:	08004ad8 	.word	0x08004ad8
 8000a2c:	08004ae8 	.word	0x08004ae8
 8000a30:	08004af8 	.word	0x08004af8
 8000a34:	08004b0c 	.word	0x08004b0c
 8000a38:	08004b1c 	.word	0x08004b1c
 8000a3c:	08004b24 	.word	0x08004b24
 8000a40:	08004b28 	.word	0x08004b28
 8000a44:	08004b38 	.word	0x08004b38
 8000a48:	08004b40 	.word	0x08004b40
 8000a4c:	08004b48 	.word	0x08004b48
 8000a50:	08004b50 	.word	0x08004b50
 8000a54:	08004b58 	.word	0x08004b58
 8000a58:	08004b64 	.word	0x08004b64

08000a5c <press_FR>:

SysPara AS608Para;//指纹模块AS608参数

//刷指纹
void press_FR(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	; 0x28
 8000a60:	af02      	add	r7, sp, #8
	SearchResult seach;
	uint8_t ensure;
	char str[20];
	uint8_t key_num = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	77fb      	strb	r3, [r7, #31]
	while (key_num != 1) {
 8000a66:	e06b      	b.n	8000b40 <press_FR+0xe4>
		key_num = KEY_Scan(0);
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f000 fa2f 	bl	8000ecc <KEY_Scan>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	77fb      	strb	r3, [r7, #31]
		ensure = PS_GetImage();
 8000a72:	f7ff fc39 	bl	80002e8 <PS_GetImage>
 8000a76:	4603      	mov	r3, r0
 8000a78:	77bb      	strb	r3, [r7, #30]
		if (ensure == 0x00) { //获取图像成功
 8000a7a:	7fbb      	ldrb	r3, [r7, #30]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d15f      	bne.n	8000b40 <press_FR+0xe4>
			ensure = PS_GenChar(CharBuffer1);
 8000a80:	2001      	movs	r0, #1
 8000a82:	f7ff fc5a 	bl	800033a <PS_GenChar>
 8000a86:	4603      	mov	r3, r0
 8000a88:	77bb      	strb	r3, [r7, #30]
			if (ensure == 0x00) { //生成特征成功
 8000a8a:	7fbb      	ldrb	r3, [r7, #30]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d157      	bne.n	8000b40 <press_FR+0xe4>
				ensure = PS_HighSpeedSearch(CharBuffer1, 0, 99, &seach);
 8000a90:	f107 0318 	add.w	r3, r7, #24
 8000a94:	2263      	movs	r2, #99	; 0x63
 8000a96:	2100      	movs	r1, #0
 8000a98:	2001      	movs	r0, #1
 8000a9a:	f7ff fd9c 	bl	80005d6 <PS_HighSpeedSearch>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	77bb      	strb	r3, [r7, #30]
				if (ensure == 0x00) { //搜索成功
 8000aa2:	7fbb      	ldrb	r3, [r7, #30]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d12d      	bne.n	8000b04 <press_FR+0xa8>
					OLED_Clear();
 8000aa8:	f000 fbc2 	bl	8001230 <OLED_Clear>
					OLED_ShowString(0, 0, "press again", 16, 0);
 8000aac:	2300      	movs	r3, #0
 8000aae:	9300      	str	r3, [sp, #0]
 8000ab0:	2310      	movs	r3, #16
 8000ab2:	4a38      	ldr	r2, [pc, #224]	; (8000b94 <press_FR+0x138>)
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f000 fcd2 	bl	8001460 <OLED_ShowString>
					OLED_ShowString(0, 2, "K1 back", 16, 0);
 8000abc:	2300      	movs	r3, #0
 8000abe:	9300      	str	r3, [sp, #0]
 8000ac0:	2310      	movs	r3, #16
 8000ac2:	4a35      	ldr	r2, [pc, #212]	; (8000b98 <press_FR+0x13c>)
 8000ac4:	2102      	movs	r1, #2
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	f000 fcca 	bl	8001460 <OLED_ShowString>
					OLED_ShowString(0, 4, "Succeeded", 16, 0);
 8000acc:	2300      	movs	r3, #0
 8000ace:	9300      	str	r3, [sp, #0]
 8000ad0:	2310      	movs	r3, #16
 8000ad2:	4a32      	ldr	r2, [pc, #200]	; (8000b9c <press_FR+0x140>)
 8000ad4:	2104      	movs	r1, #4
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f000 fcc2 	bl	8001460 <OLED_ShowString>
					sprintf(str, "ID:%d score:%d ", seach.pageID, seach.mathscore);
 8000adc:	8b3b      	ldrh	r3, [r7, #24]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	8b7b      	ldrh	r3, [r7, #26]
 8000ae2:	1d38      	adds	r0, r7, #4
 8000ae4:	492e      	ldr	r1, [pc, #184]	; (8000ba0 <press_FR+0x144>)
 8000ae6:	f003 f979 	bl	8003ddc <siprintf>
					OLED_ShowString(0, 6, str, 16, 0);
 8000aea:	1d3a      	adds	r2, r7, #4
 8000aec:	2300      	movs	r3, #0
 8000aee:	9300      	str	r3, [sp, #0]
 8000af0:	2310      	movs	r3, #16
 8000af2:	2106      	movs	r1, #6
 8000af4:	2000      	movs	r0, #0
 8000af6:	f000 fcb3 	bl	8001460 <OLED_ShowString>
					HAL_Delay(1500);
 8000afa:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000afe:	f000 feff 	bl	8001900 <HAL_Delay>
 8000b02:	e01d      	b.n	8000b40 <press_FR+0xe4>
				}
				else {
					OLED_Clear();
 8000b04:	f000 fb94 	bl	8001230 <OLED_Clear>
					OLED_ShowString(0, 0, "press again", 16, 0);
 8000b08:	2300      	movs	r3, #0
 8000b0a:	9300      	str	r3, [sp, #0]
 8000b0c:	2310      	movs	r3, #16
 8000b0e:	4a21      	ldr	r2, [pc, #132]	; (8000b94 <press_FR+0x138>)
 8000b10:	2100      	movs	r1, #0
 8000b12:	2000      	movs	r0, #0
 8000b14:	f000 fca4 	bl	8001460 <OLED_ShowString>
					OLED_ShowString(0, 2, "K1 back", 16, 0);
 8000b18:	2300      	movs	r3, #0
 8000b1a:	9300      	str	r3, [sp, #0]
 8000b1c:	2310      	movs	r3, #16
 8000b1e:	4a1e      	ldr	r2, [pc, #120]	; (8000b98 <press_FR+0x13c>)
 8000b20:	2102      	movs	r1, #2
 8000b22:	2000      	movs	r0, #0
 8000b24:	f000 fc9c 	bl	8001460 <OLED_ShowString>
					OLED_ShowString(0, 4, "failed", 16, 0);
 8000b28:	2300      	movs	r3, #0
 8000b2a:	9300      	str	r3, [sp, #0]
 8000b2c:	2310      	movs	r3, #16
 8000b2e:	4a1d      	ldr	r2, [pc, #116]	; (8000ba4 <press_FR+0x148>)
 8000b30:	2104      	movs	r1, #4
 8000b32:	2000      	movs	r0, #0
 8000b34:	f000 fc94 	bl	8001460 <OLED_ShowString>
					HAL_Delay(1500);
 8000b38:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000b3c:	f000 fee0 	bl	8001900 <HAL_Delay>
	while (key_num != 1) {
 8000b40:	7ffb      	ldrb	r3, [r7, #31]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d190      	bne.n	8000a68 <press_FR+0xc>
				}
			}
		}
	}
	OLED_Clear();
 8000b46:	f000 fb73 	bl	8001230 <OLED_Clear>
	OLED_ShowString(0, 0, "text", 16, 0);
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	9300      	str	r3, [sp, #0]
 8000b4e:	2310      	movs	r3, #16
 8000b50:	4a15      	ldr	r2, [pc, #84]	; (8000ba8 <press_FR+0x14c>)
 8000b52:	2100      	movs	r1, #0
 8000b54:	2000      	movs	r0, #0
 8000b56:	f000 fc83 	bl	8001460 <OLED_ShowString>
	OLED_ShowString(0, 2, "k1 add", 16, 0);
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	9300      	str	r3, [sp, #0]
 8000b5e:	2310      	movs	r3, #16
 8000b60:	4a12      	ldr	r2, [pc, #72]	; (8000bac <press_FR+0x150>)
 8000b62:	2102      	movs	r1, #2
 8000b64:	2000      	movs	r0, #0
 8000b66:	f000 fc7b 	bl	8001460 <OLED_ShowString>
	OLED_ShowString(0, 4, "k3 del", 16, 0);
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	9300      	str	r3, [sp, #0]
 8000b6e:	2310      	movs	r3, #16
 8000b70:	4a0f      	ldr	r2, [pc, #60]	; (8000bb0 <press_FR+0x154>)
 8000b72:	2104      	movs	r1, #4
 8000b74:	2000      	movs	r0, #0
 8000b76:	f000 fc73 	bl	8001460 <OLED_ShowString>
	OLED_ShowString(0, 6, "k5 ver", 16, 0);
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	9300      	str	r3, [sp, #0]
 8000b7e:	2310      	movs	r3, #16
 8000b80:	4a0c      	ldr	r2, [pc, #48]	; (8000bb4 <press_FR+0x158>)
 8000b82:	2106      	movs	r1, #6
 8000b84:	2000      	movs	r0, #0
 8000b86:	f000 fc6b 	bl	8001460 <OLED_ShowString>
	//OLED_RefreshRAM();
}
 8000b8a:	bf00      	nop
 8000b8c:	3720      	adds	r7, #32
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	08004b6c 	.word	0x08004b6c
 8000b98:	08004b78 	.word	0x08004b78
 8000b9c:	08004b80 	.word	0x08004b80
 8000ba0:	08004b8c 	.word	0x08004b8c
 8000ba4:	08004b9c 	.word	0x08004b9c
 8000ba8:	08004b38 	.word	0x08004b38
 8000bac:	08004b40 	.word	0x08004b40
 8000bb0:	08004b48 	.word	0x08004b48
 8000bb4:	08004b50 	.word	0x08004b50

08000bb8 <Del_FR>:

//删除指纹
void Del_FR(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af02      	add	r7, sp, #8
	uint8_t  ensure;
	uint16_t ID_NUM = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	80fb      	strh	r3, [r7, #6]
	uint8_t key_num = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	717b      	strb	r3, [r7, #5]
	OLED_Clear();
 8000bc6:	f000 fb33 	bl	8001230 <OLED_Clear>
	OLED_ShowString(0, 0, "K4add K2sub", 16, 0);
 8000bca:	2300      	movs	r3, #0
 8000bcc:	9300      	str	r3, [sp, #0]
 8000bce:	2310      	movs	r3, #16
 8000bd0:	4a57      	ldr	r2, [pc, #348]	; (8000d30 <Del_FR+0x178>)
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	f000 fc43 	bl	8001460 <OLED_ShowString>
	OLED_ShowString(0, 2, "K5 del all", 16, 0);
 8000bda:	2300      	movs	r3, #0
 8000bdc:	9300      	str	r3, [sp, #0]
 8000bde:	2310      	movs	r3, #16
 8000be0:	4a54      	ldr	r2, [pc, #336]	; (8000d34 <Del_FR+0x17c>)
 8000be2:	2102      	movs	r1, #2
 8000be4:	2000      	movs	r0, #0
 8000be6:	f000 fc3b 	bl	8001460 <OLED_ShowString>
	OLED_ShowString(0, 4, "ID:", 16, 0);
 8000bea:	2300      	movs	r3, #0
 8000bec:	9300      	str	r3, [sp, #0]
 8000bee:	2310      	movs	r3, #16
 8000bf0:	4a51      	ldr	r2, [pc, #324]	; (8000d38 <Del_FR+0x180>)
 8000bf2:	2104      	movs	r1, #4
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	f000 fc33 	bl	8001460 <OLED_ShowString>
	OLED_ShowString(0, 6, "K1back K3confirm", 16, 0);
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	9300      	str	r3, [sp, #0]
 8000bfe:	2310      	movs	r3, #16
 8000c00:	4a4e      	ldr	r2, [pc, #312]	; (8000d3c <Del_FR+0x184>)
 8000c02:	2106      	movs	r1, #6
 8000c04:	2000      	movs	r0, #0
 8000c06:	f000 fc2b 	bl	8001460 <OLED_ShowString>
	while (key_num != 3) {
 8000c0a:	e047      	b.n	8000c9c <Del_FR+0xe4>
		key_num = KEY_Scan(0);
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	f000 f95d 	bl	8000ecc <KEY_Scan>
 8000c12:	4603      	mov	r3, r0
 8000c14:	717b      	strb	r3, [r7, #5]
		if (key_num == 2) {
 8000c16:	797b      	ldrb	r3, [r7, #5]
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d107      	bne.n	8000c2c <Del_FR+0x74>
			key_num = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	717b      	strb	r3, [r7, #5]
			if (ID_NUM > 0)
 8000c20:	88fb      	ldrh	r3, [r7, #6]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d002      	beq.n	8000c2c <Del_FR+0x74>
				ID_NUM--;
 8000c26:	88fb      	ldrh	r3, [r7, #6]
 8000c28:	3b01      	subs	r3, #1
 8000c2a:	80fb      	strh	r3, [r7, #6]
		}
		if (key_num == 4) {
 8000c2c:	797b      	ldrb	r3, [r7, #5]
 8000c2e:	2b04      	cmp	r3, #4
 8000c30:	d107      	bne.n	8000c42 <Del_FR+0x8a>
			key_num = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	717b      	strb	r3, [r7, #5]
			if (ID_NUM < 99)
 8000c36:	88fb      	ldrh	r3, [r7, #6]
 8000c38:	2b62      	cmp	r3, #98	; 0x62
 8000c3a:	d802      	bhi.n	8000c42 <Del_FR+0x8a>
				ID_NUM++;
 8000c3c:	88fb      	ldrh	r3, [r7, #6]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	80fb      	strh	r3, [r7, #6]
		}
		if (key_num == 1)
 8000c42:	797b      	ldrb	r3, [r7, #5]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d04a      	beq.n	8000cde <Del_FR+0x126>
			goto MENU ; //返回主页面
		if (key_num == 5) {
 8000c48:	797b      	ldrb	r3, [r7, #5]
 8000c4a:	2b05      	cmp	r3, #5
 8000c4c:	d11c      	bne.n	8000c88 <Del_FR+0xd0>
			key_num = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	717b      	strb	r3, [r7, #5]
			ensure = PS_Empty(); //清空指纹库
 8000c52:	f7ff fc97 	bl	8000584 <PS_Empty>
 8000c56:	4603      	mov	r3, r0
 8000c58:	713b      	strb	r3, [r7, #4]
			if (ensure == 0) {
 8000c5a:	793b      	ldrb	r3, [r7, #4]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d10a      	bne.n	8000c76 <Del_FR+0xbe>
				OLED_Clear();
 8000c60:	f000 fae6 	bl	8001230 <OLED_Clear>
				OLED_ShowString(0, 0, "SUCCESS", 16, 0);
 8000c64:	2300      	movs	r3, #0
 8000c66:	9300      	str	r3, [sp, #0]
 8000c68:	2310      	movs	r3, #16
 8000c6a:	4a35      	ldr	r2, [pc, #212]	; (8000d40 <Del_FR+0x188>)
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2000      	movs	r0, #0
 8000c70:	f000 fbf6 	bl	8001460 <OLED_ShowString>
 8000c74:	e003      	b.n	8000c7e <Del_FR+0xc6>
			}
			else
				ShowErrMessage(ensure);
 8000c76:	793b      	ldrb	r3, [r7, #4]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff fd2a 	bl	80006d2 <ShowErrMessage>
			HAL_Delay(1500);
 8000c7e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000c82:	f000 fe3d 	bl	8001900 <HAL_Delay>
			goto MENU ; //返回主页面
 8000c86:	e02b      	b.n	8000ce0 <Del_FR+0x128>
		}
		OLED_ShowNum(48, 4, ID_NUM, 2, 16, 0);
 8000c88:	88fa      	ldrh	r2, [r7, #6]
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	9301      	str	r3, [sp, #4]
 8000c8e:	2310      	movs	r3, #16
 8000c90:	9300      	str	r3, [sp, #0]
 8000c92:	2302      	movs	r3, #2
 8000c94:	2104      	movs	r1, #4
 8000c96:	2030      	movs	r0, #48	; 0x30
 8000c98:	f000 fc2c 	bl	80014f4 <OLED_ShowNum>
	while (key_num != 3) {
 8000c9c:	797b      	ldrb	r3, [r7, #5]
 8000c9e:	2b03      	cmp	r3, #3
 8000ca0:	d1b4      	bne.n	8000c0c <Del_FR+0x54>
	}
	ensure = PS_DeletChar(ID_NUM, 1); //删除单个指纹
 8000ca2:	88fb      	ldrh	r3, [r7, #6]
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fc14 	bl	80004d4 <PS_DeletChar>
 8000cac:	4603      	mov	r3, r0
 8000cae:	713b      	strb	r3, [r7, #4]
	if (ensure == 0) {
 8000cb0:	793b      	ldrb	r3, [r7, #4]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d10a      	bne.n	8000ccc <Del_FR+0x114>
		OLED_Clear();
 8000cb6:	f000 fabb 	bl	8001230 <OLED_Clear>
		OLED_ShowString(0, 0, "SUCCESS", 16, 0);
 8000cba:	2300      	movs	r3, #0
 8000cbc:	9300      	str	r3, [sp, #0]
 8000cbe:	2310      	movs	r3, #16
 8000cc0:	4a1f      	ldr	r2, [pc, #124]	; (8000d40 <Del_FR+0x188>)
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	f000 fbcb 	bl	8001460 <OLED_ShowString>
 8000cca:	e003      	b.n	8000cd4 <Del_FR+0x11c>
	}
	else
		ShowErrMessage(ensure);
 8000ccc:	793b      	ldrb	r3, [r7, #4]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fcff 	bl	80006d2 <ShowErrMessage>
	HAL_Delay(1500);
 8000cd4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000cd8:	f000 fe12 	bl	8001900 <HAL_Delay>
 8000cdc:	e000      	b.n	8000ce0 <Del_FR+0x128>
			goto MENU ; //返回主页面
 8000cde:	bf00      	nop
MENU:
	OLED_Clear();
 8000ce0:	f000 faa6 	bl	8001230 <OLED_Clear>
	OLED_ShowString(0, 0, "text", 16, 0);
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	9300      	str	r3, [sp, #0]
 8000ce8:	2310      	movs	r3, #16
 8000cea:	4a16      	ldr	r2, [pc, #88]	; (8000d44 <Del_FR+0x18c>)
 8000cec:	2100      	movs	r1, #0
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f000 fbb6 	bl	8001460 <OLED_ShowString>
	OLED_ShowString(0, 2, "k1 add", 16, 0);
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	2310      	movs	r3, #16
 8000cfa:	4a13      	ldr	r2, [pc, #76]	; (8000d48 <Del_FR+0x190>)
 8000cfc:	2102      	movs	r1, #2
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f000 fbae 	bl	8001460 <OLED_ShowString>
	OLED_ShowString(0, 4, "k3 del", 16, 0);
 8000d04:	2300      	movs	r3, #0
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2310      	movs	r3, #16
 8000d0a:	4a10      	ldr	r2, [pc, #64]	; (8000d4c <Del_FR+0x194>)
 8000d0c:	2104      	movs	r1, #4
 8000d0e:	2000      	movs	r0, #0
 8000d10:	f000 fba6 	bl	8001460 <OLED_ShowString>
	OLED_ShowString(0, 6, "k5 ver", 16, 0);
 8000d14:	2300      	movs	r3, #0
 8000d16:	9300      	str	r3, [sp, #0]
 8000d18:	2310      	movs	r3, #16
 8000d1a:	4a0d      	ldr	r2, [pc, #52]	; (8000d50 <Del_FR+0x198>)
 8000d1c:	2106      	movs	r1, #6
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f000 fb9e 	bl	8001460 <OLED_ShowString>
	//OLED_RefreshRAM();
	key_num = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	717b      	strb	r3, [r7, #5]
}
 8000d28:	bf00      	nop
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	08004ba4 	.word	0x08004ba4
 8000d34:	08004bb0 	.word	0x08004bb0
 8000d38:	08004bbc 	.word	0x08004bbc
 8000d3c:	08004bc0 	.word	0x08004bc0
 8000d40:	08004bd4 	.word	0x08004bd4
 8000d44:	08004b38 	.word	0x08004b38
 8000d48:	08004b40 	.word	0x08004b40
 8000d4c:	08004b48 	.word	0x08004b48
 8000d50:	08004b50 	.word	0x08004b50

08000d54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b088      	sub	sp, #32
 8000d58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5a:	f107 0310 	add.w	r3, r7, #16
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d68:	4b1f      	ldr	r3, [pc, #124]	; (8000de8 <MX_GPIO_Init+0x94>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	4a1e      	ldr	r2, [pc, #120]	; (8000de8 <MX_GPIO_Init+0x94>)
 8000d6e:	f043 0320 	orr.w	r3, r3, #32
 8000d72:	6193      	str	r3, [r2, #24]
 8000d74:	4b1c      	ldr	r3, [pc, #112]	; (8000de8 <MX_GPIO_Init+0x94>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	f003 0320 	and.w	r3, r3, #32
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d80:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <MX_GPIO_Init+0x94>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	4a18      	ldr	r2, [pc, #96]	; (8000de8 <MX_GPIO_Init+0x94>)
 8000d86:	f043 0304 	orr.w	r3, r3, #4
 8000d8a:	6193      	str	r3, [r2, #24]
 8000d8c:	4b16      	ldr	r3, [pc, #88]	; (8000de8 <MX_GPIO_Init+0x94>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	f003 0304 	and.w	r3, r3, #4
 8000d94:	60bb      	str	r3, [r7, #8]
 8000d96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d98:	4b13      	ldr	r3, [pc, #76]	; (8000de8 <MX_GPIO_Init+0x94>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	4a12      	ldr	r2, [pc, #72]	; (8000de8 <MX_GPIO_Init+0x94>)
 8000d9e:	f043 0308 	orr.w	r3, r3, #8
 8000da2:	6193      	str	r3, [r2, #24]
 8000da4:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <MX_GPIO_Init+0x94>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	f003 0308 	and.w	r3, r3, #8
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY2_Pin|KEY3_Pin|KEY4_Pin;
 8000db0:	23f0      	movs	r3, #240	; 0xf0
 8000db2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbc:	f107 0310 	add.w	r3, r7, #16
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	480a      	ldr	r0, [pc, #40]	; (8000dec <MX_GPIO_Init+0x98>)
 8000dc4:	f000 ff80 	bl	8001cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY5_Pin;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY5_GPIO_Port, &GPIO_InitStruct);
 8000dd4:	f107 0310 	add.w	r3, r7, #16
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4805      	ldr	r0, [pc, #20]	; (8000df0 <MX_GPIO_Init+0x9c>)
 8000ddc:	f000 ff74 	bl	8001cc8 <HAL_GPIO_Init>

}
 8000de0:	bf00      	nop
 8000de2:	3720      	adds	r7, #32
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40021000 	.word	0x40021000
 8000dec:	40010800 	.word	0x40010800
 8000df0:	40010c00 	.word	0x40010c00

08000df4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <MX_I2C1_Init+0x50>)
 8000dfa:	4a13      	ldr	r2, [pc, #76]	; (8000e48 <MX_I2C1_Init+0x54>)
 8000dfc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000dfe:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <MX_I2C1_Init+0x50>)
 8000e00:	4a12      	ldr	r2, [pc, #72]	; (8000e4c <MX_I2C1_Init+0x58>)
 8000e02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e04:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <MX_I2C1_Init+0x50>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <MX_I2C1_Init+0x50>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <MX_I2C1_Init+0x50>)
 8000e12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e18:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <MX_I2C1_Init+0x50>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e1e:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <MX_I2C1_Init+0x50>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e24:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <MX_I2C1_Init+0x50>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <MX_I2C1_Init+0x50>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e30:	4804      	ldr	r0, [pc, #16]	; (8000e44 <MX_I2C1_Init+0x50>)
 8000e32:	f001 f8e5 	bl	8002000 <HAL_I2C_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e3c:	f000 f9a3 	bl	8001186 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000228 	.word	0x20000228
 8000e48:	40005400 	.word	0x40005400
 8000e4c:	000186a0 	.word	0x000186a0

08000e50 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b088      	sub	sp, #32
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 0310 	add.w	r3, r7, #16
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a15      	ldr	r2, [pc, #84]	; (8000ec0 <HAL_I2C_MspInit+0x70>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d123      	bne.n	8000eb8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e70:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <HAL_I2C_MspInit+0x74>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	4a13      	ldr	r2, [pc, #76]	; (8000ec4 <HAL_I2C_MspInit+0x74>)
 8000e76:	f043 0308 	orr.w	r3, r3, #8
 8000e7a:	6193      	str	r3, [r2, #24]
 8000e7c:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <HAL_I2C_MspInit+0x74>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	f003 0308 	and.w	r3, r3, #8
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e88:	23c0      	movs	r3, #192	; 0xc0
 8000e8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e8c:	2312      	movs	r3, #18
 8000e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e90:	2303      	movs	r3, #3
 8000e92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e94:	f107 0310 	add.w	r3, r7, #16
 8000e98:	4619      	mov	r1, r3
 8000e9a:	480b      	ldr	r0, [pc, #44]	; (8000ec8 <HAL_I2C_MspInit+0x78>)
 8000e9c:	f000 ff14 	bl	8001cc8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <HAL_I2C_MspInit+0x74>)
 8000ea2:	69db      	ldr	r3, [r3, #28]
 8000ea4:	4a07      	ldr	r2, [pc, #28]	; (8000ec4 <HAL_I2C_MspInit+0x74>)
 8000ea6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eaa:	61d3      	str	r3, [r2, #28]
 8000eac:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <HAL_I2C_MspInit+0x74>)
 8000eae:	69db      	ldr	r3, [r3, #28]
 8000eb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000eb8:	bf00      	nop
 8000eba:	3720      	adds	r7, #32
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40005400 	.word	0x40005400
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	40010c00 	.word	0x40010c00

08000ecc <KEY_Scan>:
#include "key.h"

uint8_t KEY_Scan(uint8_t mode)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
	static uint8_t key_up=1;//按键按松开标志
	if(mode)
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d002      	beq.n	8000ee2 <KEY_Scan+0x16>
		key_up=1;  //支持连按
 8000edc:	4b44      	ldr	r3, [pc, #272]	; (8000ff0 <KEY_Scan+0x124>)
 8000ede:	2201      	movs	r2, #1
 8000ee0:	701a      	strb	r2, [r3, #0]
	if (key_up && (KEY1 == 0 || KEY2 == 0 || KEY3 == 0 || KEY4 == 0 || KEY5 == 0))
 8000ee2:	4b43      	ldr	r3, [pc, #268]	; (8000ff0 <KEY_Scan+0x124>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d055      	beq.n	8000f96 <KEY_Scan+0xca>
 8000eea:	2110      	movs	r1, #16
 8000eec:	4841      	ldr	r0, [pc, #260]	; (8000ff4 <KEY_Scan+0x128>)
 8000eee:	f001 f86f 	bl	8001fd0 <HAL_GPIO_ReadPin>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d01b      	beq.n	8000f30 <KEY_Scan+0x64>
 8000ef8:	2120      	movs	r1, #32
 8000efa:	483e      	ldr	r0, [pc, #248]	; (8000ff4 <KEY_Scan+0x128>)
 8000efc:	f001 f868 	bl	8001fd0 <HAL_GPIO_ReadPin>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d014      	beq.n	8000f30 <KEY_Scan+0x64>
 8000f06:	2140      	movs	r1, #64	; 0x40
 8000f08:	483a      	ldr	r0, [pc, #232]	; (8000ff4 <KEY_Scan+0x128>)
 8000f0a:	f001 f861 	bl	8001fd0 <HAL_GPIO_ReadPin>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d00d      	beq.n	8000f30 <KEY_Scan+0x64>
 8000f14:	2180      	movs	r1, #128	; 0x80
 8000f16:	4837      	ldr	r0, [pc, #220]	; (8000ff4 <KEY_Scan+0x128>)
 8000f18:	f001 f85a 	bl	8001fd0 <HAL_GPIO_ReadPin>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d006      	beq.n	8000f30 <KEY_Scan+0x64>
 8000f22:	2101      	movs	r1, #1
 8000f24:	4834      	ldr	r0, [pc, #208]	; (8000ff8 <KEY_Scan+0x12c>)
 8000f26:	f001 f853 	bl	8001fd0 <HAL_GPIO_ReadPin>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d132      	bne.n	8000f96 <KEY_Scan+0xca>
	{
		HAL_Delay(10);//去抖动
 8000f30:	200a      	movs	r0, #10
 8000f32:	f000 fce5 	bl	8001900 <HAL_Delay>
		key_up = 0;
 8000f36:	4b2e      	ldr	r3, [pc, #184]	; (8000ff0 <KEY_Scan+0x124>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	701a      	strb	r2, [r3, #0]
		if (KEY1 == 0)
 8000f3c:	2110      	movs	r1, #16
 8000f3e:	482d      	ldr	r0, [pc, #180]	; (8000ff4 <KEY_Scan+0x128>)
 8000f40:	f001 f846 	bl	8001fd0 <HAL_GPIO_ReadPin>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d101      	bne.n	8000f4e <KEY_Scan+0x82>
			return 1;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e04c      	b.n	8000fe8 <KEY_Scan+0x11c>
		else if (KEY2 == 0)
 8000f4e:	2120      	movs	r1, #32
 8000f50:	4828      	ldr	r0, [pc, #160]	; (8000ff4 <KEY_Scan+0x128>)
 8000f52:	f001 f83d 	bl	8001fd0 <HAL_GPIO_ReadPin>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d101      	bne.n	8000f60 <KEY_Scan+0x94>
			return 2;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	e043      	b.n	8000fe8 <KEY_Scan+0x11c>
		else if (KEY3 == 0)
 8000f60:	2140      	movs	r1, #64	; 0x40
 8000f62:	4824      	ldr	r0, [pc, #144]	; (8000ff4 <KEY_Scan+0x128>)
 8000f64:	f001 f834 	bl	8001fd0 <HAL_GPIO_ReadPin>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d101      	bne.n	8000f72 <KEY_Scan+0xa6>
			return 3;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e03a      	b.n	8000fe8 <KEY_Scan+0x11c>
		else if (KEY4 == 0)
 8000f72:	2180      	movs	r1, #128	; 0x80
 8000f74:	481f      	ldr	r0, [pc, #124]	; (8000ff4 <KEY_Scan+0x128>)
 8000f76:	f001 f82b 	bl	8001fd0 <HAL_GPIO_ReadPin>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d101      	bne.n	8000f84 <KEY_Scan+0xb8>
			return 4;
 8000f80:	2304      	movs	r3, #4
 8000f82:	e031      	b.n	8000fe8 <KEY_Scan+0x11c>
		else if (KEY5 == 0)
 8000f84:	2101      	movs	r1, #1
 8000f86:	481c      	ldr	r0, [pc, #112]	; (8000ff8 <KEY_Scan+0x12c>)
 8000f88:	f001 f822 	bl	8001fd0 <HAL_GPIO_ReadPin>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d128      	bne.n	8000fe4 <KEY_Scan+0x118>
			return 5;
 8000f92:	2305      	movs	r3, #5
 8000f94:	e028      	b.n	8000fe8 <KEY_Scan+0x11c>
	} else if (KEY1 == 1 && KEY2 == 1 && KEY3 == 1 && KEY4 == 1 && KEY5 == 1)
 8000f96:	2110      	movs	r1, #16
 8000f98:	4816      	ldr	r0, [pc, #88]	; (8000ff4 <KEY_Scan+0x128>)
 8000f9a:	f001 f819 	bl	8001fd0 <HAL_GPIO_ReadPin>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d120      	bne.n	8000fe6 <KEY_Scan+0x11a>
 8000fa4:	2120      	movs	r1, #32
 8000fa6:	4813      	ldr	r0, [pc, #76]	; (8000ff4 <KEY_Scan+0x128>)
 8000fa8:	f001 f812 	bl	8001fd0 <HAL_GPIO_ReadPin>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d119      	bne.n	8000fe6 <KEY_Scan+0x11a>
 8000fb2:	2140      	movs	r1, #64	; 0x40
 8000fb4:	480f      	ldr	r0, [pc, #60]	; (8000ff4 <KEY_Scan+0x128>)
 8000fb6:	f001 f80b 	bl	8001fd0 <HAL_GPIO_ReadPin>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d112      	bne.n	8000fe6 <KEY_Scan+0x11a>
 8000fc0:	2180      	movs	r1, #128	; 0x80
 8000fc2:	480c      	ldr	r0, [pc, #48]	; (8000ff4 <KEY_Scan+0x128>)
 8000fc4:	f001 f804 	bl	8001fd0 <HAL_GPIO_ReadPin>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d10b      	bne.n	8000fe6 <KEY_Scan+0x11a>
 8000fce:	2101      	movs	r1, #1
 8000fd0:	4809      	ldr	r0, [pc, #36]	; (8000ff8 <KEY_Scan+0x12c>)
 8000fd2:	f000 fffd 	bl	8001fd0 <HAL_GPIO_ReadPin>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d104      	bne.n	8000fe6 <KEY_Scan+0x11a>
		key_up = 1;
 8000fdc:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <KEY_Scan+0x124>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	701a      	strb	r2, [r3, #0]
 8000fe2:	e000      	b.n	8000fe6 <KEY_Scan+0x11a>
		if (KEY1 == 0)
 8000fe4:	bf00      	nop
 	return 0;// 无按键按下
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000004 	.word	0x20000004
 8000ff4:	40010800 	.word	0x40010800
 8000ff8:	40010c00 	.word	0x40010c00

08000ffc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001002:	f000 fc1b 	bl	800183c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001006:	f000 f879 	bl	80010fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800100a:	f7ff fea3 	bl	8000d54 <MX_GPIO_Init>
  MX_I2C1_Init();
 800100e:	f7ff fef1 	bl	8000df4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001012:	f000 fb71 	bl	80016f8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	OLED_Init();
 8001016:	f000 f8bd 	bl	8001194 <OLED_Init>
	HAL_Delay(40);
 800101a:	2028      	movs	r0, #40	; 0x28
 800101c:	f000 fc70 	bl	8001900 <HAL_Delay>
	OLED_Clear();
 8001020:	f000 f906 	bl	8001230 <OLED_Clear>
	HAL_Delay(40);
 8001024:	2028      	movs	r0, #40	; 0x28
 8001026:	f000 fc6b 	bl	8001900 <HAL_Delay>
	OLED_Clear();
 800102a:	f000 f901 	bl	8001230 <OLED_Clear>
	OLED_ShowString(0, 0, "text", 16, 0);
 800102e:	2300      	movs	r3, #0
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2310      	movs	r3, #16
 8001034:	4a2a      	ldr	r2, [pc, #168]	; (80010e0 <main+0xe4>)
 8001036:	2100      	movs	r1, #0
 8001038:	2000      	movs	r0, #0
 800103a:	f000 fa11 	bl	8001460 <OLED_ShowString>
	OLED_ShowString(0, 2, "k1 add", 16, 0);
 800103e:	2300      	movs	r3, #0
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	2310      	movs	r3, #16
 8001044:	4a27      	ldr	r2, [pc, #156]	; (80010e4 <main+0xe8>)
 8001046:	2102      	movs	r1, #2
 8001048:	2000      	movs	r0, #0
 800104a:	f000 fa09 	bl	8001460 <OLED_ShowString>
	OLED_ShowString(0, 4, "k3 del", 16, 0);
 800104e:	2300      	movs	r3, #0
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	2310      	movs	r3, #16
 8001054:	4a24      	ldr	r2, [pc, #144]	; (80010e8 <main+0xec>)
 8001056:	2104      	movs	r1, #4
 8001058:	2000      	movs	r0, #0
 800105a:	f000 fa01 	bl	8001460 <OLED_ShowString>
	OLED_ShowString(0, 6, "k5 ver", 16, 0);
 800105e:	2300      	movs	r3, #0
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	2310      	movs	r3, #16
 8001064:	4a21      	ldr	r2, [pc, #132]	; (80010ec <main+0xf0>)
 8001066:	2106      	movs	r1, #6
 8001068:	2000      	movs	r0, #0
 800106a:	f000 f9f9 	bl	8001460 <OLED_ShowString>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		key_num = KEY_Scan(0);
 800106e:	2000      	movs	r0, #0
 8001070:	f7ff ff2c 	bl	8000ecc <KEY_Scan>
 8001074:	4603      	mov	r3, r0
 8001076:	461a      	mov	r2, r3
 8001078:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <main+0xf4>)
 800107a:	701a      	strb	r2, [r3, #0]
		if (key_num == 1) {
 800107c:	4b1c      	ldr	r3, [pc, #112]	; (80010f0 <main+0xf4>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d106      	bne.n	8001092 <main+0x96>
			key_num = 0;
 8001084:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <main+0xf4>)
 8001086:	2200      	movs	r2, #0
 8001088:	701a      	strb	r2, [r3, #0]
			OLED_Clear();
 800108a:	f000 f8d1 	bl	8001230 <OLED_Clear>
			Add_FR();
 800108e:	f7ff fb2b 	bl	80006e8 <Add_FR>
		}
		if (key_num == 3) {
 8001092:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <main+0xf4>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b03      	cmp	r3, #3
 8001098:	d106      	bne.n	80010a8 <main+0xac>
			key_num = 0;
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <main+0xf4>)
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]
			OLED_Clear();
 80010a0:	f000 f8c6 	bl	8001230 <OLED_Clear>
			Del_FR();
 80010a4:	f7ff fd88 	bl	8000bb8 <Del_FR>
		}
		if (key_num == 5) {
 80010a8:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <main+0xf4>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b05      	cmp	r3, #5
 80010ae:	d1de      	bne.n	800106e <main+0x72>
			key_num = 0;
 80010b0:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <main+0xf4>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
			OLED_Clear();
 80010b6:	f000 f8bb 	bl	8001230 <OLED_Clear>
			OLED_ShowString(0, 2, "please press", 16, 0);
 80010ba:	2300      	movs	r3, #0
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	2310      	movs	r3, #16
 80010c0:	4a0c      	ldr	r2, [pc, #48]	; (80010f4 <main+0xf8>)
 80010c2:	2102      	movs	r1, #2
 80010c4:	2000      	movs	r0, #0
 80010c6:	f000 f9cb 	bl	8001460 <OLED_ShowString>
			OLED_ShowString(0, 4, "K1 back", 16, 0);
 80010ca:	2300      	movs	r3, #0
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	2310      	movs	r3, #16
 80010d0:	4a09      	ldr	r2, [pc, #36]	; (80010f8 <main+0xfc>)
 80010d2:	2104      	movs	r1, #4
 80010d4:	2000      	movs	r0, #0
 80010d6:	f000 f9c3 	bl	8001460 <OLED_ShowString>
			press_FR();
 80010da:	f7ff fcbf 	bl	8000a5c <press_FR>
		key_num = KEY_Scan(0);
 80010de:	e7c6      	b.n	800106e <main+0x72>
 80010e0:	08004bdc 	.word	0x08004bdc
 80010e4:	08004be4 	.word	0x08004be4
 80010e8:	08004bec 	.word	0x08004bec
 80010ec:	08004bf4 	.word	0x08004bf4
 80010f0:	2000027c 	.word	0x2000027c
 80010f4:	08004bfc 	.word	0x08004bfc
 80010f8:	08004c0c 	.word	0x08004c0c

080010fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b090      	sub	sp, #64	; 0x40
 8001100:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001102:	f107 0318 	add.w	r3, r7, #24
 8001106:	2228      	movs	r2, #40	; 0x28
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f002 fe96 	bl	8003e3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
 800111c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800111e:	2301      	movs	r3, #1
 8001120:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001122:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001126:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001128:	2300      	movs	r3, #0
 800112a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800112c:	2301      	movs	r3, #1
 800112e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001130:	2302      	movs	r3, #2
 8001132:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001134:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001138:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800113a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800113e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001140:	f107 0318 	add.w	r3, r7, #24
 8001144:	4618      	mov	r0, r3
 8001146:	f001 fc07 	bl	8002958 <HAL_RCC_OscConfig>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001150:	f000 f819 	bl	8001186 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001154:	230f      	movs	r3, #15
 8001156:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001158:	2302      	movs	r3, #2
 800115a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800115c:	2300      	movs	r3, #0
 800115e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001160:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001164:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	2102      	movs	r1, #2
 800116e:	4618      	mov	r0, r3
 8001170:	f001 fe74 	bl	8002e5c <HAL_RCC_ClockConfig>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800117a:	f000 f804 	bl	8001186 <Error_Handler>
  }
}
 800117e:	bf00      	nop
 8001180:	3740      	adds	r7, #64	; 0x40
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800118a:	bf00      	nop
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr
	...

08001194 <OLED_Init>:
 * @function: void OLED_Init(void)
 * @description: OLED初始化
 * @return {*}
 */
void OLED_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
	HAL_Delay(200);
 800119a:	20c8      	movs	r0, #200	; 0xc8
 800119c:	f000 fbb0 	bl	8001900 <HAL_Delay>

	uint8_t i = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	71fb      	strb	r3, [r7, #7]
	for(i=0; i<23; i++)
 80011a4:	2300      	movs	r3, #0
 80011a6:	71fb      	strb	r3, [r7, #7]
 80011a8:	e008      	b.n	80011bc <OLED_Init+0x28>
	{
		OLED_WR_CMD(CMD_Data[i]);
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	4a07      	ldr	r2, [pc, #28]	; (80011cc <OLED_Init+0x38>)
 80011ae:	5cd3      	ldrb	r3, [r2, r3]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f000 f80d 	bl	80011d0 <OLED_WR_CMD>
	for(i=0; i<23; i++)
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	3301      	adds	r3, #1
 80011ba:	71fb      	strb	r3, [r7, #7]
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	2b16      	cmp	r3, #22
 80011c0:	d9f3      	bls.n	80011aa <OLED_Init+0x16>
	}

}
 80011c2:	bf00      	nop
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000008 	.word	0x20000008

080011d0 <OLED_WR_CMD>:
 * @description: 向设备写控制命令
 * @param {uint8_t} cmd 芯片手册规定的命令
 * @return {*}
 */
void OLED_WR_CMD(uint8_t cmd)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af04      	add	r7, sp, #16
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1 ,0x78,0x00,I2C_MEMADD_SIZE_8BIT,&cmd,1,0x100);
 80011da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011de:	9302      	str	r3, [sp, #8]
 80011e0:	2301      	movs	r3, #1
 80011e2:	9301      	str	r3, [sp, #4]
 80011e4:	1dfb      	adds	r3, r7, #7
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	2301      	movs	r3, #1
 80011ea:	2200      	movs	r2, #0
 80011ec:	2178      	movs	r1, #120	; 0x78
 80011ee:	4803      	ldr	r0, [pc, #12]	; (80011fc <OLED_WR_CMD+0x2c>)
 80011f0:	f001 f84a 	bl	8002288 <HAL_I2C_Mem_Write>
}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000228 	.word	0x20000228

08001200 <OLED_WR_DATA>:
 * @description: 向设备写控制数据
 * @param {uint8_t} data 数据
 * @return {*}
 */
void OLED_WR_DATA(uint8_t data)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af04      	add	r7, sp, #16
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1 ,0x78,0x40,I2C_MEMADD_SIZE_8BIT,&data,1,0x100);
 800120a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800120e:	9302      	str	r3, [sp, #8]
 8001210:	2301      	movs	r3, #1
 8001212:	9301      	str	r3, [sp, #4]
 8001214:	1dfb      	adds	r3, r7, #7
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	2301      	movs	r3, #1
 800121a:	2240      	movs	r2, #64	; 0x40
 800121c:	2178      	movs	r1, #120	; 0x78
 800121e:	4803      	ldr	r0, [pc, #12]	; (800122c <OLED_WR_DATA+0x2c>)
 8001220:	f001 f832 	bl	8002288 <HAL_I2C_Mem_Write>
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000228 	.word	0x20000228

08001230 <OLED_Clear>:
 * @function: OLED_Clear(void)
 * @description: 清屏,整个屏幕是黑色的!和没点亮一样!!!
 * @return {*}
 */
void OLED_Clear(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)
 8001236:	2300      	movs	r3, #0
 8001238:	71fb      	strb	r3, [r7, #7]
 800123a:	e01b      	b.n	8001274 <OLED_Clear+0x44>
	{
		OLED_WR_CMD(0xb0+i);    //设置页地址（0~7）
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	3b50      	subs	r3, #80	; 0x50
 8001240:	b2db      	uxtb	r3, r3
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff ffc4 	bl	80011d0 <OLED_WR_CMD>
		OLED_WR_CMD(0x00);      //设置显示位置—列低地址
 8001248:	2000      	movs	r0, #0
 800124a:	f7ff ffc1 	bl	80011d0 <OLED_WR_CMD>
		OLED_WR_CMD(0x10);      //设置显示位置—列高地址
 800124e:	2010      	movs	r0, #16
 8001250:	f7ff ffbe 	bl	80011d0 <OLED_WR_CMD>
		for(n=0;n<128;n++)
 8001254:	2300      	movs	r3, #0
 8001256:	71bb      	strb	r3, [r7, #6]
 8001258:	e005      	b.n	8001266 <OLED_Clear+0x36>
			OLED_WR_DATA(0);
 800125a:	2000      	movs	r0, #0
 800125c:	f7ff ffd0 	bl	8001200 <OLED_WR_DATA>
		for(n=0;n<128;n++)
 8001260:	79bb      	ldrb	r3, [r7, #6]
 8001262:	3301      	adds	r3, #1
 8001264:	71bb      	strb	r3, [r7, #6]
 8001266:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800126a:	2b00      	cmp	r3, #0
 800126c:	daf5      	bge.n	800125a <OLED_Clear+0x2a>
	for(i=0;i<8;i++)
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	3301      	adds	r3, #1
 8001272:	71fb      	strb	r3, [r7, #7]
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	2b07      	cmp	r3, #7
 8001278:	d9e0      	bls.n	800123c <OLED_Clear+0xc>
	}
}
 800127a:	bf00      	nop
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <OLED_Set_Pos>:
 * @description: 坐标设置
 * @param {uint8_t} x,y
 * @return {*}
 */
void OLED_Set_Pos(uint8_t x, uint8_t y)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	460a      	mov	r2, r1
 800128e:	71fb      	strb	r3, [r7, #7]
 8001290:	4613      	mov	r3, r2
 8001292:	71bb      	strb	r3, [r7, #6]
	OLED_WR_CMD(0xb0+y);	//设置页地址（0~7）
 8001294:	79bb      	ldrb	r3, [r7, #6]
 8001296:	3b50      	subs	r3, #80	; 0x50
 8001298:	b2db      	uxtb	r3, r3
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff ff98 	bl	80011d0 <OLED_WR_CMD>
	OLED_WR_CMD(((x&0xf0)>>4)|0x10); //设置显示位置—列高地址
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	091b      	lsrs	r3, r3, #4
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f043 0310 	orr.w	r3, r3, #16
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff8f 	bl	80011d0 <OLED_WR_CMD>
	OLED_WR_CMD(x&0x0f);	//设置显示位置—列低地址
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	f003 030f 	and.w	r3, r3, #15
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff ff88 	bl	80011d0 <OLED_WR_CMD>
}
 80012c0:	bf00      	nop
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <oled_pow>:
 * @description: m^n函数
 * @param {uint8_t} m,n
 * @return {unsigned int} result
 */
unsigned int oled_pow(uint8_t m,uint8_t n)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	460a      	mov	r2, r1
 80012d2:	71fb      	strb	r3, [r7, #7]
 80012d4:	4613      	mov	r3, r2
 80012d6:	71bb      	strb	r3, [r7, #6]
	unsigned int result=1;
 80012d8:	2301      	movs	r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 80012dc:	e004      	b.n	80012e8 <oled_pow+0x20>
 80012de:	79fa      	ldrb	r2, [r7, #7]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	fb02 f303 	mul.w	r3, r2, r3
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	79bb      	ldrb	r3, [r7, #6]
 80012ea:	1e5a      	subs	r2, r3, #1
 80012ec:	71ba      	strb	r2, [r7, #6]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1f5      	bne.n	80012de <oled_pow+0x16>
	return result;
 80012f2:	68fb      	ldr	r3, [r7, #12]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr
	...

08001300 <OLED_ShowChar>:
 * @param {uint8_t} Char_Size待显示字符的字体大小,选择字体 16/12
 * @param {uint8_t} Color_Turn是否反相显示(1反相、0不反相)
 * @return {*}
 */
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t Char_Size,uint8_t Color_Turn)
{
 8001300:	b590      	push	{r4, r7, lr}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	4604      	mov	r4, r0
 8001308:	4608      	mov	r0, r1
 800130a:	4611      	mov	r1, r2
 800130c:	461a      	mov	r2, r3
 800130e:	4623      	mov	r3, r4
 8001310:	71fb      	strb	r3, [r7, #7]
 8001312:	4603      	mov	r3, r0
 8001314:	71bb      	strb	r3, [r7, #6]
 8001316:	460b      	mov	r3, r1
 8001318:	717b      	strb	r3, [r7, #5]
 800131a:	4613      	mov	r3, r2
 800131c:	713b      	strb	r3, [r7, #4]
	unsigned char c=0,i=0;
 800131e:	2300      	movs	r3, #0
 8001320:	73bb      	strb	r3, [r7, #14]
 8001322:	2300      	movs	r3, #0
 8001324:	73fb      	strb	r3, [r7, #15]
		c=chr-' ';//得到偏移后的值
 8001326:	797b      	ldrb	r3, [r7, #5]
 8001328:	3b20      	subs	r3, #32
 800132a:	73bb      	strb	r3, [r7, #14]
		if(x>128-1){x=0;y=y+2;}
 800132c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001330:	2b00      	cmp	r3, #0
 8001332:	da04      	bge.n	800133e <OLED_ShowChar+0x3e>
 8001334:	2300      	movs	r3, #0
 8001336:	71fb      	strb	r3, [r7, #7]
 8001338:	79bb      	ldrb	r3, [r7, #6]
 800133a:	3302      	adds	r3, #2
 800133c:	71bb      	strb	r3, [r7, #6]
		if(Char_Size ==16)
 800133e:	793b      	ldrb	r3, [r7, #4]
 8001340:	2b10      	cmp	r3, #16
 8001342:	d154      	bne.n	80013ee <OLED_ShowChar+0xee>
		{
			OLED_Set_Pos(x,y);
 8001344:	79ba      	ldrb	r2, [r7, #6]
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	4611      	mov	r1, r2
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff ff9a 	bl	8001284 <OLED_Set_Pos>
			for(i=0;i<8;i++)
 8001350:	2300      	movs	r3, #0
 8001352:	73fb      	strb	r3, [r7, #15]
 8001354:	e01b      	b.n	800138e <OLED_ShowChar+0x8e>
				{
				  if(Color_Turn)
 8001356:	f897 3020 	ldrb.w	r3, [r7, #32]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d00b      	beq.n	8001376 <OLED_ShowChar+0x76>
					  OLED_WR_DATA(~F8X16[c*16+i]);
 800135e:	7bbb      	ldrb	r3, [r7, #14]
 8001360:	011a      	lsls	r2, r3, #4
 8001362:	7bfb      	ldrb	r3, [r7, #15]
 8001364:	4413      	add	r3, r2
 8001366:	4a3c      	ldr	r2, [pc, #240]	; (8001458 <OLED_ShowChar+0x158>)
 8001368:	5cd3      	ldrb	r3, [r2, r3]
 800136a:	43db      	mvns	r3, r3
 800136c:	b2db      	uxtb	r3, r3
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff ff46 	bl	8001200 <OLED_WR_DATA>
 8001374:	e008      	b.n	8001388 <OLED_ShowChar+0x88>
				  else
					  OLED_WR_DATA(F8X16[c*16+i]);
 8001376:	7bbb      	ldrb	r3, [r7, #14]
 8001378:	011a      	lsls	r2, r3, #4
 800137a:	7bfb      	ldrb	r3, [r7, #15]
 800137c:	4413      	add	r3, r2
 800137e:	4a36      	ldr	r2, [pc, #216]	; (8001458 <OLED_ShowChar+0x158>)
 8001380:	5cd3      	ldrb	r3, [r2, r3]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff ff3c 	bl	8001200 <OLED_WR_DATA>
			for(i=0;i<8;i++)
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	3301      	adds	r3, #1
 800138c:	73fb      	strb	r3, [r7, #15]
 800138e:	7bfb      	ldrb	r3, [r7, #15]
 8001390:	2b07      	cmp	r3, #7
 8001392:	d9e0      	bls.n	8001356 <OLED_ShowChar+0x56>
				}
			OLED_Set_Pos(x,y+1);
 8001394:	79bb      	ldrb	r3, [r7, #6]
 8001396:	3301      	adds	r3, #1
 8001398:	b2da      	uxtb	r2, r3
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	4611      	mov	r1, r2
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff ff70 	bl	8001284 <OLED_Set_Pos>
			for(i=0;i<8;i++)
 80013a4:	2300      	movs	r3, #0
 80013a6:	73fb      	strb	r3, [r7, #15]
 80013a8:	e01d      	b.n	80013e6 <OLED_ShowChar+0xe6>
			    {
				  if(Color_Turn)
 80013aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d00c      	beq.n	80013cc <OLED_ShowChar+0xcc>
					  OLED_WR_DATA(~F8X16[c*16+i+8]);
 80013b2:	7bbb      	ldrb	r3, [r7, #14]
 80013b4:	011a      	lsls	r2, r3, #4
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
 80013b8:	4413      	add	r3, r2
 80013ba:	3308      	adds	r3, #8
 80013bc:	4a26      	ldr	r2, [pc, #152]	; (8001458 <OLED_ShowChar+0x158>)
 80013be:	5cd3      	ldrb	r3, [r2, r3]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff1b 	bl	8001200 <OLED_WR_DATA>
 80013ca:	e009      	b.n	80013e0 <OLED_ShowChar+0xe0>
				  else
					  OLED_WR_DATA(F8X16[c*16+i+8]);
 80013cc:	7bbb      	ldrb	r3, [r7, #14]
 80013ce:	011a      	lsls	r2, r3, #4
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
 80013d2:	4413      	add	r3, r2
 80013d4:	3308      	adds	r3, #8
 80013d6:	4a20      	ldr	r2, [pc, #128]	; (8001458 <OLED_ShowChar+0x158>)
 80013d8:	5cd3      	ldrb	r3, [r2, r3]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff ff10 	bl	8001200 <OLED_WR_DATA>
			for(i=0;i<8;i++)
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	3301      	adds	r3, #1
 80013e4:	73fb      	strb	r3, [r7, #15]
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
 80013e8:	2b07      	cmp	r3, #7
 80013ea:	d9de      	bls.n	80013aa <OLED_ShowChar+0xaa>
					  OLED_WR_DATA(~F6x8[c][i]);
				  else
					  OLED_WR_DATA(F6x8[c][i]);
			    }
		  }
}
 80013ec:	e02f      	b.n	800144e <OLED_ShowChar+0x14e>
				OLED_Set_Pos(x,y);
 80013ee:	79ba      	ldrb	r2, [r7, #6]
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	4611      	mov	r1, r2
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ff45 	bl	8001284 <OLED_Set_Pos>
				for(i=0;i<6;i++)
 80013fa:	2300      	movs	r3, #0
 80013fc:	73fb      	strb	r3, [r7, #15]
 80013fe:	e023      	b.n	8001448 <OLED_ShowChar+0x148>
				  if(Color_Turn)
 8001400:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d00f      	beq.n	8001428 <OLED_ShowChar+0x128>
					  OLED_WR_DATA(~F6x8[c][i]);
 8001408:	7bba      	ldrb	r2, [r7, #14]
 800140a:	7bf9      	ldrb	r1, [r7, #15]
 800140c:	4813      	ldr	r0, [pc, #76]	; (800145c <OLED_ShowChar+0x15c>)
 800140e:	4613      	mov	r3, r2
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	4413      	add	r3, r2
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	4403      	add	r3, r0
 8001418:	440b      	add	r3, r1
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	43db      	mvns	r3, r3
 800141e:	b2db      	uxtb	r3, r3
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff feed 	bl	8001200 <OLED_WR_DATA>
 8001426:	e00c      	b.n	8001442 <OLED_ShowChar+0x142>
					  OLED_WR_DATA(F6x8[c][i]);
 8001428:	7bba      	ldrb	r2, [r7, #14]
 800142a:	7bf9      	ldrb	r1, [r7, #15]
 800142c:	480b      	ldr	r0, [pc, #44]	; (800145c <OLED_ShowChar+0x15c>)
 800142e:	4613      	mov	r3, r2
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	4413      	add	r3, r2
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	4403      	add	r3, r0
 8001438:	440b      	add	r3, r1
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fedf 	bl	8001200 <OLED_WR_DATA>
				for(i=0;i<6;i++)
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	3301      	adds	r3, #1
 8001446:	73fb      	strb	r3, [r7, #15]
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	2b05      	cmp	r3, #5
 800144c:	d9d8      	bls.n	8001400 <OLED_ShowChar+0x100>
}
 800144e:	bf00      	nop
 8001450:	3714      	adds	r7, #20
 8001452:	46bd      	mov	sp, r7
 8001454:	bd90      	pop	{r4, r7, pc}
 8001456:	bf00      	nop
 8001458:	08004e3c 	.word	0x08004e3c
 800145c:	08004c14 	.word	0x08004c14

08001460 <OLED_ShowString>:
 * @param {uint8_t} Char_Size待显示字符串的字体大小,选择字体 16/12，16为8X16，12为6x8
 * @param {uint8_t} Color_Turn是否反相显示(1反相、0不反相)
 * @return {*}
 */
void OLED_ShowString(uint8_t x,uint8_t y,char*chr,uint8_t Char_Size, uint8_t Color_Turn)
{
 8001460:	b590      	push	{r4, r7, lr}
 8001462:	b087      	sub	sp, #28
 8001464:	af02      	add	r7, sp, #8
 8001466:	603a      	str	r2, [r7, #0]
 8001468:	461a      	mov	r2, r3
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
 800146e:	460b      	mov	r3, r1
 8001470:	71bb      	strb	r3, [r7, #6]
 8001472:	4613      	mov	r3, r2
 8001474:	717b      	strb	r3, [r7, #5]
	uint8_t  j=0;
 8001476:	2300      	movs	r3, #0
 8001478:	73fb      	strb	r3, [r7, #15]
	while (chr[j]!='\0')
 800147a:	e02f      	b.n	80014dc <OLED_ShowString+0x7c>
	{		OLED_ShowChar(x,y,chr[j],Char_Size, Color_Turn);
 800147c:	7bfb      	ldrb	r3, [r7, #15]
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	4413      	add	r3, r2
 8001482:	781a      	ldrb	r2, [r3, #0]
 8001484:	797c      	ldrb	r4, [r7, #5]
 8001486:	79b9      	ldrb	r1, [r7, #6]
 8001488:	79f8      	ldrb	r0, [r7, #7]
 800148a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	4623      	mov	r3, r4
 8001492:	f7ff ff35 	bl	8001300 <OLED_ShowChar>
			if (Char_Size == 12) //6X8的字体列加6，显示下一个字符
 8001496:	797b      	ldrb	r3, [r7, #5]
 8001498:	2b0c      	cmp	r3, #12
 800149a:	d103      	bne.n	80014a4 <OLED_ShowString+0x44>
				x += 6;
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	3306      	adds	r3, #6
 80014a0:	71fb      	strb	r3, [r7, #7]
 80014a2:	e002      	b.n	80014aa <OLED_ShowString+0x4a>
			else  //8X16的字体列加8，显示下一个字符
				x += 8;
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	3308      	adds	r3, #8
 80014a8:	71fb      	strb	r3, [r7, #7]

			if (x > 122 && Char_Size==12) //TextSize6x8如果一行不够显示了，从下一行继续显示
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	2b7a      	cmp	r3, #122	; 0x7a
 80014ae:	d907      	bls.n	80014c0 <OLED_ShowString+0x60>
 80014b0:	797b      	ldrb	r3, [r7, #5]
 80014b2:	2b0c      	cmp	r3, #12
 80014b4:	d104      	bne.n	80014c0 <OLED_ShowString+0x60>
			{
				x = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	71fb      	strb	r3, [r7, #7]
				y++;
 80014ba:	79bb      	ldrb	r3, [r7, #6]
 80014bc:	3301      	adds	r3, #1
 80014be:	71bb      	strb	r3, [r7, #6]
			}
			if (x > 120 && Char_Size== 16) //TextSize8x16如果一行不够显示了，从下一行继续显示
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	2b78      	cmp	r3, #120	; 0x78
 80014c4:	d907      	bls.n	80014d6 <OLED_ShowString+0x76>
 80014c6:	797b      	ldrb	r3, [r7, #5]
 80014c8:	2b10      	cmp	r3, #16
 80014ca:	d104      	bne.n	80014d6 <OLED_ShowString+0x76>
			{
				x = 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	71fb      	strb	r3, [r7, #7]
				y++;
 80014d0:	79bb      	ldrb	r3, [r7, #6]
 80014d2:	3301      	adds	r3, #1
 80014d4:	71bb      	strb	r3, [r7, #6]
			}
			j++;
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
 80014d8:	3301      	adds	r3, #1
 80014da:	73fb      	strb	r3, [r7, #15]
	while (chr[j]!='\0')
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	4413      	add	r3, r2
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d1c9      	bne.n	800147c <OLED_ShowString+0x1c>
	}
}
 80014e8:	bf00      	nop
 80014ea:	bf00      	nop
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd90      	pop	{r4, r7, pc}
	...

080014f4 <OLED_ShowNum>:
 * @param {uint8_t} size2:输入的数据大小，选择 16/12，16为8X16，12为6x8
 * @param {uint8_t} Color_Turn是否反相显示(1反相、0不反相)
 * @return {*}
 */
void OLED_ShowNum(uint8_t x,uint8_t y,unsigned int num,uint8_t len,uint8_t size2, uint8_t Color_Turn)
{
 80014f4:	b590      	push	{r4, r7, lr}
 80014f6:	b087      	sub	sp, #28
 80014f8:	af02      	add	r7, sp, #8
 80014fa:	603a      	str	r2, [r7, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
 8001502:	460b      	mov	r3, r1
 8001504:	71bb      	strb	r3, [r7, #6]
 8001506:	4613      	mov	r3, r2
 8001508:	717b      	strb	r3, [r7, #5]
	uint8_t t,temp;
	uint8_t enshow=0;
 800150a:	2300      	movs	r3, #0
 800150c:	73bb      	strb	r3, [r7, #14]
	for(t=0;t<len;t++)
 800150e:	2300      	movs	r3, #0
 8001510:	73fb      	strb	r3, [r7, #15]
 8001512:	e055      	b.n	80015c0 <OLED_ShowNum+0xcc>
	{
		temp=(num/oled_pow(10,len-t-1))%10;
 8001514:	797a      	ldrb	r2, [r7, #5]
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	b2db      	uxtb	r3, r3
 800151c:	3b01      	subs	r3, #1
 800151e:	b2db      	uxtb	r3, r3
 8001520:	4619      	mov	r1, r3
 8001522:	200a      	movs	r0, #10
 8001524:	f7ff fed0 	bl	80012c8 <oled_pow>
 8001528:	4602      	mov	r2, r0
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001530:	4b28      	ldr	r3, [pc, #160]	; (80015d4 <OLED_ShowNum+0xe0>)
 8001532:	fba3 2301 	umull	r2, r3, r3, r1
 8001536:	08da      	lsrs	r2, r3, #3
 8001538:	4613      	mov	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	1aca      	subs	r2, r1, r3
 8001542:	4613      	mov	r3, r2
 8001544:	737b      	strb	r3, [r7, #13]
		if(enshow==0&&t<(len-1))
 8001546:	7bbb      	ldrb	r3, [r7, #14]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d11f      	bne.n	800158c <OLED_ShowNum+0x98>
 800154c:	7bfa      	ldrb	r2, [r7, #15]
 800154e:	797b      	ldrb	r3, [r7, #5]
 8001550:	3b01      	subs	r3, #1
 8001552:	429a      	cmp	r2, r3
 8001554:	da1a      	bge.n	800158c <OLED_ShowNum+0x98>
		{
			if(temp==0)
 8001556:	7b7b      	ldrb	r3, [r7, #13]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d115      	bne.n	8001588 <OLED_ShowNum+0x94>
			{
				OLED_ShowChar(x+(size2/2)*t,y,' ',size2, Color_Turn);
 800155c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001560:	085b      	lsrs	r3, r3, #1
 8001562:	b2db      	uxtb	r3, r3
 8001564:	7bfa      	ldrb	r2, [r7, #15]
 8001566:	fb02 f303 	mul.w	r3, r2, r3
 800156a:	b2da      	uxtb	r2, r3
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	4413      	add	r3, r2
 8001570:	b2d8      	uxtb	r0, r3
 8001572:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001576:	79b9      	ldrb	r1, [r7, #6]
 8001578:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	4613      	mov	r3, r2
 8001580:	2220      	movs	r2, #32
 8001582:	f7ff febd 	bl	8001300 <OLED_ShowChar>
				continue;
 8001586:	e018      	b.n	80015ba <OLED_ShowNum+0xc6>
			}else enshow=1;
 8001588:	2301      	movs	r3, #1
 800158a:	73bb      	strb	r3, [r7, #14]

		}
	 	OLED_ShowChar(x+(size2/2)*t,y,temp+'0',size2, Color_Turn);
 800158c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001590:	085b      	lsrs	r3, r3, #1
 8001592:	b2db      	uxtb	r3, r3
 8001594:	7bfa      	ldrb	r2, [r7, #15]
 8001596:	fb02 f303 	mul.w	r3, r2, r3
 800159a:	b2da      	uxtb	r2, r3
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	4413      	add	r3, r2
 80015a0:	b2d8      	uxtb	r0, r3
 80015a2:	7b7b      	ldrb	r3, [r7, #13]
 80015a4:	3330      	adds	r3, #48	; 0x30
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	f897 4020 	ldrb.w	r4, [r7, #32]
 80015ac:	79b9      	ldrb	r1, [r7, #6]
 80015ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	4623      	mov	r3, r4
 80015b6:	f7ff fea3 	bl	8001300 <OLED_ShowChar>
	for(t=0;t<len;t++)
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
 80015bc:	3301      	adds	r3, #1
 80015be:	73fb      	strb	r3, [r7, #15]
 80015c0:	7bfa      	ldrb	r2, [r7, #15]
 80015c2:	797b      	ldrb	r3, [r7, #5]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d3a5      	bcc.n	8001514 <OLED_ShowNum+0x20>
	}
}
 80015c8:	bf00      	nop
 80015ca:	bf00      	nop
 80015cc:	3714      	adds	r7, #20
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd90      	pop	{r4, r7, pc}
 80015d2:	bf00      	nop
 80015d4:	cccccccd 	.word	0xcccccccd

080015d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <HAL_MspInit+0x40>)
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	4a0d      	ldr	r2, [pc, #52]	; (8001618 <HAL_MspInit+0x40>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6193      	str	r3, [r2, #24]
 80015ea:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <HAL_MspInit+0x40>)
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015f6:	4b08      	ldr	r3, [pc, #32]	; (8001618 <HAL_MspInit+0x40>)
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	4a07      	ldr	r2, [pc, #28]	; (8001618 <HAL_MspInit+0x40>)
 80015fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001600:	61d3      	str	r3, [r2, #28]
 8001602:	4b05      	ldr	r3, [pc, #20]	; (8001618 <HAL_MspInit+0x40>)
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr
 8001618:	40021000 	.word	0x40021000

0800161c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001620:	e7fe      	b.n	8001620 <NMI_Handler+0x4>

08001622 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001626:	e7fe      	b.n	8001626 <HardFault_Handler+0x4>

08001628 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800162c:	e7fe      	b.n	800162c <MemManage_Handler+0x4>

0800162e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001632:	e7fe      	b.n	8001632 <BusFault_Handler+0x4>

08001634 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001638:	e7fe      	b.n	8001638 <UsageFault_Handler+0x4>

0800163a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr

08001646 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	46bd      	mov	sp, r7
 800164e:	bc80      	pop	{r7}
 8001650:	4770      	bx	lr

08001652 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr

0800165e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001662:	f000 f931 	bl	80018c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001670:	4802      	ldr	r0, [pc, #8]	; (800167c <USART2_IRQHandler+0x10>)
 8001672:	f001 fe63 	bl	800333c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000284 	.word	0x20000284

08001680 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001688:	4a14      	ldr	r2, [pc, #80]	; (80016dc <_sbrk+0x5c>)
 800168a:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <_sbrk+0x60>)
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001694:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <_sbrk+0x64>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d102      	bne.n	80016a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800169c:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <_sbrk+0x64>)
 800169e:	4a12      	ldr	r2, [pc, #72]	; (80016e8 <_sbrk+0x68>)
 80016a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016a2:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <_sbrk+0x64>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4413      	add	r3, r2
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d207      	bcs.n	80016c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016b0:	f002 fbe2 	bl	8003e78 <__errno>
 80016b4:	4603      	mov	r3, r0
 80016b6:	220c      	movs	r2, #12
 80016b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ba:	f04f 33ff 	mov.w	r3, #4294967295
 80016be:	e009      	b.n	80016d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016c0:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <_sbrk+0x64>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016c6:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <_sbrk+0x64>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4413      	add	r3, r2
 80016ce:	4a05      	ldr	r2, [pc, #20]	; (80016e4 <_sbrk+0x64>)
 80016d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016d2:	68fb      	ldr	r3, [r7, #12]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20005000 	.word	0x20005000
 80016e0:	00000400 	.word	0x00000400
 80016e4:	20000280 	.word	0x20000280
 80016e8:	20000418 	.word	0x20000418

080016ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr

080016f8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <MX_USART2_UART_Init+0x4c>)
 80016fe:	4a12      	ldr	r2, [pc, #72]	; (8001748 <MX_USART2_UART_Init+0x50>)
 8001700:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8001702:	4b10      	ldr	r3, [pc, #64]	; (8001744 <MX_USART2_UART_Init+0x4c>)
 8001704:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001708:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800170a:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <MX_USART2_UART_Init+0x4c>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001710:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <MX_USART2_UART_Init+0x4c>)
 8001712:	2200      	movs	r2, #0
 8001714:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001716:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <MX_USART2_UART_Init+0x4c>)
 8001718:	2200      	movs	r2, #0
 800171a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800171c:	4b09      	ldr	r3, [pc, #36]	; (8001744 <MX_USART2_UART_Init+0x4c>)
 800171e:	220c      	movs	r2, #12
 8001720:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001722:	4b08      	ldr	r3, [pc, #32]	; (8001744 <MX_USART2_UART_Init+0x4c>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <MX_USART2_UART_Init+0x4c>)
 800172a:	2200      	movs	r2, #0
 800172c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800172e:	4805      	ldr	r0, [pc, #20]	; (8001744 <MX_USART2_UART_Init+0x4c>)
 8001730:	f001 fd22 	bl	8003178 <HAL_UART_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800173a:	f7ff fd24 	bl	8001186 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000284 	.word	0x20000284
 8001748:	40004400 	.word	0x40004400

0800174c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b088      	sub	sp, #32
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	f107 0310 	add.w	r3, r7, #16
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a1f      	ldr	r2, [pc, #124]	; (80017e4 <HAL_UART_MspInit+0x98>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d137      	bne.n	80017dc <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800176c:	4b1e      	ldr	r3, [pc, #120]	; (80017e8 <HAL_UART_MspInit+0x9c>)
 800176e:	69db      	ldr	r3, [r3, #28]
 8001770:	4a1d      	ldr	r2, [pc, #116]	; (80017e8 <HAL_UART_MspInit+0x9c>)
 8001772:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001776:	61d3      	str	r3, [r2, #28]
 8001778:	4b1b      	ldr	r3, [pc, #108]	; (80017e8 <HAL_UART_MspInit+0x9c>)
 800177a:	69db      	ldr	r3, [r3, #28]
 800177c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001784:	4b18      	ldr	r3, [pc, #96]	; (80017e8 <HAL_UART_MspInit+0x9c>)
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	4a17      	ldr	r2, [pc, #92]	; (80017e8 <HAL_UART_MspInit+0x9c>)
 800178a:	f043 0304 	orr.w	r3, r3, #4
 800178e:	6193      	str	r3, [r2, #24]
 8001790:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <HAL_UART_MspInit+0x9c>)
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800179c:	2304      	movs	r3, #4
 800179e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a0:	2302      	movs	r3, #2
 80017a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017a4:	2303      	movs	r3, #3
 80017a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a8:	f107 0310 	add.w	r3, r7, #16
 80017ac:	4619      	mov	r1, r3
 80017ae:	480f      	ldr	r0, [pc, #60]	; (80017ec <HAL_UART_MspInit+0xa0>)
 80017b0:	f000 fa8a 	bl	8001cc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017b4:	2308      	movs	r3, #8
 80017b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c0:	f107 0310 	add.w	r3, r7, #16
 80017c4:	4619      	mov	r1, r3
 80017c6:	4809      	ldr	r0, [pc, #36]	; (80017ec <HAL_UART_MspInit+0xa0>)
 80017c8:	f000 fa7e 	bl	8001cc8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017cc:	2200      	movs	r2, #0
 80017ce:	2100      	movs	r1, #0
 80017d0:	2026      	movs	r0, #38	; 0x26
 80017d2:	f000 f990 	bl	8001af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017d6:	2026      	movs	r0, #38	; 0x26
 80017d8:	f000 f9a9 	bl	8001b2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80017dc:	bf00      	nop
 80017de:	3720      	adds	r7, #32
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40004400 	.word	0x40004400
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40010800 	.word	0x40010800

080017f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017f0:	f7ff ff7c 	bl	80016ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017f4:	480b      	ldr	r0, [pc, #44]	; (8001824 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017f6:	490c      	ldr	r1, [pc, #48]	; (8001828 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017f8:	4a0c      	ldr	r2, [pc, #48]	; (800182c <LoopFillZerobss+0x16>)
  movs r3, #0
 80017fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017fc:	e002      	b.n	8001804 <LoopCopyDataInit>

080017fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001802:	3304      	adds	r3, #4

08001804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001808:	d3f9      	bcc.n	80017fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800180a:	4a09      	ldr	r2, [pc, #36]	; (8001830 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800180c:	4c09      	ldr	r4, [pc, #36]	; (8001834 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800180e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001810:	e001      	b.n	8001816 <LoopFillZerobss>

08001812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001814:	3204      	adds	r2, #4

08001816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001818:	d3fb      	bcc.n	8001812 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800181a:	f002 fb33 	bl	8003e84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800181e:	f7ff fbed 	bl	8000ffc <main>
  bx lr
 8001822:	4770      	bx	lr
  ldr r0, =_sdata
 8001824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001828:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800182c:	08005484 	.word	0x08005484
  ldr r2, =_sbss
 8001830:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001834:	20000418 	.word	0x20000418

08001838 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001838:	e7fe      	b.n	8001838 <ADC1_2_IRQHandler>
	...

0800183c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <HAL_Init+0x28>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a07      	ldr	r2, [pc, #28]	; (8001864 <HAL_Init+0x28>)
 8001846:	f043 0310 	orr.w	r3, r3, #16
 800184a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800184c:	2003      	movs	r0, #3
 800184e:	f000 f947 	bl	8001ae0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001852:	200f      	movs	r0, #15
 8001854:	f000 f808 	bl	8001868 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001858:	f7ff febe 	bl	80015d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40022000 	.word	0x40022000

08001868 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001870:	4b12      	ldr	r3, [pc, #72]	; (80018bc <HAL_InitTick+0x54>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <HAL_InitTick+0x58>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	4619      	mov	r1, r3
 800187a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800187e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001882:	fbb2 f3f3 	udiv	r3, r2, r3
 8001886:	4618      	mov	r0, r3
 8001888:	f000 f95f 	bl	8001b4a <HAL_SYSTICK_Config>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e00e      	b.n	80018b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b0f      	cmp	r3, #15
 800189a:	d80a      	bhi.n	80018b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800189c:	2200      	movs	r2, #0
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	f04f 30ff 	mov.w	r0, #4294967295
 80018a4:	f000 f927 	bl	8001af6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a8:	4a06      	ldr	r2, [pc, #24]	; (80018c4 <HAL_InitTick+0x5c>)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
 80018b0:	e000      	b.n	80018b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20000020 	.word	0x20000020
 80018c0:	20000028 	.word	0x20000028
 80018c4:	20000024 	.word	0x20000024

080018c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <HAL_IncTick+0x1c>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	461a      	mov	r2, r3
 80018d2:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <HAL_IncTick+0x20>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4413      	add	r3, r2
 80018d8:	4a03      	ldr	r2, [pc, #12]	; (80018e8 <HAL_IncTick+0x20>)
 80018da:	6013      	str	r3, [r2, #0]
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr
 80018e4:	20000028 	.word	0x20000028
 80018e8:	200002cc 	.word	0x200002cc

080018ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return uwTick;
 80018f0:	4b02      	ldr	r3, [pc, #8]	; (80018fc <HAL_GetTick+0x10>)
 80018f2:	681b      	ldr	r3, [r3, #0]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr
 80018fc:	200002cc 	.word	0x200002cc

08001900 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001908:	f7ff fff0 	bl	80018ec <HAL_GetTick>
 800190c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001918:	d005      	beq.n	8001926 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800191a:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <HAL_Delay+0x44>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	461a      	mov	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4413      	add	r3, r2
 8001924:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001926:	bf00      	nop
 8001928:	f7ff ffe0 	bl	80018ec <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	429a      	cmp	r2, r3
 8001936:	d8f7      	bhi.n	8001928 <HAL_Delay+0x28>
  {
  }
}
 8001938:	bf00      	nop
 800193a:	bf00      	nop
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000028 	.word	0x20000028

08001948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <__NVIC_SetPriorityGrouping+0x44>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800195e:	68ba      	ldr	r2, [r7, #8]
 8001960:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001964:	4013      	ands	r3, r2
 8001966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001970:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800197a:	4a04      	ldr	r2, [pc, #16]	; (800198c <__NVIC_SetPriorityGrouping+0x44>)
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	60d3      	str	r3, [r2, #12]
}
 8001980:	bf00      	nop
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001994:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	0a1b      	lsrs	r3, r3, #8
 800199a:	f003 0307 	and.w	r3, r3, #7
}
 800199e:	4618      	mov	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	db0b      	blt.n	80019d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	f003 021f 	and.w	r2, r3, #31
 80019c4:	4906      	ldr	r1, [pc, #24]	; (80019e0 <__NVIC_EnableIRQ+0x34>)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	095b      	lsrs	r3, r3, #5
 80019cc:	2001      	movs	r0, #1
 80019ce:	fa00 f202 	lsl.w	r2, r0, r2
 80019d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr
 80019e0:	e000e100 	.word	0xe000e100

080019e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	6039      	str	r1, [r7, #0]
 80019ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	db0a      	blt.n	8001a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	490c      	ldr	r1, [pc, #48]	; (8001a30 <__NVIC_SetPriority+0x4c>)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	0112      	lsls	r2, r2, #4
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	440b      	add	r3, r1
 8001a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a0c:	e00a      	b.n	8001a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	4908      	ldr	r1, [pc, #32]	; (8001a34 <__NVIC_SetPriority+0x50>)
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	f003 030f 	and.w	r3, r3, #15
 8001a1a:	3b04      	subs	r3, #4
 8001a1c:	0112      	lsls	r2, r2, #4
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	440b      	add	r3, r1
 8001a22:	761a      	strb	r2, [r3, #24]
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	e000e100 	.word	0xe000e100
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b089      	sub	sp, #36	; 0x24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	f1c3 0307 	rsb	r3, r3, #7
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	bf28      	it	cs
 8001a56:	2304      	movcs	r3, #4
 8001a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	2b06      	cmp	r3, #6
 8001a60:	d902      	bls.n	8001a68 <NVIC_EncodePriority+0x30>
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3b03      	subs	r3, #3
 8001a66:	e000      	b.n	8001a6a <NVIC_EncodePriority+0x32>
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43da      	mvns	r2, r3
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	401a      	ands	r2, r3
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a80:	f04f 31ff 	mov.w	r1, #4294967295
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8a:	43d9      	mvns	r1, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a90:	4313      	orrs	r3, r2
         );
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3724      	adds	r7, #36	; 0x24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr

08001a9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aac:	d301      	bcc.n	8001ab2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e00f      	b.n	8001ad2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ab2:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <SysTick_Config+0x40>)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aba:	210f      	movs	r1, #15
 8001abc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac0:	f7ff ff90 	bl	80019e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac4:	4b05      	ldr	r3, [pc, #20]	; (8001adc <SysTick_Config+0x40>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aca:	4b04      	ldr	r3, [pc, #16]	; (8001adc <SysTick_Config+0x40>)
 8001acc:	2207      	movs	r2, #7
 8001ace:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	e000e010 	.word	0xe000e010

08001ae0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7ff ff2d 	bl	8001948 <__NVIC_SetPriorityGrouping>
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b086      	sub	sp, #24
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	4603      	mov	r3, r0
 8001afe:	60b9      	str	r1, [r7, #8]
 8001b00:	607a      	str	r2, [r7, #4]
 8001b02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b08:	f7ff ff42 	bl	8001990 <__NVIC_GetPriorityGrouping>
 8001b0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	68b9      	ldr	r1, [r7, #8]
 8001b12:	6978      	ldr	r0, [r7, #20]
 8001b14:	f7ff ff90 	bl	8001a38 <NVIC_EncodePriority>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b1e:	4611      	mov	r1, r2
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ff5f 	bl	80019e4 <__NVIC_SetPriority>
}
 8001b26:	bf00      	nop
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	4603      	mov	r3, r0
 8001b36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff ff35 	bl	80019ac <__NVIC_EnableIRQ>
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff ffa2 	bl	8001a9c <SysTick_Config>
 8001b58:	4603      	mov	r3, r0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b085      	sub	sp, #20
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d008      	beq.n	8001b8c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2204      	movs	r2, #4
 8001b7e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e020      	b.n	8001bce <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 020e 	bic.w	r2, r2, #14
 8001b9a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 0201 	bic.w	r2, r2, #1
 8001baa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bba:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001be0:	2300      	movs	r3, #0
 8001be2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d005      	beq.n	8001bfc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2204      	movs	r2, #4
 8001bf4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	73fb      	strb	r3, [r7, #15]
 8001bfa:	e051      	b.n	8001ca0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 020e 	bic.w	r2, r2, #14
 8001c0a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 0201 	bic.w	r2, r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a22      	ldr	r2, [pc, #136]	; (8001cac <HAL_DMA_Abort_IT+0xd4>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d029      	beq.n	8001c7a <HAL_DMA_Abort_IT+0xa2>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a21      	ldr	r2, [pc, #132]	; (8001cb0 <HAL_DMA_Abort_IT+0xd8>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d022      	beq.n	8001c76 <HAL_DMA_Abort_IT+0x9e>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a1f      	ldr	r2, [pc, #124]	; (8001cb4 <HAL_DMA_Abort_IT+0xdc>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d01a      	beq.n	8001c70 <HAL_DMA_Abort_IT+0x98>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a1e      	ldr	r2, [pc, #120]	; (8001cb8 <HAL_DMA_Abort_IT+0xe0>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d012      	beq.n	8001c6a <HAL_DMA_Abort_IT+0x92>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a1c      	ldr	r2, [pc, #112]	; (8001cbc <HAL_DMA_Abort_IT+0xe4>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d00a      	beq.n	8001c64 <HAL_DMA_Abort_IT+0x8c>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a1b      	ldr	r2, [pc, #108]	; (8001cc0 <HAL_DMA_Abort_IT+0xe8>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d102      	bne.n	8001c5e <HAL_DMA_Abort_IT+0x86>
 8001c58:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c5c:	e00e      	b.n	8001c7c <HAL_DMA_Abort_IT+0xa4>
 8001c5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c62:	e00b      	b.n	8001c7c <HAL_DMA_Abort_IT+0xa4>
 8001c64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c68:	e008      	b.n	8001c7c <HAL_DMA_Abort_IT+0xa4>
 8001c6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c6e:	e005      	b.n	8001c7c <HAL_DMA_Abort_IT+0xa4>
 8001c70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c74:	e002      	b.n	8001c7c <HAL_DMA_Abort_IT+0xa4>
 8001c76:	2310      	movs	r3, #16
 8001c78:	e000      	b.n	8001c7c <HAL_DMA_Abort_IT+0xa4>
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	4a11      	ldr	r2, [pc, #68]	; (8001cc4 <HAL_DMA_Abort_IT+0xec>)
 8001c7e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	4798      	blx	r3
    } 
  }
  return status;
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40020008 	.word	0x40020008
 8001cb0:	4002001c 	.word	0x4002001c
 8001cb4:	40020030 	.word	0x40020030
 8001cb8:	40020044 	.word	0x40020044
 8001cbc:	40020058 	.word	0x40020058
 8001cc0:	4002006c 	.word	0x4002006c
 8001cc4:	40020000 	.word	0x40020000

08001cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b08b      	sub	sp, #44	; 0x2c
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cda:	e169      	b.n	8001fb0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cdc:	2201      	movs	r2, #1
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	69fa      	ldr	r2, [r7, #28]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	f040 8158 	bne.w	8001faa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	4a9a      	ldr	r2, [pc, #616]	; (8001f68 <HAL_GPIO_Init+0x2a0>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d05e      	beq.n	8001dc2 <HAL_GPIO_Init+0xfa>
 8001d04:	4a98      	ldr	r2, [pc, #608]	; (8001f68 <HAL_GPIO_Init+0x2a0>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d875      	bhi.n	8001df6 <HAL_GPIO_Init+0x12e>
 8001d0a:	4a98      	ldr	r2, [pc, #608]	; (8001f6c <HAL_GPIO_Init+0x2a4>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d058      	beq.n	8001dc2 <HAL_GPIO_Init+0xfa>
 8001d10:	4a96      	ldr	r2, [pc, #600]	; (8001f6c <HAL_GPIO_Init+0x2a4>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d86f      	bhi.n	8001df6 <HAL_GPIO_Init+0x12e>
 8001d16:	4a96      	ldr	r2, [pc, #600]	; (8001f70 <HAL_GPIO_Init+0x2a8>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d052      	beq.n	8001dc2 <HAL_GPIO_Init+0xfa>
 8001d1c:	4a94      	ldr	r2, [pc, #592]	; (8001f70 <HAL_GPIO_Init+0x2a8>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d869      	bhi.n	8001df6 <HAL_GPIO_Init+0x12e>
 8001d22:	4a94      	ldr	r2, [pc, #592]	; (8001f74 <HAL_GPIO_Init+0x2ac>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d04c      	beq.n	8001dc2 <HAL_GPIO_Init+0xfa>
 8001d28:	4a92      	ldr	r2, [pc, #584]	; (8001f74 <HAL_GPIO_Init+0x2ac>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d863      	bhi.n	8001df6 <HAL_GPIO_Init+0x12e>
 8001d2e:	4a92      	ldr	r2, [pc, #584]	; (8001f78 <HAL_GPIO_Init+0x2b0>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d046      	beq.n	8001dc2 <HAL_GPIO_Init+0xfa>
 8001d34:	4a90      	ldr	r2, [pc, #576]	; (8001f78 <HAL_GPIO_Init+0x2b0>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d85d      	bhi.n	8001df6 <HAL_GPIO_Init+0x12e>
 8001d3a:	2b12      	cmp	r3, #18
 8001d3c:	d82a      	bhi.n	8001d94 <HAL_GPIO_Init+0xcc>
 8001d3e:	2b12      	cmp	r3, #18
 8001d40:	d859      	bhi.n	8001df6 <HAL_GPIO_Init+0x12e>
 8001d42:	a201      	add	r2, pc, #4	; (adr r2, 8001d48 <HAL_GPIO_Init+0x80>)
 8001d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d48:	08001dc3 	.word	0x08001dc3
 8001d4c:	08001d9d 	.word	0x08001d9d
 8001d50:	08001daf 	.word	0x08001daf
 8001d54:	08001df1 	.word	0x08001df1
 8001d58:	08001df7 	.word	0x08001df7
 8001d5c:	08001df7 	.word	0x08001df7
 8001d60:	08001df7 	.word	0x08001df7
 8001d64:	08001df7 	.word	0x08001df7
 8001d68:	08001df7 	.word	0x08001df7
 8001d6c:	08001df7 	.word	0x08001df7
 8001d70:	08001df7 	.word	0x08001df7
 8001d74:	08001df7 	.word	0x08001df7
 8001d78:	08001df7 	.word	0x08001df7
 8001d7c:	08001df7 	.word	0x08001df7
 8001d80:	08001df7 	.word	0x08001df7
 8001d84:	08001df7 	.word	0x08001df7
 8001d88:	08001df7 	.word	0x08001df7
 8001d8c:	08001da5 	.word	0x08001da5
 8001d90:	08001db9 	.word	0x08001db9
 8001d94:	4a79      	ldr	r2, [pc, #484]	; (8001f7c <HAL_GPIO_Init+0x2b4>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d013      	beq.n	8001dc2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d9a:	e02c      	b.n	8001df6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	623b      	str	r3, [r7, #32]
          break;
 8001da2:	e029      	b.n	8001df8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	3304      	adds	r3, #4
 8001daa:	623b      	str	r3, [r7, #32]
          break;
 8001dac:	e024      	b.n	8001df8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	3308      	adds	r3, #8
 8001db4:	623b      	str	r3, [r7, #32]
          break;
 8001db6:	e01f      	b.n	8001df8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	330c      	adds	r3, #12
 8001dbe:	623b      	str	r3, [r7, #32]
          break;
 8001dc0:	e01a      	b.n	8001df8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d102      	bne.n	8001dd0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dca:	2304      	movs	r3, #4
 8001dcc:	623b      	str	r3, [r7, #32]
          break;
 8001dce:	e013      	b.n	8001df8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d105      	bne.n	8001de4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dd8:	2308      	movs	r3, #8
 8001dda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	69fa      	ldr	r2, [r7, #28]
 8001de0:	611a      	str	r2, [r3, #16]
          break;
 8001de2:	e009      	b.n	8001df8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001de4:	2308      	movs	r3, #8
 8001de6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	69fa      	ldr	r2, [r7, #28]
 8001dec:	615a      	str	r2, [r3, #20]
          break;
 8001dee:	e003      	b.n	8001df8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001df0:	2300      	movs	r3, #0
 8001df2:	623b      	str	r3, [r7, #32]
          break;
 8001df4:	e000      	b.n	8001df8 <HAL_GPIO_Init+0x130>
          break;
 8001df6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	2bff      	cmp	r3, #255	; 0xff
 8001dfc:	d801      	bhi.n	8001e02 <HAL_GPIO_Init+0x13a>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	e001      	b.n	8001e06 <HAL_GPIO_Init+0x13e>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	3304      	adds	r3, #4
 8001e06:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	2bff      	cmp	r3, #255	; 0xff
 8001e0c:	d802      	bhi.n	8001e14 <HAL_GPIO_Init+0x14c>
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	e002      	b.n	8001e1a <HAL_GPIO_Init+0x152>
 8001e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e16:	3b08      	subs	r3, #8
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	210f      	movs	r1, #15
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	fa01 f303 	lsl.w	r3, r1, r3
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	401a      	ands	r2, r3
 8001e2c:	6a39      	ldr	r1, [r7, #32]
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	fa01 f303 	lsl.w	r3, r1, r3
 8001e34:	431a      	orrs	r2, r3
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 80b1 	beq.w	8001faa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e48:	4b4d      	ldr	r3, [pc, #308]	; (8001f80 <HAL_GPIO_Init+0x2b8>)
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	4a4c      	ldr	r2, [pc, #304]	; (8001f80 <HAL_GPIO_Init+0x2b8>)
 8001e4e:	f043 0301 	orr.w	r3, r3, #1
 8001e52:	6193      	str	r3, [r2, #24]
 8001e54:	4b4a      	ldr	r3, [pc, #296]	; (8001f80 <HAL_GPIO_Init+0x2b8>)
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e60:	4a48      	ldr	r2, [pc, #288]	; (8001f84 <HAL_GPIO_Init+0x2bc>)
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	089b      	lsrs	r3, r3, #2
 8001e66:	3302      	adds	r3, #2
 8001e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e6c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	f003 0303 	and.w	r3, r3, #3
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	220f      	movs	r2, #15
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	4013      	ands	r3, r2
 8001e82:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a40      	ldr	r2, [pc, #256]	; (8001f88 <HAL_GPIO_Init+0x2c0>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d013      	beq.n	8001eb4 <HAL_GPIO_Init+0x1ec>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a3f      	ldr	r2, [pc, #252]	; (8001f8c <HAL_GPIO_Init+0x2c4>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d00d      	beq.n	8001eb0 <HAL_GPIO_Init+0x1e8>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a3e      	ldr	r2, [pc, #248]	; (8001f90 <HAL_GPIO_Init+0x2c8>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d007      	beq.n	8001eac <HAL_GPIO_Init+0x1e4>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a3d      	ldr	r2, [pc, #244]	; (8001f94 <HAL_GPIO_Init+0x2cc>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d101      	bne.n	8001ea8 <HAL_GPIO_Init+0x1e0>
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e006      	b.n	8001eb6 <HAL_GPIO_Init+0x1ee>
 8001ea8:	2304      	movs	r3, #4
 8001eaa:	e004      	b.n	8001eb6 <HAL_GPIO_Init+0x1ee>
 8001eac:	2302      	movs	r3, #2
 8001eae:	e002      	b.n	8001eb6 <HAL_GPIO_Init+0x1ee>
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e000      	b.n	8001eb6 <HAL_GPIO_Init+0x1ee>
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eb8:	f002 0203 	and.w	r2, r2, #3
 8001ebc:	0092      	lsls	r2, r2, #2
 8001ebe:	4093      	lsls	r3, r2
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ec6:	492f      	ldr	r1, [pc, #188]	; (8001f84 <HAL_GPIO_Init+0x2bc>)
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	089b      	lsrs	r3, r3, #2
 8001ecc:	3302      	adds	r3, #2
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d006      	beq.n	8001eee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ee0:	4b2d      	ldr	r3, [pc, #180]	; (8001f98 <HAL_GPIO_Init+0x2d0>)
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	492c      	ldr	r1, [pc, #176]	; (8001f98 <HAL_GPIO_Init+0x2d0>)
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	608b      	str	r3, [r1, #8]
 8001eec:	e006      	b.n	8001efc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001eee:	4b2a      	ldr	r3, [pc, #168]	; (8001f98 <HAL_GPIO_Init+0x2d0>)
 8001ef0:	689a      	ldr	r2, [r3, #8]
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	4928      	ldr	r1, [pc, #160]	; (8001f98 <HAL_GPIO_Init+0x2d0>)
 8001ef8:	4013      	ands	r3, r2
 8001efa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d006      	beq.n	8001f16 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f08:	4b23      	ldr	r3, [pc, #140]	; (8001f98 <HAL_GPIO_Init+0x2d0>)
 8001f0a:	68da      	ldr	r2, [r3, #12]
 8001f0c:	4922      	ldr	r1, [pc, #136]	; (8001f98 <HAL_GPIO_Init+0x2d0>)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	60cb      	str	r3, [r1, #12]
 8001f14:	e006      	b.n	8001f24 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f16:	4b20      	ldr	r3, [pc, #128]	; (8001f98 <HAL_GPIO_Init+0x2d0>)
 8001f18:	68da      	ldr	r2, [r3, #12]
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	491e      	ldr	r1, [pc, #120]	; (8001f98 <HAL_GPIO_Init+0x2d0>)
 8001f20:	4013      	ands	r3, r2
 8001f22:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d006      	beq.n	8001f3e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f30:	4b19      	ldr	r3, [pc, #100]	; (8001f98 <HAL_GPIO_Init+0x2d0>)
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	4918      	ldr	r1, [pc, #96]	; (8001f98 <HAL_GPIO_Init+0x2d0>)
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	604b      	str	r3, [r1, #4]
 8001f3c:	e006      	b.n	8001f4c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f3e:	4b16      	ldr	r3, [pc, #88]	; (8001f98 <HAL_GPIO_Init+0x2d0>)
 8001f40:	685a      	ldr	r2, [r3, #4]
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	43db      	mvns	r3, r3
 8001f46:	4914      	ldr	r1, [pc, #80]	; (8001f98 <HAL_GPIO_Init+0x2d0>)
 8001f48:	4013      	ands	r3, r2
 8001f4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d021      	beq.n	8001f9c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f58:	4b0f      	ldr	r3, [pc, #60]	; (8001f98 <HAL_GPIO_Init+0x2d0>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	490e      	ldr	r1, [pc, #56]	; (8001f98 <HAL_GPIO_Init+0x2d0>)
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	600b      	str	r3, [r1, #0]
 8001f64:	e021      	b.n	8001faa <HAL_GPIO_Init+0x2e2>
 8001f66:	bf00      	nop
 8001f68:	10320000 	.word	0x10320000
 8001f6c:	10310000 	.word	0x10310000
 8001f70:	10220000 	.word	0x10220000
 8001f74:	10210000 	.word	0x10210000
 8001f78:	10120000 	.word	0x10120000
 8001f7c:	10110000 	.word	0x10110000
 8001f80:	40021000 	.word	0x40021000
 8001f84:	40010000 	.word	0x40010000
 8001f88:	40010800 	.word	0x40010800
 8001f8c:	40010c00 	.word	0x40010c00
 8001f90:	40011000 	.word	0x40011000
 8001f94:	40011400 	.word	0x40011400
 8001f98:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <HAL_GPIO_Init+0x304>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	4909      	ldr	r1, [pc, #36]	; (8001fcc <HAL_GPIO_Init+0x304>)
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	3301      	adds	r3, #1
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f47f ae8e 	bne.w	8001cdc <HAL_GPIO_Init+0x14>
  }
}
 8001fc0:	bf00      	nop
 8001fc2:	bf00      	nop
 8001fc4:	372c      	adds	r7, #44	; 0x2c
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr
 8001fcc:	40010400 	.word	0x40010400

08001fd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	887b      	ldrh	r3, [r7, #2]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d002      	beq.n	8001fee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	73fb      	strb	r3, [r7, #15]
 8001fec:	e001      	b.n	8001ff2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3714      	adds	r7, #20
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bc80      	pop	{r7}
 8001ffc:	4770      	bx	lr
	...

08002000 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e12b      	b.n	800226a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d106      	bne.n	800202c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7fe ff12 	bl	8000e50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2224      	movs	r2, #36	; 0x24
 8002030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0201 	bic.w	r2, r2, #1
 8002042:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002052:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002062:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002064:	f001 f842 	bl	80030ec <HAL_RCC_GetPCLK1Freq>
 8002068:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	4a81      	ldr	r2, [pc, #516]	; (8002274 <HAL_I2C_Init+0x274>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d807      	bhi.n	8002084 <HAL_I2C_Init+0x84>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4a80      	ldr	r2, [pc, #512]	; (8002278 <HAL_I2C_Init+0x278>)
 8002078:	4293      	cmp	r3, r2
 800207a:	bf94      	ite	ls
 800207c:	2301      	movls	r3, #1
 800207e:	2300      	movhi	r3, #0
 8002080:	b2db      	uxtb	r3, r3
 8002082:	e006      	b.n	8002092 <HAL_I2C_Init+0x92>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	4a7d      	ldr	r2, [pc, #500]	; (800227c <HAL_I2C_Init+0x27c>)
 8002088:	4293      	cmp	r3, r2
 800208a:	bf94      	ite	ls
 800208c:	2301      	movls	r3, #1
 800208e:	2300      	movhi	r3, #0
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e0e7      	b.n	800226a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	4a78      	ldr	r2, [pc, #480]	; (8002280 <HAL_I2C_Init+0x280>)
 800209e:	fba2 2303 	umull	r2, r3, r2, r3
 80020a2:	0c9b      	lsrs	r3, r3, #18
 80020a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68ba      	ldr	r2, [r7, #8]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	4a6a      	ldr	r2, [pc, #424]	; (8002274 <HAL_I2C_Init+0x274>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d802      	bhi.n	80020d4 <HAL_I2C_Init+0xd4>
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	3301      	adds	r3, #1
 80020d2:	e009      	b.n	80020e8 <HAL_I2C_Init+0xe8>
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020da:	fb02 f303 	mul.w	r3, r2, r3
 80020de:	4a69      	ldr	r2, [pc, #420]	; (8002284 <HAL_I2C_Init+0x284>)
 80020e0:	fba2 2303 	umull	r2, r3, r2, r3
 80020e4:	099b      	lsrs	r3, r3, #6
 80020e6:	3301      	adds	r3, #1
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6812      	ldr	r2, [r2, #0]
 80020ec:	430b      	orrs	r3, r1
 80020ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	495c      	ldr	r1, [pc, #368]	; (8002274 <HAL_I2C_Init+0x274>)
 8002104:	428b      	cmp	r3, r1
 8002106:	d819      	bhi.n	800213c <HAL_I2C_Init+0x13c>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	1e59      	subs	r1, r3, #1
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	fbb1 f3f3 	udiv	r3, r1, r3
 8002116:	1c59      	adds	r1, r3, #1
 8002118:	f640 73fc 	movw	r3, #4092	; 0xffc
 800211c:	400b      	ands	r3, r1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00a      	beq.n	8002138 <HAL_I2C_Init+0x138>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	1e59      	subs	r1, r3, #1
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002130:	3301      	adds	r3, #1
 8002132:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002136:	e051      	b.n	80021dc <HAL_I2C_Init+0x1dc>
 8002138:	2304      	movs	r3, #4
 800213a:	e04f      	b.n	80021dc <HAL_I2C_Init+0x1dc>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d111      	bne.n	8002168 <HAL_I2C_Init+0x168>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	1e58      	subs	r0, r3, #1
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6859      	ldr	r1, [r3, #4]
 800214c:	460b      	mov	r3, r1
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	440b      	add	r3, r1
 8002152:	fbb0 f3f3 	udiv	r3, r0, r3
 8002156:	3301      	adds	r3, #1
 8002158:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800215c:	2b00      	cmp	r3, #0
 800215e:	bf0c      	ite	eq
 8002160:	2301      	moveq	r3, #1
 8002162:	2300      	movne	r3, #0
 8002164:	b2db      	uxtb	r3, r3
 8002166:	e012      	b.n	800218e <HAL_I2C_Init+0x18e>
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	1e58      	subs	r0, r3, #1
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6859      	ldr	r1, [r3, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	0099      	lsls	r1, r3, #2
 8002178:	440b      	add	r3, r1
 800217a:	fbb0 f3f3 	udiv	r3, r0, r3
 800217e:	3301      	adds	r3, #1
 8002180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002184:	2b00      	cmp	r3, #0
 8002186:	bf0c      	ite	eq
 8002188:	2301      	moveq	r3, #1
 800218a:	2300      	movne	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <HAL_I2C_Init+0x196>
 8002192:	2301      	movs	r3, #1
 8002194:	e022      	b.n	80021dc <HAL_I2C_Init+0x1dc>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d10e      	bne.n	80021bc <HAL_I2C_Init+0x1bc>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	1e58      	subs	r0, r3, #1
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6859      	ldr	r1, [r3, #4]
 80021a6:	460b      	mov	r3, r1
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	440b      	add	r3, r1
 80021ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80021b0:	3301      	adds	r3, #1
 80021b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021ba:	e00f      	b.n	80021dc <HAL_I2C_Init+0x1dc>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	1e58      	subs	r0, r3, #1
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6859      	ldr	r1, [r3, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	440b      	add	r3, r1
 80021ca:	0099      	lsls	r1, r3, #2
 80021cc:	440b      	add	r3, r1
 80021ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80021d2:	3301      	adds	r3, #1
 80021d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021dc:	6879      	ldr	r1, [r7, #4]
 80021de:	6809      	ldr	r1, [r1, #0]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	69da      	ldr	r2, [r3, #28]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800220a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6911      	ldr	r1, [r2, #16]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	68d2      	ldr	r2, [r2, #12]
 8002216:	4311      	orrs	r1, r2
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6812      	ldr	r2, [r2, #0]
 800221c:	430b      	orrs	r3, r1
 800221e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	695a      	ldr	r2, [r3, #20]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	431a      	orrs	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	430a      	orrs	r2, r1
 800223a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f042 0201 	orr.w	r2, r2, #1
 800224a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2220      	movs	r2, #32
 8002256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	000186a0 	.word	0x000186a0
 8002278:	001e847f 	.word	0x001e847f
 800227c:	003d08ff 	.word	0x003d08ff
 8002280:	431bde83 	.word	0x431bde83
 8002284:	10624dd3 	.word	0x10624dd3

08002288 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b088      	sub	sp, #32
 800228c:	af02      	add	r7, sp, #8
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	4608      	mov	r0, r1
 8002292:	4611      	mov	r1, r2
 8002294:	461a      	mov	r2, r3
 8002296:	4603      	mov	r3, r0
 8002298:	817b      	strh	r3, [r7, #10]
 800229a:	460b      	mov	r3, r1
 800229c:	813b      	strh	r3, [r7, #8]
 800229e:	4613      	mov	r3, r2
 80022a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022a2:	f7ff fb23 	bl	80018ec <HAL_GetTick>
 80022a6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b20      	cmp	r3, #32
 80022b2:	f040 80d9 	bne.w	8002468 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	2319      	movs	r3, #25
 80022bc:	2201      	movs	r2, #1
 80022be:	496d      	ldr	r1, [pc, #436]	; (8002474 <HAL_I2C_Mem_Write+0x1ec>)
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f000 f971 	bl	80025a8 <I2C_WaitOnFlagUntilTimeout>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80022cc:	2302      	movs	r3, #2
 80022ce:	e0cc      	b.n	800246a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d101      	bne.n	80022de <HAL_I2C_Mem_Write+0x56>
 80022da:	2302      	movs	r3, #2
 80022dc:	e0c5      	b.n	800246a <HAL_I2C_Mem_Write+0x1e2>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d007      	beq.n	8002304 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f042 0201 	orr.w	r2, r2, #1
 8002302:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002312:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2221      	movs	r2, #33	; 0x21
 8002318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2240      	movs	r2, #64	; 0x40
 8002320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6a3a      	ldr	r2, [r7, #32]
 800232e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002334:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800233a:	b29a      	uxth	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	4a4d      	ldr	r2, [pc, #308]	; (8002478 <HAL_I2C_Mem_Write+0x1f0>)
 8002344:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002346:	88f8      	ldrh	r0, [r7, #6]
 8002348:	893a      	ldrh	r2, [r7, #8]
 800234a:	8979      	ldrh	r1, [r7, #10]
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	9301      	str	r3, [sp, #4]
 8002350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002352:	9300      	str	r3, [sp, #0]
 8002354:	4603      	mov	r3, r0
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f000 f890 	bl	800247c <I2C_RequestMemoryWrite>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d052      	beq.n	8002408 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e081      	b.n	800246a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f000 fa36 	bl	80027dc <I2C_WaitOnTXEFlagUntilTimeout>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00d      	beq.n	8002392 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	2b04      	cmp	r3, #4
 800237c:	d107      	bne.n	800238e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800238c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e06b      	b.n	800246a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	781a      	ldrb	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a2:	1c5a      	adds	r2, r3, #1
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ac:	3b01      	subs	r3, #1
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	3b01      	subs	r3, #1
 80023bc:	b29a      	uxth	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	695b      	ldr	r3, [r3, #20]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	d11b      	bne.n	8002408 <HAL_I2C_Mem_Write+0x180>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d017      	beq.n	8002408 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023dc:	781a      	ldrb	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e8:	1c5a      	adds	r2, r3, #1
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f2:	3b01      	subs	r3, #1
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fe:	b29b      	uxth	r3, r3
 8002400:	3b01      	subs	r3, #1
 8002402:	b29a      	uxth	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1aa      	bne.n	8002366 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f000 fa29 	bl	800286c <I2C_WaitOnBTFFlagUntilTimeout>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00d      	beq.n	800243c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002424:	2b04      	cmp	r3, #4
 8002426:	d107      	bne.n	8002438 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002436:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e016      	b.n	800246a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800244a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2220      	movs	r2, #32
 8002450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002464:	2300      	movs	r3, #0
 8002466:	e000      	b.n	800246a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002468:	2302      	movs	r3, #2
  }
}
 800246a:	4618      	mov	r0, r3
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	00100002 	.word	0x00100002
 8002478:	ffff0000 	.word	0xffff0000

0800247c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b088      	sub	sp, #32
 8002480:	af02      	add	r7, sp, #8
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	4608      	mov	r0, r1
 8002486:	4611      	mov	r1, r2
 8002488:	461a      	mov	r2, r3
 800248a:	4603      	mov	r3, r0
 800248c:	817b      	strh	r3, [r7, #10]
 800248e:	460b      	mov	r3, r1
 8002490:	813b      	strh	r3, [r7, #8]
 8002492:	4613      	mov	r3, r2
 8002494:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	6a3b      	ldr	r3, [r7, #32]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 f878 	bl	80025a8 <I2C_WaitOnFlagUntilTimeout>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00d      	beq.n	80024da <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024cc:	d103      	bne.n	80024d6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e05f      	b.n	800259a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024da:	897b      	ldrh	r3, [r7, #10]
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	461a      	mov	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	6a3a      	ldr	r2, [r7, #32]
 80024ee:	492d      	ldr	r1, [pc, #180]	; (80025a4 <I2C_RequestMemoryWrite+0x128>)
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f000 f8d3 	bl	800269c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e04c      	b.n	800259a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002500:	2300      	movs	r3, #0
 8002502:	617b      	str	r3, [r7, #20]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	617b      	str	r3, [r7, #20]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	617b      	str	r3, [r7, #20]
 8002514:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002518:	6a39      	ldr	r1, [r7, #32]
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 f95e 	bl	80027dc <I2C_WaitOnTXEFlagUntilTimeout>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00d      	beq.n	8002542 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	2b04      	cmp	r3, #4
 800252c:	d107      	bne.n	800253e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800253c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e02b      	b.n	800259a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002542:	88fb      	ldrh	r3, [r7, #6]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d105      	bne.n	8002554 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002548:	893b      	ldrh	r3, [r7, #8]
 800254a:	b2da      	uxtb	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	611a      	str	r2, [r3, #16]
 8002552:	e021      	b.n	8002598 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002554:	893b      	ldrh	r3, [r7, #8]
 8002556:	0a1b      	lsrs	r3, r3, #8
 8002558:	b29b      	uxth	r3, r3
 800255a:	b2da      	uxtb	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002564:	6a39      	ldr	r1, [r7, #32]
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f000 f938 	bl	80027dc <I2C_WaitOnTXEFlagUntilTimeout>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00d      	beq.n	800258e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	2b04      	cmp	r3, #4
 8002578:	d107      	bne.n	800258a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002588:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e005      	b.n	800259a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800258e:	893b      	ldrh	r3, [r7, #8]
 8002590:	b2da      	uxtb	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	00010002 	.word	0x00010002

080025a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	603b      	str	r3, [r7, #0]
 80025b4:	4613      	mov	r3, r2
 80025b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025b8:	e048      	b.n	800264c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c0:	d044      	beq.n	800264c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025c2:	f7ff f993 	bl	80018ec <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d302      	bcc.n	80025d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d139      	bne.n	800264c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	0c1b      	lsrs	r3, r3, #16
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d10d      	bne.n	80025fe <I2C_WaitOnFlagUntilTimeout+0x56>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	695b      	ldr	r3, [r3, #20]
 80025e8:	43da      	mvns	r2, r3
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	4013      	ands	r3, r2
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	bf0c      	ite	eq
 80025f4:	2301      	moveq	r3, #1
 80025f6:	2300      	movne	r3, #0
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	461a      	mov	r2, r3
 80025fc:	e00c      	b.n	8002618 <I2C_WaitOnFlagUntilTimeout+0x70>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	43da      	mvns	r2, r3
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	4013      	ands	r3, r2
 800260a:	b29b      	uxth	r3, r3
 800260c:	2b00      	cmp	r3, #0
 800260e:	bf0c      	ite	eq
 8002610:	2301      	moveq	r3, #1
 8002612:	2300      	movne	r3, #0
 8002614:	b2db      	uxtb	r3, r3
 8002616:	461a      	mov	r2, r3
 8002618:	79fb      	ldrb	r3, [r7, #7]
 800261a:	429a      	cmp	r2, r3
 800261c:	d116      	bne.n	800264c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2220      	movs	r2, #32
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	f043 0220 	orr.w	r2, r3, #32
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e023      	b.n	8002694 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	0c1b      	lsrs	r3, r3, #16
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b01      	cmp	r3, #1
 8002654:	d10d      	bne.n	8002672 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	43da      	mvns	r2, r3
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	4013      	ands	r3, r2
 8002662:	b29b      	uxth	r3, r3
 8002664:	2b00      	cmp	r3, #0
 8002666:	bf0c      	ite	eq
 8002668:	2301      	moveq	r3, #1
 800266a:	2300      	movne	r3, #0
 800266c:	b2db      	uxtb	r3, r3
 800266e:	461a      	mov	r2, r3
 8002670:	e00c      	b.n	800268c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	43da      	mvns	r2, r3
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	4013      	ands	r3, r2
 800267e:	b29b      	uxth	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	bf0c      	ite	eq
 8002684:	2301      	moveq	r3, #1
 8002686:	2300      	movne	r3, #0
 8002688:	b2db      	uxtb	r3, r3
 800268a:	461a      	mov	r2, r3
 800268c:	79fb      	ldrb	r3, [r7, #7]
 800268e:	429a      	cmp	r2, r3
 8002690:	d093      	beq.n	80025ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
 80026a8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026aa:	e071      	b.n	8002790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ba:	d123      	bne.n	8002704 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2220      	movs	r2, #32
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	f043 0204 	orr.w	r2, r3, #4
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e067      	b.n	80027d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270a:	d041      	beq.n	8002790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800270c:	f7ff f8ee 	bl	80018ec <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	429a      	cmp	r2, r3
 800271a:	d302      	bcc.n	8002722 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d136      	bne.n	8002790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	0c1b      	lsrs	r3, r3, #16
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2b01      	cmp	r3, #1
 800272a:	d10c      	bne.n	8002746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	43da      	mvns	r2, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	4013      	ands	r3, r2
 8002738:	b29b      	uxth	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	bf14      	ite	ne
 800273e:	2301      	movne	r3, #1
 8002740:	2300      	moveq	r3, #0
 8002742:	b2db      	uxtb	r3, r3
 8002744:	e00b      	b.n	800275e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	43da      	mvns	r2, r3
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	4013      	ands	r3, r2
 8002752:	b29b      	uxth	r3, r3
 8002754:	2b00      	cmp	r3, #0
 8002756:	bf14      	ite	ne
 8002758:	2301      	movne	r3, #1
 800275a:	2300      	moveq	r3, #0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d016      	beq.n	8002790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2220      	movs	r2, #32
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	f043 0220 	orr.w	r2, r3, #32
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e021      	b.n	80027d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	0c1b      	lsrs	r3, r3, #16
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b01      	cmp	r3, #1
 8002798:	d10c      	bne.n	80027b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	43da      	mvns	r2, r3
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	4013      	ands	r3, r2
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	bf14      	ite	ne
 80027ac:	2301      	movne	r3, #1
 80027ae:	2300      	moveq	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	e00b      	b.n	80027cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	43da      	mvns	r2, r3
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	4013      	ands	r3, r2
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	bf14      	ite	ne
 80027c6:	2301      	movne	r3, #1
 80027c8:	2300      	moveq	r3, #0
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f47f af6d 	bne.w	80026ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027e8:	e034      	b.n	8002854 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 f886 	bl	80028fc <I2C_IsAcknowledgeFailed>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e034      	b.n	8002864 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002800:	d028      	beq.n	8002854 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002802:	f7ff f873 	bl	80018ec <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	429a      	cmp	r2, r3
 8002810:	d302      	bcc.n	8002818 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d11d      	bne.n	8002854 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002822:	2b80      	cmp	r3, #128	; 0x80
 8002824:	d016      	beq.n	8002854 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2220      	movs	r2, #32
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	f043 0220 	orr.w	r2, r3, #32
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e007      	b.n	8002864 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800285e:	2b80      	cmp	r3, #128	; 0x80
 8002860:	d1c3      	bne.n	80027ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002878:	e034      	b.n	80028e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f000 f83e 	bl	80028fc <I2C_IsAcknowledgeFailed>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e034      	b.n	80028f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002890:	d028      	beq.n	80028e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002892:	f7ff f82b 	bl	80018ec <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	68ba      	ldr	r2, [r7, #8]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d302      	bcc.n	80028a8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d11d      	bne.n	80028e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d016      	beq.n	80028e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2220      	movs	r2, #32
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d0:	f043 0220 	orr.w	r2, r3, #32
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e007      	b.n	80028f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	f003 0304 	and.w	r3, r3, #4
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d1c3      	bne.n	800287a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800290e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002912:	d11b      	bne.n	800294c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800291c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2220      	movs	r2, #32
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002938:	f043 0204 	orr.w	r2, r3, #4
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e000      	b.n	800294e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr

08002958 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e272      	b.n	8002e50 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 8087 	beq.w	8002a86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002978:	4b92      	ldr	r3, [pc, #584]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 030c 	and.w	r3, r3, #12
 8002980:	2b04      	cmp	r3, #4
 8002982:	d00c      	beq.n	800299e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002984:	4b8f      	ldr	r3, [pc, #572]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f003 030c 	and.w	r3, r3, #12
 800298c:	2b08      	cmp	r3, #8
 800298e:	d112      	bne.n	80029b6 <HAL_RCC_OscConfig+0x5e>
 8002990:	4b8c      	ldr	r3, [pc, #560]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800299c:	d10b      	bne.n	80029b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800299e:	4b89      	ldr	r3, [pc, #548]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d06c      	beq.n	8002a84 <HAL_RCC_OscConfig+0x12c>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d168      	bne.n	8002a84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e24c      	b.n	8002e50 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029be:	d106      	bne.n	80029ce <HAL_RCC_OscConfig+0x76>
 80029c0:	4b80      	ldr	r3, [pc, #512]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a7f      	ldr	r2, [pc, #508]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 80029c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ca:	6013      	str	r3, [r2, #0]
 80029cc:	e02e      	b.n	8002a2c <HAL_RCC_OscConfig+0xd4>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10c      	bne.n	80029f0 <HAL_RCC_OscConfig+0x98>
 80029d6:	4b7b      	ldr	r3, [pc, #492]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a7a      	ldr	r2, [pc, #488]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 80029dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	4b78      	ldr	r3, [pc, #480]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a77      	ldr	r2, [pc, #476]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 80029e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	e01d      	b.n	8002a2c <HAL_RCC_OscConfig+0xd4>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029f8:	d10c      	bne.n	8002a14 <HAL_RCC_OscConfig+0xbc>
 80029fa:	4b72      	ldr	r3, [pc, #456]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a71      	ldr	r2, [pc, #452]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 8002a00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	4b6f      	ldr	r3, [pc, #444]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a6e      	ldr	r2, [pc, #440]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 8002a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	e00b      	b.n	8002a2c <HAL_RCC_OscConfig+0xd4>
 8002a14:	4b6b      	ldr	r3, [pc, #428]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a6a      	ldr	r2, [pc, #424]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 8002a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a1e:	6013      	str	r3, [r2, #0]
 8002a20:	4b68      	ldr	r3, [pc, #416]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a67      	ldr	r2, [pc, #412]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 8002a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d013      	beq.n	8002a5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a34:	f7fe ff5a 	bl	80018ec <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a3c:	f7fe ff56 	bl	80018ec <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b64      	cmp	r3, #100	; 0x64
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e200      	b.n	8002e50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4e:	4b5d      	ldr	r3, [pc, #372]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0f0      	beq.n	8002a3c <HAL_RCC_OscConfig+0xe4>
 8002a5a:	e014      	b.n	8002a86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5c:	f7fe ff46 	bl	80018ec <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a64:	f7fe ff42 	bl	80018ec <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b64      	cmp	r3, #100	; 0x64
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e1ec      	b.n	8002e50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a76:	4b53      	ldr	r3, [pc, #332]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1f0      	bne.n	8002a64 <HAL_RCC_OscConfig+0x10c>
 8002a82:	e000      	b.n	8002a86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d063      	beq.n	8002b5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a92:	4b4c      	ldr	r3, [pc, #304]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f003 030c 	and.w	r3, r3, #12
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00b      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a9e:	4b49      	ldr	r3, [pc, #292]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f003 030c 	and.w	r3, r3, #12
 8002aa6:	2b08      	cmp	r3, #8
 8002aa8:	d11c      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x18c>
 8002aaa:	4b46      	ldr	r3, [pc, #280]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d116      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ab6:	4b43      	ldr	r3, [pc, #268]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d005      	beq.n	8002ace <HAL_RCC_OscConfig+0x176>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d001      	beq.n	8002ace <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e1c0      	b.n	8002e50 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ace:	4b3d      	ldr	r3, [pc, #244]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	4939      	ldr	r1, [pc, #228]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ae2:	e03a      	b.n	8002b5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d020      	beq.n	8002b2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aec:	4b36      	ldr	r3, [pc, #216]	; (8002bc8 <HAL_RCC_OscConfig+0x270>)
 8002aee:	2201      	movs	r2, #1
 8002af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af2:	f7fe fefb 	bl	80018ec <HAL_GetTick>
 8002af6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af8:	e008      	b.n	8002b0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002afa:	f7fe fef7 	bl	80018ec <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e1a1      	b.n	8002e50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b0c:	4b2d      	ldr	r3, [pc, #180]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0f0      	beq.n	8002afa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b18:	4b2a      	ldr	r3, [pc, #168]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	4927      	ldr	r1, [pc, #156]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	600b      	str	r3, [r1, #0]
 8002b2c:	e015      	b.n	8002b5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b2e:	4b26      	ldr	r3, [pc, #152]	; (8002bc8 <HAL_RCC_OscConfig+0x270>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b34:	f7fe feda 	bl	80018ec <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b3c:	f7fe fed6 	bl	80018ec <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e180      	b.n	8002e50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b4e:	4b1d      	ldr	r3, [pc, #116]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1f0      	bne.n	8002b3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d03a      	beq.n	8002bdc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d019      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b6e:	4b17      	ldr	r3, [pc, #92]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002b70:	2201      	movs	r2, #1
 8002b72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b74:	f7fe feba 	bl	80018ec <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b7c:	f7fe feb6 	bl	80018ec <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e160      	b.n	8002e50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b8e:	4b0d      	ldr	r3, [pc, #52]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 8002b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d0f0      	beq.n	8002b7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b9a:	2001      	movs	r0, #1
 8002b9c:	f000 face 	bl	800313c <RCC_Delay>
 8002ba0:	e01c      	b.n	8002bdc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ba2:	4b0a      	ldr	r3, [pc, #40]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ba8:	f7fe fea0 	bl	80018ec <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bae:	e00f      	b.n	8002bd0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bb0:	f7fe fe9c 	bl	80018ec <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d908      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e146      	b.n	8002e50 <HAL_RCC_OscConfig+0x4f8>
 8002bc2:	bf00      	nop
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	42420000 	.word	0x42420000
 8002bcc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd0:	4b92      	ldr	r3, [pc, #584]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1e9      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 80a6 	beq.w	8002d36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bea:	2300      	movs	r3, #0
 8002bec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bee:	4b8b      	ldr	r3, [pc, #556]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10d      	bne.n	8002c16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bfa:	4b88      	ldr	r3, [pc, #544]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	4a87      	ldr	r2, [pc, #540]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c04:	61d3      	str	r3, [r2, #28]
 8002c06:	4b85      	ldr	r3, [pc, #532]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0e:	60bb      	str	r3, [r7, #8]
 8002c10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c12:	2301      	movs	r3, #1
 8002c14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c16:	4b82      	ldr	r3, [pc, #520]	; (8002e20 <HAL_RCC_OscConfig+0x4c8>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d118      	bne.n	8002c54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c22:	4b7f      	ldr	r3, [pc, #508]	; (8002e20 <HAL_RCC_OscConfig+0x4c8>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a7e      	ldr	r2, [pc, #504]	; (8002e20 <HAL_RCC_OscConfig+0x4c8>)
 8002c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c2e:	f7fe fe5d 	bl	80018ec <HAL_GetTick>
 8002c32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c34:	e008      	b.n	8002c48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c36:	f7fe fe59 	bl	80018ec <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b64      	cmp	r3, #100	; 0x64
 8002c42:	d901      	bls.n	8002c48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e103      	b.n	8002e50 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c48:	4b75      	ldr	r3, [pc, #468]	; (8002e20 <HAL_RCC_OscConfig+0x4c8>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d0f0      	beq.n	8002c36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d106      	bne.n	8002c6a <HAL_RCC_OscConfig+0x312>
 8002c5c:	4b6f      	ldr	r3, [pc, #444]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	4a6e      	ldr	r2, [pc, #440]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002c62:	f043 0301 	orr.w	r3, r3, #1
 8002c66:	6213      	str	r3, [r2, #32]
 8002c68:	e02d      	b.n	8002cc6 <HAL_RCC_OscConfig+0x36e>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10c      	bne.n	8002c8c <HAL_RCC_OscConfig+0x334>
 8002c72:	4b6a      	ldr	r3, [pc, #424]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	4a69      	ldr	r2, [pc, #420]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002c78:	f023 0301 	bic.w	r3, r3, #1
 8002c7c:	6213      	str	r3, [r2, #32]
 8002c7e:	4b67      	ldr	r3, [pc, #412]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	4a66      	ldr	r2, [pc, #408]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002c84:	f023 0304 	bic.w	r3, r3, #4
 8002c88:	6213      	str	r3, [r2, #32]
 8002c8a:	e01c      	b.n	8002cc6 <HAL_RCC_OscConfig+0x36e>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	2b05      	cmp	r3, #5
 8002c92:	d10c      	bne.n	8002cae <HAL_RCC_OscConfig+0x356>
 8002c94:	4b61      	ldr	r3, [pc, #388]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	4a60      	ldr	r2, [pc, #384]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002c9a:	f043 0304 	orr.w	r3, r3, #4
 8002c9e:	6213      	str	r3, [r2, #32]
 8002ca0:	4b5e      	ldr	r3, [pc, #376]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	4a5d      	ldr	r2, [pc, #372]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002ca6:	f043 0301 	orr.w	r3, r3, #1
 8002caa:	6213      	str	r3, [r2, #32]
 8002cac:	e00b      	b.n	8002cc6 <HAL_RCC_OscConfig+0x36e>
 8002cae:	4b5b      	ldr	r3, [pc, #364]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	4a5a      	ldr	r2, [pc, #360]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002cb4:	f023 0301 	bic.w	r3, r3, #1
 8002cb8:	6213      	str	r3, [r2, #32]
 8002cba:	4b58      	ldr	r3, [pc, #352]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	4a57      	ldr	r2, [pc, #348]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002cc0:	f023 0304 	bic.w	r3, r3, #4
 8002cc4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d015      	beq.n	8002cfa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cce:	f7fe fe0d 	bl	80018ec <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd4:	e00a      	b.n	8002cec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd6:	f7fe fe09 	bl	80018ec <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e0b1      	b.n	8002e50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cec:	4b4b      	ldr	r3, [pc, #300]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0ee      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x37e>
 8002cf8:	e014      	b.n	8002d24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cfa:	f7fe fdf7 	bl	80018ec <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d00:	e00a      	b.n	8002d18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d02:	f7fe fdf3 	bl	80018ec <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e09b      	b.n	8002e50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d18:	4b40      	ldr	r3, [pc, #256]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1ee      	bne.n	8002d02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d24:	7dfb      	ldrb	r3, [r7, #23]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d105      	bne.n	8002d36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d2a:	4b3c      	ldr	r3, [pc, #240]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	4a3b      	ldr	r2, [pc, #236]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002d30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 8087 	beq.w	8002e4e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d40:	4b36      	ldr	r3, [pc, #216]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f003 030c 	and.w	r3, r3, #12
 8002d48:	2b08      	cmp	r3, #8
 8002d4a:	d061      	beq.n	8002e10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d146      	bne.n	8002de2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d54:	4b33      	ldr	r3, [pc, #204]	; (8002e24 <HAL_RCC_OscConfig+0x4cc>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5a:	f7fe fdc7 	bl	80018ec <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d60:	e008      	b.n	8002d74 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d62:	f7fe fdc3 	bl	80018ec <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e06d      	b.n	8002e50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d74:	4b29      	ldr	r3, [pc, #164]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1f0      	bne.n	8002d62 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d88:	d108      	bne.n	8002d9c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d8a:	4b24      	ldr	r3, [pc, #144]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	4921      	ldr	r1, [pc, #132]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d9c:	4b1f      	ldr	r3, [pc, #124]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a19      	ldr	r1, [r3, #32]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	430b      	orrs	r3, r1
 8002dae:	491b      	ldr	r1, [pc, #108]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002db4:	4b1b      	ldr	r3, [pc, #108]	; (8002e24 <HAL_RCC_OscConfig+0x4cc>)
 8002db6:	2201      	movs	r2, #1
 8002db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dba:	f7fe fd97 	bl	80018ec <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc2:	f7fe fd93 	bl	80018ec <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e03d      	b.n	8002e50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dd4:	4b11      	ldr	r3, [pc, #68]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0f0      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x46a>
 8002de0:	e035      	b.n	8002e4e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de2:	4b10      	ldr	r3, [pc, #64]	; (8002e24 <HAL_RCC_OscConfig+0x4cc>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de8:	f7fe fd80 	bl	80018ec <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df0:	f7fe fd7c 	bl	80018ec <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e026      	b.n	8002e50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e02:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1f0      	bne.n	8002df0 <HAL_RCC_OscConfig+0x498>
 8002e0e:	e01e      	b.n	8002e4e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	69db      	ldr	r3, [r3, #28]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d107      	bne.n	8002e28 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e019      	b.n	8002e50 <HAL_RCC_OscConfig+0x4f8>
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	40007000 	.word	0x40007000
 8002e24:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e28:	4b0b      	ldr	r3, [pc, #44]	; (8002e58 <HAL_RCC_OscConfig+0x500>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d106      	bne.n	8002e4a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d001      	beq.n	8002e4e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40021000 	.word	0x40021000

08002e5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e0d0      	b.n	8003012 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e70:	4b6a      	ldr	r3, [pc, #424]	; (800301c <HAL_RCC_ClockConfig+0x1c0>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d910      	bls.n	8002ea0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e7e:	4b67      	ldr	r3, [pc, #412]	; (800301c <HAL_RCC_ClockConfig+0x1c0>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f023 0207 	bic.w	r2, r3, #7
 8002e86:	4965      	ldr	r1, [pc, #404]	; (800301c <HAL_RCC_ClockConfig+0x1c0>)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e8e:	4b63      	ldr	r3, [pc, #396]	; (800301c <HAL_RCC_ClockConfig+0x1c0>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d001      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e0b8      	b.n	8003012 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d020      	beq.n	8002eee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d005      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002eb8:	4b59      	ldr	r3, [pc, #356]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	4a58      	ldr	r2, [pc, #352]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002ebe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ec2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0308 	and.w	r3, r3, #8
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d005      	beq.n	8002edc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ed0:	4b53      	ldr	r3, [pc, #332]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	4a52      	ldr	r2, [pc, #328]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002eda:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002edc:	4b50      	ldr	r3, [pc, #320]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	494d      	ldr	r1, [pc, #308]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d040      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d107      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f02:	4b47      	ldr	r3, [pc, #284]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d115      	bne.n	8002f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e07f      	b.n	8003012 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d107      	bne.n	8002f2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f1a:	4b41      	ldr	r3, [pc, #260]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d109      	bne.n	8002f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e073      	b.n	8003012 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f2a:	4b3d      	ldr	r3, [pc, #244]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e06b      	b.n	8003012 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f3a:	4b39      	ldr	r3, [pc, #228]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f023 0203 	bic.w	r2, r3, #3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	4936      	ldr	r1, [pc, #216]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f4c:	f7fe fcce 	bl	80018ec <HAL_GetTick>
 8002f50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f52:	e00a      	b.n	8002f6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f54:	f7fe fcca 	bl	80018ec <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e053      	b.n	8003012 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f6a:	4b2d      	ldr	r3, [pc, #180]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f003 020c 	and.w	r2, r3, #12
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d1eb      	bne.n	8002f54 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f7c:	4b27      	ldr	r3, [pc, #156]	; (800301c <HAL_RCC_ClockConfig+0x1c0>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d210      	bcs.n	8002fac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f8a:	4b24      	ldr	r3, [pc, #144]	; (800301c <HAL_RCC_ClockConfig+0x1c0>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f023 0207 	bic.w	r2, r3, #7
 8002f92:	4922      	ldr	r1, [pc, #136]	; (800301c <HAL_RCC_ClockConfig+0x1c0>)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9a:	4b20      	ldr	r3, [pc, #128]	; (800301c <HAL_RCC_ClockConfig+0x1c0>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0307 	and.w	r3, r3, #7
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d001      	beq.n	8002fac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e032      	b.n	8003012 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d008      	beq.n	8002fca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fb8:	4b19      	ldr	r3, [pc, #100]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	4916      	ldr	r1, [pc, #88]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d009      	beq.n	8002fea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fd6:	4b12      	ldr	r3, [pc, #72]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	490e      	ldr	r1, [pc, #56]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fea:	f000 f821 	bl	8003030 <HAL_RCC_GetSysClockFreq>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	091b      	lsrs	r3, r3, #4
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	490a      	ldr	r1, [pc, #40]	; (8003024 <HAL_RCC_ClockConfig+0x1c8>)
 8002ffc:	5ccb      	ldrb	r3, [r1, r3]
 8002ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8003002:	4a09      	ldr	r2, [pc, #36]	; (8003028 <HAL_RCC_ClockConfig+0x1cc>)
 8003004:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003006:	4b09      	ldr	r3, [pc, #36]	; (800302c <HAL_RCC_ClockConfig+0x1d0>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f7fe fc2c 	bl	8001868 <HAL_InitTick>

  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40022000 	.word	0x40022000
 8003020:	40021000 	.word	0x40021000
 8003024:	0800541c 	.word	0x0800541c
 8003028:	20000020 	.word	0x20000020
 800302c:	20000024 	.word	0x20000024

08003030 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003030:	b480      	push	{r7}
 8003032:	b087      	sub	sp, #28
 8003034:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003036:	2300      	movs	r3, #0
 8003038:	60fb      	str	r3, [r7, #12]
 800303a:	2300      	movs	r3, #0
 800303c:	60bb      	str	r3, [r7, #8]
 800303e:	2300      	movs	r3, #0
 8003040:	617b      	str	r3, [r7, #20]
 8003042:	2300      	movs	r3, #0
 8003044:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003046:	2300      	movs	r3, #0
 8003048:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800304a:	4b1e      	ldr	r3, [pc, #120]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f003 030c 	and.w	r3, r3, #12
 8003056:	2b04      	cmp	r3, #4
 8003058:	d002      	beq.n	8003060 <HAL_RCC_GetSysClockFreq+0x30>
 800305a:	2b08      	cmp	r3, #8
 800305c:	d003      	beq.n	8003066 <HAL_RCC_GetSysClockFreq+0x36>
 800305e:	e027      	b.n	80030b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003060:	4b19      	ldr	r3, [pc, #100]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003062:	613b      	str	r3, [r7, #16]
      break;
 8003064:	e027      	b.n	80030b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	0c9b      	lsrs	r3, r3, #18
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	4a17      	ldr	r2, [pc, #92]	; (80030cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003070:	5cd3      	ldrb	r3, [r2, r3]
 8003072:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d010      	beq.n	80030a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800307e:	4b11      	ldr	r3, [pc, #68]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	0c5b      	lsrs	r3, r3, #17
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	4a11      	ldr	r2, [pc, #68]	; (80030d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800308a:	5cd3      	ldrb	r3, [r2, r3]
 800308c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a0d      	ldr	r2, [pc, #52]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003092:	fb03 f202 	mul.w	r2, r3, r2
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	fbb2 f3f3 	udiv	r3, r2, r3
 800309c:	617b      	str	r3, [r7, #20]
 800309e:	e004      	b.n	80030aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a0c      	ldr	r2, [pc, #48]	; (80030d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80030a4:	fb02 f303 	mul.w	r3, r2, r3
 80030a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	613b      	str	r3, [r7, #16]
      break;
 80030ae:	e002      	b.n	80030b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030b0:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80030b2:	613b      	str	r3, [r7, #16]
      break;
 80030b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030b6:	693b      	ldr	r3, [r7, #16]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	371c      	adds	r7, #28
 80030bc:	46bd      	mov	sp, r7
 80030be:	bc80      	pop	{r7}
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	40021000 	.word	0x40021000
 80030c8:	007a1200 	.word	0x007a1200
 80030cc:	08005434 	.word	0x08005434
 80030d0:	08005444 	.word	0x08005444
 80030d4:	003d0900 	.word	0x003d0900

080030d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030dc:	4b02      	ldr	r3, [pc, #8]	; (80030e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80030de:	681b      	ldr	r3, [r3, #0]
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bc80      	pop	{r7}
 80030e6:	4770      	bx	lr
 80030e8:	20000020 	.word	0x20000020

080030ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030f0:	f7ff fff2 	bl	80030d8 <HAL_RCC_GetHCLKFreq>
 80030f4:	4602      	mov	r2, r0
 80030f6:	4b05      	ldr	r3, [pc, #20]	; (800310c <HAL_RCC_GetPCLK1Freq+0x20>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	0a1b      	lsrs	r3, r3, #8
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	4903      	ldr	r1, [pc, #12]	; (8003110 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003102:	5ccb      	ldrb	r3, [r1, r3]
 8003104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003108:	4618      	mov	r0, r3
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40021000 	.word	0x40021000
 8003110:	0800542c 	.word	0x0800542c

08003114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003118:	f7ff ffde 	bl	80030d8 <HAL_RCC_GetHCLKFreq>
 800311c:	4602      	mov	r2, r0
 800311e:	4b05      	ldr	r3, [pc, #20]	; (8003134 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	0adb      	lsrs	r3, r3, #11
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	4903      	ldr	r1, [pc, #12]	; (8003138 <HAL_RCC_GetPCLK2Freq+0x24>)
 800312a:	5ccb      	ldrb	r3, [r1, r3]
 800312c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003130:	4618      	mov	r0, r3
 8003132:	bd80      	pop	{r7, pc}
 8003134:	40021000 	.word	0x40021000
 8003138:	0800542c 	.word	0x0800542c

0800313c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003144:	4b0a      	ldr	r3, [pc, #40]	; (8003170 <RCC_Delay+0x34>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a0a      	ldr	r2, [pc, #40]	; (8003174 <RCC_Delay+0x38>)
 800314a:	fba2 2303 	umull	r2, r3, r2, r3
 800314e:	0a5b      	lsrs	r3, r3, #9
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	fb02 f303 	mul.w	r3, r2, r3
 8003156:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003158:	bf00      	nop
  }
  while (Delay --);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	1e5a      	subs	r2, r3, #1
 800315e:	60fa      	str	r2, [r7, #12]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1f9      	bne.n	8003158 <RCC_Delay+0x1c>
}
 8003164:	bf00      	nop
 8003166:	bf00      	nop
 8003168:	3714      	adds	r7, #20
 800316a:	46bd      	mov	sp, r7
 800316c:	bc80      	pop	{r7}
 800316e:	4770      	bx	lr
 8003170:	20000020 	.word	0x20000020
 8003174:	10624dd3 	.word	0x10624dd3

08003178 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e042      	b.n	8003210 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d106      	bne.n	80031a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7fe fad4 	bl	800174c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2224      	movs	r2, #36	; 0x24
 80031a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68da      	ldr	r2, [r3, #12]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 fd7f 	bl	8003cc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	691a      	ldr	r2, [r3, #16]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695a      	ldr	r2, [r3, #20]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2220      	movs	r2, #32
 80031fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2220      	movs	r2, #32
 8003204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b08a      	sub	sp, #40	; 0x28
 800321c:	af02      	add	r7, sp, #8
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	603b      	str	r3, [r7, #0]
 8003224:	4613      	mov	r3, r2
 8003226:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003228:	2300      	movs	r3, #0
 800322a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b20      	cmp	r3, #32
 8003236:	d17c      	bne.n	8003332 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d002      	beq.n	8003244 <HAL_UART_Receive+0x2c>
 800323e:	88fb      	ldrh	r3, [r7, #6]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e075      	b.n	8003334 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2222      	movs	r2, #34	; 0x22
 8003252:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800325c:	f7fe fb46 	bl	80018ec <HAL_GetTick>
 8003260:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	88fa      	ldrh	r2, [r7, #6]
 8003266:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	88fa      	ldrh	r2, [r7, #6]
 800326c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003276:	d108      	bne.n	800328a <HAL_UART_Receive+0x72>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d104      	bne.n	800328a <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8003280:	2300      	movs	r3, #0
 8003282:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	61bb      	str	r3, [r7, #24]
 8003288:	e003      	b.n	8003292 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800328e:	2300      	movs	r3, #0
 8003290:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003292:	e043      	b.n	800331c <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	2200      	movs	r2, #0
 800329c:	2120      	movs	r1, #32
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f000 fb04 	bl	80038ac <UART_WaitOnFlagUntilTimeout>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e042      	b.n	8003334 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10c      	bne.n	80032ce <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	3302      	adds	r3, #2
 80032ca:	61bb      	str	r3, [r7, #24]
 80032cc:	e01f      	b.n	800330e <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032d6:	d007      	beq.n	80032e8 <HAL_UART_Receive+0xd0>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10a      	bne.n	80032f6 <HAL_UART_Receive+0xde>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d106      	bne.n	80032f6 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	b2da      	uxtb	r2, r3
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	701a      	strb	r2, [r3, #0]
 80032f4:	e008      	b.n	8003308 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003302:	b2da      	uxtb	r2, r3
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	3301      	adds	r3, #1
 800330c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003312:	b29b      	uxth	r3, r3
 8003314:	3b01      	subs	r3, #1
 8003316:	b29a      	uxth	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003320:	b29b      	uxth	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1b6      	bne.n	8003294 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2220      	movs	r2, #32
 800332a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 800332e:	2300      	movs	r3, #0
 8003330:	e000      	b.n	8003334 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003332:	2302      	movs	r3, #2
  }
}
 8003334:	4618      	mov	r0, r3
 8003336:	3720      	adds	r7, #32
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b0ba      	sub	sp, #232	; 0xe8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003362:	2300      	movs	r3, #0
 8003364:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003368:	2300      	movs	r3, #0
 800336a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800336e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800337a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10f      	bne.n	80033a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003386:	f003 0320 	and.w	r3, r3, #32
 800338a:	2b00      	cmp	r3, #0
 800338c:	d009      	beq.n	80033a2 <HAL_UART_IRQHandler+0x66>
 800338e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003392:	f003 0320 	and.w	r3, r3, #32
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 fbd1 	bl	8003b42 <UART_Receive_IT>
      return;
 80033a0:	e25b      	b.n	800385a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80033a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 80de 	beq.w	8003568 <HAL_UART_IRQHandler+0x22c>
 80033ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d106      	bne.n	80033c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80033b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 80d1 	beq.w	8003568 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00b      	beq.n	80033ea <HAL_UART_IRQHandler+0xae>
 80033d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d005      	beq.n	80033ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e2:	f043 0201 	orr.w	r2, r3, #1
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ee:	f003 0304 	and.w	r3, r3, #4
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00b      	beq.n	800340e <HAL_UART_IRQHandler+0xd2>
 80033f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d005      	beq.n	800340e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003406:	f043 0202 	orr.w	r2, r3, #2
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800340e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00b      	beq.n	8003432 <HAL_UART_IRQHandler+0xf6>
 800341a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d005      	beq.n	8003432 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342a:	f043 0204 	orr.w	r2, r3, #4
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003436:	f003 0308 	and.w	r3, r3, #8
 800343a:	2b00      	cmp	r3, #0
 800343c:	d011      	beq.n	8003462 <HAL_UART_IRQHandler+0x126>
 800343e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003442:	f003 0320 	and.w	r3, r3, #32
 8003446:	2b00      	cmp	r3, #0
 8003448:	d105      	bne.n	8003456 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800344a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d005      	beq.n	8003462 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345a:	f043 0208 	orr.w	r2, r3, #8
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 81f2 	beq.w	8003850 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800346c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003470:	f003 0320 	and.w	r3, r3, #32
 8003474:	2b00      	cmp	r3, #0
 8003476:	d008      	beq.n	800348a <HAL_UART_IRQHandler+0x14e>
 8003478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800347c:	f003 0320 	and.w	r3, r3, #32
 8003480:	2b00      	cmp	r3, #0
 8003482:	d002      	beq.n	800348a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 fb5c 	bl	8003b42 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003494:	2b00      	cmp	r3, #0
 8003496:	bf14      	ite	ne
 8003498:	2301      	movne	r3, #1
 800349a:	2300      	moveq	r3, #0
 800349c:	b2db      	uxtb	r3, r3
 800349e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d103      	bne.n	80034b6 <HAL_UART_IRQHandler+0x17a>
 80034ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d04f      	beq.n	8003556 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 fa66 	bl	8003988 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d041      	beq.n	800354e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	3314      	adds	r3, #20
 80034d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80034d8:	e853 3f00 	ldrex	r3, [r3]
 80034dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80034e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80034e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	3314      	adds	r3, #20
 80034f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80034f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80034fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003502:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003506:	e841 2300 	strex	r3, r2, [r1]
 800350a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800350e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1d9      	bne.n	80034ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351a:	2b00      	cmp	r3, #0
 800351c:	d013      	beq.n	8003546 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003522:	4a7e      	ldr	r2, [pc, #504]	; (800371c <HAL_UART_IRQHandler+0x3e0>)
 8003524:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800352a:	4618      	mov	r0, r3
 800352c:	f7fe fb54 	bl	8001bd8 <HAL_DMA_Abort_IT>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d016      	beq.n	8003564 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800353a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003540:	4610      	mov	r0, r2
 8003542:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003544:	e00e      	b.n	8003564 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f99c 	bl	8003884 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800354c:	e00a      	b.n	8003564 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f998 	bl	8003884 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003554:	e006      	b.n	8003564 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f994 	bl	8003884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003562:	e175      	b.n	8003850 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003564:	bf00      	nop
    return;
 8003566:	e173      	b.n	8003850 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356c:	2b01      	cmp	r3, #1
 800356e:	f040 814f 	bne.w	8003810 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003576:	f003 0310 	and.w	r3, r3, #16
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 8148 	beq.w	8003810 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003584:	f003 0310 	and.w	r3, r3, #16
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 8141 	beq.w	8003810 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800358e:	2300      	movs	r3, #0
 8003590:	60bb      	str	r3, [r7, #8]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	60bb      	str	r3, [r7, #8]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	60bb      	str	r3, [r7, #8]
 80035a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 80b6 	beq.w	8003720 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80035c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 8145 	beq.w	8003854 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80035ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80035d2:	429a      	cmp	r2, r3
 80035d4:	f080 813e 	bcs.w	8003854 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80035de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	2b20      	cmp	r3, #32
 80035e8:	f000 8088 	beq.w	80036fc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	330c      	adds	r3, #12
 80035f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035fa:	e853 3f00 	ldrex	r3, [r3]
 80035fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003602:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003606:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800360a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	330c      	adds	r3, #12
 8003614:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003618:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800361c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003620:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003624:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003628:	e841 2300 	strex	r3, r2, [r1]
 800362c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003630:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1d9      	bne.n	80035ec <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	3314      	adds	r3, #20
 800363e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003640:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003642:	e853 3f00 	ldrex	r3, [r3]
 8003646:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003648:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800364a:	f023 0301 	bic.w	r3, r3, #1
 800364e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	3314      	adds	r3, #20
 8003658:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800365c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003660:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003662:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003664:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003668:	e841 2300 	strex	r3, r2, [r1]
 800366c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800366e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1e1      	bne.n	8003638 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	3314      	adds	r3, #20
 800367a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800367e:	e853 3f00 	ldrex	r3, [r3]
 8003682:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003684:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003686:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800368a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	3314      	adds	r3, #20
 8003694:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003698:	66fa      	str	r2, [r7, #108]	; 0x6c
 800369a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800369e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80036a0:	e841 2300 	strex	r3, r2, [r1]
 80036a4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80036a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1e3      	bne.n	8003674 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	330c      	adds	r3, #12
 80036c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036c4:	e853 3f00 	ldrex	r3, [r3]
 80036c8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80036ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036cc:	f023 0310 	bic.w	r3, r3, #16
 80036d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	330c      	adds	r3, #12
 80036da:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80036de:	65ba      	str	r2, [r7, #88]	; 0x58
 80036e0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80036e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036e6:	e841 2300 	strex	r3, r2, [r1]
 80036ea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80036ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1e3      	bne.n	80036ba <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fe fa33 	bl	8001b62 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2202      	movs	r2, #2
 8003700:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800370a:	b29b      	uxth	r3, r3
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	b29b      	uxth	r3, r3
 8003710:	4619      	mov	r1, r3
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f8bf 	bl	8003896 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003718:	e09c      	b.n	8003854 <HAL_UART_IRQHandler+0x518>
 800371a:	bf00      	nop
 800371c:	08003a4d 	.word	0x08003a4d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003728:	b29b      	uxth	r3, r3
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003734:	b29b      	uxth	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 808e 	beq.w	8003858 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800373c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 8089 	beq.w	8003858 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	330c      	adds	r3, #12
 800374c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003750:	e853 3f00 	ldrex	r3, [r3]
 8003754:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003758:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800375c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	330c      	adds	r3, #12
 8003766:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800376a:	647a      	str	r2, [r7, #68]	; 0x44
 800376c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003770:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003772:	e841 2300 	strex	r3, r2, [r1]
 8003776:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1e3      	bne.n	8003746 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	3314      	adds	r3, #20
 8003784:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	e853 3f00 	ldrex	r3, [r3]
 800378c:	623b      	str	r3, [r7, #32]
   return(result);
 800378e:	6a3b      	ldr	r3, [r7, #32]
 8003790:	f023 0301 	bic.w	r3, r3, #1
 8003794:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	3314      	adds	r3, #20
 800379e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80037a2:	633a      	str	r2, [r7, #48]	; 0x30
 80037a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037aa:	e841 2300 	strex	r3, r2, [r1]
 80037ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80037b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1e3      	bne.n	800377e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2220      	movs	r2, #32
 80037ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	330c      	adds	r3, #12
 80037ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	e853 3f00 	ldrex	r3, [r3]
 80037d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f023 0310 	bic.w	r3, r3, #16
 80037da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	330c      	adds	r3, #12
 80037e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80037e8:	61fa      	str	r2, [r7, #28]
 80037ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ec:	69b9      	ldr	r1, [r7, #24]
 80037ee:	69fa      	ldr	r2, [r7, #28]
 80037f0:	e841 2300 	strex	r3, r2, [r1]
 80037f4:	617b      	str	r3, [r7, #20]
   return(result);
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1e3      	bne.n	80037c4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003802:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003806:	4619      	mov	r1, r3
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 f844 	bl	8003896 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800380e:	e023      	b.n	8003858 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003818:	2b00      	cmp	r3, #0
 800381a:	d009      	beq.n	8003830 <HAL_UART_IRQHandler+0x4f4>
 800381c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 f923 	bl	8003a74 <UART_Transmit_IT>
    return;
 800382e:	e014      	b.n	800385a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00e      	beq.n	800385a <HAL_UART_IRQHandler+0x51e>
 800383c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003844:	2b00      	cmp	r3, #0
 8003846:	d008      	beq.n	800385a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 f962 	bl	8003b12 <UART_EndTransmit_IT>
    return;
 800384e:	e004      	b.n	800385a <HAL_UART_IRQHandler+0x51e>
    return;
 8003850:	bf00      	nop
 8003852:	e002      	b.n	800385a <HAL_UART_IRQHandler+0x51e>
      return;
 8003854:	bf00      	nop
 8003856:	e000      	b.n	800385a <HAL_UART_IRQHandler+0x51e>
      return;
 8003858:	bf00      	nop
  }
}
 800385a:	37e8      	adds	r7, #232	; 0xe8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	bc80      	pop	{r7}
 8003870:	4770      	bx	lr

08003872 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800387a:	bf00      	nop
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	bc80      	pop	{r7}
 8003882:	4770      	bx	lr

08003884 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	bc80      	pop	{r7}
 8003894:	4770      	bx	lr

08003896 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
 800389e:	460b      	mov	r3, r1
 80038a0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038a2:	bf00      	nop
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bc80      	pop	{r7}
 80038aa:	4770      	bx	lr

080038ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b090      	sub	sp, #64	; 0x40
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	603b      	str	r3, [r7, #0]
 80038b8:	4613      	mov	r3, r2
 80038ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038bc:	e050      	b.n	8003960 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c4:	d04c      	beq.n	8003960 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80038c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d007      	beq.n	80038dc <UART_WaitOnFlagUntilTimeout+0x30>
 80038cc:	f7fe f80e 	bl	80018ec <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038d8:	429a      	cmp	r2, r3
 80038da:	d241      	bcs.n	8003960 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	330c      	adds	r3, #12
 80038e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e6:	e853 3f00 	ldrex	r3, [r3]
 80038ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	330c      	adds	r3, #12
 80038fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038fc:	637a      	str	r2, [r7, #52]	; 0x34
 80038fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003900:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003902:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003904:	e841 2300 	strex	r3, r2, [r1]
 8003908:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800390a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1e5      	bne.n	80038dc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	3314      	adds	r3, #20
 8003916:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	e853 3f00 	ldrex	r3, [r3]
 800391e:	613b      	str	r3, [r7, #16]
   return(result);
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	f023 0301 	bic.w	r3, r3, #1
 8003926:	63bb      	str	r3, [r7, #56]	; 0x38
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	3314      	adds	r3, #20
 800392e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003930:	623a      	str	r2, [r7, #32]
 8003932:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003934:	69f9      	ldr	r1, [r7, #28]
 8003936:	6a3a      	ldr	r2, [r7, #32]
 8003938:	e841 2300 	strex	r3, r2, [r1]
 800393c:	61bb      	str	r3, [r7, #24]
   return(result);
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1e5      	bne.n	8003910 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2220      	movs	r2, #32
 8003948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2220      	movs	r2, #32
 8003950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e00f      	b.n	8003980 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	4013      	ands	r3, r2
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	429a      	cmp	r2, r3
 800396e:	bf0c      	ite	eq
 8003970:	2301      	moveq	r3, #1
 8003972:	2300      	movne	r3, #0
 8003974:	b2db      	uxtb	r3, r3
 8003976:	461a      	mov	r2, r3
 8003978:	79fb      	ldrb	r3, [r7, #7]
 800397a:	429a      	cmp	r2, r3
 800397c:	d09f      	beq.n	80038be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3740      	adds	r7, #64	; 0x40
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003988:	b480      	push	{r7}
 800398a:	b095      	sub	sp, #84	; 0x54
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	330c      	adds	r3, #12
 8003996:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800399a:	e853 3f00 	ldrex	r3, [r3]
 800399e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80039a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	330c      	adds	r3, #12
 80039ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039b0:	643a      	str	r2, [r7, #64]	; 0x40
 80039b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80039b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039b8:	e841 2300 	strex	r3, r2, [r1]
 80039bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1e5      	bne.n	8003990 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	3314      	adds	r3, #20
 80039ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039cc:	6a3b      	ldr	r3, [r7, #32]
 80039ce:	e853 3f00 	ldrex	r3, [r3]
 80039d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	f023 0301 	bic.w	r3, r3, #1
 80039da:	64bb      	str	r3, [r7, #72]	; 0x48
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	3314      	adds	r3, #20
 80039e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039ec:	e841 2300 	strex	r3, r2, [r1]
 80039f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1e5      	bne.n	80039c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d119      	bne.n	8003a34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	330c      	adds	r3, #12
 8003a06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	e853 3f00 	ldrex	r3, [r3]
 8003a0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	f023 0310 	bic.w	r3, r3, #16
 8003a16:	647b      	str	r3, [r7, #68]	; 0x44
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	330c      	adds	r3, #12
 8003a1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a20:	61ba      	str	r2, [r7, #24]
 8003a22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a24:	6979      	ldr	r1, [r7, #20]
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	e841 2300 	strex	r3, r2, [r1]
 8003a2c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1e5      	bne.n	8003a00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2220      	movs	r2, #32
 8003a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003a42:	bf00      	nop
 8003a44:	3754      	adds	r7, #84	; 0x54
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bc80      	pop	{r7}
 8003a4a:	4770      	bx	lr

08003a4c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f7ff ff0c 	bl	8003884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a6c:	bf00      	nop
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b21      	cmp	r3, #33	; 0x21
 8003a86:	d13e      	bne.n	8003b06 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a90:	d114      	bne.n	8003abc <UART_Transmit_IT+0x48>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d110      	bne.n	8003abc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	881b      	ldrh	r3, [r3, #0]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003aae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	1c9a      	adds	r2, r3, #2
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	621a      	str	r2, [r3, #32]
 8003aba:	e008      	b.n	8003ace <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	1c59      	adds	r1, r3, #1
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6211      	str	r1, [r2, #32]
 8003ac6:	781a      	ldrb	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	4619      	mov	r1, r3
 8003adc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10f      	bne.n	8003b02 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68da      	ldr	r2, [r3, #12]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003af0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68da      	ldr	r2, [r3, #12]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b00:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003b02:	2300      	movs	r3, #0
 8003b04:	e000      	b.n	8003b08 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003b06:	2302      	movs	r3, #2
  }
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3714      	adds	r7, #20
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bc80      	pop	{r7}
 8003b10:	4770      	bx	lr

08003b12 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b082      	sub	sp, #8
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68da      	ldr	r2, [r3, #12]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b28:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7ff fe94 	bl	8003860 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b08c      	sub	sp, #48	; 0x30
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b22      	cmp	r3, #34	; 0x22
 8003b54:	f040 80ae 	bne.w	8003cb4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b60:	d117      	bne.n	8003b92 <UART_Receive_IT+0x50>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d113      	bne.n	8003b92 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b72:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b84:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8a:	1c9a      	adds	r2, r3, #2
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	629a      	str	r2, [r3, #40]	; 0x28
 8003b90:	e026      	b.n	8003be0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b96:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ba4:	d007      	beq.n	8003bb6 <UART_Receive_IT+0x74>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10a      	bne.n	8003bc4 <UART_Receive_IT+0x82>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d106      	bne.n	8003bc4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	b2da      	uxtb	r2, r3
 8003bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc0:	701a      	strb	r2, [r3, #0]
 8003bc2:	e008      	b.n	8003bd6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bda:	1c5a      	adds	r2, r3, #1
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	3b01      	subs	r3, #1
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	4619      	mov	r1, r3
 8003bee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d15d      	bne.n	8003cb0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68da      	ldr	r2, [r3, #12]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 0220 	bic.w	r2, r2, #32
 8003c02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68da      	ldr	r2, [r3, #12]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	695a      	ldr	r2, [r3, #20]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 0201 	bic.w	r2, r2, #1
 8003c22:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d135      	bne.n	8003ca6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	330c      	adds	r3, #12
 8003c46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	e853 3f00 	ldrex	r3, [r3]
 8003c4e:	613b      	str	r3, [r7, #16]
   return(result);
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	f023 0310 	bic.w	r3, r3, #16
 8003c56:	627b      	str	r3, [r7, #36]	; 0x24
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	330c      	adds	r3, #12
 8003c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c60:	623a      	str	r2, [r7, #32]
 8003c62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c64:	69f9      	ldr	r1, [r7, #28]
 8003c66:	6a3a      	ldr	r2, [r7, #32]
 8003c68:	e841 2300 	strex	r3, r2, [r1]
 8003c6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1e5      	bne.n	8003c40 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0310 	and.w	r3, r3, #16
 8003c7e:	2b10      	cmp	r3, #16
 8003c80:	d10a      	bne.n	8003c98 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c82:	2300      	movs	r3, #0
 8003c84:	60fb      	str	r3, [r7, #12]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	60fb      	str	r3, [r7, #12]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	60fb      	str	r3, [r7, #12]
 8003c96:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7ff fdf9 	bl	8003896 <HAL_UARTEx_RxEventCallback>
 8003ca4:	e002      	b.n	8003cac <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7ff fde3 	bl	8003872 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003cac:	2300      	movs	r3, #0
 8003cae:	e002      	b.n	8003cb6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	e000      	b.n	8003cb6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003cb4:	2302      	movs	r3, #2
  }
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3730      	adds	r7, #48	; 0x30
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
	...

08003cc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689a      	ldr	r2, [r3, #8]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003cfa:	f023 030c 	bic.w	r3, r3, #12
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	6812      	ldr	r2, [r2, #0]
 8003d02:	68b9      	ldr	r1, [r7, #8]
 8003d04:	430b      	orrs	r3, r1
 8003d06:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	699a      	ldr	r2, [r3, #24]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a2c      	ldr	r2, [pc, #176]	; (8003dd4 <UART_SetConfig+0x114>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d103      	bne.n	8003d30 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003d28:	f7ff f9f4 	bl	8003114 <HAL_RCC_GetPCLK2Freq>
 8003d2c:	60f8      	str	r0, [r7, #12]
 8003d2e:	e002      	b.n	8003d36 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003d30:	f7ff f9dc 	bl	80030ec <HAL_RCC_GetPCLK1Freq>
 8003d34:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	4413      	add	r3, r2
 8003d3e:	009a      	lsls	r2, r3, #2
 8003d40:	441a      	add	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d4c:	4a22      	ldr	r2, [pc, #136]	; (8003dd8 <UART_SetConfig+0x118>)
 8003d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d52:	095b      	lsrs	r3, r3, #5
 8003d54:	0119      	lsls	r1, r3, #4
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4413      	add	r3, r2
 8003d5e:	009a      	lsls	r2, r3, #2
 8003d60:	441a      	add	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d6c:	4b1a      	ldr	r3, [pc, #104]	; (8003dd8 <UART_SetConfig+0x118>)
 8003d6e:	fba3 0302 	umull	r0, r3, r3, r2
 8003d72:	095b      	lsrs	r3, r3, #5
 8003d74:	2064      	movs	r0, #100	; 0x64
 8003d76:	fb00 f303 	mul.w	r3, r0, r3
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	011b      	lsls	r3, r3, #4
 8003d7e:	3332      	adds	r3, #50	; 0x32
 8003d80:	4a15      	ldr	r2, [pc, #84]	; (8003dd8 <UART_SetConfig+0x118>)
 8003d82:	fba2 2303 	umull	r2, r3, r2, r3
 8003d86:	095b      	lsrs	r3, r3, #5
 8003d88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d8c:	4419      	add	r1, r3
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	4613      	mov	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	4413      	add	r3, r2
 8003d96:	009a      	lsls	r2, r3, #2
 8003d98:	441a      	add	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003da4:	4b0c      	ldr	r3, [pc, #48]	; (8003dd8 <UART_SetConfig+0x118>)
 8003da6:	fba3 0302 	umull	r0, r3, r3, r2
 8003daa:	095b      	lsrs	r3, r3, #5
 8003dac:	2064      	movs	r0, #100	; 0x64
 8003dae:	fb00 f303 	mul.w	r3, r0, r3
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	011b      	lsls	r3, r3, #4
 8003db6:	3332      	adds	r3, #50	; 0x32
 8003db8:	4a07      	ldr	r2, [pc, #28]	; (8003dd8 <UART_SetConfig+0x118>)
 8003dba:	fba2 2303 	umull	r2, r3, r2, r3
 8003dbe:	095b      	lsrs	r3, r3, #5
 8003dc0:	f003 020f 	and.w	r2, r3, #15
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	440a      	add	r2, r1
 8003dca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003dcc:	bf00      	nop
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	40013800 	.word	0x40013800
 8003dd8:	51eb851f 	.word	0x51eb851f

08003ddc <siprintf>:
 8003ddc:	b40e      	push	{r1, r2, r3}
 8003dde:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003de2:	b500      	push	{lr}
 8003de4:	b09c      	sub	sp, #112	; 0x70
 8003de6:	ab1d      	add	r3, sp, #116	; 0x74
 8003de8:	9002      	str	r0, [sp, #8]
 8003dea:	9006      	str	r0, [sp, #24]
 8003dec:	9107      	str	r1, [sp, #28]
 8003dee:	9104      	str	r1, [sp, #16]
 8003df0:	4808      	ldr	r0, [pc, #32]	; (8003e14 <siprintf+0x38>)
 8003df2:	4909      	ldr	r1, [pc, #36]	; (8003e18 <siprintf+0x3c>)
 8003df4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003df8:	9105      	str	r1, [sp, #20]
 8003dfa:	6800      	ldr	r0, [r0, #0]
 8003dfc:	a902      	add	r1, sp, #8
 8003dfe:	9301      	str	r3, [sp, #4]
 8003e00:	f000 f9b4 	bl	800416c <_svfiprintf_r>
 8003e04:	2200      	movs	r2, #0
 8003e06:	9b02      	ldr	r3, [sp, #8]
 8003e08:	701a      	strb	r2, [r3, #0]
 8003e0a:	b01c      	add	sp, #112	; 0x70
 8003e0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e10:	b003      	add	sp, #12
 8003e12:	4770      	bx	lr
 8003e14:	20000078 	.word	0x20000078
 8003e18:	ffff0208 	.word	0xffff0208

08003e1c <memcmp>:
 8003e1c:	b510      	push	{r4, lr}
 8003e1e:	3901      	subs	r1, #1
 8003e20:	4402      	add	r2, r0
 8003e22:	4290      	cmp	r0, r2
 8003e24:	d101      	bne.n	8003e2a <memcmp+0xe>
 8003e26:	2000      	movs	r0, #0
 8003e28:	e005      	b.n	8003e36 <memcmp+0x1a>
 8003e2a:	7803      	ldrb	r3, [r0, #0]
 8003e2c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003e30:	42a3      	cmp	r3, r4
 8003e32:	d001      	beq.n	8003e38 <memcmp+0x1c>
 8003e34:	1b18      	subs	r0, r3, r4
 8003e36:	bd10      	pop	{r4, pc}
 8003e38:	3001      	adds	r0, #1
 8003e3a:	e7f2      	b.n	8003e22 <memcmp+0x6>

08003e3c <memset>:
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	4402      	add	r2, r0
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d100      	bne.n	8003e46 <memset+0xa>
 8003e44:	4770      	bx	lr
 8003e46:	f803 1b01 	strb.w	r1, [r3], #1
 8003e4a:	e7f9      	b.n	8003e40 <memset+0x4>

08003e4c <strstr>:
 8003e4c:	780a      	ldrb	r2, [r1, #0]
 8003e4e:	b570      	push	{r4, r5, r6, lr}
 8003e50:	b96a      	cbnz	r2, 8003e6e <strstr+0x22>
 8003e52:	bd70      	pop	{r4, r5, r6, pc}
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d109      	bne.n	8003e6c <strstr+0x20>
 8003e58:	460c      	mov	r4, r1
 8003e5a:	4605      	mov	r5, r0
 8003e5c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d0f6      	beq.n	8003e52 <strstr+0x6>
 8003e64:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003e68:	429e      	cmp	r6, r3
 8003e6a:	d0f7      	beq.n	8003e5c <strstr+0x10>
 8003e6c:	3001      	adds	r0, #1
 8003e6e:	7803      	ldrb	r3, [r0, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1ef      	bne.n	8003e54 <strstr+0x8>
 8003e74:	4618      	mov	r0, r3
 8003e76:	e7ec      	b.n	8003e52 <strstr+0x6>

08003e78 <__errno>:
 8003e78:	4b01      	ldr	r3, [pc, #4]	; (8003e80 <__errno+0x8>)
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	20000078 	.word	0x20000078

08003e84 <__libc_init_array>:
 8003e84:	b570      	push	{r4, r5, r6, lr}
 8003e86:	2600      	movs	r6, #0
 8003e88:	4d0c      	ldr	r5, [pc, #48]	; (8003ebc <__libc_init_array+0x38>)
 8003e8a:	4c0d      	ldr	r4, [pc, #52]	; (8003ec0 <__libc_init_array+0x3c>)
 8003e8c:	1b64      	subs	r4, r4, r5
 8003e8e:	10a4      	asrs	r4, r4, #2
 8003e90:	42a6      	cmp	r6, r4
 8003e92:	d109      	bne.n	8003ea8 <__libc_init_array+0x24>
 8003e94:	f000 fc7a 	bl	800478c <_init>
 8003e98:	2600      	movs	r6, #0
 8003e9a:	4d0a      	ldr	r5, [pc, #40]	; (8003ec4 <__libc_init_array+0x40>)
 8003e9c:	4c0a      	ldr	r4, [pc, #40]	; (8003ec8 <__libc_init_array+0x44>)
 8003e9e:	1b64      	subs	r4, r4, r5
 8003ea0:	10a4      	asrs	r4, r4, #2
 8003ea2:	42a6      	cmp	r6, r4
 8003ea4:	d105      	bne.n	8003eb2 <__libc_init_array+0x2e>
 8003ea6:	bd70      	pop	{r4, r5, r6, pc}
 8003ea8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eac:	4798      	blx	r3
 8003eae:	3601      	adds	r6, #1
 8003eb0:	e7ee      	b.n	8003e90 <__libc_init_array+0xc>
 8003eb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eb6:	4798      	blx	r3
 8003eb8:	3601      	adds	r6, #1
 8003eba:	e7f2      	b.n	8003ea2 <__libc_init_array+0x1e>
 8003ebc:	0800547c 	.word	0x0800547c
 8003ec0:	0800547c 	.word	0x0800547c
 8003ec4:	0800547c 	.word	0x0800547c
 8003ec8:	08005480 	.word	0x08005480

08003ecc <__retarget_lock_acquire_recursive>:
 8003ecc:	4770      	bx	lr

08003ece <__retarget_lock_release_recursive>:
 8003ece:	4770      	bx	lr

08003ed0 <_free_r>:
 8003ed0:	b538      	push	{r3, r4, r5, lr}
 8003ed2:	4605      	mov	r5, r0
 8003ed4:	2900      	cmp	r1, #0
 8003ed6:	d040      	beq.n	8003f5a <_free_r+0x8a>
 8003ed8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003edc:	1f0c      	subs	r4, r1, #4
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	bfb8      	it	lt
 8003ee2:	18e4      	addlt	r4, r4, r3
 8003ee4:	f000 f8dc 	bl	80040a0 <__malloc_lock>
 8003ee8:	4a1c      	ldr	r2, [pc, #112]	; (8003f5c <_free_r+0x8c>)
 8003eea:	6813      	ldr	r3, [r2, #0]
 8003eec:	b933      	cbnz	r3, 8003efc <_free_r+0x2c>
 8003eee:	6063      	str	r3, [r4, #4]
 8003ef0:	6014      	str	r4, [r2, #0]
 8003ef2:	4628      	mov	r0, r5
 8003ef4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ef8:	f000 b8d8 	b.w	80040ac <__malloc_unlock>
 8003efc:	42a3      	cmp	r3, r4
 8003efe:	d908      	bls.n	8003f12 <_free_r+0x42>
 8003f00:	6820      	ldr	r0, [r4, #0]
 8003f02:	1821      	adds	r1, r4, r0
 8003f04:	428b      	cmp	r3, r1
 8003f06:	bf01      	itttt	eq
 8003f08:	6819      	ldreq	r1, [r3, #0]
 8003f0a:	685b      	ldreq	r3, [r3, #4]
 8003f0c:	1809      	addeq	r1, r1, r0
 8003f0e:	6021      	streq	r1, [r4, #0]
 8003f10:	e7ed      	b.n	8003eee <_free_r+0x1e>
 8003f12:	461a      	mov	r2, r3
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	b10b      	cbz	r3, 8003f1c <_free_r+0x4c>
 8003f18:	42a3      	cmp	r3, r4
 8003f1a:	d9fa      	bls.n	8003f12 <_free_r+0x42>
 8003f1c:	6811      	ldr	r1, [r2, #0]
 8003f1e:	1850      	adds	r0, r2, r1
 8003f20:	42a0      	cmp	r0, r4
 8003f22:	d10b      	bne.n	8003f3c <_free_r+0x6c>
 8003f24:	6820      	ldr	r0, [r4, #0]
 8003f26:	4401      	add	r1, r0
 8003f28:	1850      	adds	r0, r2, r1
 8003f2a:	4283      	cmp	r3, r0
 8003f2c:	6011      	str	r1, [r2, #0]
 8003f2e:	d1e0      	bne.n	8003ef2 <_free_r+0x22>
 8003f30:	6818      	ldr	r0, [r3, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	4408      	add	r0, r1
 8003f36:	6010      	str	r0, [r2, #0]
 8003f38:	6053      	str	r3, [r2, #4]
 8003f3a:	e7da      	b.n	8003ef2 <_free_r+0x22>
 8003f3c:	d902      	bls.n	8003f44 <_free_r+0x74>
 8003f3e:	230c      	movs	r3, #12
 8003f40:	602b      	str	r3, [r5, #0]
 8003f42:	e7d6      	b.n	8003ef2 <_free_r+0x22>
 8003f44:	6820      	ldr	r0, [r4, #0]
 8003f46:	1821      	adds	r1, r4, r0
 8003f48:	428b      	cmp	r3, r1
 8003f4a:	bf01      	itttt	eq
 8003f4c:	6819      	ldreq	r1, [r3, #0]
 8003f4e:	685b      	ldreq	r3, [r3, #4]
 8003f50:	1809      	addeq	r1, r1, r0
 8003f52:	6021      	streq	r1, [r4, #0]
 8003f54:	6063      	str	r3, [r4, #4]
 8003f56:	6054      	str	r4, [r2, #4]
 8003f58:	e7cb      	b.n	8003ef2 <_free_r+0x22>
 8003f5a:	bd38      	pop	{r3, r4, r5, pc}
 8003f5c:	20000410 	.word	0x20000410

08003f60 <sbrk_aligned>:
 8003f60:	b570      	push	{r4, r5, r6, lr}
 8003f62:	4e0e      	ldr	r6, [pc, #56]	; (8003f9c <sbrk_aligned+0x3c>)
 8003f64:	460c      	mov	r4, r1
 8003f66:	6831      	ldr	r1, [r6, #0]
 8003f68:	4605      	mov	r5, r0
 8003f6a:	b911      	cbnz	r1, 8003f72 <sbrk_aligned+0x12>
 8003f6c:	f000 fbaa 	bl	80046c4 <_sbrk_r>
 8003f70:	6030      	str	r0, [r6, #0]
 8003f72:	4621      	mov	r1, r4
 8003f74:	4628      	mov	r0, r5
 8003f76:	f000 fba5 	bl	80046c4 <_sbrk_r>
 8003f7a:	1c43      	adds	r3, r0, #1
 8003f7c:	d00a      	beq.n	8003f94 <sbrk_aligned+0x34>
 8003f7e:	1cc4      	adds	r4, r0, #3
 8003f80:	f024 0403 	bic.w	r4, r4, #3
 8003f84:	42a0      	cmp	r0, r4
 8003f86:	d007      	beq.n	8003f98 <sbrk_aligned+0x38>
 8003f88:	1a21      	subs	r1, r4, r0
 8003f8a:	4628      	mov	r0, r5
 8003f8c:	f000 fb9a 	bl	80046c4 <_sbrk_r>
 8003f90:	3001      	adds	r0, #1
 8003f92:	d101      	bne.n	8003f98 <sbrk_aligned+0x38>
 8003f94:	f04f 34ff 	mov.w	r4, #4294967295
 8003f98:	4620      	mov	r0, r4
 8003f9a:	bd70      	pop	{r4, r5, r6, pc}
 8003f9c:	20000414 	.word	0x20000414

08003fa0 <_malloc_r>:
 8003fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fa4:	1ccd      	adds	r5, r1, #3
 8003fa6:	f025 0503 	bic.w	r5, r5, #3
 8003faa:	3508      	adds	r5, #8
 8003fac:	2d0c      	cmp	r5, #12
 8003fae:	bf38      	it	cc
 8003fb0:	250c      	movcc	r5, #12
 8003fb2:	2d00      	cmp	r5, #0
 8003fb4:	4607      	mov	r7, r0
 8003fb6:	db01      	blt.n	8003fbc <_malloc_r+0x1c>
 8003fb8:	42a9      	cmp	r1, r5
 8003fba:	d905      	bls.n	8003fc8 <_malloc_r+0x28>
 8003fbc:	230c      	movs	r3, #12
 8003fbe:	2600      	movs	r6, #0
 8003fc0:	603b      	str	r3, [r7, #0]
 8003fc2:	4630      	mov	r0, r6
 8003fc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fc8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800409c <_malloc_r+0xfc>
 8003fcc:	f000 f868 	bl	80040a0 <__malloc_lock>
 8003fd0:	f8d8 3000 	ldr.w	r3, [r8]
 8003fd4:	461c      	mov	r4, r3
 8003fd6:	bb5c      	cbnz	r4, 8004030 <_malloc_r+0x90>
 8003fd8:	4629      	mov	r1, r5
 8003fda:	4638      	mov	r0, r7
 8003fdc:	f7ff ffc0 	bl	8003f60 <sbrk_aligned>
 8003fe0:	1c43      	adds	r3, r0, #1
 8003fe2:	4604      	mov	r4, r0
 8003fe4:	d155      	bne.n	8004092 <_malloc_r+0xf2>
 8003fe6:	f8d8 4000 	ldr.w	r4, [r8]
 8003fea:	4626      	mov	r6, r4
 8003fec:	2e00      	cmp	r6, #0
 8003fee:	d145      	bne.n	800407c <_malloc_r+0xdc>
 8003ff0:	2c00      	cmp	r4, #0
 8003ff2:	d048      	beq.n	8004086 <_malloc_r+0xe6>
 8003ff4:	6823      	ldr	r3, [r4, #0]
 8003ff6:	4631      	mov	r1, r6
 8003ff8:	4638      	mov	r0, r7
 8003ffa:	eb04 0903 	add.w	r9, r4, r3
 8003ffe:	f000 fb61 	bl	80046c4 <_sbrk_r>
 8004002:	4581      	cmp	r9, r0
 8004004:	d13f      	bne.n	8004086 <_malloc_r+0xe6>
 8004006:	6821      	ldr	r1, [r4, #0]
 8004008:	4638      	mov	r0, r7
 800400a:	1a6d      	subs	r5, r5, r1
 800400c:	4629      	mov	r1, r5
 800400e:	f7ff ffa7 	bl	8003f60 <sbrk_aligned>
 8004012:	3001      	adds	r0, #1
 8004014:	d037      	beq.n	8004086 <_malloc_r+0xe6>
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	442b      	add	r3, r5
 800401a:	6023      	str	r3, [r4, #0]
 800401c:	f8d8 3000 	ldr.w	r3, [r8]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d038      	beq.n	8004096 <_malloc_r+0xf6>
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	42a2      	cmp	r2, r4
 8004028:	d12b      	bne.n	8004082 <_malloc_r+0xe2>
 800402a:	2200      	movs	r2, #0
 800402c:	605a      	str	r2, [r3, #4]
 800402e:	e00f      	b.n	8004050 <_malloc_r+0xb0>
 8004030:	6822      	ldr	r2, [r4, #0]
 8004032:	1b52      	subs	r2, r2, r5
 8004034:	d41f      	bmi.n	8004076 <_malloc_r+0xd6>
 8004036:	2a0b      	cmp	r2, #11
 8004038:	d917      	bls.n	800406a <_malloc_r+0xca>
 800403a:	1961      	adds	r1, r4, r5
 800403c:	42a3      	cmp	r3, r4
 800403e:	6025      	str	r5, [r4, #0]
 8004040:	bf18      	it	ne
 8004042:	6059      	strne	r1, [r3, #4]
 8004044:	6863      	ldr	r3, [r4, #4]
 8004046:	bf08      	it	eq
 8004048:	f8c8 1000 	streq.w	r1, [r8]
 800404c:	5162      	str	r2, [r4, r5]
 800404e:	604b      	str	r3, [r1, #4]
 8004050:	4638      	mov	r0, r7
 8004052:	f104 060b 	add.w	r6, r4, #11
 8004056:	f000 f829 	bl	80040ac <__malloc_unlock>
 800405a:	f026 0607 	bic.w	r6, r6, #7
 800405e:	1d23      	adds	r3, r4, #4
 8004060:	1af2      	subs	r2, r6, r3
 8004062:	d0ae      	beq.n	8003fc2 <_malloc_r+0x22>
 8004064:	1b9b      	subs	r3, r3, r6
 8004066:	50a3      	str	r3, [r4, r2]
 8004068:	e7ab      	b.n	8003fc2 <_malloc_r+0x22>
 800406a:	42a3      	cmp	r3, r4
 800406c:	6862      	ldr	r2, [r4, #4]
 800406e:	d1dd      	bne.n	800402c <_malloc_r+0x8c>
 8004070:	f8c8 2000 	str.w	r2, [r8]
 8004074:	e7ec      	b.n	8004050 <_malloc_r+0xb0>
 8004076:	4623      	mov	r3, r4
 8004078:	6864      	ldr	r4, [r4, #4]
 800407a:	e7ac      	b.n	8003fd6 <_malloc_r+0x36>
 800407c:	4634      	mov	r4, r6
 800407e:	6876      	ldr	r6, [r6, #4]
 8004080:	e7b4      	b.n	8003fec <_malloc_r+0x4c>
 8004082:	4613      	mov	r3, r2
 8004084:	e7cc      	b.n	8004020 <_malloc_r+0x80>
 8004086:	230c      	movs	r3, #12
 8004088:	4638      	mov	r0, r7
 800408a:	603b      	str	r3, [r7, #0]
 800408c:	f000 f80e 	bl	80040ac <__malloc_unlock>
 8004090:	e797      	b.n	8003fc2 <_malloc_r+0x22>
 8004092:	6025      	str	r5, [r4, #0]
 8004094:	e7dc      	b.n	8004050 <_malloc_r+0xb0>
 8004096:	605b      	str	r3, [r3, #4]
 8004098:	deff      	udf	#255	; 0xff
 800409a:	bf00      	nop
 800409c:	20000410 	.word	0x20000410

080040a0 <__malloc_lock>:
 80040a0:	4801      	ldr	r0, [pc, #4]	; (80040a8 <__malloc_lock+0x8>)
 80040a2:	f7ff bf13 	b.w	8003ecc <__retarget_lock_acquire_recursive>
 80040a6:	bf00      	nop
 80040a8:	2000040c 	.word	0x2000040c

080040ac <__malloc_unlock>:
 80040ac:	4801      	ldr	r0, [pc, #4]	; (80040b4 <__malloc_unlock+0x8>)
 80040ae:	f7ff bf0e 	b.w	8003ece <__retarget_lock_release_recursive>
 80040b2:	bf00      	nop
 80040b4:	2000040c 	.word	0x2000040c

080040b8 <__ssputs_r>:
 80040b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040bc:	461f      	mov	r7, r3
 80040be:	688e      	ldr	r6, [r1, #8]
 80040c0:	4682      	mov	sl, r0
 80040c2:	42be      	cmp	r6, r7
 80040c4:	460c      	mov	r4, r1
 80040c6:	4690      	mov	r8, r2
 80040c8:	680b      	ldr	r3, [r1, #0]
 80040ca:	d82c      	bhi.n	8004126 <__ssputs_r+0x6e>
 80040cc:	898a      	ldrh	r2, [r1, #12]
 80040ce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80040d2:	d026      	beq.n	8004122 <__ssputs_r+0x6a>
 80040d4:	6965      	ldr	r5, [r4, #20]
 80040d6:	6909      	ldr	r1, [r1, #16]
 80040d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80040dc:	eba3 0901 	sub.w	r9, r3, r1
 80040e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80040e4:	1c7b      	adds	r3, r7, #1
 80040e6:	444b      	add	r3, r9
 80040e8:	106d      	asrs	r5, r5, #1
 80040ea:	429d      	cmp	r5, r3
 80040ec:	bf38      	it	cc
 80040ee:	461d      	movcc	r5, r3
 80040f0:	0553      	lsls	r3, r2, #21
 80040f2:	d527      	bpl.n	8004144 <__ssputs_r+0x8c>
 80040f4:	4629      	mov	r1, r5
 80040f6:	f7ff ff53 	bl	8003fa0 <_malloc_r>
 80040fa:	4606      	mov	r6, r0
 80040fc:	b360      	cbz	r0, 8004158 <__ssputs_r+0xa0>
 80040fe:	464a      	mov	r2, r9
 8004100:	6921      	ldr	r1, [r4, #16]
 8004102:	f000 fafd 	bl	8004700 <memcpy>
 8004106:	89a3      	ldrh	r3, [r4, #12]
 8004108:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800410c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004110:	81a3      	strh	r3, [r4, #12]
 8004112:	6126      	str	r6, [r4, #16]
 8004114:	444e      	add	r6, r9
 8004116:	6026      	str	r6, [r4, #0]
 8004118:	463e      	mov	r6, r7
 800411a:	6165      	str	r5, [r4, #20]
 800411c:	eba5 0509 	sub.w	r5, r5, r9
 8004120:	60a5      	str	r5, [r4, #8]
 8004122:	42be      	cmp	r6, r7
 8004124:	d900      	bls.n	8004128 <__ssputs_r+0x70>
 8004126:	463e      	mov	r6, r7
 8004128:	4632      	mov	r2, r6
 800412a:	4641      	mov	r1, r8
 800412c:	6820      	ldr	r0, [r4, #0]
 800412e:	f000 faaf 	bl	8004690 <memmove>
 8004132:	2000      	movs	r0, #0
 8004134:	68a3      	ldr	r3, [r4, #8]
 8004136:	1b9b      	subs	r3, r3, r6
 8004138:	60a3      	str	r3, [r4, #8]
 800413a:	6823      	ldr	r3, [r4, #0]
 800413c:	4433      	add	r3, r6
 800413e:	6023      	str	r3, [r4, #0]
 8004140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004144:	462a      	mov	r2, r5
 8004146:	f000 fae9 	bl	800471c <_realloc_r>
 800414a:	4606      	mov	r6, r0
 800414c:	2800      	cmp	r0, #0
 800414e:	d1e0      	bne.n	8004112 <__ssputs_r+0x5a>
 8004150:	4650      	mov	r0, sl
 8004152:	6921      	ldr	r1, [r4, #16]
 8004154:	f7ff febc 	bl	8003ed0 <_free_r>
 8004158:	230c      	movs	r3, #12
 800415a:	f8ca 3000 	str.w	r3, [sl]
 800415e:	89a3      	ldrh	r3, [r4, #12]
 8004160:	f04f 30ff 	mov.w	r0, #4294967295
 8004164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004168:	81a3      	strh	r3, [r4, #12]
 800416a:	e7e9      	b.n	8004140 <__ssputs_r+0x88>

0800416c <_svfiprintf_r>:
 800416c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004170:	4698      	mov	r8, r3
 8004172:	898b      	ldrh	r3, [r1, #12]
 8004174:	4607      	mov	r7, r0
 8004176:	061b      	lsls	r3, r3, #24
 8004178:	460d      	mov	r5, r1
 800417a:	4614      	mov	r4, r2
 800417c:	b09d      	sub	sp, #116	; 0x74
 800417e:	d50e      	bpl.n	800419e <_svfiprintf_r+0x32>
 8004180:	690b      	ldr	r3, [r1, #16]
 8004182:	b963      	cbnz	r3, 800419e <_svfiprintf_r+0x32>
 8004184:	2140      	movs	r1, #64	; 0x40
 8004186:	f7ff ff0b 	bl	8003fa0 <_malloc_r>
 800418a:	6028      	str	r0, [r5, #0]
 800418c:	6128      	str	r0, [r5, #16]
 800418e:	b920      	cbnz	r0, 800419a <_svfiprintf_r+0x2e>
 8004190:	230c      	movs	r3, #12
 8004192:	603b      	str	r3, [r7, #0]
 8004194:	f04f 30ff 	mov.w	r0, #4294967295
 8004198:	e0d0      	b.n	800433c <_svfiprintf_r+0x1d0>
 800419a:	2340      	movs	r3, #64	; 0x40
 800419c:	616b      	str	r3, [r5, #20]
 800419e:	2300      	movs	r3, #0
 80041a0:	9309      	str	r3, [sp, #36]	; 0x24
 80041a2:	2320      	movs	r3, #32
 80041a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041a8:	2330      	movs	r3, #48	; 0x30
 80041aa:	f04f 0901 	mov.w	r9, #1
 80041ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80041b2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8004354 <_svfiprintf_r+0x1e8>
 80041b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041ba:	4623      	mov	r3, r4
 80041bc:	469a      	mov	sl, r3
 80041be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041c2:	b10a      	cbz	r2, 80041c8 <_svfiprintf_r+0x5c>
 80041c4:	2a25      	cmp	r2, #37	; 0x25
 80041c6:	d1f9      	bne.n	80041bc <_svfiprintf_r+0x50>
 80041c8:	ebba 0b04 	subs.w	fp, sl, r4
 80041cc:	d00b      	beq.n	80041e6 <_svfiprintf_r+0x7a>
 80041ce:	465b      	mov	r3, fp
 80041d0:	4622      	mov	r2, r4
 80041d2:	4629      	mov	r1, r5
 80041d4:	4638      	mov	r0, r7
 80041d6:	f7ff ff6f 	bl	80040b8 <__ssputs_r>
 80041da:	3001      	adds	r0, #1
 80041dc:	f000 80a9 	beq.w	8004332 <_svfiprintf_r+0x1c6>
 80041e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041e2:	445a      	add	r2, fp
 80041e4:	9209      	str	r2, [sp, #36]	; 0x24
 80041e6:	f89a 3000 	ldrb.w	r3, [sl]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f000 80a1 	beq.w	8004332 <_svfiprintf_r+0x1c6>
 80041f0:	2300      	movs	r3, #0
 80041f2:	f04f 32ff 	mov.w	r2, #4294967295
 80041f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041fa:	f10a 0a01 	add.w	sl, sl, #1
 80041fe:	9304      	str	r3, [sp, #16]
 8004200:	9307      	str	r3, [sp, #28]
 8004202:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004206:	931a      	str	r3, [sp, #104]	; 0x68
 8004208:	4654      	mov	r4, sl
 800420a:	2205      	movs	r2, #5
 800420c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004210:	4850      	ldr	r0, [pc, #320]	; (8004354 <_svfiprintf_r+0x1e8>)
 8004212:	f000 fa67 	bl	80046e4 <memchr>
 8004216:	9a04      	ldr	r2, [sp, #16]
 8004218:	b9d8      	cbnz	r0, 8004252 <_svfiprintf_r+0xe6>
 800421a:	06d0      	lsls	r0, r2, #27
 800421c:	bf44      	itt	mi
 800421e:	2320      	movmi	r3, #32
 8004220:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004224:	0711      	lsls	r1, r2, #28
 8004226:	bf44      	itt	mi
 8004228:	232b      	movmi	r3, #43	; 0x2b
 800422a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800422e:	f89a 3000 	ldrb.w	r3, [sl]
 8004232:	2b2a      	cmp	r3, #42	; 0x2a
 8004234:	d015      	beq.n	8004262 <_svfiprintf_r+0xf6>
 8004236:	4654      	mov	r4, sl
 8004238:	2000      	movs	r0, #0
 800423a:	f04f 0c0a 	mov.w	ip, #10
 800423e:	9a07      	ldr	r2, [sp, #28]
 8004240:	4621      	mov	r1, r4
 8004242:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004246:	3b30      	subs	r3, #48	; 0x30
 8004248:	2b09      	cmp	r3, #9
 800424a:	d94d      	bls.n	80042e8 <_svfiprintf_r+0x17c>
 800424c:	b1b0      	cbz	r0, 800427c <_svfiprintf_r+0x110>
 800424e:	9207      	str	r2, [sp, #28]
 8004250:	e014      	b.n	800427c <_svfiprintf_r+0x110>
 8004252:	eba0 0308 	sub.w	r3, r0, r8
 8004256:	fa09 f303 	lsl.w	r3, r9, r3
 800425a:	4313      	orrs	r3, r2
 800425c:	46a2      	mov	sl, r4
 800425e:	9304      	str	r3, [sp, #16]
 8004260:	e7d2      	b.n	8004208 <_svfiprintf_r+0x9c>
 8004262:	9b03      	ldr	r3, [sp, #12]
 8004264:	1d19      	adds	r1, r3, #4
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	9103      	str	r1, [sp, #12]
 800426a:	2b00      	cmp	r3, #0
 800426c:	bfbb      	ittet	lt
 800426e:	425b      	neglt	r3, r3
 8004270:	f042 0202 	orrlt.w	r2, r2, #2
 8004274:	9307      	strge	r3, [sp, #28]
 8004276:	9307      	strlt	r3, [sp, #28]
 8004278:	bfb8      	it	lt
 800427a:	9204      	strlt	r2, [sp, #16]
 800427c:	7823      	ldrb	r3, [r4, #0]
 800427e:	2b2e      	cmp	r3, #46	; 0x2e
 8004280:	d10c      	bne.n	800429c <_svfiprintf_r+0x130>
 8004282:	7863      	ldrb	r3, [r4, #1]
 8004284:	2b2a      	cmp	r3, #42	; 0x2a
 8004286:	d134      	bne.n	80042f2 <_svfiprintf_r+0x186>
 8004288:	9b03      	ldr	r3, [sp, #12]
 800428a:	3402      	adds	r4, #2
 800428c:	1d1a      	adds	r2, r3, #4
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	9203      	str	r2, [sp, #12]
 8004292:	2b00      	cmp	r3, #0
 8004294:	bfb8      	it	lt
 8004296:	f04f 33ff 	movlt.w	r3, #4294967295
 800429a:	9305      	str	r3, [sp, #20]
 800429c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004358 <_svfiprintf_r+0x1ec>
 80042a0:	2203      	movs	r2, #3
 80042a2:	4650      	mov	r0, sl
 80042a4:	7821      	ldrb	r1, [r4, #0]
 80042a6:	f000 fa1d 	bl	80046e4 <memchr>
 80042aa:	b138      	cbz	r0, 80042bc <_svfiprintf_r+0x150>
 80042ac:	2240      	movs	r2, #64	; 0x40
 80042ae:	9b04      	ldr	r3, [sp, #16]
 80042b0:	eba0 000a 	sub.w	r0, r0, sl
 80042b4:	4082      	lsls	r2, r0
 80042b6:	4313      	orrs	r3, r2
 80042b8:	3401      	adds	r4, #1
 80042ba:	9304      	str	r3, [sp, #16]
 80042bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042c0:	2206      	movs	r2, #6
 80042c2:	4826      	ldr	r0, [pc, #152]	; (800435c <_svfiprintf_r+0x1f0>)
 80042c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042c8:	f000 fa0c 	bl	80046e4 <memchr>
 80042cc:	2800      	cmp	r0, #0
 80042ce:	d038      	beq.n	8004342 <_svfiprintf_r+0x1d6>
 80042d0:	4b23      	ldr	r3, [pc, #140]	; (8004360 <_svfiprintf_r+0x1f4>)
 80042d2:	bb1b      	cbnz	r3, 800431c <_svfiprintf_r+0x1b0>
 80042d4:	9b03      	ldr	r3, [sp, #12]
 80042d6:	3307      	adds	r3, #7
 80042d8:	f023 0307 	bic.w	r3, r3, #7
 80042dc:	3308      	adds	r3, #8
 80042de:	9303      	str	r3, [sp, #12]
 80042e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042e2:	4433      	add	r3, r6
 80042e4:	9309      	str	r3, [sp, #36]	; 0x24
 80042e6:	e768      	b.n	80041ba <_svfiprintf_r+0x4e>
 80042e8:	460c      	mov	r4, r1
 80042ea:	2001      	movs	r0, #1
 80042ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80042f0:	e7a6      	b.n	8004240 <_svfiprintf_r+0xd4>
 80042f2:	2300      	movs	r3, #0
 80042f4:	f04f 0c0a 	mov.w	ip, #10
 80042f8:	4619      	mov	r1, r3
 80042fa:	3401      	adds	r4, #1
 80042fc:	9305      	str	r3, [sp, #20]
 80042fe:	4620      	mov	r0, r4
 8004300:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004304:	3a30      	subs	r2, #48	; 0x30
 8004306:	2a09      	cmp	r2, #9
 8004308:	d903      	bls.n	8004312 <_svfiprintf_r+0x1a6>
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0c6      	beq.n	800429c <_svfiprintf_r+0x130>
 800430e:	9105      	str	r1, [sp, #20]
 8004310:	e7c4      	b.n	800429c <_svfiprintf_r+0x130>
 8004312:	4604      	mov	r4, r0
 8004314:	2301      	movs	r3, #1
 8004316:	fb0c 2101 	mla	r1, ip, r1, r2
 800431a:	e7f0      	b.n	80042fe <_svfiprintf_r+0x192>
 800431c:	ab03      	add	r3, sp, #12
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	462a      	mov	r2, r5
 8004322:	4638      	mov	r0, r7
 8004324:	4b0f      	ldr	r3, [pc, #60]	; (8004364 <_svfiprintf_r+0x1f8>)
 8004326:	a904      	add	r1, sp, #16
 8004328:	f3af 8000 	nop.w
 800432c:	1c42      	adds	r2, r0, #1
 800432e:	4606      	mov	r6, r0
 8004330:	d1d6      	bne.n	80042e0 <_svfiprintf_r+0x174>
 8004332:	89ab      	ldrh	r3, [r5, #12]
 8004334:	065b      	lsls	r3, r3, #25
 8004336:	f53f af2d 	bmi.w	8004194 <_svfiprintf_r+0x28>
 800433a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800433c:	b01d      	add	sp, #116	; 0x74
 800433e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004342:	ab03      	add	r3, sp, #12
 8004344:	9300      	str	r3, [sp, #0]
 8004346:	462a      	mov	r2, r5
 8004348:	4638      	mov	r0, r7
 800434a:	4b06      	ldr	r3, [pc, #24]	; (8004364 <_svfiprintf_r+0x1f8>)
 800434c:	a904      	add	r1, sp, #16
 800434e:	f000 f87d 	bl	800444c <_printf_i>
 8004352:	e7eb      	b.n	800432c <_svfiprintf_r+0x1c0>
 8004354:	08005446 	.word	0x08005446
 8004358:	0800544c 	.word	0x0800544c
 800435c:	08005450 	.word	0x08005450
 8004360:	00000000 	.word	0x00000000
 8004364:	080040b9 	.word	0x080040b9

08004368 <_printf_common>:
 8004368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800436c:	4616      	mov	r6, r2
 800436e:	4699      	mov	r9, r3
 8004370:	688a      	ldr	r2, [r1, #8]
 8004372:	690b      	ldr	r3, [r1, #16]
 8004374:	4607      	mov	r7, r0
 8004376:	4293      	cmp	r3, r2
 8004378:	bfb8      	it	lt
 800437a:	4613      	movlt	r3, r2
 800437c:	6033      	str	r3, [r6, #0]
 800437e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004382:	460c      	mov	r4, r1
 8004384:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004388:	b10a      	cbz	r2, 800438e <_printf_common+0x26>
 800438a:	3301      	adds	r3, #1
 800438c:	6033      	str	r3, [r6, #0]
 800438e:	6823      	ldr	r3, [r4, #0]
 8004390:	0699      	lsls	r1, r3, #26
 8004392:	bf42      	ittt	mi
 8004394:	6833      	ldrmi	r3, [r6, #0]
 8004396:	3302      	addmi	r3, #2
 8004398:	6033      	strmi	r3, [r6, #0]
 800439a:	6825      	ldr	r5, [r4, #0]
 800439c:	f015 0506 	ands.w	r5, r5, #6
 80043a0:	d106      	bne.n	80043b0 <_printf_common+0x48>
 80043a2:	f104 0a19 	add.w	sl, r4, #25
 80043a6:	68e3      	ldr	r3, [r4, #12]
 80043a8:	6832      	ldr	r2, [r6, #0]
 80043aa:	1a9b      	subs	r3, r3, r2
 80043ac:	42ab      	cmp	r3, r5
 80043ae:	dc2b      	bgt.n	8004408 <_printf_common+0xa0>
 80043b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80043b4:	1e13      	subs	r3, r2, #0
 80043b6:	6822      	ldr	r2, [r4, #0]
 80043b8:	bf18      	it	ne
 80043ba:	2301      	movne	r3, #1
 80043bc:	0692      	lsls	r2, r2, #26
 80043be:	d430      	bmi.n	8004422 <_printf_common+0xba>
 80043c0:	4649      	mov	r1, r9
 80043c2:	4638      	mov	r0, r7
 80043c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043c8:	47c0      	blx	r8
 80043ca:	3001      	adds	r0, #1
 80043cc:	d023      	beq.n	8004416 <_printf_common+0xae>
 80043ce:	6823      	ldr	r3, [r4, #0]
 80043d0:	6922      	ldr	r2, [r4, #16]
 80043d2:	f003 0306 	and.w	r3, r3, #6
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	bf14      	ite	ne
 80043da:	2500      	movne	r5, #0
 80043dc:	6833      	ldreq	r3, [r6, #0]
 80043de:	f04f 0600 	mov.w	r6, #0
 80043e2:	bf08      	it	eq
 80043e4:	68e5      	ldreq	r5, [r4, #12]
 80043e6:	f104 041a 	add.w	r4, r4, #26
 80043ea:	bf08      	it	eq
 80043ec:	1aed      	subeq	r5, r5, r3
 80043ee:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80043f2:	bf08      	it	eq
 80043f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043f8:	4293      	cmp	r3, r2
 80043fa:	bfc4      	itt	gt
 80043fc:	1a9b      	subgt	r3, r3, r2
 80043fe:	18ed      	addgt	r5, r5, r3
 8004400:	42b5      	cmp	r5, r6
 8004402:	d11a      	bne.n	800443a <_printf_common+0xd2>
 8004404:	2000      	movs	r0, #0
 8004406:	e008      	b.n	800441a <_printf_common+0xb2>
 8004408:	2301      	movs	r3, #1
 800440a:	4652      	mov	r2, sl
 800440c:	4649      	mov	r1, r9
 800440e:	4638      	mov	r0, r7
 8004410:	47c0      	blx	r8
 8004412:	3001      	adds	r0, #1
 8004414:	d103      	bne.n	800441e <_printf_common+0xb6>
 8004416:	f04f 30ff 	mov.w	r0, #4294967295
 800441a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800441e:	3501      	adds	r5, #1
 8004420:	e7c1      	b.n	80043a6 <_printf_common+0x3e>
 8004422:	2030      	movs	r0, #48	; 0x30
 8004424:	18e1      	adds	r1, r4, r3
 8004426:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800442a:	1c5a      	adds	r2, r3, #1
 800442c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004430:	4422      	add	r2, r4
 8004432:	3302      	adds	r3, #2
 8004434:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004438:	e7c2      	b.n	80043c0 <_printf_common+0x58>
 800443a:	2301      	movs	r3, #1
 800443c:	4622      	mov	r2, r4
 800443e:	4649      	mov	r1, r9
 8004440:	4638      	mov	r0, r7
 8004442:	47c0      	blx	r8
 8004444:	3001      	adds	r0, #1
 8004446:	d0e6      	beq.n	8004416 <_printf_common+0xae>
 8004448:	3601      	adds	r6, #1
 800444a:	e7d9      	b.n	8004400 <_printf_common+0x98>

0800444c <_printf_i>:
 800444c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004450:	7e0f      	ldrb	r7, [r1, #24]
 8004452:	4691      	mov	r9, r2
 8004454:	2f78      	cmp	r7, #120	; 0x78
 8004456:	4680      	mov	r8, r0
 8004458:	460c      	mov	r4, r1
 800445a:	469a      	mov	sl, r3
 800445c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800445e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004462:	d807      	bhi.n	8004474 <_printf_i+0x28>
 8004464:	2f62      	cmp	r7, #98	; 0x62
 8004466:	d80a      	bhi.n	800447e <_printf_i+0x32>
 8004468:	2f00      	cmp	r7, #0
 800446a:	f000 80d5 	beq.w	8004618 <_printf_i+0x1cc>
 800446e:	2f58      	cmp	r7, #88	; 0x58
 8004470:	f000 80c1 	beq.w	80045f6 <_printf_i+0x1aa>
 8004474:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004478:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800447c:	e03a      	b.n	80044f4 <_printf_i+0xa8>
 800447e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004482:	2b15      	cmp	r3, #21
 8004484:	d8f6      	bhi.n	8004474 <_printf_i+0x28>
 8004486:	a101      	add	r1, pc, #4	; (adr r1, 800448c <_printf_i+0x40>)
 8004488:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800448c:	080044e5 	.word	0x080044e5
 8004490:	080044f9 	.word	0x080044f9
 8004494:	08004475 	.word	0x08004475
 8004498:	08004475 	.word	0x08004475
 800449c:	08004475 	.word	0x08004475
 80044a0:	08004475 	.word	0x08004475
 80044a4:	080044f9 	.word	0x080044f9
 80044a8:	08004475 	.word	0x08004475
 80044ac:	08004475 	.word	0x08004475
 80044b0:	08004475 	.word	0x08004475
 80044b4:	08004475 	.word	0x08004475
 80044b8:	080045ff 	.word	0x080045ff
 80044bc:	08004525 	.word	0x08004525
 80044c0:	080045b9 	.word	0x080045b9
 80044c4:	08004475 	.word	0x08004475
 80044c8:	08004475 	.word	0x08004475
 80044cc:	08004621 	.word	0x08004621
 80044d0:	08004475 	.word	0x08004475
 80044d4:	08004525 	.word	0x08004525
 80044d8:	08004475 	.word	0x08004475
 80044dc:	08004475 	.word	0x08004475
 80044e0:	080045c1 	.word	0x080045c1
 80044e4:	682b      	ldr	r3, [r5, #0]
 80044e6:	1d1a      	adds	r2, r3, #4
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	602a      	str	r2, [r5, #0]
 80044ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044f4:	2301      	movs	r3, #1
 80044f6:	e0a0      	b.n	800463a <_printf_i+0x1ee>
 80044f8:	6820      	ldr	r0, [r4, #0]
 80044fa:	682b      	ldr	r3, [r5, #0]
 80044fc:	0607      	lsls	r7, r0, #24
 80044fe:	f103 0104 	add.w	r1, r3, #4
 8004502:	6029      	str	r1, [r5, #0]
 8004504:	d501      	bpl.n	800450a <_printf_i+0xbe>
 8004506:	681e      	ldr	r6, [r3, #0]
 8004508:	e003      	b.n	8004512 <_printf_i+0xc6>
 800450a:	0646      	lsls	r6, r0, #25
 800450c:	d5fb      	bpl.n	8004506 <_printf_i+0xba>
 800450e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004512:	2e00      	cmp	r6, #0
 8004514:	da03      	bge.n	800451e <_printf_i+0xd2>
 8004516:	232d      	movs	r3, #45	; 0x2d
 8004518:	4276      	negs	r6, r6
 800451a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800451e:	230a      	movs	r3, #10
 8004520:	4859      	ldr	r0, [pc, #356]	; (8004688 <_printf_i+0x23c>)
 8004522:	e012      	b.n	800454a <_printf_i+0xfe>
 8004524:	682b      	ldr	r3, [r5, #0]
 8004526:	6820      	ldr	r0, [r4, #0]
 8004528:	1d19      	adds	r1, r3, #4
 800452a:	6029      	str	r1, [r5, #0]
 800452c:	0605      	lsls	r5, r0, #24
 800452e:	d501      	bpl.n	8004534 <_printf_i+0xe8>
 8004530:	681e      	ldr	r6, [r3, #0]
 8004532:	e002      	b.n	800453a <_printf_i+0xee>
 8004534:	0641      	lsls	r1, r0, #25
 8004536:	d5fb      	bpl.n	8004530 <_printf_i+0xe4>
 8004538:	881e      	ldrh	r6, [r3, #0]
 800453a:	2f6f      	cmp	r7, #111	; 0x6f
 800453c:	bf0c      	ite	eq
 800453e:	2308      	moveq	r3, #8
 8004540:	230a      	movne	r3, #10
 8004542:	4851      	ldr	r0, [pc, #324]	; (8004688 <_printf_i+0x23c>)
 8004544:	2100      	movs	r1, #0
 8004546:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800454a:	6865      	ldr	r5, [r4, #4]
 800454c:	2d00      	cmp	r5, #0
 800454e:	bfa8      	it	ge
 8004550:	6821      	ldrge	r1, [r4, #0]
 8004552:	60a5      	str	r5, [r4, #8]
 8004554:	bfa4      	itt	ge
 8004556:	f021 0104 	bicge.w	r1, r1, #4
 800455a:	6021      	strge	r1, [r4, #0]
 800455c:	b90e      	cbnz	r6, 8004562 <_printf_i+0x116>
 800455e:	2d00      	cmp	r5, #0
 8004560:	d04b      	beq.n	80045fa <_printf_i+0x1ae>
 8004562:	4615      	mov	r5, r2
 8004564:	fbb6 f1f3 	udiv	r1, r6, r3
 8004568:	fb03 6711 	mls	r7, r3, r1, r6
 800456c:	5dc7      	ldrb	r7, [r0, r7]
 800456e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004572:	4637      	mov	r7, r6
 8004574:	42bb      	cmp	r3, r7
 8004576:	460e      	mov	r6, r1
 8004578:	d9f4      	bls.n	8004564 <_printf_i+0x118>
 800457a:	2b08      	cmp	r3, #8
 800457c:	d10b      	bne.n	8004596 <_printf_i+0x14a>
 800457e:	6823      	ldr	r3, [r4, #0]
 8004580:	07de      	lsls	r6, r3, #31
 8004582:	d508      	bpl.n	8004596 <_printf_i+0x14a>
 8004584:	6923      	ldr	r3, [r4, #16]
 8004586:	6861      	ldr	r1, [r4, #4]
 8004588:	4299      	cmp	r1, r3
 800458a:	bfde      	ittt	le
 800458c:	2330      	movle	r3, #48	; 0x30
 800458e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004592:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004596:	1b52      	subs	r2, r2, r5
 8004598:	6122      	str	r2, [r4, #16]
 800459a:	464b      	mov	r3, r9
 800459c:	4621      	mov	r1, r4
 800459e:	4640      	mov	r0, r8
 80045a0:	f8cd a000 	str.w	sl, [sp]
 80045a4:	aa03      	add	r2, sp, #12
 80045a6:	f7ff fedf 	bl	8004368 <_printf_common>
 80045aa:	3001      	adds	r0, #1
 80045ac:	d14a      	bne.n	8004644 <_printf_i+0x1f8>
 80045ae:	f04f 30ff 	mov.w	r0, #4294967295
 80045b2:	b004      	add	sp, #16
 80045b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045b8:	6823      	ldr	r3, [r4, #0]
 80045ba:	f043 0320 	orr.w	r3, r3, #32
 80045be:	6023      	str	r3, [r4, #0]
 80045c0:	2778      	movs	r7, #120	; 0x78
 80045c2:	4832      	ldr	r0, [pc, #200]	; (800468c <_printf_i+0x240>)
 80045c4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80045c8:	6823      	ldr	r3, [r4, #0]
 80045ca:	6829      	ldr	r1, [r5, #0]
 80045cc:	061f      	lsls	r7, r3, #24
 80045ce:	f851 6b04 	ldr.w	r6, [r1], #4
 80045d2:	d402      	bmi.n	80045da <_printf_i+0x18e>
 80045d4:	065f      	lsls	r7, r3, #25
 80045d6:	bf48      	it	mi
 80045d8:	b2b6      	uxthmi	r6, r6
 80045da:	07df      	lsls	r7, r3, #31
 80045dc:	bf48      	it	mi
 80045de:	f043 0320 	orrmi.w	r3, r3, #32
 80045e2:	6029      	str	r1, [r5, #0]
 80045e4:	bf48      	it	mi
 80045e6:	6023      	strmi	r3, [r4, #0]
 80045e8:	b91e      	cbnz	r6, 80045f2 <_printf_i+0x1a6>
 80045ea:	6823      	ldr	r3, [r4, #0]
 80045ec:	f023 0320 	bic.w	r3, r3, #32
 80045f0:	6023      	str	r3, [r4, #0]
 80045f2:	2310      	movs	r3, #16
 80045f4:	e7a6      	b.n	8004544 <_printf_i+0xf8>
 80045f6:	4824      	ldr	r0, [pc, #144]	; (8004688 <_printf_i+0x23c>)
 80045f8:	e7e4      	b.n	80045c4 <_printf_i+0x178>
 80045fa:	4615      	mov	r5, r2
 80045fc:	e7bd      	b.n	800457a <_printf_i+0x12e>
 80045fe:	682b      	ldr	r3, [r5, #0]
 8004600:	6826      	ldr	r6, [r4, #0]
 8004602:	1d18      	adds	r0, r3, #4
 8004604:	6961      	ldr	r1, [r4, #20]
 8004606:	6028      	str	r0, [r5, #0]
 8004608:	0635      	lsls	r5, r6, #24
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	d501      	bpl.n	8004612 <_printf_i+0x1c6>
 800460e:	6019      	str	r1, [r3, #0]
 8004610:	e002      	b.n	8004618 <_printf_i+0x1cc>
 8004612:	0670      	lsls	r0, r6, #25
 8004614:	d5fb      	bpl.n	800460e <_printf_i+0x1c2>
 8004616:	8019      	strh	r1, [r3, #0]
 8004618:	2300      	movs	r3, #0
 800461a:	4615      	mov	r5, r2
 800461c:	6123      	str	r3, [r4, #16]
 800461e:	e7bc      	b.n	800459a <_printf_i+0x14e>
 8004620:	682b      	ldr	r3, [r5, #0]
 8004622:	2100      	movs	r1, #0
 8004624:	1d1a      	adds	r2, r3, #4
 8004626:	602a      	str	r2, [r5, #0]
 8004628:	681d      	ldr	r5, [r3, #0]
 800462a:	6862      	ldr	r2, [r4, #4]
 800462c:	4628      	mov	r0, r5
 800462e:	f000 f859 	bl	80046e4 <memchr>
 8004632:	b108      	cbz	r0, 8004638 <_printf_i+0x1ec>
 8004634:	1b40      	subs	r0, r0, r5
 8004636:	6060      	str	r0, [r4, #4]
 8004638:	6863      	ldr	r3, [r4, #4]
 800463a:	6123      	str	r3, [r4, #16]
 800463c:	2300      	movs	r3, #0
 800463e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004642:	e7aa      	b.n	800459a <_printf_i+0x14e>
 8004644:	462a      	mov	r2, r5
 8004646:	4649      	mov	r1, r9
 8004648:	4640      	mov	r0, r8
 800464a:	6923      	ldr	r3, [r4, #16]
 800464c:	47d0      	blx	sl
 800464e:	3001      	adds	r0, #1
 8004650:	d0ad      	beq.n	80045ae <_printf_i+0x162>
 8004652:	6823      	ldr	r3, [r4, #0]
 8004654:	079b      	lsls	r3, r3, #30
 8004656:	d413      	bmi.n	8004680 <_printf_i+0x234>
 8004658:	68e0      	ldr	r0, [r4, #12]
 800465a:	9b03      	ldr	r3, [sp, #12]
 800465c:	4298      	cmp	r0, r3
 800465e:	bfb8      	it	lt
 8004660:	4618      	movlt	r0, r3
 8004662:	e7a6      	b.n	80045b2 <_printf_i+0x166>
 8004664:	2301      	movs	r3, #1
 8004666:	4632      	mov	r2, r6
 8004668:	4649      	mov	r1, r9
 800466a:	4640      	mov	r0, r8
 800466c:	47d0      	blx	sl
 800466e:	3001      	adds	r0, #1
 8004670:	d09d      	beq.n	80045ae <_printf_i+0x162>
 8004672:	3501      	adds	r5, #1
 8004674:	68e3      	ldr	r3, [r4, #12]
 8004676:	9903      	ldr	r1, [sp, #12]
 8004678:	1a5b      	subs	r3, r3, r1
 800467a:	42ab      	cmp	r3, r5
 800467c:	dcf2      	bgt.n	8004664 <_printf_i+0x218>
 800467e:	e7eb      	b.n	8004658 <_printf_i+0x20c>
 8004680:	2500      	movs	r5, #0
 8004682:	f104 0619 	add.w	r6, r4, #25
 8004686:	e7f5      	b.n	8004674 <_printf_i+0x228>
 8004688:	08005457 	.word	0x08005457
 800468c:	08005468 	.word	0x08005468

08004690 <memmove>:
 8004690:	4288      	cmp	r0, r1
 8004692:	b510      	push	{r4, lr}
 8004694:	eb01 0402 	add.w	r4, r1, r2
 8004698:	d902      	bls.n	80046a0 <memmove+0x10>
 800469a:	4284      	cmp	r4, r0
 800469c:	4623      	mov	r3, r4
 800469e:	d807      	bhi.n	80046b0 <memmove+0x20>
 80046a0:	1e43      	subs	r3, r0, #1
 80046a2:	42a1      	cmp	r1, r4
 80046a4:	d008      	beq.n	80046b8 <memmove+0x28>
 80046a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80046ae:	e7f8      	b.n	80046a2 <memmove+0x12>
 80046b0:	4601      	mov	r1, r0
 80046b2:	4402      	add	r2, r0
 80046b4:	428a      	cmp	r2, r1
 80046b6:	d100      	bne.n	80046ba <memmove+0x2a>
 80046b8:	bd10      	pop	{r4, pc}
 80046ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80046be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80046c2:	e7f7      	b.n	80046b4 <memmove+0x24>

080046c4 <_sbrk_r>:
 80046c4:	b538      	push	{r3, r4, r5, lr}
 80046c6:	2300      	movs	r3, #0
 80046c8:	4d05      	ldr	r5, [pc, #20]	; (80046e0 <_sbrk_r+0x1c>)
 80046ca:	4604      	mov	r4, r0
 80046cc:	4608      	mov	r0, r1
 80046ce:	602b      	str	r3, [r5, #0]
 80046d0:	f7fc ffd6 	bl	8001680 <_sbrk>
 80046d4:	1c43      	adds	r3, r0, #1
 80046d6:	d102      	bne.n	80046de <_sbrk_r+0x1a>
 80046d8:	682b      	ldr	r3, [r5, #0]
 80046da:	b103      	cbz	r3, 80046de <_sbrk_r+0x1a>
 80046dc:	6023      	str	r3, [r4, #0]
 80046de:	bd38      	pop	{r3, r4, r5, pc}
 80046e0:	20000408 	.word	0x20000408

080046e4 <memchr>:
 80046e4:	4603      	mov	r3, r0
 80046e6:	b510      	push	{r4, lr}
 80046e8:	b2c9      	uxtb	r1, r1
 80046ea:	4402      	add	r2, r0
 80046ec:	4293      	cmp	r3, r2
 80046ee:	4618      	mov	r0, r3
 80046f0:	d101      	bne.n	80046f6 <memchr+0x12>
 80046f2:	2000      	movs	r0, #0
 80046f4:	e003      	b.n	80046fe <memchr+0x1a>
 80046f6:	7804      	ldrb	r4, [r0, #0]
 80046f8:	3301      	adds	r3, #1
 80046fa:	428c      	cmp	r4, r1
 80046fc:	d1f6      	bne.n	80046ec <memchr+0x8>
 80046fe:	bd10      	pop	{r4, pc}

08004700 <memcpy>:
 8004700:	440a      	add	r2, r1
 8004702:	4291      	cmp	r1, r2
 8004704:	f100 33ff 	add.w	r3, r0, #4294967295
 8004708:	d100      	bne.n	800470c <memcpy+0xc>
 800470a:	4770      	bx	lr
 800470c:	b510      	push	{r4, lr}
 800470e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004712:	4291      	cmp	r1, r2
 8004714:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004718:	d1f9      	bne.n	800470e <memcpy+0xe>
 800471a:	bd10      	pop	{r4, pc}

0800471c <_realloc_r>:
 800471c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004720:	4680      	mov	r8, r0
 8004722:	4614      	mov	r4, r2
 8004724:	460e      	mov	r6, r1
 8004726:	b921      	cbnz	r1, 8004732 <_realloc_r+0x16>
 8004728:	4611      	mov	r1, r2
 800472a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800472e:	f7ff bc37 	b.w	8003fa0 <_malloc_r>
 8004732:	b92a      	cbnz	r2, 8004740 <_realloc_r+0x24>
 8004734:	f7ff fbcc 	bl	8003ed0 <_free_r>
 8004738:	4625      	mov	r5, r4
 800473a:	4628      	mov	r0, r5
 800473c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004740:	f000 f81b 	bl	800477a <_malloc_usable_size_r>
 8004744:	4284      	cmp	r4, r0
 8004746:	4607      	mov	r7, r0
 8004748:	d802      	bhi.n	8004750 <_realloc_r+0x34>
 800474a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800474e:	d812      	bhi.n	8004776 <_realloc_r+0x5a>
 8004750:	4621      	mov	r1, r4
 8004752:	4640      	mov	r0, r8
 8004754:	f7ff fc24 	bl	8003fa0 <_malloc_r>
 8004758:	4605      	mov	r5, r0
 800475a:	2800      	cmp	r0, #0
 800475c:	d0ed      	beq.n	800473a <_realloc_r+0x1e>
 800475e:	42bc      	cmp	r4, r7
 8004760:	4622      	mov	r2, r4
 8004762:	4631      	mov	r1, r6
 8004764:	bf28      	it	cs
 8004766:	463a      	movcs	r2, r7
 8004768:	f7ff ffca 	bl	8004700 <memcpy>
 800476c:	4631      	mov	r1, r6
 800476e:	4640      	mov	r0, r8
 8004770:	f7ff fbae 	bl	8003ed0 <_free_r>
 8004774:	e7e1      	b.n	800473a <_realloc_r+0x1e>
 8004776:	4635      	mov	r5, r6
 8004778:	e7df      	b.n	800473a <_realloc_r+0x1e>

0800477a <_malloc_usable_size_r>:
 800477a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800477e:	1f18      	subs	r0, r3, #4
 8004780:	2b00      	cmp	r3, #0
 8004782:	bfbc      	itt	lt
 8004784:	580b      	ldrlt	r3, [r1, r0]
 8004786:	18c0      	addlt	r0, r0, r3
 8004788:	4770      	bx	lr
	...

0800478c <_init>:
 800478c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800478e:	bf00      	nop
 8004790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004792:	bc08      	pop	{r3}
 8004794:	469e      	mov	lr, r3
 8004796:	4770      	bx	lr

08004798 <_fini>:
 8004798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479a:	bf00      	nop
 800479c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800479e:	bc08      	pop	{r3}
 80047a0:	469e      	mov	lr, r3
 80047a2:	4770      	bx	lr
