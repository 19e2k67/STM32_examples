
STM32F103C8T6_Printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000695c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  08006a70  08006a70  00016a70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ed0  08006ed0  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08006ed0  08006ed0  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ed0  08006ed0  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ed0  08006ed0  00016ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ed4  08006ed4  00016ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08006ed8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  200001d4  080070ac  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  080070ac  0002038c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   000067b2  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001601  00000000  00000000  000269f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006f0  00000000  00000000  00027ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000533  00000000  00000000  000286e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017bb6  00000000  00000000  00028c1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009168  00000000  00000000  000407d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00083a72  00000000  00000000  00049939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002fa8  00000000  00000000  000cd3ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  000d0354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08006a54 	.word	0x08006a54

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08006a54 	.word	0x08006a54

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <MX_GPIO_Init+0x40>)
 8000be0:	699b      	ldr	r3, [r3, #24]
 8000be2:	4a0d      	ldr	r2, [pc, #52]	; (8000c18 <MX_GPIO_Init+0x40>)
 8000be4:	f043 0320 	orr.w	r3, r3, #32
 8000be8:	6193      	str	r3, [r2, #24]
 8000bea:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <MX_GPIO_Init+0x40>)
 8000bec:	699b      	ldr	r3, [r3, #24]
 8000bee:	f003 0320 	and.w	r3, r3, #32
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <MX_GPIO_Init+0x40>)
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	4a07      	ldr	r2, [pc, #28]	; (8000c18 <MX_GPIO_Init+0x40>)
 8000bfc:	f043 0304 	orr.w	r3, r3, #4
 8000c00:	6193      	str	r3, [r2, #24]
 8000c02:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <MX_GPIO_Init+0x40>)
 8000c04:	699b      	ldr	r3, [r3, #24]
 8000c06:	f003 0304 	and.w	r3, r3, #4
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	683b      	ldr	r3, [r7, #0]

}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr
 8000c18:	40021000 	.word	0x40021000

08000c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c22:	f000 fa27 	bl	8001074 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c26:	f000 f81d 	bl	8000c64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c2a:	f7ff ffd5 	bl	8000bd8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000c2e:	f000 f985 	bl	8000f3c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  float a = 12.3;
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <main+0x3c>)
 8000c34:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	printf("%02f\r\n",a);
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff fbf6 	bl	8000428 <__aeabi_f2d>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	460b      	mov	r3, r1
 8000c40:	4806      	ldr	r0, [pc, #24]	; (8000c5c <main+0x40>)
 8000c42:	f002 fa13 	bl	800306c <iprintf>
	printf("\r\n");
 8000c46:	4806      	ldr	r0, [pc, #24]	; (8000c60 <main+0x44>)
 8000c48:	f002 fa76 	bl	8003138 <puts>


	HAL_Delay(1000);
 8000c4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c50:	f000 fa72 	bl	8001138 <HAL_Delay>
	printf("%02f\r\n",a);
 8000c54:	e7ef      	b.n	8000c36 <main+0x1a>
 8000c56:	bf00      	nop
 8000c58:	4144cccd 	.word	0x4144cccd
 8000c5c:	08006a70 	.word	0x08006a70
 8000c60:	08006a78 	.word	0x08006a78

08000c64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b090      	sub	sp, #64	; 0x40
 8000c68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c6a:	f107 0318 	add.w	r3, r7, #24
 8000c6e:	2228      	movs	r2, #40	; 0x28
 8000c70:	2100      	movs	r1, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	f002 fb60 	bl	8003338 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
 8000c84:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c86:	2301      	movs	r3, #1
 8000c88:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c8e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c90:	2300      	movs	r3, #0
 8000c92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c94:	2301      	movs	r3, #1
 8000c96:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ca0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ca2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca8:	f107 0318 	add.w	r3, r7, #24
 8000cac:	4618      	mov	r0, r3
 8000cae:	f000 fccf 	bl	8001650 <HAL_RCC_OscConfig>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000cb8:	f000 f819 	bl	8000cee <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cbc:	230f      	movs	r3, #15
 8000cbe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ccc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	2102      	movs	r1, #2
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f000 ff3c 	bl	8001b54 <HAL_RCC_ClockConfig>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ce2:	f000 f804 	bl	8000cee <Error_Handler>
  }
}
 8000ce6:	bf00      	nop
 8000ce8:	3740      	adds	r7, #64	; 0x40
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf2:	b672      	cpsid	i
}
 8000cf4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <Error_Handler+0x8>

08000cf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <HAL_MspInit+0x40>)
 8000d00:	699b      	ldr	r3, [r3, #24]
 8000d02:	4a0d      	ldr	r2, [pc, #52]	; (8000d38 <HAL_MspInit+0x40>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6193      	str	r3, [r2, #24]
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <HAL_MspInit+0x40>)
 8000d0c:	699b      	ldr	r3, [r3, #24]
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d16:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <HAL_MspInit+0x40>)
 8000d18:	69db      	ldr	r3, [r3, #28]
 8000d1a:	4a07      	ldr	r2, [pc, #28]	; (8000d38 <HAL_MspInit+0x40>)
 8000d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d20:	61d3      	str	r3, [r2, #28]
 8000d22:	4b05      	ldr	r3, [pc, #20]	; (8000d38 <HAL_MspInit+0x40>)
 8000d24:	69db      	ldr	r3, [r3, #28]
 8000d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	603b      	str	r3, [r7, #0]
 8000d2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr
 8000d38:	40021000 	.word	0x40021000

08000d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <NMI_Handler+0x4>

08000d42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d46:	e7fe      	b.n	8000d46 <HardFault_Handler+0x4>

08000d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <MemManage_Handler+0x4>

08000d4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d52:	e7fe      	b.n	8000d52 <BusFault_Handler+0x4>

08000d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <UsageFault_Handler+0x4>

08000d5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc80      	pop	{r7}
 8000d64:	4770      	bx	lr

08000d66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr

08000d72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr

08000d7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d82:	f000 f9bd 	bl	8001100 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  return 1;
 8000d8e:	2301      	movs	r3, #1
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr

08000d98 <_kill>:

int _kill(int pid, int sig)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000da2:	f002 fb1b 	bl	80033dc <__errno>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2216      	movs	r2, #22
 8000daa:	601a      	str	r2, [r3, #0]
  return -1;
 8000dac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <_exit>:

void _exit (int status)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f7ff ffe7 	bl	8000d98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000dca:	e7fe      	b.n	8000dca <_exit+0x12>

08000dcc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]
 8000ddc:	e00a      	b.n	8000df4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dde:	f3af 8000 	nop.w
 8000de2:	4601      	mov	r1, r0
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	1c5a      	adds	r2, r3, #1
 8000de8:	60ba      	str	r2, [r7, #8]
 8000dea:	b2ca      	uxtb	r2, r1
 8000dec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	3301      	adds	r3, #1
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	697a      	ldr	r2, [r7, #20]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	dbf0      	blt.n	8000dde <_read+0x12>
  }

  return len;
 8000dfc:	687b      	ldr	r3, [r7, #4]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b086      	sub	sp, #24
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	60f8      	str	r0, [r7, #12]
 8000e0e:	60b9      	str	r1, [r7, #8]
 8000e10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
 8000e16:	e009      	b.n	8000e2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	1c5a      	adds	r2, r3, #1
 8000e1c:	60ba      	str	r2, [r7, #8]
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f000 f879 	bl	8000f18 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	617b      	str	r3, [r7, #20]
 8000e2c:	697a      	ldr	r2, [r7, #20]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	dbf1      	blt.n	8000e18 <_write+0x12>
  }
  return len;
 8000e34:	687b      	ldr	r3, [r7, #4]
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <_close>:

int _close(int file)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	b083      	sub	sp, #12
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr

08000e54 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e64:	605a      	str	r2, [r3, #4]
  return 0;
 8000e66:	2300      	movs	r3, #0
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bc80      	pop	{r7}
 8000e70:	4770      	bx	lr

08000e72 <_isatty>:

int _isatty(int file)
{
 8000e72:	b480      	push	{r7}
 8000e74:	b083      	sub	sp, #12
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e7a:	2301      	movs	r3, #1
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr

08000e86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e86:	b480      	push	{r7}
 8000e88:	b085      	sub	sp, #20
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	60f8      	str	r0, [r7, #12]
 8000e8e:	60b9      	str	r1, [r7, #8]
 8000e90:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e92:	2300      	movs	r3, #0
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr
	...

08000ea0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea8:	4a14      	ldr	r2, [pc, #80]	; (8000efc <_sbrk+0x5c>)
 8000eaa:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <_sbrk+0x60>)
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb4:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <_sbrk+0x64>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d102      	bne.n	8000ec2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ebc:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <_sbrk+0x64>)
 8000ebe:	4a12      	ldr	r2, [pc, #72]	; (8000f08 <_sbrk+0x68>)
 8000ec0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ec2:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <_sbrk+0x64>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d207      	bcs.n	8000ee0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ed0:	f002 fa84 	bl	80033dc <__errno>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	220c      	movs	r2, #12
 8000ed8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eda:	f04f 33ff 	mov.w	r3, #4294967295
 8000ede:	e009      	b.n	8000ef4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <_sbrk+0x64>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ee6:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <_sbrk+0x64>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4413      	add	r3, r2
 8000eee:	4a05      	ldr	r2, [pc, #20]	; (8000f04 <_sbrk+0x64>)
 8000ef0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3718      	adds	r7, #24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20005000 	.word	0x20005000
 8000f00:	00000400 	.word	0x00000400
 8000f04:	200001f0 	.word	0x200001f0
 8000f08:	20000390 	.word	0x20000390

08000f0c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr

08000f18 <__io_putchar>:
     *@brief  Retargets the C library printf  function to the USART.
     *@param  None
     *@retval None
 ******************************************************************/
 PUTCHAR_PROTOTYPE
 {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
     HAL_UART_Transmit(&huart1, (uint8_t *)&ch,1,0xFFFF);
 8000f20:	1d39      	adds	r1, r7, #4
 8000f22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f26:	2201      	movs	r2, #1
 8000f28:	4803      	ldr	r0, [pc, #12]	; (8000f38 <__io_putchar+0x20>)
 8000f2a:	f000 fff1 	bl	8001f10 <HAL_UART_Transmit>
     return ch;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 }
 8000f30:	4618      	mov	r0, r3
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	200001f4 	.word	0x200001f4

08000f3c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f42:	4a12      	ldr	r2, [pc, #72]	; (8000f8c <MX_USART1_UART_Init+0x50>)
 8000f44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f60:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f62:	220c      	movs	r2, #12
 8000f64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f66:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f72:	4805      	ldr	r0, [pc, #20]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f74:	f000 ff7c 	bl	8001e70 <HAL_UART_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f7e:	f7ff feb6 	bl	8000cee <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200001f4 	.word	0x200001f4
 8000f8c:	40013800 	.word	0x40013800

08000f90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 0310 	add.w	r3, r7, #16
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a1c      	ldr	r2, [pc, #112]	; (800101c <HAL_UART_MspInit+0x8c>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d131      	bne.n	8001014 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fb0:	4b1b      	ldr	r3, [pc, #108]	; (8001020 <HAL_UART_MspInit+0x90>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	4a1a      	ldr	r2, [pc, #104]	; (8001020 <HAL_UART_MspInit+0x90>)
 8000fb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fba:	6193      	str	r3, [r2, #24]
 8000fbc:	4b18      	ldr	r3, [pc, #96]	; (8001020 <HAL_UART_MspInit+0x90>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc8:	4b15      	ldr	r3, [pc, #84]	; (8001020 <HAL_UART_MspInit+0x90>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	4a14      	ldr	r2, [pc, #80]	; (8001020 <HAL_UART_MspInit+0x90>)
 8000fce:	f043 0304 	orr.w	r3, r3, #4
 8000fd2:	6193      	str	r3, [r2, #24]
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <HAL_UART_MspInit+0x90>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	f003 0304 	and.w	r3, r3, #4
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fe0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fe4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fea:	2303      	movs	r3, #3
 8000fec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fee:	f107 0310 	add.w	r3, r7, #16
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	480b      	ldr	r0, [pc, #44]	; (8001024 <HAL_UART_MspInit+0x94>)
 8000ff6:	f000 f9a7 	bl	8001348 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ffe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001008:	f107 0310 	add.w	r3, r7, #16
 800100c:	4619      	mov	r1, r3
 800100e:	4805      	ldr	r0, [pc, #20]	; (8001024 <HAL_UART_MspInit+0x94>)
 8001010:	f000 f99a 	bl	8001348 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001014:	bf00      	nop
 8001016:	3720      	adds	r7, #32
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40013800 	.word	0x40013800
 8001020:	40021000 	.word	0x40021000
 8001024:	40010800 	.word	0x40010800

08001028 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001028:	f7ff ff70 	bl	8000f0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800102c:	480b      	ldr	r0, [pc, #44]	; (800105c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800102e:	490c      	ldr	r1, [pc, #48]	; (8001060 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001030:	4a0c      	ldr	r2, [pc, #48]	; (8001064 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001034:	e002      	b.n	800103c <LoopCopyDataInit>

08001036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103a:	3304      	adds	r3, #4

0800103c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800103c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001040:	d3f9      	bcc.n	8001036 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001042:	4a09      	ldr	r2, [pc, #36]	; (8001068 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001044:	4c09      	ldr	r4, [pc, #36]	; (800106c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001048:	e001      	b.n	800104e <LoopFillZerobss>

0800104a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800104c:	3204      	adds	r2, #4

0800104e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001050:	d3fb      	bcc.n	800104a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001052:	f002 f9c9 	bl	80033e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001056:	f7ff fde1 	bl	8000c1c <main>
  bx lr
 800105a:	4770      	bx	lr
  ldr r0, =_sdata
 800105c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001060:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001064:	08006ed8 	.word	0x08006ed8
  ldr r2, =_sbss
 8001068:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800106c:	2000038c 	.word	0x2000038c

08001070 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001070:	e7fe      	b.n	8001070 <ADC1_2_IRQHandler>
	...

08001074 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001078:	4b08      	ldr	r3, [pc, #32]	; (800109c <HAL_Init+0x28>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a07      	ldr	r2, [pc, #28]	; (800109c <HAL_Init+0x28>)
 800107e:	f043 0310 	orr.w	r3, r3, #16
 8001082:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001084:	2003      	movs	r0, #3
 8001086:	f000 f92b 	bl	80012e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800108a:	200f      	movs	r0, #15
 800108c:	f000 f808 	bl	80010a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001090:	f7ff fe32 	bl	8000cf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40022000 	.word	0x40022000

080010a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <HAL_InitTick+0x54>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <HAL_InitTick+0x58>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	4619      	mov	r1, r3
 80010b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 f935 	bl	800132e <HAL_SYSTICK_Config>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e00e      	b.n	80010ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2b0f      	cmp	r3, #15
 80010d2:	d80a      	bhi.n	80010ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d4:	2200      	movs	r2, #0
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	f04f 30ff 	mov.w	r0, #4294967295
 80010dc:	f000 f90b 	bl	80012f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e0:	4a06      	ldr	r2, [pc, #24]	; (80010fc <HAL_InitTick+0x5c>)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010e6:	2300      	movs	r3, #0
 80010e8:	e000      	b.n	80010ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000000 	.word	0x20000000
 80010f8:	20000008 	.word	0x20000008
 80010fc:	20000004 	.word	0x20000004

08001100 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <HAL_IncTick+0x1c>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	461a      	mov	r2, r3
 800110a:	4b05      	ldr	r3, [pc, #20]	; (8001120 <HAL_IncTick+0x20>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4413      	add	r3, r2
 8001110:	4a03      	ldr	r2, [pc, #12]	; (8001120 <HAL_IncTick+0x20>)
 8001112:	6013      	str	r3, [r2, #0]
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr
 800111c:	20000008 	.word	0x20000008
 8001120:	2000023c 	.word	0x2000023c

08001124 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return uwTick;
 8001128:	4b02      	ldr	r3, [pc, #8]	; (8001134 <HAL_GetTick+0x10>)
 800112a:	681b      	ldr	r3, [r3, #0]
}
 800112c:	4618      	mov	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr
 8001134:	2000023c 	.word	0x2000023c

08001138 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001140:	f7ff fff0 	bl	8001124 <HAL_GetTick>
 8001144:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001150:	d005      	beq.n	800115e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001152:	4b0a      	ldr	r3, [pc, #40]	; (800117c <HAL_Delay+0x44>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	461a      	mov	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4413      	add	r3, r2
 800115c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800115e:	bf00      	nop
 8001160:	f7ff ffe0 	bl	8001124 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	429a      	cmp	r2, r3
 800116e:	d8f7      	bhi.n	8001160 <HAL_Delay+0x28>
  {
  }
}
 8001170:	bf00      	nop
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000008 	.word	0x20000008

08001180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800119c:	4013      	ands	r3, r2
 800119e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b2:	4a04      	ldr	r2, [pc, #16]	; (80011c4 <__NVIC_SetPriorityGrouping+0x44>)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	60d3      	str	r3, [r2, #12]
}
 80011b8:	bf00      	nop
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011cc:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <__NVIC_GetPriorityGrouping+0x18>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	0a1b      	lsrs	r3, r3, #8
 80011d2:	f003 0307 	and.w	r3, r3, #7
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	bc80      	pop	{r7}
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	db0a      	blt.n	800120e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	490c      	ldr	r1, [pc, #48]	; (8001230 <__NVIC_SetPriority+0x4c>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	0112      	lsls	r2, r2, #4
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	440b      	add	r3, r1
 8001208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800120c:	e00a      	b.n	8001224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4908      	ldr	r1, [pc, #32]	; (8001234 <__NVIC_SetPriority+0x50>)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	3b04      	subs	r3, #4
 800121c:	0112      	lsls	r2, r2, #4
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	440b      	add	r3, r1
 8001222:	761a      	strb	r2, [r3, #24]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	bc80      	pop	{r7}
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000e100 	.word	0xe000e100
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	; 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f1c3 0307 	rsb	r3, r3, #7
 8001252:	2b04      	cmp	r3, #4
 8001254:	bf28      	it	cs
 8001256:	2304      	movcs	r3, #4
 8001258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3304      	adds	r3, #4
 800125e:	2b06      	cmp	r3, #6
 8001260:	d902      	bls.n	8001268 <NVIC_EncodePriority+0x30>
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3b03      	subs	r3, #3
 8001266:	e000      	b.n	800126a <NVIC_EncodePriority+0x32>
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	f04f 32ff 	mov.w	r2, #4294967295
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43da      	mvns	r2, r3
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	401a      	ands	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001280:	f04f 31ff 	mov.w	r1, #4294967295
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	43d9      	mvns	r1, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	4313      	orrs	r3, r2
         );
}
 8001292:	4618      	mov	r0, r3
 8001294:	3724      	adds	r7, #36	; 0x24
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr

0800129c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012ac:	d301      	bcc.n	80012b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ae:	2301      	movs	r3, #1
 80012b0:	e00f      	b.n	80012d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b2:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <SysTick_Config+0x40>)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ba:	210f      	movs	r1, #15
 80012bc:	f04f 30ff 	mov.w	r0, #4294967295
 80012c0:	f7ff ff90 	bl	80011e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <SysTick_Config+0x40>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ca:	4b04      	ldr	r3, [pc, #16]	; (80012dc <SysTick_Config+0x40>)
 80012cc:	2207      	movs	r2, #7
 80012ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	e000e010 	.word	0xe000e010

080012e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff ff49 	bl	8001180 <__NVIC_SetPriorityGrouping>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b086      	sub	sp, #24
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	4603      	mov	r3, r0
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
 8001302:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001308:	f7ff ff5e 	bl	80011c8 <__NVIC_GetPriorityGrouping>
 800130c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	68b9      	ldr	r1, [r7, #8]
 8001312:	6978      	ldr	r0, [r7, #20]
 8001314:	f7ff ff90 	bl	8001238 <NVIC_EncodePriority>
 8001318:	4602      	mov	r2, r0
 800131a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131e:	4611      	mov	r1, r2
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff5f 	bl	80011e4 <__NVIC_SetPriority>
}
 8001326:	bf00      	nop
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff ffb0 	bl	800129c <SysTick_Config>
 800133c:	4603      	mov	r3, r0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001348:	b480      	push	{r7}
 800134a:	b08b      	sub	sp, #44	; 0x2c
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001352:	2300      	movs	r3, #0
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001356:	2300      	movs	r3, #0
 8001358:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800135a:	e169      	b.n	8001630 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800135c:	2201      	movs	r2, #1
 800135e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	69fa      	ldr	r2, [r7, #28]
 800136c:	4013      	ands	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	429a      	cmp	r2, r3
 8001376:	f040 8158 	bne.w	800162a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	4a9a      	ldr	r2, [pc, #616]	; (80015e8 <HAL_GPIO_Init+0x2a0>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d05e      	beq.n	8001442 <HAL_GPIO_Init+0xfa>
 8001384:	4a98      	ldr	r2, [pc, #608]	; (80015e8 <HAL_GPIO_Init+0x2a0>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d875      	bhi.n	8001476 <HAL_GPIO_Init+0x12e>
 800138a:	4a98      	ldr	r2, [pc, #608]	; (80015ec <HAL_GPIO_Init+0x2a4>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d058      	beq.n	8001442 <HAL_GPIO_Init+0xfa>
 8001390:	4a96      	ldr	r2, [pc, #600]	; (80015ec <HAL_GPIO_Init+0x2a4>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d86f      	bhi.n	8001476 <HAL_GPIO_Init+0x12e>
 8001396:	4a96      	ldr	r2, [pc, #600]	; (80015f0 <HAL_GPIO_Init+0x2a8>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d052      	beq.n	8001442 <HAL_GPIO_Init+0xfa>
 800139c:	4a94      	ldr	r2, [pc, #592]	; (80015f0 <HAL_GPIO_Init+0x2a8>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d869      	bhi.n	8001476 <HAL_GPIO_Init+0x12e>
 80013a2:	4a94      	ldr	r2, [pc, #592]	; (80015f4 <HAL_GPIO_Init+0x2ac>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d04c      	beq.n	8001442 <HAL_GPIO_Init+0xfa>
 80013a8:	4a92      	ldr	r2, [pc, #584]	; (80015f4 <HAL_GPIO_Init+0x2ac>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d863      	bhi.n	8001476 <HAL_GPIO_Init+0x12e>
 80013ae:	4a92      	ldr	r2, [pc, #584]	; (80015f8 <HAL_GPIO_Init+0x2b0>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d046      	beq.n	8001442 <HAL_GPIO_Init+0xfa>
 80013b4:	4a90      	ldr	r2, [pc, #576]	; (80015f8 <HAL_GPIO_Init+0x2b0>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d85d      	bhi.n	8001476 <HAL_GPIO_Init+0x12e>
 80013ba:	2b12      	cmp	r3, #18
 80013bc:	d82a      	bhi.n	8001414 <HAL_GPIO_Init+0xcc>
 80013be:	2b12      	cmp	r3, #18
 80013c0:	d859      	bhi.n	8001476 <HAL_GPIO_Init+0x12e>
 80013c2:	a201      	add	r2, pc, #4	; (adr r2, 80013c8 <HAL_GPIO_Init+0x80>)
 80013c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c8:	08001443 	.word	0x08001443
 80013cc:	0800141d 	.word	0x0800141d
 80013d0:	0800142f 	.word	0x0800142f
 80013d4:	08001471 	.word	0x08001471
 80013d8:	08001477 	.word	0x08001477
 80013dc:	08001477 	.word	0x08001477
 80013e0:	08001477 	.word	0x08001477
 80013e4:	08001477 	.word	0x08001477
 80013e8:	08001477 	.word	0x08001477
 80013ec:	08001477 	.word	0x08001477
 80013f0:	08001477 	.word	0x08001477
 80013f4:	08001477 	.word	0x08001477
 80013f8:	08001477 	.word	0x08001477
 80013fc:	08001477 	.word	0x08001477
 8001400:	08001477 	.word	0x08001477
 8001404:	08001477 	.word	0x08001477
 8001408:	08001477 	.word	0x08001477
 800140c:	08001425 	.word	0x08001425
 8001410:	08001439 	.word	0x08001439
 8001414:	4a79      	ldr	r2, [pc, #484]	; (80015fc <HAL_GPIO_Init+0x2b4>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d013      	beq.n	8001442 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800141a:	e02c      	b.n	8001476 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	623b      	str	r3, [r7, #32]
          break;
 8001422:	e029      	b.n	8001478 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	3304      	adds	r3, #4
 800142a:	623b      	str	r3, [r7, #32]
          break;
 800142c:	e024      	b.n	8001478 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	3308      	adds	r3, #8
 8001434:	623b      	str	r3, [r7, #32]
          break;
 8001436:	e01f      	b.n	8001478 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	330c      	adds	r3, #12
 800143e:	623b      	str	r3, [r7, #32]
          break;
 8001440:	e01a      	b.n	8001478 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d102      	bne.n	8001450 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800144a:	2304      	movs	r3, #4
 800144c:	623b      	str	r3, [r7, #32]
          break;
 800144e:	e013      	b.n	8001478 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d105      	bne.n	8001464 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001458:	2308      	movs	r3, #8
 800145a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	69fa      	ldr	r2, [r7, #28]
 8001460:	611a      	str	r2, [r3, #16]
          break;
 8001462:	e009      	b.n	8001478 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001464:	2308      	movs	r3, #8
 8001466:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	69fa      	ldr	r2, [r7, #28]
 800146c:	615a      	str	r2, [r3, #20]
          break;
 800146e:	e003      	b.n	8001478 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001470:	2300      	movs	r3, #0
 8001472:	623b      	str	r3, [r7, #32]
          break;
 8001474:	e000      	b.n	8001478 <HAL_GPIO_Init+0x130>
          break;
 8001476:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	2bff      	cmp	r3, #255	; 0xff
 800147c:	d801      	bhi.n	8001482 <HAL_GPIO_Init+0x13a>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	e001      	b.n	8001486 <HAL_GPIO_Init+0x13e>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3304      	adds	r3, #4
 8001486:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	2bff      	cmp	r3, #255	; 0xff
 800148c:	d802      	bhi.n	8001494 <HAL_GPIO_Init+0x14c>
 800148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	e002      	b.n	800149a <HAL_GPIO_Init+0x152>
 8001494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001496:	3b08      	subs	r3, #8
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	210f      	movs	r1, #15
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	fa01 f303 	lsl.w	r3, r1, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	401a      	ands	r2, r3
 80014ac:	6a39      	ldr	r1, [r7, #32]
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	fa01 f303 	lsl.w	r3, r1, r3
 80014b4:	431a      	orrs	r2, r3
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f000 80b1 	beq.w	800162a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014c8:	4b4d      	ldr	r3, [pc, #308]	; (8001600 <HAL_GPIO_Init+0x2b8>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	4a4c      	ldr	r2, [pc, #304]	; (8001600 <HAL_GPIO_Init+0x2b8>)
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	6193      	str	r3, [r2, #24]
 80014d4:	4b4a      	ldr	r3, [pc, #296]	; (8001600 <HAL_GPIO_Init+0x2b8>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	60bb      	str	r3, [r7, #8]
 80014de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014e0:	4a48      	ldr	r2, [pc, #288]	; (8001604 <HAL_GPIO_Init+0x2bc>)
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	089b      	lsrs	r3, r3, #2
 80014e6:	3302      	adds	r3, #2
 80014e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f0:	f003 0303 	and.w	r3, r3, #3
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	220f      	movs	r2, #15
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	4013      	ands	r3, r2
 8001502:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a40      	ldr	r2, [pc, #256]	; (8001608 <HAL_GPIO_Init+0x2c0>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d013      	beq.n	8001534 <HAL_GPIO_Init+0x1ec>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a3f      	ldr	r2, [pc, #252]	; (800160c <HAL_GPIO_Init+0x2c4>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d00d      	beq.n	8001530 <HAL_GPIO_Init+0x1e8>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4a3e      	ldr	r2, [pc, #248]	; (8001610 <HAL_GPIO_Init+0x2c8>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d007      	beq.n	800152c <HAL_GPIO_Init+0x1e4>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a3d      	ldr	r2, [pc, #244]	; (8001614 <HAL_GPIO_Init+0x2cc>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d101      	bne.n	8001528 <HAL_GPIO_Init+0x1e0>
 8001524:	2303      	movs	r3, #3
 8001526:	e006      	b.n	8001536 <HAL_GPIO_Init+0x1ee>
 8001528:	2304      	movs	r3, #4
 800152a:	e004      	b.n	8001536 <HAL_GPIO_Init+0x1ee>
 800152c:	2302      	movs	r3, #2
 800152e:	e002      	b.n	8001536 <HAL_GPIO_Init+0x1ee>
 8001530:	2301      	movs	r3, #1
 8001532:	e000      	b.n	8001536 <HAL_GPIO_Init+0x1ee>
 8001534:	2300      	movs	r3, #0
 8001536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001538:	f002 0203 	and.w	r2, r2, #3
 800153c:	0092      	lsls	r2, r2, #2
 800153e:	4093      	lsls	r3, r2
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	4313      	orrs	r3, r2
 8001544:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001546:	492f      	ldr	r1, [pc, #188]	; (8001604 <HAL_GPIO_Init+0x2bc>)
 8001548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154a:	089b      	lsrs	r3, r3, #2
 800154c:	3302      	adds	r3, #2
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d006      	beq.n	800156e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001560:	4b2d      	ldr	r3, [pc, #180]	; (8001618 <HAL_GPIO_Init+0x2d0>)
 8001562:	689a      	ldr	r2, [r3, #8]
 8001564:	492c      	ldr	r1, [pc, #176]	; (8001618 <HAL_GPIO_Init+0x2d0>)
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	4313      	orrs	r3, r2
 800156a:	608b      	str	r3, [r1, #8]
 800156c:	e006      	b.n	800157c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800156e:	4b2a      	ldr	r3, [pc, #168]	; (8001618 <HAL_GPIO_Init+0x2d0>)
 8001570:	689a      	ldr	r2, [r3, #8]
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	43db      	mvns	r3, r3
 8001576:	4928      	ldr	r1, [pc, #160]	; (8001618 <HAL_GPIO_Init+0x2d0>)
 8001578:	4013      	ands	r3, r2
 800157a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d006      	beq.n	8001596 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001588:	4b23      	ldr	r3, [pc, #140]	; (8001618 <HAL_GPIO_Init+0x2d0>)
 800158a:	68da      	ldr	r2, [r3, #12]
 800158c:	4922      	ldr	r1, [pc, #136]	; (8001618 <HAL_GPIO_Init+0x2d0>)
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	4313      	orrs	r3, r2
 8001592:	60cb      	str	r3, [r1, #12]
 8001594:	e006      	b.n	80015a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001596:	4b20      	ldr	r3, [pc, #128]	; (8001618 <HAL_GPIO_Init+0x2d0>)
 8001598:	68da      	ldr	r2, [r3, #12]
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	43db      	mvns	r3, r3
 800159e:	491e      	ldr	r1, [pc, #120]	; (8001618 <HAL_GPIO_Init+0x2d0>)
 80015a0:	4013      	ands	r3, r2
 80015a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d006      	beq.n	80015be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015b0:	4b19      	ldr	r3, [pc, #100]	; (8001618 <HAL_GPIO_Init+0x2d0>)
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	4918      	ldr	r1, [pc, #96]	; (8001618 <HAL_GPIO_Init+0x2d0>)
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	604b      	str	r3, [r1, #4]
 80015bc:	e006      	b.n	80015cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015be:	4b16      	ldr	r3, [pc, #88]	; (8001618 <HAL_GPIO_Init+0x2d0>)
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	43db      	mvns	r3, r3
 80015c6:	4914      	ldr	r1, [pc, #80]	; (8001618 <HAL_GPIO_Init+0x2d0>)
 80015c8:	4013      	ands	r3, r2
 80015ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d021      	beq.n	800161c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015d8:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <HAL_GPIO_Init+0x2d0>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	490e      	ldr	r1, [pc, #56]	; (8001618 <HAL_GPIO_Init+0x2d0>)
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	600b      	str	r3, [r1, #0]
 80015e4:	e021      	b.n	800162a <HAL_GPIO_Init+0x2e2>
 80015e6:	bf00      	nop
 80015e8:	10320000 	.word	0x10320000
 80015ec:	10310000 	.word	0x10310000
 80015f0:	10220000 	.word	0x10220000
 80015f4:	10210000 	.word	0x10210000
 80015f8:	10120000 	.word	0x10120000
 80015fc:	10110000 	.word	0x10110000
 8001600:	40021000 	.word	0x40021000
 8001604:	40010000 	.word	0x40010000
 8001608:	40010800 	.word	0x40010800
 800160c:	40010c00 	.word	0x40010c00
 8001610:	40011000 	.word	0x40011000
 8001614:	40011400 	.word	0x40011400
 8001618:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800161c:	4b0b      	ldr	r3, [pc, #44]	; (800164c <HAL_GPIO_Init+0x304>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	43db      	mvns	r3, r3
 8001624:	4909      	ldr	r1, [pc, #36]	; (800164c <HAL_GPIO_Init+0x304>)
 8001626:	4013      	ands	r3, r2
 8001628:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	3301      	adds	r3, #1
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	fa22 f303 	lsr.w	r3, r2, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	f47f ae8e 	bne.w	800135c <HAL_GPIO_Init+0x14>
  }
}
 8001640:	bf00      	nop
 8001642:	bf00      	nop
 8001644:	372c      	adds	r7, #44	; 0x2c
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr
 800164c:	40010400 	.word	0x40010400

08001650 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d101      	bne.n	8001662 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e272      	b.n	8001b48 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	2b00      	cmp	r3, #0
 800166c:	f000 8087 	beq.w	800177e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001670:	4b92      	ldr	r3, [pc, #584]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 030c 	and.w	r3, r3, #12
 8001678:	2b04      	cmp	r3, #4
 800167a:	d00c      	beq.n	8001696 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800167c:	4b8f      	ldr	r3, [pc, #572]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f003 030c 	and.w	r3, r3, #12
 8001684:	2b08      	cmp	r3, #8
 8001686:	d112      	bne.n	80016ae <HAL_RCC_OscConfig+0x5e>
 8001688:	4b8c      	ldr	r3, [pc, #560]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001694:	d10b      	bne.n	80016ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001696:	4b89      	ldr	r3, [pc, #548]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d06c      	beq.n	800177c <HAL_RCC_OscConfig+0x12c>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d168      	bne.n	800177c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e24c      	b.n	8001b48 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016b6:	d106      	bne.n	80016c6 <HAL_RCC_OscConfig+0x76>
 80016b8:	4b80      	ldr	r3, [pc, #512]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a7f      	ldr	r2, [pc, #508]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 80016be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016c2:	6013      	str	r3, [r2, #0]
 80016c4:	e02e      	b.n	8001724 <HAL_RCC_OscConfig+0xd4>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d10c      	bne.n	80016e8 <HAL_RCC_OscConfig+0x98>
 80016ce:	4b7b      	ldr	r3, [pc, #492]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a7a      	ldr	r2, [pc, #488]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 80016d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	4b78      	ldr	r3, [pc, #480]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a77      	ldr	r2, [pc, #476]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 80016e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016e4:	6013      	str	r3, [r2, #0]
 80016e6:	e01d      	b.n	8001724 <HAL_RCC_OscConfig+0xd4>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016f0:	d10c      	bne.n	800170c <HAL_RCC_OscConfig+0xbc>
 80016f2:	4b72      	ldr	r3, [pc, #456]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a71      	ldr	r2, [pc, #452]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 80016f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	4b6f      	ldr	r3, [pc, #444]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a6e      	ldr	r2, [pc, #440]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 8001704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	e00b      	b.n	8001724 <HAL_RCC_OscConfig+0xd4>
 800170c:	4b6b      	ldr	r3, [pc, #428]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a6a      	ldr	r2, [pc, #424]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 8001712:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001716:	6013      	str	r3, [r2, #0]
 8001718:	4b68      	ldr	r3, [pc, #416]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a67      	ldr	r2, [pc, #412]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 800171e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001722:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d013      	beq.n	8001754 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172c:	f7ff fcfa 	bl	8001124 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001734:	f7ff fcf6 	bl	8001124 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b64      	cmp	r3, #100	; 0x64
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e200      	b.n	8001b48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001746:	4b5d      	ldr	r3, [pc, #372]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0f0      	beq.n	8001734 <HAL_RCC_OscConfig+0xe4>
 8001752:	e014      	b.n	800177e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001754:	f7ff fce6 	bl	8001124 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800175c:	f7ff fce2 	bl	8001124 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b64      	cmp	r3, #100	; 0x64
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e1ec      	b.n	8001b48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800176e:	4b53      	ldr	r3, [pc, #332]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f0      	bne.n	800175c <HAL_RCC_OscConfig+0x10c>
 800177a:	e000      	b.n	800177e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800177c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d063      	beq.n	8001852 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800178a:	4b4c      	ldr	r3, [pc, #304]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f003 030c 	and.w	r3, r3, #12
 8001792:	2b00      	cmp	r3, #0
 8001794:	d00b      	beq.n	80017ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001796:	4b49      	ldr	r3, [pc, #292]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f003 030c 	and.w	r3, r3, #12
 800179e:	2b08      	cmp	r3, #8
 80017a0:	d11c      	bne.n	80017dc <HAL_RCC_OscConfig+0x18c>
 80017a2:	4b46      	ldr	r3, [pc, #280]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d116      	bne.n	80017dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ae:	4b43      	ldr	r3, [pc, #268]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d005      	beq.n	80017c6 <HAL_RCC_OscConfig+0x176>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d001      	beq.n	80017c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e1c0      	b.n	8001b48 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c6:	4b3d      	ldr	r3, [pc, #244]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	4939      	ldr	r1, [pc, #228]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017da:	e03a      	b.n	8001852 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	691b      	ldr	r3, [r3, #16]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d020      	beq.n	8001826 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017e4:	4b36      	ldr	r3, [pc, #216]	; (80018c0 <HAL_RCC_OscConfig+0x270>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ea:	f7ff fc9b 	bl	8001124 <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017f2:	f7ff fc97 	bl	8001124 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e1a1      	b.n	8001b48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001804:	4b2d      	ldr	r3, [pc, #180]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0f0      	beq.n	80017f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001810:	4b2a      	ldr	r3, [pc, #168]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	4927      	ldr	r1, [pc, #156]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 8001820:	4313      	orrs	r3, r2
 8001822:	600b      	str	r3, [r1, #0]
 8001824:	e015      	b.n	8001852 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001826:	4b26      	ldr	r3, [pc, #152]	; (80018c0 <HAL_RCC_OscConfig+0x270>)
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182c:	f7ff fc7a 	bl	8001124 <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001834:	f7ff fc76 	bl	8001124 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e180      	b.n	8001b48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001846:	4b1d      	ldr	r3, [pc, #116]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f0      	bne.n	8001834 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0308 	and.w	r3, r3, #8
 800185a:	2b00      	cmp	r3, #0
 800185c:	d03a      	beq.n	80018d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d019      	beq.n	800189a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001866:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <HAL_RCC_OscConfig+0x274>)
 8001868:	2201      	movs	r2, #1
 800186a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800186c:	f7ff fc5a 	bl	8001124 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001874:	f7ff fc56 	bl	8001124 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e160      	b.n	8001b48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001886:	4b0d      	ldr	r3, [pc, #52]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 8001888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d0f0      	beq.n	8001874 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001892:	2001      	movs	r0, #1
 8001894:	f000 face 	bl	8001e34 <RCC_Delay>
 8001898:	e01c      	b.n	80018d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800189a:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <HAL_RCC_OscConfig+0x274>)
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a0:	f7ff fc40 	bl	8001124 <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018a6:	e00f      	b.n	80018c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a8:	f7ff fc3c 	bl	8001124 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d908      	bls.n	80018c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e146      	b.n	8001b48 <HAL_RCC_OscConfig+0x4f8>
 80018ba:	bf00      	nop
 80018bc:	40021000 	.word	0x40021000
 80018c0:	42420000 	.word	0x42420000
 80018c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c8:	4b92      	ldr	r3, [pc, #584]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 80018ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1e9      	bne.n	80018a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f000 80a6 	beq.w	8001a2e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018e2:	2300      	movs	r3, #0
 80018e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018e6:	4b8b      	ldr	r3, [pc, #556]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d10d      	bne.n	800190e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018f2:	4b88      	ldr	r3, [pc, #544]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	4a87      	ldr	r2, [pc, #540]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 80018f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018fc:	61d3      	str	r3, [r2, #28]
 80018fe:	4b85      	ldr	r3, [pc, #532]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800190a:	2301      	movs	r3, #1
 800190c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800190e:	4b82      	ldr	r3, [pc, #520]	; (8001b18 <HAL_RCC_OscConfig+0x4c8>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001916:	2b00      	cmp	r3, #0
 8001918:	d118      	bne.n	800194c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800191a:	4b7f      	ldr	r3, [pc, #508]	; (8001b18 <HAL_RCC_OscConfig+0x4c8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a7e      	ldr	r2, [pc, #504]	; (8001b18 <HAL_RCC_OscConfig+0x4c8>)
 8001920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001924:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001926:	f7ff fbfd 	bl	8001124 <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800192e:	f7ff fbf9 	bl	8001124 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b64      	cmp	r3, #100	; 0x64
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e103      	b.n	8001b48 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001940:	4b75      	ldr	r3, [pc, #468]	; (8001b18 <HAL_RCC_OscConfig+0x4c8>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001948:	2b00      	cmp	r3, #0
 800194a:	d0f0      	beq.n	800192e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d106      	bne.n	8001962 <HAL_RCC_OscConfig+0x312>
 8001954:	4b6f      	ldr	r3, [pc, #444]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	4a6e      	ldr	r2, [pc, #440]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	6213      	str	r3, [r2, #32]
 8001960:	e02d      	b.n	80019be <HAL_RCC_OscConfig+0x36e>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d10c      	bne.n	8001984 <HAL_RCC_OscConfig+0x334>
 800196a:	4b6a      	ldr	r3, [pc, #424]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 800196c:	6a1b      	ldr	r3, [r3, #32]
 800196e:	4a69      	ldr	r2, [pc, #420]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 8001970:	f023 0301 	bic.w	r3, r3, #1
 8001974:	6213      	str	r3, [r2, #32]
 8001976:	4b67      	ldr	r3, [pc, #412]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 8001978:	6a1b      	ldr	r3, [r3, #32]
 800197a:	4a66      	ldr	r2, [pc, #408]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 800197c:	f023 0304 	bic.w	r3, r3, #4
 8001980:	6213      	str	r3, [r2, #32]
 8001982:	e01c      	b.n	80019be <HAL_RCC_OscConfig+0x36e>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	2b05      	cmp	r3, #5
 800198a:	d10c      	bne.n	80019a6 <HAL_RCC_OscConfig+0x356>
 800198c:	4b61      	ldr	r3, [pc, #388]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 800198e:	6a1b      	ldr	r3, [r3, #32]
 8001990:	4a60      	ldr	r2, [pc, #384]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 8001992:	f043 0304 	orr.w	r3, r3, #4
 8001996:	6213      	str	r3, [r2, #32]
 8001998:	4b5e      	ldr	r3, [pc, #376]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 800199a:	6a1b      	ldr	r3, [r3, #32]
 800199c:	4a5d      	ldr	r2, [pc, #372]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 800199e:	f043 0301 	orr.w	r3, r3, #1
 80019a2:	6213      	str	r3, [r2, #32]
 80019a4:	e00b      	b.n	80019be <HAL_RCC_OscConfig+0x36e>
 80019a6:	4b5b      	ldr	r3, [pc, #364]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	4a5a      	ldr	r2, [pc, #360]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 80019ac:	f023 0301 	bic.w	r3, r3, #1
 80019b0:	6213      	str	r3, [r2, #32]
 80019b2:	4b58      	ldr	r3, [pc, #352]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	4a57      	ldr	r2, [pc, #348]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 80019b8:	f023 0304 	bic.w	r3, r3, #4
 80019bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d015      	beq.n	80019f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c6:	f7ff fbad 	bl	8001124 <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019cc:	e00a      	b.n	80019e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ce:	f7ff fba9 	bl	8001124 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019dc:	4293      	cmp	r3, r2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e0b1      	b.n	8001b48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019e4:	4b4b      	ldr	r3, [pc, #300]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0ee      	beq.n	80019ce <HAL_RCC_OscConfig+0x37e>
 80019f0:	e014      	b.n	8001a1c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f2:	f7ff fb97 	bl	8001124 <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019f8:	e00a      	b.n	8001a10 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019fa:	f7ff fb93 	bl	8001124 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e09b      	b.n	8001b48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a10:	4b40      	ldr	r3, [pc, #256]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 8001a12:	6a1b      	ldr	r3, [r3, #32]
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1ee      	bne.n	80019fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a1c:	7dfb      	ldrb	r3, [r7, #23]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d105      	bne.n	8001a2e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a22:	4b3c      	ldr	r3, [pc, #240]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	4a3b      	ldr	r2, [pc, #236]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 8001a28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f000 8087 	beq.w	8001b46 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a38:	4b36      	ldr	r3, [pc, #216]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 030c 	and.w	r3, r3, #12
 8001a40:	2b08      	cmp	r3, #8
 8001a42:	d061      	beq.n	8001b08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	69db      	ldr	r3, [r3, #28]
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d146      	bne.n	8001ada <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a4c:	4b33      	ldr	r3, [pc, #204]	; (8001b1c <HAL_RCC_OscConfig+0x4cc>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a52:	f7ff fb67 	bl	8001124 <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a5a:	f7ff fb63 	bl	8001124 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e06d      	b.n	8001b48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a6c:	4b29      	ldr	r3, [pc, #164]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d1f0      	bne.n	8001a5a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a80:	d108      	bne.n	8001a94 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a82:	4b24      	ldr	r3, [pc, #144]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	4921      	ldr	r1, [pc, #132]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a94:	4b1f      	ldr	r3, [pc, #124]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a19      	ldr	r1, [r3, #32]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa4:	430b      	orrs	r3, r1
 8001aa6:	491b      	ldr	r1, [pc, #108]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aac:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <HAL_RCC_OscConfig+0x4cc>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab2:	f7ff fb37 	bl	8001124 <HAL_GetTick>
 8001ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aba:	f7ff fb33 	bl	8001124 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e03d      	b.n	8001b48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001acc:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d0f0      	beq.n	8001aba <HAL_RCC_OscConfig+0x46a>
 8001ad8:	e035      	b.n	8001b46 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ada:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <HAL_RCC_OscConfig+0x4cc>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae0:	f7ff fb20 	bl	8001124 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae8:	f7ff fb1c 	bl	8001124 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e026      	b.n	8001b48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001afa:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1f0      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x498>
 8001b06:	e01e      	b.n	8001b46 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	69db      	ldr	r3, [r3, #28]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d107      	bne.n	8001b20 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e019      	b.n	8001b48 <HAL_RCC_OscConfig+0x4f8>
 8001b14:	40021000 	.word	0x40021000
 8001b18:	40007000 	.word	0x40007000
 8001b1c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <HAL_RCC_OscConfig+0x500>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d106      	bne.n	8001b42 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d001      	beq.n	8001b46 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e000      	b.n	8001b48 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40021000 	.word	0x40021000

08001b54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e0d0      	b.n	8001d0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b68:	4b6a      	ldr	r3, [pc, #424]	; (8001d14 <HAL_RCC_ClockConfig+0x1c0>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d910      	bls.n	8001b98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b76:	4b67      	ldr	r3, [pc, #412]	; (8001d14 <HAL_RCC_ClockConfig+0x1c0>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f023 0207 	bic.w	r2, r3, #7
 8001b7e:	4965      	ldr	r1, [pc, #404]	; (8001d14 <HAL_RCC_ClockConfig+0x1c0>)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b86:	4b63      	ldr	r3, [pc, #396]	; (8001d14 <HAL_RCC_ClockConfig+0x1c0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	683a      	ldr	r2, [r7, #0]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d001      	beq.n	8001b98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e0b8      	b.n	8001d0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d020      	beq.n	8001be6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d005      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bb0:	4b59      	ldr	r3, [pc, #356]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	4a58      	ldr	r2, [pc, #352]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0308 	and.w	r3, r3, #8
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d005      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bc8:	4b53      	ldr	r3, [pc, #332]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	4a52      	ldr	r2, [pc, #328]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001bce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001bd2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bd4:	4b50      	ldr	r3, [pc, #320]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	494d      	ldr	r1, [pc, #308]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d040      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d107      	bne.n	8001c0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfa:	4b47      	ldr	r3, [pc, #284]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d115      	bne.n	8001c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e07f      	b.n	8001d0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d107      	bne.n	8001c22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c12:	4b41      	ldr	r3, [pc, #260]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d109      	bne.n	8001c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e073      	b.n	8001d0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c22:	4b3d      	ldr	r3, [pc, #244]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e06b      	b.n	8001d0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c32:	4b39      	ldr	r3, [pc, #228]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f023 0203 	bic.w	r2, r3, #3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	4936      	ldr	r1, [pc, #216]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c44:	f7ff fa6e 	bl	8001124 <HAL_GetTick>
 8001c48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c4a:	e00a      	b.n	8001c62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c4c:	f7ff fa6a 	bl	8001124 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e053      	b.n	8001d0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c62:	4b2d      	ldr	r3, [pc, #180]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f003 020c 	and.w	r2, r3, #12
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d1eb      	bne.n	8001c4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c74:	4b27      	ldr	r3, [pc, #156]	; (8001d14 <HAL_RCC_ClockConfig+0x1c0>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0307 	and.w	r3, r3, #7
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d210      	bcs.n	8001ca4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c82:	4b24      	ldr	r3, [pc, #144]	; (8001d14 <HAL_RCC_ClockConfig+0x1c0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f023 0207 	bic.w	r2, r3, #7
 8001c8a:	4922      	ldr	r1, [pc, #136]	; (8001d14 <HAL_RCC_ClockConfig+0x1c0>)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c92:	4b20      	ldr	r3, [pc, #128]	; (8001d14 <HAL_RCC_ClockConfig+0x1c0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d001      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e032      	b.n	8001d0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d008      	beq.n	8001cc2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cb0:	4b19      	ldr	r3, [pc, #100]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	4916      	ldr	r1, [pc, #88]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0308 	and.w	r3, r3, #8
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d009      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cce:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	490e      	ldr	r1, [pc, #56]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ce2:	f000 f821 	bl	8001d28 <HAL_RCC_GetSysClockFreq>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	091b      	lsrs	r3, r3, #4
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	490a      	ldr	r1, [pc, #40]	; (8001d1c <HAL_RCC_ClockConfig+0x1c8>)
 8001cf4:	5ccb      	ldrb	r3, [r1, r3]
 8001cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cfa:	4a09      	ldr	r2, [pc, #36]	; (8001d20 <HAL_RCC_ClockConfig+0x1cc>)
 8001cfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cfe:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <HAL_RCC_ClockConfig+0x1d0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff f9cc 	bl	80010a0 <HAL_InitTick>

  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40022000 	.word	0x40022000
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	08006a7c 	.word	0x08006a7c
 8001d20:	20000000 	.word	0x20000000
 8001d24:	20000004 	.word	0x20000004

08001d28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b087      	sub	sp, #28
 8001d2c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	2300      	movs	r3, #0
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d42:	4b1e      	ldr	r3, [pc, #120]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x94>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f003 030c 	and.w	r3, r3, #12
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	d002      	beq.n	8001d58 <HAL_RCC_GetSysClockFreq+0x30>
 8001d52:	2b08      	cmp	r3, #8
 8001d54:	d003      	beq.n	8001d5e <HAL_RCC_GetSysClockFreq+0x36>
 8001d56:	e027      	b.n	8001da8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d58:	4b19      	ldr	r3, [pc, #100]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d5a:	613b      	str	r3, [r7, #16]
      break;
 8001d5c:	e027      	b.n	8001dae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	0c9b      	lsrs	r3, r3, #18
 8001d62:	f003 030f 	and.w	r3, r3, #15
 8001d66:	4a17      	ldr	r2, [pc, #92]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d68:	5cd3      	ldrb	r3, [r2, r3]
 8001d6a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d010      	beq.n	8001d98 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d76:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x94>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	0c5b      	lsrs	r3, r3, #17
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	4a11      	ldr	r2, [pc, #68]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d82:	5cd3      	ldrb	r3, [r2, r3]
 8001d84:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a0d      	ldr	r2, [pc, #52]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d8a:	fb03 f202 	mul.w	r2, r3, r2
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d94:	617b      	str	r3, [r7, #20]
 8001d96:	e004      	b.n	8001da2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a0c      	ldr	r2, [pc, #48]	; (8001dcc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d9c:	fb02 f303 	mul.w	r3, r2, r3
 8001da0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	613b      	str	r3, [r7, #16]
      break;
 8001da6:	e002      	b.n	8001dae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001da8:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001daa:	613b      	str	r3, [r7, #16]
      break;
 8001dac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dae:	693b      	ldr	r3, [r7, #16]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	371c      	adds	r7, #28
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bc80      	pop	{r7}
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	007a1200 	.word	0x007a1200
 8001dc4:	08006a94 	.word	0x08006a94
 8001dc8:	08006aa4 	.word	0x08006aa4
 8001dcc:	003d0900 	.word	0x003d0900

08001dd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dd4:	4b02      	ldr	r3, [pc, #8]	; (8001de0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr
 8001de0:	20000000 	.word	0x20000000

08001de4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001de8:	f7ff fff2 	bl	8001dd0 <HAL_RCC_GetHCLKFreq>
 8001dec:	4602      	mov	r2, r0
 8001dee:	4b05      	ldr	r3, [pc, #20]	; (8001e04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	0a1b      	lsrs	r3, r3, #8
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	4903      	ldr	r1, [pc, #12]	; (8001e08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dfa:	5ccb      	ldrb	r3, [r1, r3]
 8001dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40021000 	.word	0x40021000
 8001e08:	08006a8c 	.word	0x08006a8c

08001e0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e10:	f7ff ffde 	bl	8001dd0 <HAL_RCC_GetHCLKFreq>
 8001e14:	4602      	mov	r2, r0
 8001e16:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	0adb      	lsrs	r3, r3, #11
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	4903      	ldr	r1, [pc, #12]	; (8001e30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e22:	5ccb      	ldrb	r3, [r1, r3]
 8001e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	08006a8c 	.word	0x08006a8c

08001e34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e3c:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <RCC_Delay+0x34>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a0a      	ldr	r2, [pc, #40]	; (8001e6c <RCC_Delay+0x38>)
 8001e42:	fba2 2303 	umull	r2, r3, r2, r3
 8001e46:	0a5b      	lsrs	r3, r3, #9
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	fb02 f303 	mul.w	r3, r2, r3
 8001e4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e50:	bf00      	nop
  }
  while (Delay --);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	1e5a      	subs	r2, r3, #1
 8001e56:	60fa      	str	r2, [r7, #12]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1f9      	bne.n	8001e50 <RCC_Delay+0x1c>
}
 8001e5c:	bf00      	nop
 8001e5e:	bf00      	nop
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr
 8001e68:	20000000 	.word	0x20000000
 8001e6c:	10624dd3 	.word	0x10624dd3

08001e70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e042      	b.n	8001f08 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d106      	bne.n	8001e9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff f87a 	bl	8000f90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2224      	movs	r2, #36	; 0x24
 8001ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68da      	ldr	r2, [r3, #12]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001eb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 f91d 	bl	80020f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	691a      	ldr	r2, [r3, #16]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ec8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	695a      	ldr	r2, [r3, #20]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ed8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68da      	ldr	r2, [r3, #12]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ee8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2220      	movs	r2, #32
 8001efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08a      	sub	sp, #40	; 0x28
 8001f14:	af02      	add	r7, sp, #8
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	603b      	str	r3, [r7, #0]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b20      	cmp	r3, #32
 8001f2e:	d16d      	bne.n	800200c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d002      	beq.n	8001f3c <HAL_UART_Transmit+0x2c>
 8001f36:	88fb      	ldrh	r3, [r7, #6]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e066      	b.n	800200e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2200      	movs	r2, #0
 8001f44:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2221      	movs	r2, #33	; 0x21
 8001f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f4e:	f7ff f8e9 	bl	8001124 <HAL_GetTick>
 8001f52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	88fa      	ldrh	r2, [r7, #6]
 8001f58:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	88fa      	ldrh	r2, [r7, #6]
 8001f5e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f68:	d108      	bne.n	8001f7c <HAL_UART_Transmit+0x6c>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d104      	bne.n	8001f7c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	61bb      	str	r3, [r7, #24]
 8001f7a:	e003      	b.n	8001f84 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001f84:	e02a      	b.n	8001fdc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2180      	movs	r1, #128	; 0x80
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f000 f840 	bl	8002016 <UART_WaitOnFlagUntilTimeout>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e036      	b.n	800200e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10b      	bne.n	8001fbe <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	881b      	ldrh	r3, [r3, #0]
 8001faa:	461a      	mov	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fb4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	3302      	adds	r3, #2
 8001fba:	61bb      	str	r3, [r7, #24]
 8001fbc:	e007      	b.n	8001fce <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	781a      	ldrb	r2, [r3, #0]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1cf      	bne.n	8001f86 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	2200      	movs	r2, #0
 8001fee:	2140      	movs	r1, #64	; 0x40
 8001ff0:	68f8      	ldr	r0, [r7, #12]
 8001ff2:	f000 f810 	bl	8002016 <UART_WaitOnFlagUntilTimeout>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e006      	b.n	800200e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2220      	movs	r2, #32
 8002004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002008:	2300      	movs	r3, #0
 800200a:	e000      	b.n	800200e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800200c:	2302      	movs	r3, #2
  }
}
 800200e:	4618      	mov	r0, r3
 8002010:	3720      	adds	r7, #32
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b090      	sub	sp, #64	; 0x40
 800201a:	af00      	add	r7, sp, #0
 800201c:	60f8      	str	r0, [r7, #12]
 800201e:	60b9      	str	r1, [r7, #8]
 8002020:	603b      	str	r3, [r7, #0]
 8002022:	4613      	mov	r3, r2
 8002024:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002026:	e050      	b.n	80020ca <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002028:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800202a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800202e:	d04c      	beq.n	80020ca <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002030:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002032:	2b00      	cmp	r3, #0
 8002034:	d007      	beq.n	8002046 <UART_WaitOnFlagUntilTimeout+0x30>
 8002036:	f7ff f875 	bl	8001124 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002042:	429a      	cmp	r2, r3
 8002044:	d241      	bcs.n	80020ca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	330c      	adds	r3, #12
 800204c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800204e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002050:	e853 3f00 	ldrex	r3, [r3]
 8002054:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002058:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800205c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	330c      	adds	r3, #12
 8002064:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002066:	637a      	str	r2, [r7, #52]	; 0x34
 8002068:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800206a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800206c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800206e:	e841 2300 	strex	r3, r2, [r1]
 8002072:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1e5      	bne.n	8002046 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	3314      	adds	r3, #20
 8002080:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	e853 3f00 	ldrex	r3, [r3]
 8002088:	613b      	str	r3, [r7, #16]
   return(result);
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	f023 0301 	bic.w	r3, r3, #1
 8002090:	63bb      	str	r3, [r7, #56]	; 0x38
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	3314      	adds	r3, #20
 8002098:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800209a:	623a      	str	r2, [r7, #32]
 800209c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800209e:	69f9      	ldr	r1, [r7, #28]
 80020a0:	6a3a      	ldr	r2, [r7, #32]
 80020a2:	e841 2300 	strex	r3, r2, [r1]
 80020a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1e5      	bne.n	800207a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2220      	movs	r2, #32
 80020b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2220      	movs	r2, #32
 80020ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e00f      	b.n	80020ea <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	4013      	ands	r3, r2
 80020d4:	68ba      	ldr	r2, [r7, #8]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	bf0c      	ite	eq
 80020da:	2301      	moveq	r3, #1
 80020dc:	2300      	movne	r3, #0
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	461a      	mov	r2, r3
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d09f      	beq.n	8002028 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3740      	adds	r7, #64	; 0x40
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
	...

080020f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68da      	ldr	r2, [r3, #12]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	430a      	orrs	r2, r1
 8002110:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	431a      	orrs	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	4313      	orrs	r3, r2
 8002122:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800212e:	f023 030c 	bic.w	r3, r3, #12
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6812      	ldr	r2, [r2, #0]
 8002136:	68b9      	ldr	r1, [r7, #8]
 8002138:	430b      	orrs	r3, r1
 800213a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	699a      	ldr	r2, [r3, #24]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	430a      	orrs	r2, r1
 8002150:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a2c      	ldr	r2, [pc, #176]	; (8002208 <UART_SetConfig+0x114>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d103      	bne.n	8002164 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800215c:	f7ff fe56 	bl	8001e0c <HAL_RCC_GetPCLK2Freq>
 8002160:	60f8      	str	r0, [r7, #12]
 8002162:	e002      	b.n	800216a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002164:	f7ff fe3e 	bl	8001de4 <HAL_RCC_GetPCLK1Freq>
 8002168:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	4613      	mov	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	009a      	lsls	r2, r3, #2
 8002174:	441a      	add	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002180:	4a22      	ldr	r2, [pc, #136]	; (800220c <UART_SetConfig+0x118>)
 8002182:	fba2 2303 	umull	r2, r3, r2, r3
 8002186:	095b      	lsrs	r3, r3, #5
 8002188:	0119      	lsls	r1, r3, #4
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	4613      	mov	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	009a      	lsls	r2, r3, #2
 8002194:	441a      	add	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	fbb2 f2f3 	udiv	r2, r2, r3
 80021a0:	4b1a      	ldr	r3, [pc, #104]	; (800220c <UART_SetConfig+0x118>)
 80021a2:	fba3 0302 	umull	r0, r3, r3, r2
 80021a6:	095b      	lsrs	r3, r3, #5
 80021a8:	2064      	movs	r0, #100	; 0x64
 80021aa:	fb00 f303 	mul.w	r3, r0, r3
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	011b      	lsls	r3, r3, #4
 80021b2:	3332      	adds	r3, #50	; 0x32
 80021b4:	4a15      	ldr	r2, [pc, #84]	; (800220c <UART_SetConfig+0x118>)
 80021b6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ba:	095b      	lsrs	r3, r3, #5
 80021bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021c0:	4419      	add	r1, r3
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	4613      	mov	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	009a      	lsls	r2, r3, #2
 80021cc:	441a      	add	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80021d8:	4b0c      	ldr	r3, [pc, #48]	; (800220c <UART_SetConfig+0x118>)
 80021da:	fba3 0302 	umull	r0, r3, r3, r2
 80021de:	095b      	lsrs	r3, r3, #5
 80021e0:	2064      	movs	r0, #100	; 0x64
 80021e2:	fb00 f303 	mul.w	r3, r0, r3
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	011b      	lsls	r3, r3, #4
 80021ea:	3332      	adds	r3, #50	; 0x32
 80021ec:	4a07      	ldr	r2, [pc, #28]	; (800220c <UART_SetConfig+0x118>)
 80021ee:	fba2 2303 	umull	r2, r3, r2, r3
 80021f2:	095b      	lsrs	r3, r3, #5
 80021f4:	f003 020f 	and.w	r2, r3, #15
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	440a      	add	r2, r1
 80021fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002200:	bf00      	nop
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40013800 	.word	0x40013800
 800220c:	51eb851f 	.word	0x51eb851f

08002210 <__cvt>:
 8002210:	2b00      	cmp	r3, #0
 8002212:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002216:	461f      	mov	r7, r3
 8002218:	bfbb      	ittet	lt
 800221a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800221e:	461f      	movlt	r7, r3
 8002220:	2300      	movge	r3, #0
 8002222:	232d      	movlt	r3, #45	; 0x2d
 8002224:	b088      	sub	sp, #32
 8002226:	4614      	mov	r4, r2
 8002228:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800222a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800222c:	7013      	strb	r3, [r2, #0]
 800222e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002230:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002234:	f023 0820 	bic.w	r8, r3, #32
 8002238:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800223c:	d005      	beq.n	800224a <__cvt+0x3a>
 800223e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002242:	d100      	bne.n	8002246 <__cvt+0x36>
 8002244:	3501      	adds	r5, #1
 8002246:	2302      	movs	r3, #2
 8002248:	e000      	b.n	800224c <__cvt+0x3c>
 800224a:	2303      	movs	r3, #3
 800224c:	aa07      	add	r2, sp, #28
 800224e:	9204      	str	r2, [sp, #16]
 8002250:	aa06      	add	r2, sp, #24
 8002252:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002256:	e9cd 3500 	strd	r3, r5, [sp]
 800225a:	4622      	mov	r2, r4
 800225c:	463b      	mov	r3, r7
 800225e:	f001 f987 	bl	8003570 <_dtoa_r>
 8002262:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002266:	4606      	mov	r6, r0
 8002268:	d102      	bne.n	8002270 <__cvt+0x60>
 800226a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800226c:	07db      	lsls	r3, r3, #31
 800226e:	d522      	bpl.n	80022b6 <__cvt+0xa6>
 8002270:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002274:	eb06 0905 	add.w	r9, r6, r5
 8002278:	d110      	bne.n	800229c <__cvt+0x8c>
 800227a:	7833      	ldrb	r3, [r6, #0]
 800227c:	2b30      	cmp	r3, #48	; 0x30
 800227e:	d10a      	bne.n	8002296 <__cvt+0x86>
 8002280:	2200      	movs	r2, #0
 8002282:	2300      	movs	r3, #0
 8002284:	4620      	mov	r0, r4
 8002286:	4639      	mov	r1, r7
 8002288:	f7fe fb8e 	bl	80009a8 <__aeabi_dcmpeq>
 800228c:	b918      	cbnz	r0, 8002296 <__cvt+0x86>
 800228e:	f1c5 0501 	rsb	r5, r5, #1
 8002292:	f8ca 5000 	str.w	r5, [sl]
 8002296:	f8da 3000 	ldr.w	r3, [sl]
 800229a:	4499      	add	r9, r3
 800229c:	2200      	movs	r2, #0
 800229e:	2300      	movs	r3, #0
 80022a0:	4620      	mov	r0, r4
 80022a2:	4639      	mov	r1, r7
 80022a4:	f7fe fb80 	bl	80009a8 <__aeabi_dcmpeq>
 80022a8:	b108      	cbz	r0, 80022ae <__cvt+0x9e>
 80022aa:	f8cd 901c 	str.w	r9, [sp, #28]
 80022ae:	2230      	movs	r2, #48	; 0x30
 80022b0:	9b07      	ldr	r3, [sp, #28]
 80022b2:	454b      	cmp	r3, r9
 80022b4:	d307      	bcc.n	80022c6 <__cvt+0xb6>
 80022b6:	4630      	mov	r0, r6
 80022b8:	9b07      	ldr	r3, [sp, #28]
 80022ba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80022bc:	1b9b      	subs	r3, r3, r6
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	b008      	add	sp, #32
 80022c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022c6:	1c59      	adds	r1, r3, #1
 80022c8:	9107      	str	r1, [sp, #28]
 80022ca:	701a      	strb	r2, [r3, #0]
 80022cc:	e7f0      	b.n	80022b0 <__cvt+0xa0>

080022ce <__exponent>:
 80022ce:	4603      	mov	r3, r0
 80022d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80022d2:	2900      	cmp	r1, #0
 80022d4:	f803 2b02 	strb.w	r2, [r3], #2
 80022d8:	bfb6      	itet	lt
 80022da:	222d      	movlt	r2, #45	; 0x2d
 80022dc:	222b      	movge	r2, #43	; 0x2b
 80022de:	4249      	neglt	r1, r1
 80022e0:	2909      	cmp	r1, #9
 80022e2:	7042      	strb	r2, [r0, #1]
 80022e4:	dd2a      	ble.n	800233c <__exponent+0x6e>
 80022e6:	f10d 0207 	add.w	r2, sp, #7
 80022ea:	4617      	mov	r7, r2
 80022ec:	260a      	movs	r6, #10
 80022ee:	fb91 f5f6 	sdiv	r5, r1, r6
 80022f2:	4694      	mov	ip, r2
 80022f4:	fb06 1415 	mls	r4, r6, r5, r1
 80022f8:	3430      	adds	r4, #48	; 0x30
 80022fa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80022fe:	460c      	mov	r4, r1
 8002300:	2c63      	cmp	r4, #99	; 0x63
 8002302:	4629      	mov	r1, r5
 8002304:	f102 32ff 	add.w	r2, r2, #4294967295
 8002308:	dcf1      	bgt.n	80022ee <__exponent+0x20>
 800230a:	3130      	adds	r1, #48	; 0x30
 800230c:	f1ac 0402 	sub.w	r4, ip, #2
 8002310:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002314:	4622      	mov	r2, r4
 8002316:	1c41      	adds	r1, r0, #1
 8002318:	42ba      	cmp	r2, r7
 800231a:	d30a      	bcc.n	8002332 <__exponent+0x64>
 800231c:	f10d 0209 	add.w	r2, sp, #9
 8002320:	eba2 020c 	sub.w	r2, r2, ip
 8002324:	42bc      	cmp	r4, r7
 8002326:	bf88      	it	hi
 8002328:	2200      	movhi	r2, #0
 800232a:	4413      	add	r3, r2
 800232c:	1a18      	subs	r0, r3, r0
 800232e:	b003      	add	sp, #12
 8002330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002332:	f812 5b01 	ldrb.w	r5, [r2], #1
 8002336:	f801 5f01 	strb.w	r5, [r1, #1]!
 800233a:	e7ed      	b.n	8002318 <__exponent+0x4a>
 800233c:	2330      	movs	r3, #48	; 0x30
 800233e:	3130      	adds	r1, #48	; 0x30
 8002340:	7083      	strb	r3, [r0, #2]
 8002342:	70c1      	strb	r1, [r0, #3]
 8002344:	1d03      	adds	r3, r0, #4
 8002346:	e7f1      	b.n	800232c <__exponent+0x5e>

08002348 <_printf_float>:
 8002348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800234c:	b091      	sub	sp, #68	; 0x44
 800234e:	460c      	mov	r4, r1
 8002350:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8002354:	4616      	mov	r6, r2
 8002356:	461f      	mov	r7, r3
 8002358:	4605      	mov	r5, r0
 800235a:	f000 fff5 	bl	8003348 <_localeconv_r>
 800235e:	6803      	ldr	r3, [r0, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	9309      	str	r3, [sp, #36]	; 0x24
 8002364:	f7fd fef4 	bl	8000150 <strlen>
 8002368:	2300      	movs	r3, #0
 800236a:	930e      	str	r3, [sp, #56]	; 0x38
 800236c:	f8d8 3000 	ldr.w	r3, [r8]
 8002370:	900a      	str	r0, [sp, #40]	; 0x28
 8002372:	3307      	adds	r3, #7
 8002374:	f023 0307 	bic.w	r3, r3, #7
 8002378:	f103 0208 	add.w	r2, r3, #8
 800237c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002380:	f8d4 b000 	ldr.w	fp, [r4]
 8002384:	f8c8 2000 	str.w	r2, [r8]
 8002388:	e9d3 a800 	ldrd	sl, r8, [r3]
 800238c:	4652      	mov	r2, sl
 800238e:	4643      	mov	r3, r8
 8002390:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002394:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8002398:	930b      	str	r3, [sp, #44]	; 0x2c
 800239a:	f04f 32ff 	mov.w	r2, #4294967295
 800239e:	4650      	mov	r0, sl
 80023a0:	4b9c      	ldr	r3, [pc, #624]	; (8002614 <_printf_float+0x2cc>)
 80023a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80023a4:	f7fe fb32 	bl	8000a0c <__aeabi_dcmpun>
 80023a8:	bb70      	cbnz	r0, 8002408 <_printf_float+0xc0>
 80023aa:	f04f 32ff 	mov.w	r2, #4294967295
 80023ae:	4650      	mov	r0, sl
 80023b0:	4b98      	ldr	r3, [pc, #608]	; (8002614 <_printf_float+0x2cc>)
 80023b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80023b4:	f7fe fb0c 	bl	80009d0 <__aeabi_dcmple>
 80023b8:	bb30      	cbnz	r0, 8002408 <_printf_float+0xc0>
 80023ba:	2200      	movs	r2, #0
 80023bc:	2300      	movs	r3, #0
 80023be:	4650      	mov	r0, sl
 80023c0:	4641      	mov	r1, r8
 80023c2:	f7fe fafb 	bl	80009bc <__aeabi_dcmplt>
 80023c6:	b110      	cbz	r0, 80023ce <_printf_float+0x86>
 80023c8:	232d      	movs	r3, #45	; 0x2d
 80023ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023ce:	4a92      	ldr	r2, [pc, #584]	; (8002618 <_printf_float+0x2d0>)
 80023d0:	4b92      	ldr	r3, [pc, #584]	; (800261c <_printf_float+0x2d4>)
 80023d2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80023d6:	bf94      	ite	ls
 80023d8:	4690      	movls	r8, r2
 80023da:	4698      	movhi	r8, r3
 80023dc:	2303      	movs	r3, #3
 80023de:	f04f 0a00 	mov.w	sl, #0
 80023e2:	6123      	str	r3, [r4, #16]
 80023e4:	f02b 0304 	bic.w	r3, fp, #4
 80023e8:	6023      	str	r3, [r4, #0]
 80023ea:	4633      	mov	r3, r6
 80023ec:	4621      	mov	r1, r4
 80023ee:	4628      	mov	r0, r5
 80023f0:	9700      	str	r7, [sp, #0]
 80023f2:	aa0f      	add	r2, sp, #60	; 0x3c
 80023f4:	f000 f9d6 	bl	80027a4 <_printf_common>
 80023f8:	3001      	adds	r0, #1
 80023fa:	f040 8090 	bne.w	800251e <_printf_float+0x1d6>
 80023fe:	f04f 30ff 	mov.w	r0, #4294967295
 8002402:	b011      	add	sp, #68	; 0x44
 8002404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002408:	4652      	mov	r2, sl
 800240a:	4643      	mov	r3, r8
 800240c:	4650      	mov	r0, sl
 800240e:	4641      	mov	r1, r8
 8002410:	f7fe fafc 	bl	8000a0c <__aeabi_dcmpun>
 8002414:	b148      	cbz	r0, 800242a <_printf_float+0xe2>
 8002416:	f1b8 0f00 	cmp.w	r8, #0
 800241a:	bfb8      	it	lt
 800241c:	232d      	movlt	r3, #45	; 0x2d
 800241e:	4a80      	ldr	r2, [pc, #512]	; (8002620 <_printf_float+0x2d8>)
 8002420:	bfb8      	it	lt
 8002422:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002426:	4b7f      	ldr	r3, [pc, #508]	; (8002624 <_printf_float+0x2dc>)
 8002428:	e7d3      	b.n	80023d2 <_printf_float+0x8a>
 800242a:	6863      	ldr	r3, [r4, #4]
 800242c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8002430:	1c5a      	adds	r2, r3, #1
 8002432:	d142      	bne.n	80024ba <_printf_float+0x172>
 8002434:	2306      	movs	r3, #6
 8002436:	6063      	str	r3, [r4, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	9206      	str	r2, [sp, #24]
 800243c:	aa0e      	add	r2, sp, #56	; 0x38
 800243e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8002442:	aa0d      	add	r2, sp, #52	; 0x34
 8002444:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8002448:	9203      	str	r2, [sp, #12]
 800244a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800244e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002452:	6023      	str	r3, [r4, #0]
 8002454:	6863      	ldr	r3, [r4, #4]
 8002456:	4652      	mov	r2, sl
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	4628      	mov	r0, r5
 800245c:	4643      	mov	r3, r8
 800245e:	910b      	str	r1, [sp, #44]	; 0x2c
 8002460:	f7ff fed6 	bl	8002210 <__cvt>
 8002464:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002466:	4680      	mov	r8, r0
 8002468:	2947      	cmp	r1, #71	; 0x47
 800246a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800246c:	d108      	bne.n	8002480 <_printf_float+0x138>
 800246e:	1cc8      	adds	r0, r1, #3
 8002470:	db02      	blt.n	8002478 <_printf_float+0x130>
 8002472:	6863      	ldr	r3, [r4, #4]
 8002474:	4299      	cmp	r1, r3
 8002476:	dd40      	ble.n	80024fa <_printf_float+0x1b2>
 8002478:	f1a9 0902 	sub.w	r9, r9, #2
 800247c:	fa5f f989 	uxtb.w	r9, r9
 8002480:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002484:	d81f      	bhi.n	80024c6 <_printf_float+0x17e>
 8002486:	464a      	mov	r2, r9
 8002488:	3901      	subs	r1, #1
 800248a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800248e:	910d      	str	r1, [sp, #52]	; 0x34
 8002490:	f7ff ff1d 	bl	80022ce <__exponent>
 8002494:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002496:	4682      	mov	sl, r0
 8002498:	1813      	adds	r3, r2, r0
 800249a:	2a01      	cmp	r2, #1
 800249c:	6123      	str	r3, [r4, #16]
 800249e:	dc02      	bgt.n	80024a6 <_printf_float+0x15e>
 80024a0:	6822      	ldr	r2, [r4, #0]
 80024a2:	07d2      	lsls	r2, r2, #31
 80024a4:	d501      	bpl.n	80024aa <_printf_float+0x162>
 80024a6:	3301      	adds	r3, #1
 80024a8:	6123      	str	r3, [r4, #16]
 80024aa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d09b      	beq.n	80023ea <_printf_float+0xa2>
 80024b2:	232d      	movs	r3, #45	; 0x2d
 80024b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80024b8:	e797      	b.n	80023ea <_printf_float+0xa2>
 80024ba:	2947      	cmp	r1, #71	; 0x47
 80024bc:	d1bc      	bne.n	8002438 <_printf_float+0xf0>
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1ba      	bne.n	8002438 <_printf_float+0xf0>
 80024c2:	2301      	movs	r3, #1
 80024c4:	e7b7      	b.n	8002436 <_printf_float+0xee>
 80024c6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80024ca:	d118      	bne.n	80024fe <_printf_float+0x1b6>
 80024cc:	2900      	cmp	r1, #0
 80024ce:	6863      	ldr	r3, [r4, #4]
 80024d0:	dd0b      	ble.n	80024ea <_printf_float+0x1a2>
 80024d2:	6121      	str	r1, [r4, #16]
 80024d4:	b913      	cbnz	r3, 80024dc <_printf_float+0x194>
 80024d6:	6822      	ldr	r2, [r4, #0]
 80024d8:	07d0      	lsls	r0, r2, #31
 80024da:	d502      	bpl.n	80024e2 <_printf_float+0x19a>
 80024dc:	3301      	adds	r3, #1
 80024de:	440b      	add	r3, r1
 80024e0:	6123      	str	r3, [r4, #16]
 80024e2:	f04f 0a00 	mov.w	sl, #0
 80024e6:	65a1      	str	r1, [r4, #88]	; 0x58
 80024e8:	e7df      	b.n	80024aa <_printf_float+0x162>
 80024ea:	b913      	cbnz	r3, 80024f2 <_printf_float+0x1aa>
 80024ec:	6822      	ldr	r2, [r4, #0]
 80024ee:	07d2      	lsls	r2, r2, #31
 80024f0:	d501      	bpl.n	80024f6 <_printf_float+0x1ae>
 80024f2:	3302      	adds	r3, #2
 80024f4:	e7f4      	b.n	80024e0 <_printf_float+0x198>
 80024f6:	2301      	movs	r3, #1
 80024f8:	e7f2      	b.n	80024e0 <_printf_float+0x198>
 80024fa:	f04f 0967 	mov.w	r9, #103	; 0x67
 80024fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002500:	4299      	cmp	r1, r3
 8002502:	db05      	blt.n	8002510 <_printf_float+0x1c8>
 8002504:	6823      	ldr	r3, [r4, #0]
 8002506:	6121      	str	r1, [r4, #16]
 8002508:	07d8      	lsls	r0, r3, #31
 800250a:	d5ea      	bpl.n	80024e2 <_printf_float+0x19a>
 800250c:	1c4b      	adds	r3, r1, #1
 800250e:	e7e7      	b.n	80024e0 <_printf_float+0x198>
 8002510:	2900      	cmp	r1, #0
 8002512:	bfcc      	ite	gt
 8002514:	2201      	movgt	r2, #1
 8002516:	f1c1 0202 	rsble	r2, r1, #2
 800251a:	4413      	add	r3, r2
 800251c:	e7e0      	b.n	80024e0 <_printf_float+0x198>
 800251e:	6823      	ldr	r3, [r4, #0]
 8002520:	055a      	lsls	r2, r3, #21
 8002522:	d407      	bmi.n	8002534 <_printf_float+0x1ec>
 8002524:	6923      	ldr	r3, [r4, #16]
 8002526:	4642      	mov	r2, r8
 8002528:	4631      	mov	r1, r6
 800252a:	4628      	mov	r0, r5
 800252c:	47b8      	blx	r7
 800252e:	3001      	adds	r0, #1
 8002530:	d12b      	bne.n	800258a <_printf_float+0x242>
 8002532:	e764      	b.n	80023fe <_printf_float+0xb6>
 8002534:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002538:	f240 80dd 	bls.w	80026f6 <_printf_float+0x3ae>
 800253c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002540:	2200      	movs	r2, #0
 8002542:	2300      	movs	r3, #0
 8002544:	f7fe fa30 	bl	80009a8 <__aeabi_dcmpeq>
 8002548:	2800      	cmp	r0, #0
 800254a:	d033      	beq.n	80025b4 <_printf_float+0x26c>
 800254c:	2301      	movs	r3, #1
 800254e:	4631      	mov	r1, r6
 8002550:	4628      	mov	r0, r5
 8002552:	4a35      	ldr	r2, [pc, #212]	; (8002628 <_printf_float+0x2e0>)
 8002554:	47b8      	blx	r7
 8002556:	3001      	adds	r0, #1
 8002558:	f43f af51 	beq.w	80023fe <_printf_float+0xb6>
 800255c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002560:	429a      	cmp	r2, r3
 8002562:	db02      	blt.n	800256a <_printf_float+0x222>
 8002564:	6823      	ldr	r3, [r4, #0]
 8002566:	07d8      	lsls	r0, r3, #31
 8002568:	d50f      	bpl.n	800258a <_printf_float+0x242>
 800256a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800256e:	4631      	mov	r1, r6
 8002570:	4628      	mov	r0, r5
 8002572:	47b8      	blx	r7
 8002574:	3001      	adds	r0, #1
 8002576:	f43f af42 	beq.w	80023fe <_printf_float+0xb6>
 800257a:	f04f 0800 	mov.w	r8, #0
 800257e:	f104 091a 	add.w	r9, r4, #26
 8002582:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002584:	3b01      	subs	r3, #1
 8002586:	4543      	cmp	r3, r8
 8002588:	dc09      	bgt.n	800259e <_printf_float+0x256>
 800258a:	6823      	ldr	r3, [r4, #0]
 800258c:	079b      	lsls	r3, r3, #30
 800258e:	f100 8104 	bmi.w	800279a <_printf_float+0x452>
 8002592:	68e0      	ldr	r0, [r4, #12]
 8002594:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002596:	4298      	cmp	r0, r3
 8002598:	bfb8      	it	lt
 800259a:	4618      	movlt	r0, r3
 800259c:	e731      	b.n	8002402 <_printf_float+0xba>
 800259e:	2301      	movs	r3, #1
 80025a0:	464a      	mov	r2, r9
 80025a2:	4631      	mov	r1, r6
 80025a4:	4628      	mov	r0, r5
 80025a6:	47b8      	blx	r7
 80025a8:	3001      	adds	r0, #1
 80025aa:	f43f af28 	beq.w	80023fe <_printf_float+0xb6>
 80025ae:	f108 0801 	add.w	r8, r8, #1
 80025b2:	e7e6      	b.n	8002582 <_printf_float+0x23a>
 80025b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	dc38      	bgt.n	800262c <_printf_float+0x2e4>
 80025ba:	2301      	movs	r3, #1
 80025bc:	4631      	mov	r1, r6
 80025be:	4628      	mov	r0, r5
 80025c0:	4a19      	ldr	r2, [pc, #100]	; (8002628 <_printf_float+0x2e0>)
 80025c2:	47b8      	blx	r7
 80025c4:	3001      	adds	r0, #1
 80025c6:	f43f af1a 	beq.w	80023fe <_printf_float+0xb6>
 80025ca:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80025ce:	4313      	orrs	r3, r2
 80025d0:	d102      	bne.n	80025d8 <_printf_float+0x290>
 80025d2:	6823      	ldr	r3, [r4, #0]
 80025d4:	07d9      	lsls	r1, r3, #31
 80025d6:	d5d8      	bpl.n	800258a <_printf_float+0x242>
 80025d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80025dc:	4631      	mov	r1, r6
 80025de:	4628      	mov	r0, r5
 80025e0:	47b8      	blx	r7
 80025e2:	3001      	adds	r0, #1
 80025e4:	f43f af0b 	beq.w	80023fe <_printf_float+0xb6>
 80025e8:	f04f 0900 	mov.w	r9, #0
 80025ec:	f104 0a1a 	add.w	sl, r4, #26
 80025f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80025f2:	425b      	negs	r3, r3
 80025f4:	454b      	cmp	r3, r9
 80025f6:	dc01      	bgt.n	80025fc <_printf_float+0x2b4>
 80025f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80025fa:	e794      	b.n	8002526 <_printf_float+0x1de>
 80025fc:	2301      	movs	r3, #1
 80025fe:	4652      	mov	r2, sl
 8002600:	4631      	mov	r1, r6
 8002602:	4628      	mov	r0, r5
 8002604:	47b8      	blx	r7
 8002606:	3001      	adds	r0, #1
 8002608:	f43f aef9 	beq.w	80023fe <_printf_float+0xb6>
 800260c:	f109 0901 	add.w	r9, r9, #1
 8002610:	e7ee      	b.n	80025f0 <_printf_float+0x2a8>
 8002612:	bf00      	nop
 8002614:	7fefffff 	.word	0x7fefffff
 8002618:	08006aa6 	.word	0x08006aa6
 800261c:	08006aaa 	.word	0x08006aaa
 8002620:	08006aae 	.word	0x08006aae
 8002624:	08006ab2 	.word	0x08006ab2
 8002628:	08006ab6 	.word	0x08006ab6
 800262c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800262e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002630:	429a      	cmp	r2, r3
 8002632:	bfa8      	it	ge
 8002634:	461a      	movge	r2, r3
 8002636:	2a00      	cmp	r2, #0
 8002638:	4691      	mov	r9, r2
 800263a:	dc37      	bgt.n	80026ac <_printf_float+0x364>
 800263c:	f04f 0b00 	mov.w	fp, #0
 8002640:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002644:	f104 021a 	add.w	r2, r4, #26
 8002648:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800264c:	ebaa 0309 	sub.w	r3, sl, r9
 8002650:	455b      	cmp	r3, fp
 8002652:	dc33      	bgt.n	80026bc <_printf_float+0x374>
 8002654:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002658:	429a      	cmp	r2, r3
 800265a:	db3b      	blt.n	80026d4 <_printf_float+0x38c>
 800265c:	6823      	ldr	r3, [r4, #0]
 800265e:	07da      	lsls	r2, r3, #31
 8002660:	d438      	bmi.n	80026d4 <_printf_float+0x38c>
 8002662:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8002666:	eba2 0903 	sub.w	r9, r2, r3
 800266a:	eba2 020a 	sub.w	r2, r2, sl
 800266e:	4591      	cmp	r9, r2
 8002670:	bfa8      	it	ge
 8002672:	4691      	movge	r9, r2
 8002674:	f1b9 0f00 	cmp.w	r9, #0
 8002678:	dc34      	bgt.n	80026e4 <_printf_float+0x39c>
 800267a:	f04f 0800 	mov.w	r8, #0
 800267e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002682:	f104 0a1a 	add.w	sl, r4, #26
 8002686:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800268a:	1a9b      	subs	r3, r3, r2
 800268c:	eba3 0309 	sub.w	r3, r3, r9
 8002690:	4543      	cmp	r3, r8
 8002692:	f77f af7a 	ble.w	800258a <_printf_float+0x242>
 8002696:	2301      	movs	r3, #1
 8002698:	4652      	mov	r2, sl
 800269a:	4631      	mov	r1, r6
 800269c:	4628      	mov	r0, r5
 800269e:	47b8      	blx	r7
 80026a0:	3001      	adds	r0, #1
 80026a2:	f43f aeac 	beq.w	80023fe <_printf_float+0xb6>
 80026a6:	f108 0801 	add.w	r8, r8, #1
 80026aa:	e7ec      	b.n	8002686 <_printf_float+0x33e>
 80026ac:	4613      	mov	r3, r2
 80026ae:	4631      	mov	r1, r6
 80026b0:	4642      	mov	r2, r8
 80026b2:	4628      	mov	r0, r5
 80026b4:	47b8      	blx	r7
 80026b6:	3001      	adds	r0, #1
 80026b8:	d1c0      	bne.n	800263c <_printf_float+0x2f4>
 80026ba:	e6a0      	b.n	80023fe <_printf_float+0xb6>
 80026bc:	2301      	movs	r3, #1
 80026be:	4631      	mov	r1, r6
 80026c0:	4628      	mov	r0, r5
 80026c2:	920b      	str	r2, [sp, #44]	; 0x2c
 80026c4:	47b8      	blx	r7
 80026c6:	3001      	adds	r0, #1
 80026c8:	f43f ae99 	beq.w	80023fe <_printf_float+0xb6>
 80026cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80026ce:	f10b 0b01 	add.w	fp, fp, #1
 80026d2:	e7b9      	b.n	8002648 <_printf_float+0x300>
 80026d4:	4631      	mov	r1, r6
 80026d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80026da:	4628      	mov	r0, r5
 80026dc:	47b8      	blx	r7
 80026de:	3001      	adds	r0, #1
 80026e0:	d1bf      	bne.n	8002662 <_printf_float+0x31a>
 80026e2:	e68c      	b.n	80023fe <_printf_float+0xb6>
 80026e4:	464b      	mov	r3, r9
 80026e6:	4631      	mov	r1, r6
 80026e8:	4628      	mov	r0, r5
 80026ea:	eb08 020a 	add.w	r2, r8, sl
 80026ee:	47b8      	blx	r7
 80026f0:	3001      	adds	r0, #1
 80026f2:	d1c2      	bne.n	800267a <_printf_float+0x332>
 80026f4:	e683      	b.n	80023fe <_printf_float+0xb6>
 80026f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80026f8:	2a01      	cmp	r2, #1
 80026fa:	dc01      	bgt.n	8002700 <_printf_float+0x3b8>
 80026fc:	07db      	lsls	r3, r3, #31
 80026fe:	d539      	bpl.n	8002774 <_printf_float+0x42c>
 8002700:	2301      	movs	r3, #1
 8002702:	4642      	mov	r2, r8
 8002704:	4631      	mov	r1, r6
 8002706:	4628      	mov	r0, r5
 8002708:	47b8      	blx	r7
 800270a:	3001      	adds	r0, #1
 800270c:	f43f ae77 	beq.w	80023fe <_printf_float+0xb6>
 8002710:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002714:	4631      	mov	r1, r6
 8002716:	4628      	mov	r0, r5
 8002718:	47b8      	blx	r7
 800271a:	3001      	adds	r0, #1
 800271c:	f43f ae6f 	beq.w	80023fe <_printf_float+0xb6>
 8002720:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002724:	2200      	movs	r2, #0
 8002726:	2300      	movs	r3, #0
 8002728:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800272c:	f7fe f93c 	bl	80009a8 <__aeabi_dcmpeq>
 8002730:	b9d8      	cbnz	r0, 800276a <_printf_float+0x422>
 8002732:	f109 33ff 	add.w	r3, r9, #4294967295
 8002736:	f108 0201 	add.w	r2, r8, #1
 800273a:	4631      	mov	r1, r6
 800273c:	4628      	mov	r0, r5
 800273e:	47b8      	blx	r7
 8002740:	3001      	adds	r0, #1
 8002742:	d10e      	bne.n	8002762 <_printf_float+0x41a>
 8002744:	e65b      	b.n	80023fe <_printf_float+0xb6>
 8002746:	2301      	movs	r3, #1
 8002748:	464a      	mov	r2, r9
 800274a:	4631      	mov	r1, r6
 800274c:	4628      	mov	r0, r5
 800274e:	47b8      	blx	r7
 8002750:	3001      	adds	r0, #1
 8002752:	f43f ae54 	beq.w	80023fe <_printf_float+0xb6>
 8002756:	f108 0801 	add.w	r8, r8, #1
 800275a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800275c:	3b01      	subs	r3, #1
 800275e:	4543      	cmp	r3, r8
 8002760:	dcf1      	bgt.n	8002746 <_printf_float+0x3fe>
 8002762:	4653      	mov	r3, sl
 8002764:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002768:	e6de      	b.n	8002528 <_printf_float+0x1e0>
 800276a:	f04f 0800 	mov.w	r8, #0
 800276e:	f104 091a 	add.w	r9, r4, #26
 8002772:	e7f2      	b.n	800275a <_printf_float+0x412>
 8002774:	2301      	movs	r3, #1
 8002776:	4642      	mov	r2, r8
 8002778:	e7df      	b.n	800273a <_printf_float+0x3f2>
 800277a:	2301      	movs	r3, #1
 800277c:	464a      	mov	r2, r9
 800277e:	4631      	mov	r1, r6
 8002780:	4628      	mov	r0, r5
 8002782:	47b8      	blx	r7
 8002784:	3001      	adds	r0, #1
 8002786:	f43f ae3a 	beq.w	80023fe <_printf_float+0xb6>
 800278a:	f108 0801 	add.w	r8, r8, #1
 800278e:	68e3      	ldr	r3, [r4, #12]
 8002790:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002792:	1a5b      	subs	r3, r3, r1
 8002794:	4543      	cmp	r3, r8
 8002796:	dcf0      	bgt.n	800277a <_printf_float+0x432>
 8002798:	e6fb      	b.n	8002592 <_printf_float+0x24a>
 800279a:	f04f 0800 	mov.w	r8, #0
 800279e:	f104 0919 	add.w	r9, r4, #25
 80027a2:	e7f4      	b.n	800278e <_printf_float+0x446>

080027a4 <_printf_common>:
 80027a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027a8:	4616      	mov	r6, r2
 80027aa:	4699      	mov	r9, r3
 80027ac:	688a      	ldr	r2, [r1, #8]
 80027ae:	690b      	ldr	r3, [r1, #16]
 80027b0:	4607      	mov	r7, r0
 80027b2:	4293      	cmp	r3, r2
 80027b4:	bfb8      	it	lt
 80027b6:	4613      	movlt	r3, r2
 80027b8:	6033      	str	r3, [r6, #0]
 80027ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80027be:	460c      	mov	r4, r1
 80027c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80027c4:	b10a      	cbz	r2, 80027ca <_printf_common+0x26>
 80027c6:	3301      	adds	r3, #1
 80027c8:	6033      	str	r3, [r6, #0]
 80027ca:	6823      	ldr	r3, [r4, #0]
 80027cc:	0699      	lsls	r1, r3, #26
 80027ce:	bf42      	ittt	mi
 80027d0:	6833      	ldrmi	r3, [r6, #0]
 80027d2:	3302      	addmi	r3, #2
 80027d4:	6033      	strmi	r3, [r6, #0]
 80027d6:	6825      	ldr	r5, [r4, #0]
 80027d8:	f015 0506 	ands.w	r5, r5, #6
 80027dc:	d106      	bne.n	80027ec <_printf_common+0x48>
 80027de:	f104 0a19 	add.w	sl, r4, #25
 80027e2:	68e3      	ldr	r3, [r4, #12]
 80027e4:	6832      	ldr	r2, [r6, #0]
 80027e6:	1a9b      	subs	r3, r3, r2
 80027e8:	42ab      	cmp	r3, r5
 80027ea:	dc2b      	bgt.n	8002844 <_printf_common+0xa0>
 80027ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80027f0:	1e13      	subs	r3, r2, #0
 80027f2:	6822      	ldr	r2, [r4, #0]
 80027f4:	bf18      	it	ne
 80027f6:	2301      	movne	r3, #1
 80027f8:	0692      	lsls	r2, r2, #26
 80027fa:	d430      	bmi.n	800285e <_printf_common+0xba>
 80027fc:	4649      	mov	r1, r9
 80027fe:	4638      	mov	r0, r7
 8002800:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002804:	47c0      	blx	r8
 8002806:	3001      	adds	r0, #1
 8002808:	d023      	beq.n	8002852 <_printf_common+0xae>
 800280a:	6823      	ldr	r3, [r4, #0]
 800280c:	6922      	ldr	r2, [r4, #16]
 800280e:	f003 0306 	and.w	r3, r3, #6
 8002812:	2b04      	cmp	r3, #4
 8002814:	bf14      	ite	ne
 8002816:	2500      	movne	r5, #0
 8002818:	6833      	ldreq	r3, [r6, #0]
 800281a:	f04f 0600 	mov.w	r6, #0
 800281e:	bf08      	it	eq
 8002820:	68e5      	ldreq	r5, [r4, #12]
 8002822:	f104 041a 	add.w	r4, r4, #26
 8002826:	bf08      	it	eq
 8002828:	1aed      	subeq	r5, r5, r3
 800282a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800282e:	bf08      	it	eq
 8002830:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002834:	4293      	cmp	r3, r2
 8002836:	bfc4      	itt	gt
 8002838:	1a9b      	subgt	r3, r3, r2
 800283a:	18ed      	addgt	r5, r5, r3
 800283c:	42b5      	cmp	r5, r6
 800283e:	d11a      	bne.n	8002876 <_printf_common+0xd2>
 8002840:	2000      	movs	r0, #0
 8002842:	e008      	b.n	8002856 <_printf_common+0xb2>
 8002844:	2301      	movs	r3, #1
 8002846:	4652      	mov	r2, sl
 8002848:	4649      	mov	r1, r9
 800284a:	4638      	mov	r0, r7
 800284c:	47c0      	blx	r8
 800284e:	3001      	adds	r0, #1
 8002850:	d103      	bne.n	800285a <_printf_common+0xb6>
 8002852:	f04f 30ff 	mov.w	r0, #4294967295
 8002856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800285a:	3501      	adds	r5, #1
 800285c:	e7c1      	b.n	80027e2 <_printf_common+0x3e>
 800285e:	2030      	movs	r0, #48	; 0x30
 8002860:	18e1      	adds	r1, r4, r3
 8002862:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002866:	1c5a      	adds	r2, r3, #1
 8002868:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800286c:	4422      	add	r2, r4
 800286e:	3302      	adds	r3, #2
 8002870:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002874:	e7c2      	b.n	80027fc <_printf_common+0x58>
 8002876:	2301      	movs	r3, #1
 8002878:	4622      	mov	r2, r4
 800287a:	4649      	mov	r1, r9
 800287c:	4638      	mov	r0, r7
 800287e:	47c0      	blx	r8
 8002880:	3001      	adds	r0, #1
 8002882:	d0e6      	beq.n	8002852 <_printf_common+0xae>
 8002884:	3601      	adds	r6, #1
 8002886:	e7d9      	b.n	800283c <_printf_common+0x98>

08002888 <_printf_i>:
 8002888:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800288c:	7e0f      	ldrb	r7, [r1, #24]
 800288e:	4691      	mov	r9, r2
 8002890:	2f78      	cmp	r7, #120	; 0x78
 8002892:	4680      	mov	r8, r0
 8002894:	460c      	mov	r4, r1
 8002896:	469a      	mov	sl, r3
 8002898:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800289a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800289e:	d807      	bhi.n	80028b0 <_printf_i+0x28>
 80028a0:	2f62      	cmp	r7, #98	; 0x62
 80028a2:	d80a      	bhi.n	80028ba <_printf_i+0x32>
 80028a4:	2f00      	cmp	r7, #0
 80028a6:	f000 80d5 	beq.w	8002a54 <_printf_i+0x1cc>
 80028aa:	2f58      	cmp	r7, #88	; 0x58
 80028ac:	f000 80c1 	beq.w	8002a32 <_printf_i+0x1aa>
 80028b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80028b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80028b8:	e03a      	b.n	8002930 <_printf_i+0xa8>
 80028ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80028be:	2b15      	cmp	r3, #21
 80028c0:	d8f6      	bhi.n	80028b0 <_printf_i+0x28>
 80028c2:	a101      	add	r1, pc, #4	; (adr r1, 80028c8 <_printf_i+0x40>)
 80028c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80028c8:	08002921 	.word	0x08002921
 80028cc:	08002935 	.word	0x08002935
 80028d0:	080028b1 	.word	0x080028b1
 80028d4:	080028b1 	.word	0x080028b1
 80028d8:	080028b1 	.word	0x080028b1
 80028dc:	080028b1 	.word	0x080028b1
 80028e0:	08002935 	.word	0x08002935
 80028e4:	080028b1 	.word	0x080028b1
 80028e8:	080028b1 	.word	0x080028b1
 80028ec:	080028b1 	.word	0x080028b1
 80028f0:	080028b1 	.word	0x080028b1
 80028f4:	08002a3b 	.word	0x08002a3b
 80028f8:	08002961 	.word	0x08002961
 80028fc:	080029f5 	.word	0x080029f5
 8002900:	080028b1 	.word	0x080028b1
 8002904:	080028b1 	.word	0x080028b1
 8002908:	08002a5d 	.word	0x08002a5d
 800290c:	080028b1 	.word	0x080028b1
 8002910:	08002961 	.word	0x08002961
 8002914:	080028b1 	.word	0x080028b1
 8002918:	080028b1 	.word	0x080028b1
 800291c:	080029fd 	.word	0x080029fd
 8002920:	682b      	ldr	r3, [r5, #0]
 8002922:	1d1a      	adds	r2, r3, #4
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	602a      	str	r2, [r5, #0]
 8002928:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800292c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002930:	2301      	movs	r3, #1
 8002932:	e0a0      	b.n	8002a76 <_printf_i+0x1ee>
 8002934:	6820      	ldr	r0, [r4, #0]
 8002936:	682b      	ldr	r3, [r5, #0]
 8002938:	0607      	lsls	r7, r0, #24
 800293a:	f103 0104 	add.w	r1, r3, #4
 800293e:	6029      	str	r1, [r5, #0]
 8002940:	d501      	bpl.n	8002946 <_printf_i+0xbe>
 8002942:	681e      	ldr	r6, [r3, #0]
 8002944:	e003      	b.n	800294e <_printf_i+0xc6>
 8002946:	0646      	lsls	r6, r0, #25
 8002948:	d5fb      	bpl.n	8002942 <_printf_i+0xba>
 800294a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800294e:	2e00      	cmp	r6, #0
 8002950:	da03      	bge.n	800295a <_printf_i+0xd2>
 8002952:	232d      	movs	r3, #45	; 0x2d
 8002954:	4276      	negs	r6, r6
 8002956:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800295a:	230a      	movs	r3, #10
 800295c:	4859      	ldr	r0, [pc, #356]	; (8002ac4 <_printf_i+0x23c>)
 800295e:	e012      	b.n	8002986 <_printf_i+0xfe>
 8002960:	682b      	ldr	r3, [r5, #0]
 8002962:	6820      	ldr	r0, [r4, #0]
 8002964:	1d19      	adds	r1, r3, #4
 8002966:	6029      	str	r1, [r5, #0]
 8002968:	0605      	lsls	r5, r0, #24
 800296a:	d501      	bpl.n	8002970 <_printf_i+0xe8>
 800296c:	681e      	ldr	r6, [r3, #0]
 800296e:	e002      	b.n	8002976 <_printf_i+0xee>
 8002970:	0641      	lsls	r1, r0, #25
 8002972:	d5fb      	bpl.n	800296c <_printf_i+0xe4>
 8002974:	881e      	ldrh	r6, [r3, #0]
 8002976:	2f6f      	cmp	r7, #111	; 0x6f
 8002978:	bf0c      	ite	eq
 800297a:	2308      	moveq	r3, #8
 800297c:	230a      	movne	r3, #10
 800297e:	4851      	ldr	r0, [pc, #324]	; (8002ac4 <_printf_i+0x23c>)
 8002980:	2100      	movs	r1, #0
 8002982:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002986:	6865      	ldr	r5, [r4, #4]
 8002988:	2d00      	cmp	r5, #0
 800298a:	bfa8      	it	ge
 800298c:	6821      	ldrge	r1, [r4, #0]
 800298e:	60a5      	str	r5, [r4, #8]
 8002990:	bfa4      	itt	ge
 8002992:	f021 0104 	bicge.w	r1, r1, #4
 8002996:	6021      	strge	r1, [r4, #0]
 8002998:	b90e      	cbnz	r6, 800299e <_printf_i+0x116>
 800299a:	2d00      	cmp	r5, #0
 800299c:	d04b      	beq.n	8002a36 <_printf_i+0x1ae>
 800299e:	4615      	mov	r5, r2
 80029a0:	fbb6 f1f3 	udiv	r1, r6, r3
 80029a4:	fb03 6711 	mls	r7, r3, r1, r6
 80029a8:	5dc7      	ldrb	r7, [r0, r7]
 80029aa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80029ae:	4637      	mov	r7, r6
 80029b0:	42bb      	cmp	r3, r7
 80029b2:	460e      	mov	r6, r1
 80029b4:	d9f4      	bls.n	80029a0 <_printf_i+0x118>
 80029b6:	2b08      	cmp	r3, #8
 80029b8:	d10b      	bne.n	80029d2 <_printf_i+0x14a>
 80029ba:	6823      	ldr	r3, [r4, #0]
 80029bc:	07de      	lsls	r6, r3, #31
 80029be:	d508      	bpl.n	80029d2 <_printf_i+0x14a>
 80029c0:	6923      	ldr	r3, [r4, #16]
 80029c2:	6861      	ldr	r1, [r4, #4]
 80029c4:	4299      	cmp	r1, r3
 80029c6:	bfde      	ittt	le
 80029c8:	2330      	movle	r3, #48	; 0x30
 80029ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80029ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 80029d2:	1b52      	subs	r2, r2, r5
 80029d4:	6122      	str	r2, [r4, #16]
 80029d6:	464b      	mov	r3, r9
 80029d8:	4621      	mov	r1, r4
 80029da:	4640      	mov	r0, r8
 80029dc:	f8cd a000 	str.w	sl, [sp]
 80029e0:	aa03      	add	r2, sp, #12
 80029e2:	f7ff fedf 	bl	80027a4 <_printf_common>
 80029e6:	3001      	adds	r0, #1
 80029e8:	d14a      	bne.n	8002a80 <_printf_i+0x1f8>
 80029ea:	f04f 30ff 	mov.w	r0, #4294967295
 80029ee:	b004      	add	sp, #16
 80029f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029f4:	6823      	ldr	r3, [r4, #0]
 80029f6:	f043 0320 	orr.w	r3, r3, #32
 80029fa:	6023      	str	r3, [r4, #0]
 80029fc:	2778      	movs	r7, #120	; 0x78
 80029fe:	4832      	ldr	r0, [pc, #200]	; (8002ac8 <_printf_i+0x240>)
 8002a00:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002a04:	6823      	ldr	r3, [r4, #0]
 8002a06:	6829      	ldr	r1, [r5, #0]
 8002a08:	061f      	lsls	r7, r3, #24
 8002a0a:	f851 6b04 	ldr.w	r6, [r1], #4
 8002a0e:	d402      	bmi.n	8002a16 <_printf_i+0x18e>
 8002a10:	065f      	lsls	r7, r3, #25
 8002a12:	bf48      	it	mi
 8002a14:	b2b6      	uxthmi	r6, r6
 8002a16:	07df      	lsls	r7, r3, #31
 8002a18:	bf48      	it	mi
 8002a1a:	f043 0320 	orrmi.w	r3, r3, #32
 8002a1e:	6029      	str	r1, [r5, #0]
 8002a20:	bf48      	it	mi
 8002a22:	6023      	strmi	r3, [r4, #0]
 8002a24:	b91e      	cbnz	r6, 8002a2e <_printf_i+0x1a6>
 8002a26:	6823      	ldr	r3, [r4, #0]
 8002a28:	f023 0320 	bic.w	r3, r3, #32
 8002a2c:	6023      	str	r3, [r4, #0]
 8002a2e:	2310      	movs	r3, #16
 8002a30:	e7a6      	b.n	8002980 <_printf_i+0xf8>
 8002a32:	4824      	ldr	r0, [pc, #144]	; (8002ac4 <_printf_i+0x23c>)
 8002a34:	e7e4      	b.n	8002a00 <_printf_i+0x178>
 8002a36:	4615      	mov	r5, r2
 8002a38:	e7bd      	b.n	80029b6 <_printf_i+0x12e>
 8002a3a:	682b      	ldr	r3, [r5, #0]
 8002a3c:	6826      	ldr	r6, [r4, #0]
 8002a3e:	1d18      	adds	r0, r3, #4
 8002a40:	6961      	ldr	r1, [r4, #20]
 8002a42:	6028      	str	r0, [r5, #0]
 8002a44:	0635      	lsls	r5, r6, #24
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	d501      	bpl.n	8002a4e <_printf_i+0x1c6>
 8002a4a:	6019      	str	r1, [r3, #0]
 8002a4c:	e002      	b.n	8002a54 <_printf_i+0x1cc>
 8002a4e:	0670      	lsls	r0, r6, #25
 8002a50:	d5fb      	bpl.n	8002a4a <_printf_i+0x1c2>
 8002a52:	8019      	strh	r1, [r3, #0]
 8002a54:	2300      	movs	r3, #0
 8002a56:	4615      	mov	r5, r2
 8002a58:	6123      	str	r3, [r4, #16]
 8002a5a:	e7bc      	b.n	80029d6 <_printf_i+0x14e>
 8002a5c:	682b      	ldr	r3, [r5, #0]
 8002a5e:	2100      	movs	r1, #0
 8002a60:	1d1a      	adds	r2, r3, #4
 8002a62:	602a      	str	r2, [r5, #0]
 8002a64:	681d      	ldr	r5, [r3, #0]
 8002a66:	6862      	ldr	r2, [r4, #4]
 8002a68:	4628      	mov	r0, r5
 8002a6a:	f000 fce4 	bl	8003436 <memchr>
 8002a6e:	b108      	cbz	r0, 8002a74 <_printf_i+0x1ec>
 8002a70:	1b40      	subs	r0, r0, r5
 8002a72:	6060      	str	r0, [r4, #4]
 8002a74:	6863      	ldr	r3, [r4, #4]
 8002a76:	6123      	str	r3, [r4, #16]
 8002a78:	2300      	movs	r3, #0
 8002a7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a7e:	e7aa      	b.n	80029d6 <_printf_i+0x14e>
 8002a80:	462a      	mov	r2, r5
 8002a82:	4649      	mov	r1, r9
 8002a84:	4640      	mov	r0, r8
 8002a86:	6923      	ldr	r3, [r4, #16]
 8002a88:	47d0      	blx	sl
 8002a8a:	3001      	adds	r0, #1
 8002a8c:	d0ad      	beq.n	80029ea <_printf_i+0x162>
 8002a8e:	6823      	ldr	r3, [r4, #0]
 8002a90:	079b      	lsls	r3, r3, #30
 8002a92:	d413      	bmi.n	8002abc <_printf_i+0x234>
 8002a94:	68e0      	ldr	r0, [r4, #12]
 8002a96:	9b03      	ldr	r3, [sp, #12]
 8002a98:	4298      	cmp	r0, r3
 8002a9a:	bfb8      	it	lt
 8002a9c:	4618      	movlt	r0, r3
 8002a9e:	e7a6      	b.n	80029ee <_printf_i+0x166>
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	4632      	mov	r2, r6
 8002aa4:	4649      	mov	r1, r9
 8002aa6:	4640      	mov	r0, r8
 8002aa8:	47d0      	blx	sl
 8002aaa:	3001      	adds	r0, #1
 8002aac:	d09d      	beq.n	80029ea <_printf_i+0x162>
 8002aae:	3501      	adds	r5, #1
 8002ab0:	68e3      	ldr	r3, [r4, #12]
 8002ab2:	9903      	ldr	r1, [sp, #12]
 8002ab4:	1a5b      	subs	r3, r3, r1
 8002ab6:	42ab      	cmp	r3, r5
 8002ab8:	dcf2      	bgt.n	8002aa0 <_printf_i+0x218>
 8002aba:	e7eb      	b.n	8002a94 <_printf_i+0x20c>
 8002abc:	2500      	movs	r5, #0
 8002abe:	f104 0619 	add.w	r6, r4, #25
 8002ac2:	e7f5      	b.n	8002ab0 <_printf_i+0x228>
 8002ac4:	08006ab8 	.word	0x08006ab8
 8002ac8:	08006ac9 	.word	0x08006ac9

08002acc <_scanf_float>:
 8002acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ad0:	b087      	sub	sp, #28
 8002ad2:	9303      	str	r3, [sp, #12]
 8002ad4:	688b      	ldr	r3, [r1, #8]
 8002ad6:	4617      	mov	r7, r2
 8002ad8:	1e5a      	subs	r2, r3, #1
 8002ada:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8002ade:	bf85      	ittet	hi
 8002ae0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8002ae4:	195b      	addhi	r3, r3, r5
 8002ae6:	2300      	movls	r3, #0
 8002ae8:	9302      	strhi	r3, [sp, #8]
 8002aea:	bf88      	it	hi
 8002aec:	f240 135d 	movwhi	r3, #349	; 0x15d
 8002af0:	468b      	mov	fp, r1
 8002af2:	f04f 0500 	mov.w	r5, #0
 8002af6:	bf8c      	ite	hi
 8002af8:	608b      	strhi	r3, [r1, #8]
 8002afa:	9302      	strls	r3, [sp, #8]
 8002afc:	680b      	ldr	r3, [r1, #0]
 8002afe:	4680      	mov	r8, r0
 8002b00:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8002b04:	f84b 3b1c 	str.w	r3, [fp], #28
 8002b08:	460c      	mov	r4, r1
 8002b0a:	465e      	mov	r6, fp
 8002b0c:	46aa      	mov	sl, r5
 8002b0e:	46a9      	mov	r9, r5
 8002b10:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8002b14:	9501      	str	r5, [sp, #4]
 8002b16:	68a2      	ldr	r2, [r4, #8]
 8002b18:	b152      	cbz	r2, 8002b30 <_scanf_float+0x64>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b4e      	cmp	r3, #78	; 0x4e
 8002b20:	d864      	bhi.n	8002bec <_scanf_float+0x120>
 8002b22:	2b40      	cmp	r3, #64	; 0x40
 8002b24:	d83c      	bhi.n	8002ba0 <_scanf_float+0xd4>
 8002b26:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8002b2a:	b2c8      	uxtb	r0, r1
 8002b2c:	280e      	cmp	r0, #14
 8002b2e:	d93a      	bls.n	8002ba6 <_scanf_float+0xda>
 8002b30:	f1b9 0f00 	cmp.w	r9, #0
 8002b34:	d003      	beq.n	8002b3e <_scanf_float+0x72>
 8002b36:	6823      	ldr	r3, [r4, #0]
 8002b38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b3c:	6023      	str	r3, [r4, #0]
 8002b3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002b42:	f1ba 0f01 	cmp.w	sl, #1
 8002b46:	f200 8113 	bhi.w	8002d70 <_scanf_float+0x2a4>
 8002b4a:	455e      	cmp	r6, fp
 8002b4c:	f200 8105 	bhi.w	8002d5a <_scanf_float+0x28e>
 8002b50:	2501      	movs	r5, #1
 8002b52:	4628      	mov	r0, r5
 8002b54:	b007      	add	sp, #28
 8002b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b5a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8002b5e:	2a0d      	cmp	r2, #13
 8002b60:	d8e6      	bhi.n	8002b30 <_scanf_float+0x64>
 8002b62:	a101      	add	r1, pc, #4	; (adr r1, 8002b68 <_scanf_float+0x9c>)
 8002b64:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8002b68:	08002ca7 	.word	0x08002ca7
 8002b6c:	08002b31 	.word	0x08002b31
 8002b70:	08002b31 	.word	0x08002b31
 8002b74:	08002b31 	.word	0x08002b31
 8002b78:	08002d07 	.word	0x08002d07
 8002b7c:	08002cdf 	.word	0x08002cdf
 8002b80:	08002b31 	.word	0x08002b31
 8002b84:	08002b31 	.word	0x08002b31
 8002b88:	08002cb5 	.word	0x08002cb5
 8002b8c:	08002b31 	.word	0x08002b31
 8002b90:	08002b31 	.word	0x08002b31
 8002b94:	08002b31 	.word	0x08002b31
 8002b98:	08002b31 	.word	0x08002b31
 8002b9c:	08002c6d 	.word	0x08002c6d
 8002ba0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8002ba4:	e7db      	b.n	8002b5e <_scanf_float+0x92>
 8002ba6:	290e      	cmp	r1, #14
 8002ba8:	d8c2      	bhi.n	8002b30 <_scanf_float+0x64>
 8002baa:	a001      	add	r0, pc, #4	; (adr r0, 8002bb0 <_scanf_float+0xe4>)
 8002bac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8002bb0:	08002c5f 	.word	0x08002c5f
 8002bb4:	08002b31 	.word	0x08002b31
 8002bb8:	08002c5f 	.word	0x08002c5f
 8002bbc:	08002cf3 	.word	0x08002cf3
 8002bc0:	08002b31 	.word	0x08002b31
 8002bc4:	08002c0d 	.word	0x08002c0d
 8002bc8:	08002c49 	.word	0x08002c49
 8002bcc:	08002c49 	.word	0x08002c49
 8002bd0:	08002c49 	.word	0x08002c49
 8002bd4:	08002c49 	.word	0x08002c49
 8002bd8:	08002c49 	.word	0x08002c49
 8002bdc:	08002c49 	.word	0x08002c49
 8002be0:	08002c49 	.word	0x08002c49
 8002be4:	08002c49 	.word	0x08002c49
 8002be8:	08002c49 	.word	0x08002c49
 8002bec:	2b6e      	cmp	r3, #110	; 0x6e
 8002bee:	d809      	bhi.n	8002c04 <_scanf_float+0x138>
 8002bf0:	2b60      	cmp	r3, #96	; 0x60
 8002bf2:	d8b2      	bhi.n	8002b5a <_scanf_float+0x8e>
 8002bf4:	2b54      	cmp	r3, #84	; 0x54
 8002bf6:	d077      	beq.n	8002ce8 <_scanf_float+0x21c>
 8002bf8:	2b59      	cmp	r3, #89	; 0x59
 8002bfa:	d199      	bne.n	8002b30 <_scanf_float+0x64>
 8002bfc:	2d07      	cmp	r5, #7
 8002bfe:	d197      	bne.n	8002b30 <_scanf_float+0x64>
 8002c00:	2508      	movs	r5, #8
 8002c02:	e029      	b.n	8002c58 <_scanf_float+0x18c>
 8002c04:	2b74      	cmp	r3, #116	; 0x74
 8002c06:	d06f      	beq.n	8002ce8 <_scanf_float+0x21c>
 8002c08:	2b79      	cmp	r3, #121	; 0x79
 8002c0a:	e7f6      	b.n	8002bfa <_scanf_float+0x12e>
 8002c0c:	6821      	ldr	r1, [r4, #0]
 8002c0e:	05c8      	lsls	r0, r1, #23
 8002c10:	d51a      	bpl.n	8002c48 <_scanf_float+0x17c>
 8002c12:	9b02      	ldr	r3, [sp, #8]
 8002c14:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8002c18:	6021      	str	r1, [r4, #0]
 8002c1a:	f109 0901 	add.w	r9, r9, #1
 8002c1e:	b11b      	cbz	r3, 8002c28 <_scanf_float+0x15c>
 8002c20:	3b01      	subs	r3, #1
 8002c22:	3201      	adds	r2, #1
 8002c24:	9302      	str	r3, [sp, #8]
 8002c26:	60a2      	str	r2, [r4, #8]
 8002c28:	68a3      	ldr	r3, [r4, #8]
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	60a3      	str	r3, [r4, #8]
 8002c2e:	6923      	ldr	r3, [r4, #16]
 8002c30:	3301      	adds	r3, #1
 8002c32:	6123      	str	r3, [r4, #16]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3b01      	subs	r3, #1
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	607b      	str	r3, [r7, #4]
 8002c3c:	f340 8084 	ble.w	8002d48 <_scanf_float+0x27c>
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	3301      	adds	r3, #1
 8002c44:	603b      	str	r3, [r7, #0]
 8002c46:	e766      	b.n	8002b16 <_scanf_float+0x4a>
 8002c48:	eb1a 0f05 	cmn.w	sl, r5
 8002c4c:	f47f af70 	bne.w	8002b30 <_scanf_float+0x64>
 8002c50:	6822      	ldr	r2, [r4, #0]
 8002c52:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8002c56:	6022      	str	r2, [r4, #0]
 8002c58:	f806 3b01 	strb.w	r3, [r6], #1
 8002c5c:	e7e4      	b.n	8002c28 <_scanf_float+0x15c>
 8002c5e:	6822      	ldr	r2, [r4, #0]
 8002c60:	0610      	lsls	r0, r2, #24
 8002c62:	f57f af65 	bpl.w	8002b30 <_scanf_float+0x64>
 8002c66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c6a:	e7f4      	b.n	8002c56 <_scanf_float+0x18a>
 8002c6c:	f1ba 0f00 	cmp.w	sl, #0
 8002c70:	d10e      	bne.n	8002c90 <_scanf_float+0x1c4>
 8002c72:	f1b9 0f00 	cmp.w	r9, #0
 8002c76:	d10e      	bne.n	8002c96 <_scanf_float+0x1ca>
 8002c78:	6822      	ldr	r2, [r4, #0]
 8002c7a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8002c7e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8002c82:	d108      	bne.n	8002c96 <_scanf_float+0x1ca>
 8002c84:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8002c88:	f04f 0a01 	mov.w	sl, #1
 8002c8c:	6022      	str	r2, [r4, #0]
 8002c8e:	e7e3      	b.n	8002c58 <_scanf_float+0x18c>
 8002c90:	f1ba 0f02 	cmp.w	sl, #2
 8002c94:	d055      	beq.n	8002d42 <_scanf_float+0x276>
 8002c96:	2d01      	cmp	r5, #1
 8002c98:	d002      	beq.n	8002ca0 <_scanf_float+0x1d4>
 8002c9a:	2d04      	cmp	r5, #4
 8002c9c:	f47f af48 	bne.w	8002b30 <_scanf_float+0x64>
 8002ca0:	3501      	adds	r5, #1
 8002ca2:	b2ed      	uxtb	r5, r5
 8002ca4:	e7d8      	b.n	8002c58 <_scanf_float+0x18c>
 8002ca6:	f1ba 0f01 	cmp.w	sl, #1
 8002caa:	f47f af41 	bne.w	8002b30 <_scanf_float+0x64>
 8002cae:	f04f 0a02 	mov.w	sl, #2
 8002cb2:	e7d1      	b.n	8002c58 <_scanf_float+0x18c>
 8002cb4:	b97d      	cbnz	r5, 8002cd6 <_scanf_float+0x20a>
 8002cb6:	f1b9 0f00 	cmp.w	r9, #0
 8002cba:	f47f af3c 	bne.w	8002b36 <_scanf_float+0x6a>
 8002cbe:	6822      	ldr	r2, [r4, #0]
 8002cc0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8002cc4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8002cc8:	f47f af39 	bne.w	8002b3e <_scanf_float+0x72>
 8002ccc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8002cd0:	2501      	movs	r5, #1
 8002cd2:	6022      	str	r2, [r4, #0]
 8002cd4:	e7c0      	b.n	8002c58 <_scanf_float+0x18c>
 8002cd6:	2d03      	cmp	r5, #3
 8002cd8:	d0e2      	beq.n	8002ca0 <_scanf_float+0x1d4>
 8002cda:	2d05      	cmp	r5, #5
 8002cdc:	e7de      	b.n	8002c9c <_scanf_float+0x1d0>
 8002cde:	2d02      	cmp	r5, #2
 8002ce0:	f47f af26 	bne.w	8002b30 <_scanf_float+0x64>
 8002ce4:	2503      	movs	r5, #3
 8002ce6:	e7b7      	b.n	8002c58 <_scanf_float+0x18c>
 8002ce8:	2d06      	cmp	r5, #6
 8002cea:	f47f af21 	bne.w	8002b30 <_scanf_float+0x64>
 8002cee:	2507      	movs	r5, #7
 8002cf0:	e7b2      	b.n	8002c58 <_scanf_float+0x18c>
 8002cf2:	6822      	ldr	r2, [r4, #0]
 8002cf4:	0591      	lsls	r1, r2, #22
 8002cf6:	f57f af1b 	bpl.w	8002b30 <_scanf_float+0x64>
 8002cfa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8002cfe:	6022      	str	r2, [r4, #0]
 8002d00:	f8cd 9004 	str.w	r9, [sp, #4]
 8002d04:	e7a8      	b.n	8002c58 <_scanf_float+0x18c>
 8002d06:	6822      	ldr	r2, [r4, #0]
 8002d08:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8002d0c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8002d10:	d006      	beq.n	8002d20 <_scanf_float+0x254>
 8002d12:	0550      	lsls	r0, r2, #21
 8002d14:	f57f af0c 	bpl.w	8002b30 <_scanf_float+0x64>
 8002d18:	f1b9 0f00 	cmp.w	r9, #0
 8002d1c:	f43f af0f 	beq.w	8002b3e <_scanf_float+0x72>
 8002d20:	0591      	lsls	r1, r2, #22
 8002d22:	bf58      	it	pl
 8002d24:	9901      	ldrpl	r1, [sp, #4]
 8002d26:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8002d2a:	bf58      	it	pl
 8002d2c:	eba9 0101 	subpl.w	r1, r9, r1
 8002d30:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8002d34:	f04f 0900 	mov.w	r9, #0
 8002d38:	bf58      	it	pl
 8002d3a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8002d3e:	6022      	str	r2, [r4, #0]
 8002d40:	e78a      	b.n	8002c58 <_scanf_float+0x18c>
 8002d42:	f04f 0a03 	mov.w	sl, #3
 8002d46:	e787      	b.n	8002c58 <_scanf_float+0x18c>
 8002d48:	4639      	mov	r1, r7
 8002d4a:	4640      	mov	r0, r8
 8002d4c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8002d50:	4798      	blx	r3
 8002d52:	2800      	cmp	r0, #0
 8002d54:	f43f aedf 	beq.w	8002b16 <_scanf_float+0x4a>
 8002d58:	e6ea      	b.n	8002b30 <_scanf_float+0x64>
 8002d5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002d5e:	463a      	mov	r2, r7
 8002d60:	4640      	mov	r0, r8
 8002d62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8002d66:	4798      	blx	r3
 8002d68:	6923      	ldr	r3, [r4, #16]
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	6123      	str	r3, [r4, #16]
 8002d6e:	e6ec      	b.n	8002b4a <_scanf_float+0x7e>
 8002d70:	1e6b      	subs	r3, r5, #1
 8002d72:	2b06      	cmp	r3, #6
 8002d74:	d825      	bhi.n	8002dc2 <_scanf_float+0x2f6>
 8002d76:	2d02      	cmp	r5, #2
 8002d78:	d836      	bhi.n	8002de8 <_scanf_float+0x31c>
 8002d7a:	455e      	cmp	r6, fp
 8002d7c:	f67f aee8 	bls.w	8002b50 <_scanf_float+0x84>
 8002d80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002d84:	463a      	mov	r2, r7
 8002d86:	4640      	mov	r0, r8
 8002d88:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8002d8c:	4798      	blx	r3
 8002d8e:	6923      	ldr	r3, [r4, #16]
 8002d90:	3b01      	subs	r3, #1
 8002d92:	6123      	str	r3, [r4, #16]
 8002d94:	e7f1      	b.n	8002d7a <_scanf_float+0x2ae>
 8002d96:	9802      	ldr	r0, [sp, #8]
 8002d98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002d9c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8002da0:	463a      	mov	r2, r7
 8002da2:	9002      	str	r0, [sp, #8]
 8002da4:	4640      	mov	r0, r8
 8002da6:	4798      	blx	r3
 8002da8:	6923      	ldr	r3, [r4, #16]
 8002daa:	3b01      	subs	r3, #1
 8002dac:	6123      	str	r3, [r4, #16]
 8002dae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002db2:	fa5f fa8a 	uxtb.w	sl, sl
 8002db6:	f1ba 0f02 	cmp.w	sl, #2
 8002dba:	d1ec      	bne.n	8002d96 <_scanf_float+0x2ca>
 8002dbc:	3d03      	subs	r5, #3
 8002dbe:	b2ed      	uxtb	r5, r5
 8002dc0:	1b76      	subs	r6, r6, r5
 8002dc2:	6823      	ldr	r3, [r4, #0]
 8002dc4:	05da      	lsls	r2, r3, #23
 8002dc6:	d52f      	bpl.n	8002e28 <_scanf_float+0x35c>
 8002dc8:	055b      	lsls	r3, r3, #21
 8002dca:	d510      	bpl.n	8002dee <_scanf_float+0x322>
 8002dcc:	455e      	cmp	r6, fp
 8002dce:	f67f aebf 	bls.w	8002b50 <_scanf_float+0x84>
 8002dd2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002dd6:	463a      	mov	r2, r7
 8002dd8:	4640      	mov	r0, r8
 8002dda:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8002dde:	4798      	blx	r3
 8002de0:	6923      	ldr	r3, [r4, #16]
 8002de2:	3b01      	subs	r3, #1
 8002de4:	6123      	str	r3, [r4, #16]
 8002de6:	e7f1      	b.n	8002dcc <_scanf_float+0x300>
 8002de8:	46aa      	mov	sl, r5
 8002dea:	9602      	str	r6, [sp, #8]
 8002dec:	e7df      	b.n	8002dae <_scanf_float+0x2e2>
 8002dee:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8002df2:	6923      	ldr	r3, [r4, #16]
 8002df4:	2965      	cmp	r1, #101	; 0x65
 8002df6:	f103 33ff 	add.w	r3, r3, #4294967295
 8002dfa:	f106 35ff 	add.w	r5, r6, #4294967295
 8002dfe:	6123      	str	r3, [r4, #16]
 8002e00:	d00c      	beq.n	8002e1c <_scanf_float+0x350>
 8002e02:	2945      	cmp	r1, #69	; 0x45
 8002e04:	d00a      	beq.n	8002e1c <_scanf_float+0x350>
 8002e06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002e0a:	463a      	mov	r2, r7
 8002e0c:	4640      	mov	r0, r8
 8002e0e:	4798      	blx	r3
 8002e10:	6923      	ldr	r3, [r4, #16]
 8002e12:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8002e16:	3b01      	subs	r3, #1
 8002e18:	1eb5      	subs	r5, r6, #2
 8002e1a:	6123      	str	r3, [r4, #16]
 8002e1c:	463a      	mov	r2, r7
 8002e1e:	4640      	mov	r0, r8
 8002e20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002e24:	4798      	blx	r3
 8002e26:	462e      	mov	r6, r5
 8002e28:	6825      	ldr	r5, [r4, #0]
 8002e2a:	f015 0510 	ands.w	r5, r5, #16
 8002e2e:	d155      	bne.n	8002edc <_scanf_float+0x410>
 8002e30:	7035      	strb	r5, [r6, #0]
 8002e32:	6823      	ldr	r3, [r4, #0]
 8002e34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e3c:	d11d      	bne.n	8002e7a <_scanf_float+0x3ae>
 8002e3e:	9b01      	ldr	r3, [sp, #4]
 8002e40:	454b      	cmp	r3, r9
 8002e42:	eba3 0209 	sub.w	r2, r3, r9
 8002e46:	d125      	bne.n	8002e94 <_scanf_float+0x3c8>
 8002e48:	2200      	movs	r2, #0
 8002e4a:	4659      	mov	r1, fp
 8002e4c:	4640      	mov	r0, r8
 8002e4e:	f002 fd23 	bl	8005898 <_strtod_r>
 8002e52:	9b03      	ldr	r3, [sp, #12]
 8002e54:	f8d4 c000 	ldr.w	ip, [r4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f01c 0f02 	tst.w	ip, #2
 8002e5e:	4606      	mov	r6, r0
 8002e60:	460f      	mov	r7, r1
 8002e62:	f103 0204 	add.w	r2, r3, #4
 8002e66:	d020      	beq.n	8002eaa <_scanf_float+0x3de>
 8002e68:	9903      	ldr	r1, [sp, #12]
 8002e6a:	600a      	str	r2, [r1, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	e9c3 6700 	strd	r6, r7, [r3]
 8002e72:	68e3      	ldr	r3, [r4, #12]
 8002e74:	3301      	adds	r3, #1
 8002e76:	60e3      	str	r3, [r4, #12]
 8002e78:	e66b      	b.n	8002b52 <_scanf_float+0x86>
 8002e7a:	9b04      	ldr	r3, [sp, #16]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0e3      	beq.n	8002e48 <_scanf_float+0x37c>
 8002e80:	9905      	ldr	r1, [sp, #20]
 8002e82:	230a      	movs	r3, #10
 8002e84:	462a      	mov	r2, r5
 8002e86:	4640      	mov	r0, r8
 8002e88:	3101      	adds	r1, #1
 8002e8a:	f002 fd89 	bl	80059a0 <_strtol_r>
 8002e8e:	9b04      	ldr	r3, [sp, #16]
 8002e90:	9e05      	ldr	r6, [sp, #20]
 8002e92:	1ac2      	subs	r2, r0, r3
 8002e94:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8002e98:	429e      	cmp	r6, r3
 8002e9a:	bf28      	it	cs
 8002e9c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8002ea0:	4630      	mov	r0, r6
 8002ea2:	490f      	ldr	r1, [pc, #60]	; (8002ee0 <_scanf_float+0x414>)
 8002ea4:	f000 f950 	bl	8003148 <siprintf>
 8002ea8:	e7ce      	b.n	8002e48 <_scanf_float+0x37c>
 8002eaa:	f01c 0f04 	tst.w	ip, #4
 8002eae:	d1db      	bne.n	8002e68 <_scanf_float+0x39c>
 8002eb0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8002eb4:	f8cc 2000 	str.w	r2, [ip]
 8002eb8:	f8d3 8000 	ldr.w	r8, [r3]
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	f7fd fda4 	bl	8000a0c <__aeabi_dcmpun>
 8002ec4:	b128      	cbz	r0, 8002ed2 <_scanf_float+0x406>
 8002ec6:	4807      	ldr	r0, [pc, #28]	; (8002ee4 <_scanf_float+0x418>)
 8002ec8:	f000 fac4 	bl	8003454 <nanf>
 8002ecc:	f8c8 0000 	str.w	r0, [r8]
 8002ed0:	e7cf      	b.n	8002e72 <_scanf_float+0x3a6>
 8002ed2:	4630      	mov	r0, r6
 8002ed4:	4639      	mov	r1, r7
 8002ed6:	f7fd fdf7 	bl	8000ac8 <__aeabi_d2f>
 8002eda:	e7f7      	b.n	8002ecc <_scanf_float+0x400>
 8002edc:	2500      	movs	r5, #0
 8002ede:	e638      	b.n	8002b52 <_scanf_float+0x86>
 8002ee0:	08006ada 	.word	0x08006ada
 8002ee4:	08006e6d 	.word	0x08006e6d

08002ee8 <std>:
 8002ee8:	2300      	movs	r3, #0
 8002eea:	b510      	push	{r4, lr}
 8002eec:	4604      	mov	r4, r0
 8002eee:	e9c0 3300 	strd	r3, r3, [r0]
 8002ef2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002ef6:	6083      	str	r3, [r0, #8]
 8002ef8:	8181      	strh	r1, [r0, #12]
 8002efa:	6643      	str	r3, [r0, #100]	; 0x64
 8002efc:	81c2      	strh	r2, [r0, #14]
 8002efe:	6183      	str	r3, [r0, #24]
 8002f00:	4619      	mov	r1, r3
 8002f02:	2208      	movs	r2, #8
 8002f04:	305c      	adds	r0, #92	; 0x5c
 8002f06:	f000 fa17 	bl	8003338 <memset>
 8002f0a:	4b0d      	ldr	r3, [pc, #52]	; (8002f40 <std+0x58>)
 8002f0c:	6224      	str	r4, [r4, #32]
 8002f0e:	6263      	str	r3, [r4, #36]	; 0x24
 8002f10:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <std+0x5c>)
 8002f12:	62a3      	str	r3, [r4, #40]	; 0x28
 8002f14:	4b0c      	ldr	r3, [pc, #48]	; (8002f48 <std+0x60>)
 8002f16:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f18:	4b0c      	ldr	r3, [pc, #48]	; (8002f4c <std+0x64>)
 8002f1a:	6323      	str	r3, [r4, #48]	; 0x30
 8002f1c:	4b0c      	ldr	r3, [pc, #48]	; (8002f50 <std+0x68>)
 8002f1e:	429c      	cmp	r4, r3
 8002f20:	d006      	beq.n	8002f30 <std+0x48>
 8002f22:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002f26:	4294      	cmp	r4, r2
 8002f28:	d002      	beq.n	8002f30 <std+0x48>
 8002f2a:	33d0      	adds	r3, #208	; 0xd0
 8002f2c:	429c      	cmp	r4, r3
 8002f2e:	d105      	bne.n	8002f3c <std+0x54>
 8002f30:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f38:	f000 ba7a 	b.w	8003430 <__retarget_lock_init_recursive>
 8002f3c:	bd10      	pop	{r4, pc}
 8002f3e:	bf00      	nop
 8002f40:	08003189 	.word	0x08003189
 8002f44:	080031ab 	.word	0x080031ab
 8002f48:	080031e3 	.word	0x080031e3
 8002f4c:	08003207 	.word	0x08003207
 8002f50:	20000240 	.word	0x20000240

08002f54 <stdio_exit_handler>:
 8002f54:	4a02      	ldr	r2, [pc, #8]	; (8002f60 <stdio_exit_handler+0xc>)
 8002f56:	4903      	ldr	r1, [pc, #12]	; (8002f64 <stdio_exit_handler+0x10>)
 8002f58:	4803      	ldr	r0, [pc, #12]	; (8002f68 <stdio_exit_handler+0x14>)
 8002f5a:	f000 b869 	b.w	8003030 <_fwalk_sglue>
 8002f5e:	bf00      	nop
 8002f60:	2000000c 	.word	0x2000000c
 8002f64:	08005fdd 	.word	0x08005fdd
 8002f68:	20000018 	.word	0x20000018

08002f6c <cleanup_stdio>:
 8002f6c:	6841      	ldr	r1, [r0, #4]
 8002f6e:	4b0c      	ldr	r3, [pc, #48]	; (8002fa0 <cleanup_stdio+0x34>)
 8002f70:	b510      	push	{r4, lr}
 8002f72:	4299      	cmp	r1, r3
 8002f74:	4604      	mov	r4, r0
 8002f76:	d001      	beq.n	8002f7c <cleanup_stdio+0x10>
 8002f78:	f003 f830 	bl	8005fdc <_fflush_r>
 8002f7c:	68a1      	ldr	r1, [r4, #8]
 8002f7e:	4b09      	ldr	r3, [pc, #36]	; (8002fa4 <cleanup_stdio+0x38>)
 8002f80:	4299      	cmp	r1, r3
 8002f82:	d002      	beq.n	8002f8a <cleanup_stdio+0x1e>
 8002f84:	4620      	mov	r0, r4
 8002f86:	f003 f829 	bl	8005fdc <_fflush_r>
 8002f8a:	68e1      	ldr	r1, [r4, #12]
 8002f8c:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <cleanup_stdio+0x3c>)
 8002f8e:	4299      	cmp	r1, r3
 8002f90:	d004      	beq.n	8002f9c <cleanup_stdio+0x30>
 8002f92:	4620      	mov	r0, r4
 8002f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f98:	f003 b820 	b.w	8005fdc <_fflush_r>
 8002f9c:	bd10      	pop	{r4, pc}
 8002f9e:	bf00      	nop
 8002fa0:	20000240 	.word	0x20000240
 8002fa4:	200002a8 	.word	0x200002a8
 8002fa8:	20000310 	.word	0x20000310

08002fac <global_stdio_init.part.0>:
 8002fac:	b510      	push	{r4, lr}
 8002fae:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <global_stdio_init.part.0+0x30>)
 8002fb0:	4c0b      	ldr	r4, [pc, #44]	; (8002fe0 <global_stdio_init.part.0+0x34>)
 8002fb2:	4a0c      	ldr	r2, [pc, #48]	; (8002fe4 <global_stdio_init.part.0+0x38>)
 8002fb4:	4620      	mov	r0, r4
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	2104      	movs	r1, #4
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f7ff ff94 	bl	8002ee8 <std>
 8002fc0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	2109      	movs	r1, #9
 8002fc8:	f7ff ff8e 	bl	8002ee8 <std>
 8002fcc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002fd0:	2202      	movs	r2, #2
 8002fd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fd6:	2112      	movs	r1, #18
 8002fd8:	f7ff bf86 	b.w	8002ee8 <std>
 8002fdc:	20000378 	.word	0x20000378
 8002fe0:	20000240 	.word	0x20000240
 8002fe4:	08002f55 	.word	0x08002f55

08002fe8 <__sfp_lock_acquire>:
 8002fe8:	4801      	ldr	r0, [pc, #4]	; (8002ff0 <__sfp_lock_acquire+0x8>)
 8002fea:	f000 ba22 	b.w	8003432 <__retarget_lock_acquire_recursive>
 8002fee:	bf00      	nop
 8002ff0:	20000381 	.word	0x20000381

08002ff4 <__sfp_lock_release>:
 8002ff4:	4801      	ldr	r0, [pc, #4]	; (8002ffc <__sfp_lock_release+0x8>)
 8002ff6:	f000 ba1d 	b.w	8003434 <__retarget_lock_release_recursive>
 8002ffa:	bf00      	nop
 8002ffc:	20000381 	.word	0x20000381

08003000 <__sinit>:
 8003000:	b510      	push	{r4, lr}
 8003002:	4604      	mov	r4, r0
 8003004:	f7ff fff0 	bl	8002fe8 <__sfp_lock_acquire>
 8003008:	6a23      	ldr	r3, [r4, #32]
 800300a:	b11b      	cbz	r3, 8003014 <__sinit+0x14>
 800300c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003010:	f7ff bff0 	b.w	8002ff4 <__sfp_lock_release>
 8003014:	4b04      	ldr	r3, [pc, #16]	; (8003028 <__sinit+0x28>)
 8003016:	6223      	str	r3, [r4, #32]
 8003018:	4b04      	ldr	r3, [pc, #16]	; (800302c <__sinit+0x2c>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1f5      	bne.n	800300c <__sinit+0xc>
 8003020:	f7ff ffc4 	bl	8002fac <global_stdio_init.part.0>
 8003024:	e7f2      	b.n	800300c <__sinit+0xc>
 8003026:	bf00      	nop
 8003028:	08002f6d 	.word	0x08002f6d
 800302c:	20000378 	.word	0x20000378

08003030 <_fwalk_sglue>:
 8003030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003034:	4607      	mov	r7, r0
 8003036:	4688      	mov	r8, r1
 8003038:	4614      	mov	r4, r2
 800303a:	2600      	movs	r6, #0
 800303c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003040:	f1b9 0901 	subs.w	r9, r9, #1
 8003044:	d505      	bpl.n	8003052 <_fwalk_sglue+0x22>
 8003046:	6824      	ldr	r4, [r4, #0]
 8003048:	2c00      	cmp	r4, #0
 800304a:	d1f7      	bne.n	800303c <_fwalk_sglue+0xc>
 800304c:	4630      	mov	r0, r6
 800304e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003052:	89ab      	ldrh	r3, [r5, #12]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d907      	bls.n	8003068 <_fwalk_sglue+0x38>
 8003058:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800305c:	3301      	adds	r3, #1
 800305e:	d003      	beq.n	8003068 <_fwalk_sglue+0x38>
 8003060:	4629      	mov	r1, r5
 8003062:	4638      	mov	r0, r7
 8003064:	47c0      	blx	r8
 8003066:	4306      	orrs	r6, r0
 8003068:	3568      	adds	r5, #104	; 0x68
 800306a:	e7e9      	b.n	8003040 <_fwalk_sglue+0x10>

0800306c <iprintf>:
 800306c:	b40f      	push	{r0, r1, r2, r3}
 800306e:	b507      	push	{r0, r1, r2, lr}
 8003070:	4906      	ldr	r1, [pc, #24]	; (800308c <iprintf+0x20>)
 8003072:	ab04      	add	r3, sp, #16
 8003074:	6808      	ldr	r0, [r1, #0]
 8003076:	f853 2b04 	ldr.w	r2, [r3], #4
 800307a:	6881      	ldr	r1, [r0, #8]
 800307c:	9301      	str	r3, [sp, #4]
 800307e:	f002 fe11 	bl	8005ca4 <_vfiprintf_r>
 8003082:	b003      	add	sp, #12
 8003084:	f85d eb04 	ldr.w	lr, [sp], #4
 8003088:	b004      	add	sp, #16
 800308a:	4770      	bx	lr
 800308c:	20000064 	.word	0x20000064

08003090 <_puts_r>:
 8003090:	6a03      	ldr	r3, [r0, #32]
 8003092:	b570      	push	{r4, r5, r6, lr}
 8003094:	4605      	mov	r5, r0
 8003096:	460e      	mov	r6, r1
 8003098:	6884      	ldr	r4, [r0, #8]
 800309a:	b90b      	cbnz	r3, 80030a0 <_puts_r+0x10>
 800309c:	f7ff ffb0 	bl	8003000 <__sinit>
 80030a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030a2:	07db      	lsls	r3, r3, #31
 80030a4:	d405      	bmi.n	80030b2 <_puts_r+0x22>
 80030a6:	89a3      	ldrh	r3, [r4, #12]
 80030a8:	0598      	lsls	r0, r3, #22
 80030aa:	d402      	bmi.n	80030b2 <_puts_r+0x22>
 80030ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030ae:	f000 f9c0 	bl	8003432 <__retarget_lock_acquire_recursive>
 80030b2:	89a3      	ldrh	r3, [r4, #12]
 80030b4:	0719      	lsls	r1, r3, #28
 80030b6:	d513      	bpl.n	80030e0 <_puts_r+0x50>
 80030b8:	6923      	ldr	r3, [r4, #16]
 80030ba:	b18b      	cbz	r3, 80030e0 <_puts_r+0x50>
 80030bc:	3e01      	subs	r6, #1
 80030be:	68a3      	ldr	r3, [r4, #8]
 80030c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80030c4:	3b01      	subs	r3, #1
 80030c6:	60a3      	str	r3, [r4, #8]
 80030c8:	b9e9      	cbnz	r1, 8003106 <_puts_r+0x76>
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	da2e      	bge.n	800312c <_puts_r+0x9c>
 80030ce:	4622      	mov	r2, r4
 80030d0:	210a      	movs	r1, #10
 80030d2:	4628      	mov	r0, r5
 80030d4:	f000 f89b 	bl	800320e <__swbuf_r>
 80030d8:	3001      	adds	r0, #1
 80030da:	d007      	beq.n	80030ec <_puts_r+0x5c>
 80030dc:	250a      	movs	r5, #10
 80030de:	e007      	b.n	80030f0 <_puts_r+0x60>
 80030e0:	4621      	mov	r1, r4
 80030e2:	4628      	mov	r0, r5
 80030e4:	f000 f8d0 	bl	8003288 <__swsetup_r>
 80030e8:	2800      	cmp	r0, #0
 80030ea:	d0e7      	beq.n	80030bc <_puts_r+0x2c>
 80030ec:	f04f 35ff 	mov.w	r5, #4294967295
 80030f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030f2:	07da      	lsls	r2, r3, #31
 80030f4:	d405      	bmi.n	8003102 <_puts_r+0x72>
 80030f6:	89a3      	ldrh	r3, [r4, #12]
 80030f8:	059b      	lsls	r3, r3, #22
 80030fa:	d402      	bmi.n	8003102 <_puts_r+0x72>
 80030fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030fe:	f000 f999 	bl	8003434 <__retarget_lock_release_recursive>
 8003102:	4628      	mov	r0, r5
 8003104:	bd70      	pop	{r4, r5, r6, pc}
 8003106:	2b00      	cmp	r3, #0
 8003108:	da04      	bge.n	8003114 <_puts_r+0x84>
 800310a:	69a2      	ldr	r2, [r4, #24]
 800310c:	429a      	cmp	r2, r3
 800310e:	dc06      	bgt.n	800311e <_puts_r+0x8e>
 8003110:	290a      	cmp	r1, #10
 8003112:	d004      	beq.n	800311e <_puts_r+0x8e>
 8003114:	6823      	ldr	r3, [r4, #0]
 8003116:	1c5a      	adds	r2, r3, #1
 8003118:	6022      	str	r2, [r4, #0]
 800311a:	7019      	strb	r1, [r3, #0]
 800311c:	e7cf      	b.n	80030be <_puts_r+0x2e>
 800311e:	4622      	mov	r2, r4
 8003120:	4628      	mov	r0, r5
 8003122:	f000 f874 	bl	800320e <__swbuf_r>
 8003126:	3001      	adds	r0, #1
 8003128:	d1c9      	bne.n	80030be <_puts_r+0x2e>
 800312a:	e7df      	b.n	80030ec <_puts_r+0x5c>
 800312c:	250a      	movs	r5, #10
 800312e:	6823      	ldr	r3, [r4, #0]
 8003130:	1c5a      	adds	r2, r3, #1
 8003132:	6022      	str	r2, [r4, #0]
 8003134:	701d      	strb	r5, [r3, #0]
 8003136:	e7db      	b.n	80030f0 <_puts_r+0x60>

08003138 <puts>:
 8003138:	4b02      	ldr	r3, [pc, #8]	; (8003144 <puts+0xc>)
 800313a:	4601      	mov	r1, r0
 800313c:	6818      	ldr	r0, [r3, #0]
 800313e:	f7ff bfa7 	b.w	8003090 <_puts_r>
 8003142:	bf00      	nop
 8003144:	20000064 	.word	0x20000064

08003148 <siprintf>:
 8003148:	b40e      	push	{r1, r2, r3}
 800314a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800314e:	b500      	push	{lr}
 8003150:	b09c      	sub	sp, #112	; 0x70
 8003152:	ab1d      	add	r3, sp, #116	; 0x74
 8003154:	9002      	str	r0, [sp, #8]
 8003156:	9006      	str	r0, [sp, #24]
 8003158:	9107      	str	r1, [sp, #28]
 800315a:	9104      	str	r1, [sp, #16]
 800315c:	4808      	ldr	r0, [pc, #32]	; (8003180 <siprintf+0x38>)
 800315e:	4909      	ldr	r1, [pc, #36]	; (8003184 <siprintf+0x3c>)
 8003160:	f853 2b04 	ldr.w	r2, [r3], #4
 8003164:	9105      	str	r1, [sp, #20]
 8003166:	6800      	ldr	r0, [r0, #0]
 8003168:	a902      	add	r1, sp, #8
 800316a:	9301      	str	r3, [sp, #4]
 800316c:	f002 fc74 	bl	8005a58 <_svfiprintf_r>
 8003170:	2200      	movs	r2, #0
 8003172:	9b02      	ldr	r3, [sp, #8]
 8003174:	701a      	strb	r2, [r3, #0]
 8003176:	b01c      	add	sp, #112	; 0x70
 8003178:	f85d eb04 	ldr.w	lr, [sp], #4
 800317c:	b003      	add	sp, #12
 800317e:	4770      	bx	lr
 8003180:	20000064 	.word	0x20000064
 8003184:	ffff0208 	.word	0xffff0208

08003188 <__sread>:
 8003188:	b510      	push	{r4, lr}
 800318a:	460c      	mov	r4, r1
 800318c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003190:	f000 f900 	bl	8003394 <_read_r>
 8003194:	2800      	cmp	r0, #0
 8003196:	bfab      	itete	ge
 8003198:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800319a:	89a3      	ldrhlt	r3, [r4, #12]
 800319c:	181b      	addge	r3, r3, r0
 800319e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80031a2:	bfac      	ite	ge
 80031a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80031a6:	81a3      	strhlt	r3, [r4, #12]
 80031a8:	bd10      	pop	{r4, pc}

080031aa <__swrite>:
 80031aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031ae:	461f      	mov	r7, r3
 80031b0:	898b      	ldrh	r3, [r1, #12]
 80031b2:	4605      	mov	r5, r0
 80031b4:	05db      	lsls	r3, r3, #23
 80031b6:	460c      	mov	r4, r1
 80031b8:	4616      	mov	r6, r2
 80031ba:	d505      	bpl.n	80031c8 <__swrite+0x1e>
 80031bc:	2302      	movs	r3, #2
 80031be:	2200      	movs	r2, #0
 80031c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031c4:	f000 f8d4 	bl	8003370 <_lseek_r>
 80031c8:	89a3      	ldrh	r3, [r4, #12]
 80031ca:	4632      	mov	r2, r6
 80031cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031d0:	81a3      	strh	r3, [r4, #12]
 80031d2:	4628      	mov	r0, r5
 80031d4:	463b      	mov	r3, r7
 80031d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80031da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80031de:	f000 b8eb 	b.w	80033b8 <_write_r>

080031e2 <__sseek>:
 80031e2:	b510      	push	{r4, lr}
 80031e4:	460c      	mov	r4, r1
 80031e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031ea:	f000 f8c1 	bl	8003370 <_lseek_r>
 80031ee:	1c43      	adds	r3, r0, #1
 80031f0:	89a3      	ldrh	r3, [r4, #12]
 80031f2:	bf15      	itete	ne
 80031f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80031f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80031fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80031fe:	81a3      	strheq	r3, [r4, #12]
 8003200:	bf18      	it	ne
 8003202:	81a3      	strhne	r3, [r4, #12]
 8003204:	bd10      	pop	{r4, pc}

08003206 <__sclose>:
 8003206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800320a:	f000 b8a1 	b.w	8003350 <_close_r>

0800320e <__swbuf_r>:
 800320e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003210:	460e      	mov	r6, r1
 8003212:	4614      	mov	r4, r2
 8003214:	4605      	mov	r5, r0
 8003216:	b118      	cbz	r0, 8003220 <__swbuf_r+0x12>
 8003218:	6a03      	ldr	r3, [r0, #32]
 800321a:	b90b      	cbnz	r3, 8003220 <__swbuf_r+0x12>
 800321c:	f7ff fef0 	bl	8003000 <__sinit>
 8003220:	69a3      	ldr	r3, [r4, #24]
 8003222:	60a3      	str	r3, [r4, #8]
 8003224:	89a3      	ldrh	r3, [r4, #12]
 8003226:	071a      	lsls	r2, r3, #28
 8003228:	d525      	bpl.n	8003276 <__swbuf_r+0x68>
 800322a:	6923      	ldr	r3, [r4, #16]
 800322c:	b31b      	cbz	r3, 8003276 <__swbuf_r+0x68>
 800322e:	6823      	ldr	r3, [r4, #0]
 8003230:	6922      	ldr	r2, [r4, #16]
 8003232:	b2f6      	uxtb	r6, r6
 8003234:	1a98      	subs	r0, r3, r2
 8003236:	6963      	ldr	r3, [r4, #20]
 8003238:	4637      	mov	r7, r6
 800323a:	4283      	cmp	r3, r0
 800323c:	dc04      	bgt.n	8003248 <__swbuf_r+0x3a>
 800323e:	4621      	mov	r1, r4
 8003240:	4628      	mov	r0, r5
 8003242:	f002 fecb 	bl	8005fdc <_fflush_r>
 8003246:	b9e0      	cbnz	r0, 8003282 <__swbuf_r+0x74>
 8003248:	68a3      	ldr	r3, [r4, #8]
 800324a:	3b01      	subs	r3, #1
 800324c:	60a3      	str	r3, [r4, #8]
 800324e:	6823      	ldr	r3, [r4, #0]
 8003250:	1c5a      	adds	r2, r3, #1
 8003252:	6022      	str	r2, [r4, #0]
 8003254:	701e      	strb	r6, [r3, #0]
 8003256:	6962      	ldr	r2, [r4, #20]
 8003258:	1c43      	adds	r3, r0, #1
 800325a:	429a      	cmp	r2, r3
 800325c:	d004      	beq.n	8003268 <__swbuf_r+0x5a>
 800325e:	89a3      	ldrh	r3, [r4, #12]
 8003260:	07db      	lsls	r3, r3, #31
 8003262:	d506      	bpl.n	8003272 <__swbuf_r+0x64>
 8003264:	2e0a      	cmp	r6, #10
 8003266:	d104      	bne.n	8003272 <__swbuf_r+0x64>
 8003268:	4621      	mov	r1, r4
 800326a:	4628      	mov	r0, r5
 800326c:	f002 feb6 	bl	8005fdc <_fflush_r>
 8003270:	b938      	cbnz	r0, 8003282 <__swbuf_r+0x74>
 8003272:	4638      	mov	r0, r7
 8003274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003276:	4621      	mov	r1, r4
 8003278:	4628      	mov	r0, r5
 800327a:	f000 f805 	bl	8003288 <__swsetup_r>
 800327e:	2800      	cmp	r0, #0
 8003280:	d0d5      	beq.n	800322e <__swbuf_r+0x20>
 8003282:	f04f 37ff 	mov.w	r7, #4294967295
 8003286:	e7f4      	b.n	8003272 <__swbuf_r+0x64>

08003288 <__swsetup_r>:
 8003288:	b538      	push	{r3, r4, r5, lr}
 800328a:	4b2a      	ldr	r3, [pc, #168]	; (8003334 <__swsetup_r+0xac>)
 800328c:	4605      	mov	r5, r0
 800328e:	6818      	ldr	r0, [r3, #0]
 8003290:	460c      	mov	r4, r1
 8003292:	b118      	cbz	r0, 800329c <__swsetup_r+0x14>
 8003294:	6a03      	ldr	r3, [r0, #32]
 8003296:	b90b      	cbnz	r3, 800329c <__swsetup_r+0x14>
 8003298:	f7ff feb2 	bl	8003000 <__sinit>
 800329c:	89a3      	ldrh	r3, [r4, #12]
 800329e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80032a2:	0718      	lsls	r0, r3, #28
 80032a4:	d422      	bmi.n	80032ec <__swsetup_r+0x64>
 80032a6:	06d9      	lsls	r1, r3, #27
 80032a8:	d407      	bmi.n	80032ba <__swsetup_r+0x32>
 80032aa:	2309      	movs	r3, #9
 80032ac:	602b      	str	r3, [r5, #0]
 80032ae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80032b2:	f04f 30ff 	mov.w	r0, #4294967295
 80032b6:	81a3      	strh	r3, [r4, #12]
 80032b8:	e034      	b.n	8003324 <__swsetup_r+0x9c>
 80032ba:	0758      	lsls	r0, r3, #29
 80032bc:	d512      	bpl.n	80032e4 <__swsetup_r+0x5c>
 80032be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032c0:	b141      	cbz	r1, 80032d4 <__swsetup_r+0x4c>
 80032c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80032c6:	4299      	cmp	r1, r3
 80032c8:	d002      	beq.n	80032d0 <__swsetup_r+0x48>
 80032ca:	4628      	mov	r0, r5
 80032cc:	f000 ff34 	bl	8004138 <_free_r>
 80032d0:	2300      	movs	r3, #0
 80032d2:	6363      	str	r3, [r4, #52]	; 0x34
 80032d4:	89a3      	ldrh	r3, [r4, #12]
 80032d6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80032da:	81a3      	strh	r3, [r4, #12]
 80032dc:	2300      	movs	r3, #0
 80032de:	6063      	str	r3, [r4, #4]
 80032e0:	6923      	ldr	r3, [r4, #16]
 80032e2:	6023      	str	r3, [r4, #0]
 80032e4:	89a3      	ldrh	r3, [r4, #12]
 80032e6:	f043 0308 	orr.w	r3, r3, #8
 80032ea:	81a3      	strh	r3, [r4, #12]
 80032ec:	6923      	ldr	r3, [r4, #16]
 80032ee:	b94b      	cbnz	r3, 8003304 <__swsetup_r+0x7c>
 80032f0:	89a3      	ldrh	r3, [r4, #12]
 80032f2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80032f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032fa:	d003      	beq.n	8003304 <__swsetup_r+0x7c>
 80032fc:	4621      	mov	r1, r4
 80032fe:	4628      	mov	r0, r5
 8003300:	f002 feb9 	bl	8006076 <__smakebuf_r>
 8003304:	89a0      	ldrh	r0, [r4, #12]
 8003306:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800330a:	f010 0301 	ands.w	r3, r0, #1
 800330e:	d00a      	beq.n	8003326 <__swsetup_r+0x9e>
 8003310:	2300      	movs	r3, #0
 8003312:	60a3      	str	r3, [r4, #8]
 8003314:	6963      	ldr	r3, [r4, #20]
 8003316:	425b      	negs	r3, r3
 8003318:	61a3      	str	r3, [r4, #24]
 800331a:	6923      	ldr	r3, [r4, #16]
 800331c:	b943      	cbnz	r3, 8003330 <__swsetup_r+0xa8>
 800331e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003322:	d1c4      	bne.n	80032ae <__swsetup_r+0x26>
 8003324:	bd38      	pop	{r3, r4, r5, pc}
 8003326:	0781      	lsls	r1, r0, #30
 8003328:	bf58      	it	pl
 800332a:	6963      	ldrpl	r3, [r4, #20]
 800332c:	60a3      	str	r3, [r4, #8]
 800332e:	e7f4      	b.n	800331a <__swsetup_r+0x92>
 8003330:	2000      	movs	r0, #0
 8003332:	e7f7      	b.n	8003324 <__swsetup_r+0x9c>
 8003334:	20000064 	.word	0x20000064

08003338 <memset>:
 8003338:	4603      	mov	r3, r0
 800333a:	4402      	add	r2, r0
 800333c:	4293      	cmp	r3, r2
 800333e:	d100      	bne.n	8003342 <memset+0xa>
 8003340:	4770      	bx	lr
 8003342:	f803 1b01 	strb.w	r1, [r3], #1
 8003346:	e7f9      	b.n	800333c <memset+0x4>

08003348 <_localeconv_r>:
 8003348:	4800      	ldr	r0, [pc, #0]	; (800334c <_localeconv_r+0x4>)
 800334a:	4770      	bx	lr
 800334c:	20000158 	.word	0x20000158

08003350 <_close_r>:
 8003350:	b538      	push	{r3, r4, r5, lr}
 8003352:	2300      	movs	r3, #0
 8003354:	4d05      	ldr	r5, [pc, #20]	; (800336c <_close_r+0x1c>)
 8003356:	4604      	mov	r4, r0
 8003358:	4608      	mov	r0, r1
 800335a:	602b      	str	r3, [r5, #0]
 800335c:	f7fd fd6f 	bl	8000e3e <_close>
 8003360:	1c43      	adds	r3, r0, #1
 8003362:	d102      	bne.n	800336a <_close_r+0x1a>
 8003364:	682b      	ldr	r3, [r5, #0]
 8003366:	b103      	cbz	r3, 800336a <_close_r+0x1a>
 8003368:	6023      	str	r3, [r4, #0]
 800336a:	bd38      	pop	{r3, r4, r5, pc}
 800336c:	2000037c 	.word	0x2000037c

08003370 <_lseek_r>:
 8003370:	b538      	push	{r3, r4, r5, lr}
 8003372:	4604      	mov	r4, r0
 8003374:	4608      	mov	r0, r1
 8003376:	4611      	mov	r1, r2
 8003378:	2200      	movs	r2, #0
 800337a:	4d05      	ldr	r5, [pc, #20]	; (8003390 <_lseek_r+0x20>)
 800337c:	602a      	str	r2, [r5, #0]
 800337e:	461a      	mov	r2, r3
 8003380:	f7fd fd81 	bl	8000e86 <_lseek>
 8003384:	1c43      	adds	r3, r0, #1
 8003386:	d102      	bne.n	800338e <_lseek_r+0x1e>
 8003388:	682b      	ldr	r3, [r5, #0]
 800338a:	b103      	cbz	r3, 800338e <_lseek_r+0x1e>
 800338c:	6023      	str	r3, [r4, #0]
 800338e:	bd38      	pop	{r3, r4, r5, pc}
 8003390:	2000037c 	.word	0x2000037c

08003394 <_read_r>:
 8003394:	b538      	push	{r3, r4, r5, lr}
 8003396:	4604      	mov	r4, r0
 8003398:	4608      	mov	r0, r1
 800339a:	4611      	mov	r1, r2
 800339c:	2200      	movs	r2, #0
 800339e:	4d05      	ldr	r5, [pc, #20]	; (80033b4 <_read_r+0x20>)
 80033a0:	602a      	str	r2, [r5, #0]
 80033a2:	461a      	mov	r2, r3
 80033a4:	f7fd fd12 	bl	8000dcc <_read>
 80033a8:	1c43      	adds	r3, r0, #1
 80033aa:	d102      	bne.n	80033b2 <_read_r+0x1e>
 80033ac:	682b      	ldr	r3, [r5, #0]
 80033ae:	b103      	cbz	r3, 80033b2 <_read_r+0x1e>
 80033b0:	6023      	str	r3, [r4, #0]
 80033b2:	bd38      	pop	{r3, r4, r5, pc}
 80033b4:	2000037c 	.word	0x2000037c

080033b8 <_write_r>:
 80033b8:	b538      	push	{r3, r4, r5, lr}
 80033ba:	4604      	mov	r4, r0
 80033bc:	4608      	mov	r0, r1
 80033be:	4611      	mov	r1, r2
 80033c0:	2200      	movs	r2, #0
 80033c2:	4d05      	ldr	r5, [pc, #20]	; (80033d8 <_write_r+0x20>)
 80033c4:	602a      	str	r2, [r5, #0]
 80033c6:	461a      	mov	r2, r3
 80033c8:	f7fd fd1d 	bl	8000e06 <_write>
 80033cc:	1c43      	adds	r3, r0, #1
 80033ce:	d102      	bne.n	80033d6 <_write_r+0x1e>
 80033d0:	682b      	ldr	r3, [r5, #0]
 80033d2:	b103      	cbz	r3, 80033d6 <_write_r+0x1e>
 80033d4:	6023      	str	r3, [r4, #0]
 80033d6:	bd38      	pop	{r3, r4, r5, pc}
 80033d8:	2000037c 	.word	0x2000037c

080033dc <__errno>:
 80033dc:	4b01      	ldr	r3, [pc, #4]	; (80033e4 <__errno+0x8>)
 80033de:	6818      	ldr	r0, [r3, #0]
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	20000064 	.word	0x20000064

080033e8 <__libc_init_array>:
 80033e8:	b570      	push	{r4, r5, r6, lr}
 80033ea:	2600      	movs	r6, #0
 80033ec:	4d0c      	ldr	r5, [pc, #48]	; (8003420 <__libc_init_array+0x38>)
 80033ee:	4c0d      	ldr	r4, [pc, #52]	; (8003424 <__libc_init_array+0x3c>)
 80033f0:	1b64      	subs	r4, r4, r5
 80033f2:	10a4      	asrs	r4, r4, #2
 80033f4:	42a6      	cmp	r6, r4
 80033f6:	d109      	bne.n	800340c <__libc_init_array+0x24>
 80033f8:	f003 fb2c 	bl	8006a54 <_init>
 80033fc:	2600      	movs	r6, #0
 80033fe:	4d0a      	ldr	r5, [pc, #40]	; (8003428 <__libc_init_array+0x40>)
 8003400:	4c0a      	ldr	r4, [pc, #40]	; (800342c <__libc_init_array+0x44>)
 8003402:	1b64      	subs	r4, r4, r5
 8003404:	10a4      	asrs	r4, r4, #2
 8003406:	42a6      	cmp	r6, r4
 8003408:	d105      	bne.n	8003416 <__libc_init_array+0x2e>
 800340a:	bd70      	pop	{r4, r5, r6, pc}
 800340c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003410:	4798      	blx	r3
 8003412:	3601      	adds	r6, #1
 8003414:	e7ee      	b.n	80033f4 <__libc_init_array+0xc>
 8003416:	f855 3b04 	ldr.w	r3, [r5], #4
 800341a:	4798      	blx	r3
 800341c:	3601      	adds	r6, #1
 800341e:	e7f2      	b.n	8003406 <__libc_init_array+0x1e>
 8003420:	08006ed0 	.word	0x08006ed0
 8003424:	08006ed0 	.word	0x08006ed0
 8003428:	08006ed0 	.word	0x08006ed0
 800342c:	08006ed4 	.word	0x08006ed4

08003430 <__retarget_lock_init_recursive>:
 8003430:	4770      	bx	lr

08003432 <__retarget_lock_acquire_recursive>:
 8003432:	4770      	bx	lr

08003434 <__retarget_lock_release_recursive>:
 8003434:	4770      	bx	lr

08003436 <memchr>:
 8003436:	4603      	mov	r3, r0
 8003438:	b510      	push	{r4, lr}
 800343a:	b2c9      	uxtb	r1, r1
 800343c:	4402      	add	r2, r0
 800343e:	4293      	cmp	r3, r2
 8003440:	4618      	mov	r0, r3
 8003442:	d101      	bne.n	8003448 <memchr+0x12>
 8003444:	2000      	movs	r0, #0
 8003446:	e003      	b.n	8003450 <memchr+0x1a>
 8003448:	7804      	ldrb	r4, [r0, #0]
 800344a:	3301      	adds	r3, #1
 800344c:	428c      	cmp	r4, r1
 800344e:	d1f6      	bne.n	800343e <memchr+0x8>
 8003450:	bd10      	pop	{r4, pc}
	...

08003454 <nanf>:
 8003454:	4800      	ldr	r0, [pc, #0]	; (8003458 <nanf+0x4>)
 8003456:	4770      	bx	lr
 8003458:	7fc00000 	.word	0x7fc00000

0800345c <quorem>:
 800345c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003460:	6903      	ldr	r3, [r0, #16]
 8003462:	690c      	ldr	r4, [r1, #16]
 8003464:	4607      	mov	r7, r0
 8003466:	42a3      	cmp	r3, r4
 8003468:	db7f      	blt.n	800356a <quorem+0x10e>
 800346a:	3c01      	subs	r4, #1
 800346c:	f100 0514 	add.w	r5, r0, #20
 8003470:	f101 0814 	add.w	r8, r1, #20
 8003474:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003478:	9301      	str	r3, [sp, #4]
 800347a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800347e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003482:	3301      	adds	r3, #1
 8003484:	429a      	cmp	r2, r3
 8003486:	fbb2 f6f3 	udiv	r6, r2, r3
 800348a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800348e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003492:	d331      	bcc.n	80034f8 <quorem+0x9c>
 8003494:	f04f 0e00 	mov.w	lr, #0
 8003498:	4640      	mov	r0, r8
 800349a:	46ac      	mov	ip, r5
 800349c:	46f2      	mov	sl, lr
 800349e:	f850 2b04 	ldr.w	r2, [r0], #4
 80034a2:	b293      	uxth	r3, r2
 80034a4:	fb06 e303 	mla	r3, r6, r3, lr
 80034a8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80034ac:	0c1a      	lsrs	r2, r3, #16
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	fb06 220e 	mla	r2, r6, lr, r2
 80034b4:	ebaa 0303 	sub.w	r3, sl, r3
 80034b8:	f8dc a000 	ldr.w	sl, [ip]
 80034bc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80034c0:	fa1f fa8a 	uxth.w	sl, sl
 80034c4:	4453      	add	r3, sl
 80034c6:	f8dc a000 	ldr.w	sl, [ip]
 80034ca:	b292      	uxth	r2, r2
 80034cc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80034d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80034da:	4581      	cmp	r9, r0
 80034dc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80034e0:	f84c 3b04 	str.w	r3, [ip], #4
 80034e4:	d2db      	bcs.n	800349e <quorem+0x42>
 80034e6:	f855 300b 	ldr.w	r3, [r5, fp]
 80034ea:	b92b      	cbnz	r3, 80034f8 <quorem+0x9c>
 80034ec:	9b01      	ldr	r3, [sp, #4]
 80034ee:	3b04      	subs	r3, #4
 80034f0:	429d      	cmp	r5, r3
 80034f2:	461a      	mov	r2, r3
 80034f4:	d32d      	bcc.n	8003552 <quorem+0xf6>
 80034f6:	613c      	str	r4, [r7, #16]
 80034f8:	4638      	mov	r0, r7
 80034fa:	f001 f9dd 	bl	80048b8 <__mcmp>
 80034fe:	2800      	cmp	r0, #0
 8003500:	db23      	blt.n	800354a <quorem+0xee>
 8003502:	4629      	mov	r1, r5
 8003504:	2000      	movs	r0, #0
 8003506:	3601      	adds	r6, #1
 8003508:	f858 2b04 	ldr.w	r2, [r8], #4
 800350c:	f8d1 c000 	ldr.w	ip, [r1]
 8003510:	b293      	uxth	r3, r2
 8003512:	1ac3      	subs	r3, r0, r3
 8003514:	0c12      	lsrs	r2, r2, #16
 8003516:	fa1f f08c 	uxth.w	r0, ip
 800351a:	4403      	add	r3, r0
 800351c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003520:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003524:	b29b      	uxth	r3, r3
 8003526:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800352a:	45c1      	cmp	r9, r8
 800352c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003530:	f841 3b04 	str.w	r3, [r1], #4
 8003534:	d2e8      	bcs.n	8003508 <quorem+0xac>
 8003536:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800353a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800353e:	b922      	cbnz	r2, 800354a <quorem+0xee>
 8003540:	3b04      	subs	r3, #4
 8003542:	429d      	cmp	r5, r3
 8003544:	461a      	mov	r2, r3
 8003546:	d30a      	bcc.n	800355e <quorem+0x102>
 8003548:	613c      	str	r4, [r7, #16]
 800354a:	4630      	mov	r0, r6
 800354c:	b003      	add	sp, #12
 800354e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003552:	6812      	ldr	r2, [r2, #0]
 8003554:	3b04      	subs	r3, #4
 8003556:	2a00      	cmp	r2, #0
 8003558:	d1cd      	bne.n	80034f6 <quorem+0x9a>
 800355a:	3c01      	subs	r4, #1
 800355c:	e7c8      	b.n	80034f0 <quorem+0x94>
 800355e:	6812      	ldr	r2, [r2, #0]
 8003560:	3b04      	subs	r3, #4
 8003562:	2a00      	cmp	r2, #0
 8003564:	d1f0      	bne.n	8003548 <quorem+0xec>
 8003566:	3c01      	subs	r4, #1
 8003568:	e7eb      	b.n	8003542 <quorem+0xe6>
 800356a:	2000      	movs	r0, #0
 800356c:	e7ee      	b.n	800354c <quorem+0xf0>
	...

08003570 <_dtoa_r>:
 8003570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003574:	4616      	mov	r6, r2
 8003576:	461f      	mov	r7, r3
 8003578:	69c4      	ldr	r4, [r0, #28]
 800357a:	b099      	sub	sp, #100	; 0x64
 800357c:	4605      	mov	r5, r0
 800357e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003582:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8003586:	b974      	cbnz	r4, 80035a6 <_dtoa_r+0x36>
 8003588:	2010      	movs	r0, #16
 800358a:	f000 fe1d 	bl	80041c8 <malloc>
 800358e:	4602      	mov	r2, r0
 8003590:	61e8      	str	r0, [r5, #28]
 8003592:	b920      	cbnz	r0, 800359e <_dtoa_r+0x2e>
 8003594:	21ef      	movs	r1, #239	; 0xef
 8003596:	4bac      	ldr	r3, [pc, #688]	; (8003848 <_dtoa_r+0x2d8>)
 8003598:	48ac      	ldr	r0, [pc, #688]	; (800384c <_dtoa_r+0x2dc>)
 800359a:	f002 fe1b 	bl	80061d4 <__assert_func>
 800359e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80035a2:	6004      	str	r4, [r0, #0]
 80035a4:	60c4      	str	r4, [r0, #12]
 80035a6:	69eb      	ldr	r3, [r5, #28]
 80035a8:	6819      	ldr	r1, [r3, #0]
 80035aa:	b151      	cbz	r1, 80035c2 <_dtoa_r+0x52>
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	2301      	movs	r3, #1
 80035b0:	4093      	lsls	r3, r2
 80035b2:	604a      	str	r2, [r1, #4]
 80035b4:	608b      	str	r3, [r1, #8]
 80035b6:	4628      	mov	r0, r5
 80035b8:	f000 fefa 	bl	80043b0 <_Bfree>
 80035bc:	2200      	movs	r2, #0
 80035be:	69eb      	ldr	r3, [r5, #28]
 80035c0:	601a      	str	r2, [r3, #0]
 80035c2:	1e3b      	subs	r3, r7, #0
 80035c4:	bfaf      	iteee	ge
 80035c6:	2300      	movge	r3, #0
 80035c8:	2201      	movlt	r2, #1
 80035ca:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80035ce:	9305      	strlt	r3, [sp, #20]
 80035d0:	bfa8      	it	ge
 80035d2:	f8c8 3000 	strge.w	r3, [r8]
 80035d6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80035da:	4b9d      	ldr	r3, [pc, #628]	; (8003850 <_dtoa_r+0x2e0>)
 80035dc:	bfb8      	it	lt
 80035de:	f8c8 2000 	strlt.w	r2, [r8]
 80035e2:	ea33 0309 	bics.w	r3, r3, r9
 80035e6:	d119      	bne.n	800361c <_dtoa_r+0xac>
 80035e8:	f242 730f 	movw	r3, #9999	; 0x270f
 80035ec:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80035ee:	6013      	str	r3, [r2, #0]
 80035f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80035f4:	4333      	orrs	r3, r6
 80035f6:	f000 8589 	beq.w	800410c <_dtoa_r+0xb9c>
 80035fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80035fc:	b953      	cbnz	r3, 8003614 <_dtoa_r+0xa4>
 80035fe:	4b95      	ldr	r3, [pc, #596]	; (8003854 <_dtoa_r+0x2e4>)
 8003600:	e023      	b.n	800364a <_dtoa_r+0xda>
 8003602:	4b95      	ldr	r3, [pc, #596]	; (8003858 <_dtoa_r+0x2e8>)
 8003604:	9303      	str	r3, [sp, #12]
 8003606:	3308      	adds	r3, #8
 8003608:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800360a:	6013      	str	r3, [r2, #0]
 800360c:	9803      	ldr	r0, [sp, #12]
 800360e:	b019      	add	sp, #100	; 0x64
 8003610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003614:	4b8f      	ldr	r3, [pc, #572]	; (8003854 <_dtoa_r+0x2e4>)
 8003616:	9303      	str	r3, [sp, #12]
 8003618:	3303      	adds	r3, #3
 800361a:	e7f5      	b.n	8003608 <_dtoa_r+0x98>
 800361c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003620:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003624:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003628:	2200      	movs	r2, #0
 800362a:	2300      	movs	r3, #0
 800362c:	f7fd f9bc 	bl	80009a8 <__aeabi_dcmpeq>
 8003630:	4680      	mov	r8, r0
 8003632:	b160      	cbz	r0, 800364e <_dtoa_r+0xde>
 8003634:	2301      	movs	r3, #1
 8003636:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003638:	6013      	str	r3, [r2, #0]
 800363a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 8562 	beq.w	8004106 <_dtoa_r+0xb96>
 8003642:	4b86      	ldr	r3, [pc, #536]	; (800385c <_dtoa_r+0x2ec>)
 8003644:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003646:	6013      	str	r3, [r2, #0]
 8003648:	3b01      	subs	r3, #1
 800364a:	9303      	str	r3, [sp, #12]
 800364c:	e7de      	b.n	800360c <_dtoa_r+0x9c>
 800364e:	ab16      	add	r3, sp, #88	; 0x58
 8003650:	9301      	str	r3, [sp, #4]
 8003652:	ab17      	add	r3, sp, #92	; 0x5c
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	4628      	mov	r0, r5
 8003658:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800365c:	f001 fa3c 	bl	8004ad8 <__d2b>
 8003660:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003664:	4682      	mov	sl, r0
 8003666:	2c00      	cmp	r4, #0
 8003668:	d07e      	beq.n	8003768 <_dtoa_r+0x1f8>
 800366a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800366e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003670:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003674:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003678:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800367c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003680:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8003684:	4619      	mov	r1, r3
 8003686:	2200      	movs	r2, #0
 8003688:	4b75      	ldr	r3, [pc, #468]	; (8003860 <_dtoa_r+0x2f0>)
 800368a:	f7fc fd6d 	bl	8000168 <__aeabi_dsub>
 800368e:	a368      	add	r3, pc, #416	; (adr r3, 8003830 <_dtoa_r+0x2c0>)
 8003690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003694:	f7fc ff20 	bl	80004d8 <__aeabi_dmul>
 8003698:	a367      	add	r3, pc, #412	; (adr r3, 8003838 <_dtoa_r+0x2c8>)
 800369a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369e:	f7fc fd65 	bl	800016c <__adddf3>
 80036a2:	4606      	mov	r6, r0
 80036a4:	4620      	mov	r0, r4
 80036a6:	460f      	mov	r7, r1
 80036a8:	f7fc feac 	bl	8000404 <__aeabi_i2d>
 80036ac:	a364      	add	r3, pc, #400	; (adr r3, 8003840 <_dtoa_r+0x2d0>)
 80036ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b2:	f7fc ff11 	bl	80004d8 <__aeabi_dmul>
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	4630      	mov	r0, r6
 80036bc:	4639      	mov	r1, r7
 80036be:	f7fc fd55 	bl	800016c <__adddf3>
 80036c2:	4606      	mov	r6, r0
 80036c4:	460f      	mov	r7, r1
 80036c6:	f7fd f9b7 	bl	8000a38 <__aeabi_d2iz>
 80036ca:	2200      	movs	r2, #0
 80036cc:	4683      	mov	fp, r0
 80036ce:	2300      	movs	r3, #0
 80036d0:	4630      	mov	r0, r6
 80036d2:	4639      	mov	r1, r7
 80036d4:	f7fd f972 	bl	80009bc <__aeabi_dcmplt>
 80036d8:	b148      	cbz	r0, 80036ee <_dtoa_r+0x17e>
 80036da:	4658      	mov	r0, fp
 80036dc:	f7fc fe92 	bl	8000404 <__aeabi_i2d>
 80036e0:	4632      	mov	r2, r6
 80036e2:	463b      	mov	r3, r7
 80036e4:	f7fd f960 	bl	80009a8 <__aeabi_dcmpeq>
 80036e8:	b908      	cbnz	r0, 80036ee <_dtoa_r+0x17e>
 80036ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 80036ee:	f1bb 0f16 	cmp.w	fp, #22
 80036f2:	d857      	bhi.n	80037a4 <_dtoa_r+0x234>
 80036f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80036f8:	4b5a      	ldr	r3, [pc, #360]	; (8003864 <_dtoa_r+0x2f4>)
 80036fa:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80036fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003702:	f7fd f95b 	bl	80009bc <__aeabi_dcmplt>
 8003706:	2800      	cmp	r0, #0
 8003708:	d04e      	beq.n	80037a8 <_dtoa_r+0x238>
 800370a:	2300      	movs	r3, #0
 800370c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003710:	930f      	str	r3, [sp, #60]	; 0x3c
 8003712:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003714:	1b1b      	subs	r3, r3, r4
 8003716:	1e5a      	subs	r2, r3, #1
 8003718:	bf46      	itte	mi
 800371a:	f1c3 0901 	rsbmi	r9, r3, #1
 800371e:	2300      	movmi	r3, #0
 8003720:	f04f 0900 	movpl.w	r9, #0
 8003724:	9209      	str	r2, [sp, #36]	; 0x24
 8003726:	bf48      	it	mi
 8003728:	9309      	strmi	r3, [sp, #36]	; 0x24
 800372a:	f1bb 0f00 	cmp.w	fp, #0
 800372e:	db3d      	blt.n	80037ac <_dtoa_r+0x23c>
 8003730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003732:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8003736:	445b      	add	r3, fp
 8003738:	9309      	str	r3, [sp, #36]	; 0x24
 800373a:	2300      	movs	r3, #0
 800373c:	930a      	str	r3, [sp, #40]	; 0x28
 800373e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003740:	2b09      	cmp	r3, #9
 8003742:	d867      	bhi.n	8003814 <_dtoa_r+0x2a4>
 8003744:	2b05      	cmp	r3, #5
 8003746:	bfc4      	itt	gt
 8003748:	3b04      	subgt	r3, #4
 800374a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800374c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800374e:	bfc8      	it	gt
 8003750:	2400      	movgt	r4, #0
 8003752:	f1a3 0302 	sub.w	r3, r3, #2
 8003756:	bfd8      	it	le
 8003758:	2401      	movle	r4, #1
 800375a:	2b03      	cmp	r3, #3
 800375c:	f200 8086 	bhi.w	800386c <_dtoa_r+0x2fc>
 8003760:	e8df f003 	tbb	[pc, r3]
 8003764:	5637392c 	.word	0x5637392c
 8003768:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800376c:	441c      	add	r4, r3
 800376e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8003772:	2b20      	cmp	r3, #32
 8003774:	bfc1      	itttt	gt
 8003776:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800377a:	fa09 f903 	lslgt.w	r9, r9, r3
 800377e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8003782:	fa26 f303 	lsrgt.w	r3, r6, r3
 8003786:	bfd6      	itet	le
 8003788:	f1c3 0320 	rsble	r3, r3, #32
 800378c:	ea49 0003 	orrgt.w	r0, r9, r3
 8003790:	fa06 f003 	lslle.w	r0, r6, r3
 8003794:	f7fc fe26 	bl	80003e4 <__aeabi_ui2d>
 8003798:	2201      	movs	r2, #1
 800379a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800379e:	3c01      	subs	r4, #1
 80037a0:	9213      	str	r2, [sp, #76]	; 0x4c
 80037a2:	e76f      	b.n	8003684 <_dtoa_r+0x114>
 80037a4:	2301      	movs	r3, #1
 80037a6:	e7b3      	b.n	8003710 <_dtoa_r+0x1a0>
 80037a8:	900f      	str	r0, [sp, #60]	; 0x3c
 80037aa:	e7b2      	b.n	8003712 <_dtoa_r+0x1a2>
 80037ac:	f1cb 0300 	rsb	r3, fp, #0
 80037b0:	930a      	str	r3, [sp, #40]	; 0x28
 80037b2:	2300      	movs	r3, #0
 80037b4:	eba9 090b 	sub.w	r9, r9, fp
 80037b8:	930e      	str	r3, [sp, #56]	; 0x38
 80037ba:	e7c0      	b.n	800373e <_dtoa_r+0x1ce>
 80037bc:	2300      	movs	r3, #0
 80037be:	930b      	str	r3, [sp, #44]	; 0x2c
 80037c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	dc55      	bgt.n	8003872 <_dtoa_r+0x302>
 80037c6:	2301      	movs	r3, #1
 80037c8:	461a      	mov	r2, r3
 80037ca:	9306      	str	r3, [sp, #24]
 80037cc:	9308      	str	r3, [sp, #32]
 80037ce:	9223      	str	r2, [sp, #140]	; 0x8c
 80037d0:	e00b      	b.n	80037ea <_dtoa_r+0x27a>
 80037d2:	2301      	movs	r3, #1
 80037d4:	e7f3      	b.n	80037be <_dtoa_r+0x24e>
 80037d6:	2300      	movs	r3, #0
 80037d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80037da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80037dc:	445b      	add	r3, fp
 80037de:	9306      	str	r3, [sp, #24]
 80037e0:	3301      	adds	r3, #1
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	9308      	str	r3, [sp, #32]
 80037e6:	bfb8      	it	lt
 80037e8:	2301      	movlt	r3, #1
 80037ea:	2100      	movs	r1, #0
 80037ec:	2204      	movs	r2, #4
 80037ee:	69e8      	ldr	r0, [r5, #28]
 80037f0:	f102 0614 	add.w	r6, r2, #20
 80037f4:	429e      	cmp	r6, r3
 80037f6:	d940      	bls.n	800387a <_dtoa_r+0x30a>
 80037f8:	6041      	str	r1, [r0, #4]
 80037fa:	4628      	mov	r0, r5
 80037fc:	f000 fd98 	bl	8004330 <_Balloc>
 8003800:	9003      	str	r0, [sp, #12]
 8003802:	2800      	cmp	r0, #0
 8003804:	d13c      	bne.n	8003880 <_dtoa_r+0x310>
 8003806:	4602      	mov	r2, r0
 8003808:	f240 11af 	movw	r1, #431	; 0x1af
 800380c:	4b16      	ldr	r3, [pc, #88]	; (8003868 <_dtoa_r+0x2f8>)
 800380e:	e6c3      	b.n	8003598 <_dtoa_r+0x28>
 8003810:	2301      	movs	r3, #1
 8003812:	e7e1      	b.n	80037d8 <_dtoa_r+0x268>
 8003814:	2401      	movs	r4, #1
 8003816:	2300      	movs	r3, #0
 8003818:	940b      	str	r4, [sp, #44]	; 0x2c
 800381a:	9322      	str	r3, [sp, #136]	; 0x88
 800381c:	f04f 33ff 	mov.w	r3, #4294967295
 8003820:	2200      	movs	r2, #0
 8003822:	9306      	str	r3, [sp, #24]
 8003824:	9308      	str	r3, [sp, #32]
 8003826:	2312      	movs	r3, #18
 8003828:	e7d1      	b.n	80037ce <_dtoa_r+0x25e>
 800382a:	bf00      	nop
 800382c:	f3af 8000 	nop.w
 8003830:	636f4361 	.word	0x636f4361
 8003834:	3fd287a7 	.word	0x3fd287a7
 8003838:	8b60c8b3 	.word	0x8b60c8b3
 800383c:	3fc68a28 	.word	0x3fc68a28
 8003840:	509f79fb 	.word	0x509f79fb
 8003844:	3fd34413 	.word	0x3fd34413
 8003848:	08006aec 	.word	0x08006aec
 800384c:	08006b03 	.word	0x08006b03
 8003850:	7ff00000 	.word	0x7ff00000
 8003854:	08006ae8 	.word	0x08006ae8
 8003858:	08006adf 	.word	0x08006adf
 800385c:	08006ab7 	.word	0x08006ab7
 8003860:	3ff80000 	.word	0x3ff80000
 8003864:	08006bf0 	.word	0x08006bf0
 8003868:	08006b5b 	.word	0x08006b5b
 800386c:	2301      	movs	r3, #1
 800386e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003870:	e7d4      	b.n	800381c <_dtoa_r+0x2ac>
 8003872:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003874:	9306      	str	r3, [sp, #24]
 8003876:	9308      	str	r3, [sp, #32]
 8003878:	e7b7      	b.n	80037ea <_dtoa_r+0x27a>
 800387a:	3101      	adds	r1, #1
 800387c:	0052      	lsls	r2, r2, #1
 800387e:	e7b7      	b.n	80037f0 <_dtoa_r+0x280>
 8003880:	69eb      	ldr	r3, [r5, #28]
 8003882:	9a03      	ldr	r2, [sp, #12]
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	9b08      	ldr	r3, [sp, #32]
 8003888:	2b0e      	cmp	r3, #14
 800388a:	f200 80a8 	bhi.w	80039de <_dtoa_r+0x46e>
 800388e:	2c00      	cmp	r4, #0
 8003890:	f000 80a5 	beq.w	80039de <_dtoa_r+0x46e>
 8003894:	f1bb 0f00 	cmp.w	fp, #0
 8003898:	dd34      	ble.n	8003904 <_dtoa_r+0x394>
 800389a:	4b9a      	ldr	r3, [pc, #616]	; (8003b04 <_dtoa_r+0x594>)
 800389c:	f00b 020f 	and.w	r2, fp, #15
 80038a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80038a4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80038a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80038ac:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80038b0:	ea4f 142b 	mov.w	r4, fp, asr #4
 80038b4:	d016      	beq.n	80038e4 <_dtoa_r+0x374>
 80038b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80038ba:	4b93      	ldr	r3, [pc, #588]	; (8003b08 <_dtoa_r+0x598>)
 80038bc:	2703      	movs	r7, #3
 80038be:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80038c2:	f7fc ff33 	bl	800072c <__aeabi_ddiv>
 80038c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80038ca:	f004 040f 	and.w	r4, r4, #15
 80038ce:	4e8e      	ldr	r6, [pc, #568]	; (8003b08 <_dtoa_r+0x598>)
 80038d0:	b954      	cbnz	r4, 80038e8 <_dtoa_r+0x378>
 80038d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80038d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80038da:	f7fc ff27 	bl	800072c <__aeabi_ddiv>
 80038de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80038e2:	e029      	b.n	8003938 <_dtoa_r+0x3c8>
 80038e4:	2702      	movs	r7, #2
 80038e6:	e7f2      	b.n	80038ce <_dtoa_r+0x35e>
 80038e8:	07e1      	lsls	r1, r4, #31
 80038ea:	d508      	bpl.n	80038fe <_dtoa_r+0x38e>
 80038ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80038f0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80038f4:	f7fc fdf0 	bl	80004d8 <__aeabi_dmul>
 80038f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80038fc:	3701      	adds	r7, #1
 80038fe:	1064      	asrs	r4, r4, #1
 8003900:	3608      	adds	r6, #8
 8003902:	e7e5      	b.n	80038d0 <_dtoa_r+0x360>
 8003904:	f000 80a5 	beq.w	8003a52 <_dtoa_r+0x4e2>
 8003908:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800390c:	f1cb 0400 	rsb	r4, fp, #0
 8003910:	4b7c      	ldr	r3, [pc, #496]	; (8003b04 <_dtoa_r+0x594>)
 8003912:	f004 020f 	and.w	r2, r4, #15
 8003916:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800391a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391e:	f7fc fddb 	bl	80004d8 <__aeabi_dmul>
 8003922:	2702      	movs	r7, #2
 8003924:	2300      	movs	r3, #0
 8003926:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800392a:	4e77      	ldr	r6, [pc, #476]	; (8003b08 <_dtoa_r+0x598>)
 800392c:	1124      	asrs	r4, r4, #4
 800392e:	2c00      	cmp	r4, #0
 8003930:	f040 8084 	bne.w	8003a3c <_dtoa_r+0x4cc>
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1d2      	bne.n	80038de <_dtoa_r+0x36e>
 8003938:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800393c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003940:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003942:	2b00      	cmp	r3, #0
 8003944:	f000 8087 	beq.w	8003a56 <_dtoa_r+0x4e6>
 8003948:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800394c:	2200      	movs	r2, #0
 800394e:	4b6f      	ldr	r3, [pc, #444]	; (8003b0c <_dtoa_r+0x59c>)
 8003950:	f7fd f834 	bl	80009bc <__aeabi_dcmplt>
 8003954:	2800      	cmp	r0, #0
 8003956:	d07e      	beq.n	8003a56 <_dtoa_r+0x4e6>
 8003958:	9b08      	ldr	r3, [sp, #32]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d07b      	beq.n	8003a56 <_dtoa_r+0x4e6>
 800395e:	9b06      	ldr	r3, [sp, #24]
 8003960:	2b00      	cmp	r3, #0
 8003962:	dd38      	ble.n	80039d6 <_dtoa_r+0x466>
 8003964:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003968:	2200      	movs	r2, #0
 800396a:	4b69      	ldr	r3, [pc, #420]	; (8003b10 <_dtoa_r+0x5a0>)
 800396c:	f7fc fdb4 	bl	80004d8 <__aeabi_dmul>
 8003970:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003974:	9c06      	ldr	r4, [sp, #24]
 8003976:	f10b 38ff 	add.w	r8, fp, #4294967295
 800397a:	3701      	adds	r7, #1
 800397c:	4638      	mov	r0, r7
 800397e:	f7fc fd41 	bl	8000404 <__aeabi_i2d>
 8003982:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003986:	f7fc fda7 	bl	80004d8 <__aeabi_dmul>
 800398a:	2200      	movs	r2, #0
 800398c:	4b61      	ldr	r3, [pc, #388]	; (8003b14 <_dtoa_r+0x5a4>)
 800398e:	f7fc fbed 	bl	800016c <__adddf3>
 8003992:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8003996:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800399a:	9611      	str	r6, [sp, #68]	; 0x44
 800399c:	2c00      	cmp	r4, #0
 800399e:	d15d      	bne.n	8003a5c <_dtoa_r+0x4ec>
 80039a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80039a4:	2200      	movs	r2, #0
 80039a6:	4b5c      	ldr	r3, [pc, #368]	; (8003b18 <_dtoa_r+0x5a8>)
 80039a8:	f7fc fbde 	bl	8000168 <__aeabi_dsub>
 80039ac:	4602      	mov	r2, r0
 80039ae:	460b      	mov	r3, r1
 80039b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80039b4:	4633      	mov	r3, r6
 80039b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80039b8:	f7fd f81e 	bl	80009f8 <__aeabi_dcmpgt>
 80039bc:	2800      	cmp	r0, #0
 80039be:	f040 8295 	bne.w	8003eec <_dtoa_r+0x97c>
 80039c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80039c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80039c8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80039cc:	f7fc fff6 	bl	80009bc <__aeabi_dcmplt>
 80039d0:	2800      	cmp	r0, #0
 80039d2:	f040 8289 	bne.w	8003ee8 <_dtoa_r+0x978>
 80039d6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80039da:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80039de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f2c0 8151 	blt.w	8003c88 <_dtoa_r+0x718>
 80039e6:	f1bb 0f0e 	cmp.w	fp, #14
 80039ea:	f300 814d 	bgt.w	8003c88 <_dtoa_r+0x718>
 80039ee:	4b45      	ldr	r3, [pc, #276]	; (8003b04 <_dtoa_r+0x594>)
 80039f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80039f4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80039f8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80039fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f280 80da 	bge.w	8003bb8 <_dtoa_r+0x648>
 8003a04:	9b08      	ldr	r3, [sp, #32]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f300 80d6 	bgt.w	8003bb8 <_dtoa_r+0x648>
 8003a0c:	f040 826b 	bne.w	8003ee6 <_dtoa_r+0x976>
 8003a10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003a14:	2200      	movs	r2, #0
 8003a16:	4b40      	ldr	r3, [pc, #256]	; (8003b18 <_dtoa_r+0x5a8>)
 8003a18:	f7fc fd5e 	bl	80004d8 <__aeabi_dmul>
 8003a1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003a20:	f7fc ffe0 	bl	80009e4 <__aeabi_dcmpge>
 8003a24:	9c08      	ldr	r4, [sp, #32]
 8003a26:	4626      	mov	r6, r4
 8003a28:	2800      	cmp	r0, #0
 8003a2a:	f040 8241 	bne.w	8003eb0 <_dtoa_r+0x940>
 8003a2e:	2331      	movs	r3, #49	; 0x31
 8003a30:	9f03      	ldr	r7, [sp, #12]
 8003a32:	f10b 0b01 	add.w	fp, fp, #1
 8003a36:	f807 3b01 	strb.w	r3, [r7], #1
 8003a3a:	e23d      	b.n	8003eb8 <_dtoa_r+0x948>
 8003a3c:	07e2      	lsls	r2, r4, #31
 8003a3e:	d505      	bpl.n	8003a4c <_dtoa_r+0x4dc>
 8003a40:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003a44:	f7fc fd48 	bl	80004d8 <__aeabi_dmul>
 8003a48:	2301      	movs	r3, #1
 8003a4a:	3701      	adds	r7, #1
 8003a4c:	1064      	asrs	r4, r4, #1
 8003a4e:	3608      	adds	r6, #8
 8003a50:	e76d      	b.n	800392e <_dtoa_r+0x3be>
 8003a52:	2702      	movs	r7, #2
 8003a54:	e770      	b.n	8003938 <_dtoa_r+0x3c8>
 8003a56:	46d8      	mov	r8, fp
 8003a58:	9c08      	ldr	r4, [sp, #32]
 8003a5a:	e78f      	b.n	800397c <_dtoa_r+0x40c>
 8003a5c:	9903      	ldr	r1, [sp, #12]
 8003a5e:	4b29      	ldr	r3, [pc, #164]	; (8003b04 <_dtoa_r+0x594>)
 8003a60:	4421      	add	r1, r4
 8003a62:	9112      	str	r1, [sp, #72]	; 0x48
 8003a64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003a66:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003a6a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8003a6e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003a72:	2900      	cmp	r1, #0
 8003a74:	d054      	beq.n	8003b20 <_dtoa_r+0x5b0>
 8003a76:	2000      	movs	r0, #0
 8003a78:	4928      	ldr	r1, [pc, #160]	; (8003b1c <_dtoa_r+0x5ac>)
 8003a7a:	f7fc fe57 	bl	800072c <__aeabi_ddiv>
 8003a7e:	463b      	mov	r3, r7
 8003a80:	4632      	mov	r2, r6
 8003a82:	f7fc fb71 	bl	8000168 <__aeabi_dsub>
 8003a86:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003a8a:	9f03      	ldr	r7, [sp, #12]
 8003a8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003a90:	f7fc ffd2 	bl	8000a38 <__aeabi_d2iz>
 8003a94:	4604      	mov	r4, r0
 8003a96:	f7fc fcb5 	bl	8000404 <__aeabi_i2d>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003aa2:	f7fc fb61 	bl	8000168 <__aeabi_dsub>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	3430      	adds	r4, #48	; 0x30
 8003aac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003ab0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003ab4:	f807 4b01 	strb.w	r4, [r7], #1
 8003ab8:	f7fc ff80 	bl	80009bc <__aeabi_dcmplt>
 8003abc:	2800      	cmp	r0, #0
 8003abe:	d173      	bne.n	8003ba8 <_dtoa_r+0x638>
 8003ac0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ac4:	2000      	movs	r0, #0
 8003ac6:	4911      	ldr	r1, [pc, #68]	; (8003b0c <_dtoa_r+0x59c>)
 8003ac8:	f7fc fb4e 	bl	8000168 <__aeabi_dsub>
 8003acc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003ad0:	f7fc ff74 	bl	80009bc <__aeabi_dcmplt>
 8003ad4:	2800      	cmp	r0, #0
 8003ad6:	f040 80b6 	bne.w	8003c46 <_dtoa_r+0x6d6>
 8003ada:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003adc:	429f      	cmp	r7, r3
 8003ade:	f43f af7a 	beq.w	80039d6 <_dtoa_r+0x466>
 8003ae2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <_dtoa_r+0x5a0>)
 8003aea:	f7fc fcf5 	bl	80004d8 <__aeabi_dmul>
 8003aee:	2200      	movs	r2, #0
 8003af0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003af4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003af8:	4b05      	ldr	r3, [pc, #20]	; (8003b10 <_dtoa_r+0x5a0>)
 8003afa:	f7fc fced 	bl	80004d8 <__aeabi_dmul>
 8003afe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003b02:	e7c3      	b.n	8003a8c <_dtoa_r+0x51c>
 8003b04:	08006bf0 	.word	0x08006bf0
 8003b08:	08006bc8 	.word	0x08006bc8
 8003b0c:	3ff00000 	.word	0x3ff00000
 8003b10:	40240000 	.word	0x40240000
 8003b14:	401c0000 	.word	0x401c0000
 8003b18:	40140000 	.word	0x40140000
 8003b1c:	3fe00000 	.word	0x3fe00000
 8003b20:	4630      	mov	r0, r6
 8003b22:	4639      	mov	r1, r7
 8003b24:	f7fc fcd8 	bl	80004d8 <__aeabi_dmul>
 8003b28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003b2a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003b2e:	9c03      	ldr	r4, [sp, #12]
 8003b30:	9314      	str	r3, [sp, #80]	; 0x50
 8003b32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003b36:	f7fc ff7f 	bl	8000a38 <__aeabi_d2iz>
 8003b3a:	9015      	str	r0, [sp, #84]	; 0x54
 8003b3c:	f7fc fc62 	bl	8000404 <__aeabi_i2d>
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
 8003b44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003b48:	f7fc fb0e 	bl	8000168 <__aeabi_dsub>
 8003b4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003b4e:	4606      	mov	r6, r0
 8003b50:	3330      	adds	r3, #48	; 0x30
 8003b52:	f804 3b01 	strb.w	r3, [r4], #1
 8003b56:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003b58:	460f      	mov	r7, r1
 8003b5a:	429c      	cmp	r4, r3
 8003b5c:	f04f 0200 	mov.w	r2, #0
 8003b60:	d124      	bne.n	8003bac <_dtoa_r+0x63c>
 8003b62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003b66:	4baf      	ldr	r3, [pc, #700]	; (8003e24 <_dtoa_r+0x8b4>)
 8003b68:	f7fc fb00 	bl	800016c <__adddf3>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	460b      	mov	r3, r1
 8003b70:	4630      	mov	r0, r6
 8003b72:	4639      	mov	r1, r7
 8003b74:	f7fc ff40 	bl	80009f8 <__aeabi_dcmpgt>
 8003b78:	2800      	cmp	r0, #0
 8003b7a:	d163      	bne.n	8003c44 <_dtoa_r+0x6d4>
 8003b7c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003b80:	2000      	movs	r0, #0
 8003b82:	49a8      	ldr	r1, [pc, #672]	; (8003e24 <_dtoa_r+0x8b4>)
 8003b84:	f7fc faf0 	bl	8000168 <__aeabi_dsub>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	4630      	mov	r0, r6
 8003b8e:	4639      	mov	r1, r7
 8003b90:	f7fc ff14 	bl	80009bc <__aeabi_dcmplt>
 8003b94:	2800      	cmp	r0, #0
 8003b96:	f43f af1e 	beq.w	80039d6 <_dtoa_r+0x466>
 8003b9a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003b9c:	1e7b      	subs	r3, r7, #1
 8003b9e:	9314      	str	r3, [sp, #80]	; 0x50
 8003ba0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8003ba4:	2b30      	cmp	r3, #48	; 0x30
 8003ba6:	d0f8      	beq.n	8003b9a <_dtoa_r+0x62a>
 8003ba8:	46c3      	mov	fp, r8
 8003baa:	e03b      	b.n	8003c24 <_dtoa_r+0x6b4>
 8003bac:	4b9e      	ldr	r3, [pc, #632]	; (8003e28 <_dtoa_r+0x8b8>)
 8003bae:	f7fc fc93 	bl	80004d8 <__aeabi_dmul>
 8003bb2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003bb6:	e7bc      	b.n	8003b32 <_dtoa_r+0x5c2>
 8003bb8:	9f03      	ldr	r7, [sp, #12]
 8003bba:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8003bbe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003bc2:	4640      	mov	r0, r8
 8003bc4:	4649      	mov	r1, r9
 8003bc6:	f7fc fdb1 	bl	800072c <__aeabi_ddiv>
 8003bca:	f7fc ff35 	bl	8000a38 <__aeabi_d2iz>
 8003bce:	4604      	mov	r4, r0
 8003bd0:	f7fc fc18 	bl	8000404 <__aeabi_i2d>
 8003bd4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003bd8:	f7fc fc7e 	bl	80004d8 <__aeabi_dmul>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	460b      	mov	r3, r1
 8003be0:	4640      	mov	r0, r8
 8003be2:	4649      	mov	r1, r9
 8003be4:	f7fc fac0 	bl	8000168 <__aeabi_dsub>
 8003be8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8003bec:	f807 6b01 	strb.w	r6, [r7], #1
 8003bf0:	9e03      	ldr	r6, [sp, #12]
 8003bf2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8003bf6:	1bbe      	subs	r6, r7, r6
 8003bf8:	45b4      	cmp	ip, r6
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	d136      	bne.n	8003c6e <_dtoa_r+0x6fe>
 8003c00:	f7fc fab4 	bl	800016c <__adddf3>
 8003c04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003c08:	4680      	mov	r8, r0
 8003c0a:	4689      	mov	r9, r1
 8003c0c:	f7fc fef4 	bl	80009f8 <__aeabi_dcmpgt>
 8003c10:	bb58      	cbnz	r0, 8003c6a <_dtoa_r+0x6fa>
 8003c12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003c16:	4640      	mov	r0, r8
 8003c18:	4649      	mov	r1, r9
 8003c1a:	f7fc fec5 	bl	80009a8 <__aeabi_dcmpeq>
 8003c1e:	b108      	cbz	r0, 8003c24 <_dtoa_r+0x6b4>
 8003c20:	07e3      	lsls	r3, r4, #31
 8003c22:	d422      	bmi.n	8003c6a <_dtoa_r+0x6fa>
 8003c24:	4651      	mov	r1, sl
 8003c26:	4628      	mov	r0, r5
 8003c28:	f000 fbc2 	bl	80043b0 <_Bfree>
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003c30:	703b      	strb	r3, [r7, #0]
 8003c32:	f10b 0301 	add.w	r3, fp, #1
 8003c36:	6013      	str	r3, [r2, #0]
 8003c38:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f43f ace6 	beq.w	800360c <_dtoa_r+0x9c>
 8003c40:	601f      	str	r7, [r3, #0]
 8003c42:	e4e3      	b.n	800360c <_dtoa_r+0x9c>
 8003c44:	4627      	mov	r7, r4
 8003c46:	463b      	mov	r3, r7
 8003c48:	461f      	mov	r7, r3
 8003c4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003c4e:	2a39      	cmp	r2, #57	; 0x39
 8003c50:	d107      	bne.n	8003c62 <_dtoa_r+0x6f2>
 8003c52:	9a03      	ldr	r2, [sp, #12]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d1f7      	bne.n	8003c48 <_dtoa_r+0x6d8>
 8003c58:	2230      	movs	r2, #48	; 0x30
 8003c5a:	9903      	ldr	r1, [sp, #12]
 8003c5c:	f108 0801 	add.w	r8, r8, #1
 8003c60:	700a      	strb	r2, [r1, #0]
 8003c62:	781a      	ldrb	r2, [r3, #0]
 8003c64:	3201      	adds	r2, #1
 8003c66:	701a      	strb	r2, [r3, #0]
 8003c68:	e79e      	b.n	8003ba8 <_dtoa_r+0x638>
 8003c6a:	46d8      	mov	r8, fp
 8003c6c:	e7eb      	b.n	8003c46 <_dtoa_r+0x6d6>
 8003c6e:	2200      	movs	r2, #0
 8003c70:	4b6d      	ldr	r3, [pc, #436]	; (8003e28 <_dtoa_r+0x8b8>)
 8003c72:	f7fc fc31 	bl	80004d8 <__aeabi_dmul>
 8003c76:	2200      	movs	r2, #0
 8003c78:	2300      	movs	r3, #0
 8003c7a:	4680      	mov	r8, r0
 8003c7c:	4689      	mov	r9, r1
 8003c7e:	f7fc fe93 	bl	80009a8 <__aeabi_dcmpeq>
 8003c82:	2800      	cmp	r0, #0
 8003c84:	d09b      	beq.n	8003bbe <_dtoa_r+0x64e>
 8003c86:	e7cd      	b.n	8003c24 <_dtoa_r+0x6b4>
 8003c88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003c8a:	2a00      	cmp	r2, #0
 8003c8c:	f000 80c4 	beq.w	8003e18 <_dtoa_r+0x8a8>
 8003c90:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003c92:	2a01      	cmp	r2, #1
 8003c94:	f300 80a8 	bgt.w	8003de8 <_dtoa_r+0x878>
 8003c98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003c9a:	2a00      	cmp	r2, #0
 8003c9c:	f000 80a0 	beq.w	8003de0 <_dtoa_r+0x870>
 8003ca0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003ca4:	464f      	mov	r7, r9
 8003ca6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003ca8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003caa:	2101      	movs	r1, #1
 8003cac:	441a      	add	r2, r3
 8003cae:	4628      	mov	r0, r5
 8003cb0:	4499      	add	r9, r3
 8003cb2:	9209      	str	r2, [sp, #36]	; 0x24
 8003cb4:	f000 fc7c 	bl	80045b0 <__i2b>
 8003cb8:	4606      	mov	r6, r0
 8003cba:	b15f      	cbz	r7, 8003cd4 <_dtoa_r+0x764>
 8003cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	dd08      	ble.n	8003cd4 <_dtoa_r+0x764>
 8003cc2:	42bb      	cmp	r3, r7
 8003cc4:	bfa8      	it	ge
 8003cc6:	463b      	movge	r3, r7
 8003cc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003cca:	eba9 0903 	sub.w	r9, r9, r3
 8003cce:	1aff      	subs	r7, r7, r3
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	9309      	str	r3, [sp, #36]	; 0x24
 8003cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003cd6:	b1f3      	cbz	r3, 8003d16 <_dtoa_r+0x7a6>
 8003cd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f000 80a0 	beq.w	8003e20 <_dtoa_r+0x8b0>
 8003ce0:	2c00      	cmp	r4, #0
 8003ce2:	dd10      	ble.n	8003d06 <_dtoa_r+0x796>
 8003ce4:	4631      	mov	r1, r6
 8003ce6:	4622      	mov	r2, r4
 8003ce8:	4628      	mov	r0, r5
 8003cea:	f000 fd1f 	bl	800472c <__pow5mult>
 8003cee:	4652      	mov	r2, sl
 8003cf0:	4601      	mov	r1, r0
 8003cf2:	4606      	mov	r6, r0
 8003cf4:	4628      	mov	r0, r5
 8003cf6:	f000 fc71 	bl	80045dc <__multiply>
 8003cfa:	4680      	mov	r8, r0
 8003cfc:	4651      	mov	r1, sl
 8003cfe:	4628      	mov	r0, r5
 8003d00:	f000 fb56 	bl	80043b0 <_Bfree>
 8003d04:	46c2      	mov	sl, r8
 8003d06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d08:	1b1a      	subs	r2, r3, r4
 8003d0a:	d004      	beq.n	8003d16 <_dtoa_r+0x7a6>
 8003d0c:	4651      	mov	r1, sl
 8003d0e:	4628      	mov	r0, r5
 8003d10:	f000 fd0c 	bl	800472c <__pow5mult>
 8003d14:	4682      	mov	sl, r0
 8003d16:	2101      	movs	r1, #1
 8003d18:	4628      	mov	r0, r5
 8003d1a:	f000 fc49 	bl	80045b0 <__i2b>
 8003d1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d20:	4604      	mov	r4, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f340 8082 	ble.w	8003e2c <_dtoa_r+0x8bc>
 8003d28:	461a      	mov	r2, r3
 8003d2a:	4601      	mov	r1, r0
 8003d2c:	4628      	mov	r0, r5
 8003d2e:	f000 fcfd 	bl	800472c <__pow5mult>
 8003d32:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003d34:	4604      	mov	r4, r0
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	dd7b      	ble.n	8003e32 <_dtoa_r+0x8c2>
 8003d3a:	f04f 0800 	mov.w	r8, #0
 8003d3e:	6923      	ldr	r3, [r4, #16]
 8003d40:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003d44:	6918      	ldr	r0, [r3, #16]
 8003d46:	f000 fbe5 	bl	8004514 <__hi0bits>
 8003d4a:	f1c0 0020 	rsb	r0, r0, #32
 8003d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d50:	4418      	add	r0, r3
 8003d52:	f010 001f 	ands.w	r0, r0, #31
 8003d56:	f000 8092 	beq.w	8003e7e <_dtoa_r+0x90e>
 8003d5a:	f1c0 0320 	rsb	r3, r0, #32
 8003d5e:	2b04      	cmp	r3, #4
 8003d60:	f340 8085 	ble.w	8003e6e <_dtoa_r+0x8fe>
 8003d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d66:	f1c0 001c 	rsb	r0, r0, #28
 8003d6a:	4403      	add	r3, r0
 8003d6c:	4481      	add	r9, r0
 8003d6e:	4407      	add	r7, r0
 8003d70:	9309      	str	r3, [sp, #36]	; 0x24
 8003d72:	f1b9 0f00 	cmp.w	r9, #0
 8003d76:	dd05      	ble.n	8003d84 <_dtoa_r+0x814>
 8003d78:	4651      	mov	r1, sl
 8003d7a:	464a      	mov	r2, r9
 8003d7c:	4628      	mov	r0, r5
 8003d7e:	f000 fd2f 	bl	80047e0 <__lshift>
 8003d82:	4682      	mov	sl, r0
 8003d84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	dd05      	ble.n	8003d96 <_dtoa_r+0x826>
 8003d8a:	4621      	mov	r1, r4
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	4628      	mov	r0, r5
 8003d90:	f000 fd26 	bl	80047e0 <__lshift>
 8003d94:	4604      	mov	r4, r0
 8003d96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d072      	beq.n	8003e82 <_dtoa_r+0x912>
 8003d9c:	4621      	mov	r1, r4
 8003d9e:	4650      	mov	r0, sl
 8003da0:	f000 fd8a 	bl	80048b8 <__mcmp>
 8003da4:	2800      	cmp	r0, #0
 8003da6:	da6c      	bge.n	8003e82 <_dtoa_r+0x912>
 8003da8:	2300      	movs	r3, #0
 8003daa:	4651      	mov	r1, sl
 8003dac:	220a      	movs	r2, #10
 8003dae:	4628      	mov	r0, r5
 8003db0:	f000 fb20 	bl	80043f4 <__multadd>
 8003db4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003db6:	4682      	mov	sl, r0
 8003db8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 81ac 	beq.w	800411a <_dtoa_r+0xbaa>
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	4631      	mov	r1, r6
 8003dc6:	220a      	movs	r2, #10
 8003dc8:	4628      	mov	r0, r5
 8003dca:	f000 fb13 	bl	80043f4 <__multadd>
 8003dce:	9b06      	ldr	r3, [sp, #24]
 8003dd0:	4606      	mov	r6, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f300 8093 	bgt.w	8003efe <_dtoa_r+0x98e>
 8003dd8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	dc59      	bgt.n	8003e92 <_dtoa_r+0x922>
 8003dde:	e08e      	b.n	8003efe <_dtoa_r+0x98e>
 8003de0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003de2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003de6:	e75d      	b.n	8003ca4 <_dtoa_r+0x734>
 8003de8:	9b08      	ldr	r3, [sp, #32]
 8003dea:	1e5c      	subs	r4, r3, #1
 8003dec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003dee:	42a3      	cmp	r3, r4
 8003df0:	bfbf      	itttt	lt
 8003df2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8003df4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8003df6:	1ae3      	sublt	r3, r4, r3
 8003df8:	18d2      	addlt	r2, r2, r3
 8003dfa:	bfa8      	it	ge
 8003dfc:	1b1c      	subge	r4, r3, r4
 8003dfe:	9b08      	ldr	r3, [sp, #32]
 8003e00:	bfbe      	ittt	lt
 8003e02:	940a      	strlt	r4, [sp, #40]	; 0x28
 8003e04:	920e      	strlt	r2, [sp, #56]	; 0x38
 8003e06:	2400      	movlt	r4, #0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	bfb5      	itete	lt
 8003e0c:	eba9 0703 	sublt.w	r7, r9, r3
 8003e10:	464f      	movge	r7, r9
 8003e12:	2300      	movlt	r3, #0
 8003e14:	9b08      	ldrge	r3, [sp, #32]
 8003e16:	e747      	b.n	8003ca8 <_dtoa_r+0x738>
 8003e18:	464f      	mov	r7, r9
 8003e1a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003e1c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8003e1e:	e74c      	b.n	8003cba <_dtoa_r+0x74a>
 8003e20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003e22:	e773      	b.n	8003d0c <_dtoa_r+0x79c>
 8003e24:	3fe00000 	.word	0x3fe00000
 8003e28:	40240000 	.word	0x40240000
 8003e2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	dc18      	bgt.n	8003e64 <_dtoa_r+0x8f4>
 8003e32:	9b04      	ldr	r3, [sp, #16]
 8003e34:	b9b3      	cbnz	r3, 8003e64 <_dtoa_r+0x8f4>
 8003e36:	9b05      	ldr	r3, [sp, #20]
 8003e38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e3c:	b993      	cbnz	r3, 8003e64 <_dtoa_r+0x8f4>
 8003e3e:	9b05      	ldr	r3, [sp, #20]
 8003e40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e44:	0d1b      	lsrs	r3, r3, #20
 8003e46:	051b      	lsls	r3, r3, #20
 8003e48:	b17b      	cbz	r3, 8003e6a <_dtoa_r+0x8fa>
 8003e4a:	f04f 0801 	mov.w	r8, #1
 8003e4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e50:	f109 0901 	add.w	r9, r9, #1
 8003e54:	3301      	adds	r3, #1
 8003e56:	9309      	str	r3, [sp, #36]	; 0x24
 8003e58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f47f af6f 	bne.w	8003d3e <_dtoa_r+0x7ce>
 8003e60:	2001      	movs	r0, #1
 8003e62:	e774      	b.n	8003d4e <_dtoa_r+0x7de>
 8003e64:	f04f 0800 	mov.w	r8, #0
 8003e68:	e7f6      	b.n	8003e58 <_dtoa_r+0x8e8>
 8003e6a:	4698      	mov	r8, r3
 8003e6c:	e7f4      	b.n	8003e58 <_dtoa_r+0x8e8>
 8003e6e:	d080      	beq.n	8003d72 <_dtoa_r+0x802>
 8003e70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e72:	331c      	adds	r3, #28
 8003e74:	441a      	add	r2, r3
 8003e76:	4499      	add	r9, r3
 8003e78:	441f      	add	r7, r3
 8003e7a:	9209      	str	r2, [sp, #36]	; 0x24
 8003e7c:	e779      	b.n	8003d72 <_dtoa_r+0x802>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	e7f6      	b.n	8003e70 <_dtoa_r+0x900>
 8003e82:	9b08      	ldr	r3, [sp, #32]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	dc34      	bgt.n	8003ef2 <_dtoa_r+0x982>
 8003e88:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	dd31      	ble.n	8003ef2 <_dtoa_r+0x982>
 8003e8e:	9b08      	ldr	r3, [sp, #32]
 8003e90:	9306      	str	r3, [sp, #24]
 8003e92:	9b06      	ldr	r3, [sp, #24]
 8003e94:	b963      	cbnz	r3, 8003eb0 <_dtoa_r+0x940>
 8003e96:	4621      	mov	r1, r4
 8003e98:	2205      	movs	r2, #5
 8003e9a:	4628      	mov	r0, r5
 8003e9c:	f000 faaa 	bl	80043f4 <__multadd>
 8003ea0:	4601      	mov	r1, r0
 8003ea2:	4604      	mov	r4, r0
 8003ea4:	4650      	mov	r0, sl
 8003ea6:	f000 fd07 	bl	80048b8 <__mcmp>
 8003eaa:	2800      	cmp	r0, #0
 8003eac:	f73f adbf 	bgt.w	8003a2e <_dtoa_r+0x4be>
 8003eb0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003eb2:	9f03      	ldr	r7, [sp, #12]
 8003eb4:	ea6f 0b03 	mvn.w	fp, r3
 8003eb8:	f04f 0800 	mov.w	r8, #0
 8003ebc:	4621      	mov	r1, r4
 8003ebe:	4628      	mov	r0, r5
 8003ec0:	f000 fa76 	bl	80043b0 <_Bfree>
 8003ec4:	2e00      	cmp	r6, #0
 8003ec6:	f43f aead 	beq.w	8003c24 <_dtoa_r+0x6b4>
 8003eca:	f1b8 0f00 	cmp.w	r8, #0
 8003ece:	d005      	beq.n	8003edc <_dtoa_r+0x96c>
 8003ed0:	45b0      	cmp	r8, r6
 8003ed2:	d003      	beq.n	8003edc <_dtoa_r+0x96c>
 8003ed4:	4641      	mov	r1, r8
 8003ed6:	4628      	mov	r0, r5
 8003ed8:	f000 fa6a 	bl	80043b0 <_Bfree>
 8003edc:	4631      	mov	r1, r6
 8003ede:	4628      	mov	r0, r5
 8003ee0:	f000 fa66 	bl	80043b0 <_Bfree>
 8003ee4:	e69e      	b.n	8003c24 <_dtoa_r+0x6b4>
 8003ee6:	2400      	movs	r4, #0
 8003ee8:	4626      	mov	r6, r4
 8003eea:	e7e1      	b.n	8003eb0 <_dtoa_r+0x940>
 8003eec:	46c3      	mov	fp, r8
 8003eee:	4626      	mov	r6, r4
 8003ef0:	e59d      	b.n	8003a2e <_dtoa_r+0x4be>
 8003ef2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f000 80c8 	beq.w	800408a <_dtoa_r+0xb1a>
 8003efa:	9b08      	ldr	r3, [sp, #32]
 8003efc:	9306      	str	r3, [sp, #24]
 8003efe:	2f00      	cmp	r7, #0
 8003f00:	dd05      	ble.n	8003f0e <_dtoa_r+0x99e>
 8003f02:	4631      	mov	r1, r6
 8003f04:	463a      	mov	r2, r7
 8003f06:	4628      	mov	r0, r5
 8003f08:	f000 fc6a 	bl	80047e0 <__lshift>
 8003f0c:	4606      	mov	r6, r0
 8003f0e:	f1b8 0f00 	cmp.w	r8, #0
 8003f12:	d05b      	beq.n	8003fcc <_dtoa_r+0xa5c>
 8003f14:	4628      	mov	r0, r5
 8003f16:	6871      	ldr	r1, [r6, #4]
 8003f18:	f000 fa0a 	bl	8004330 <_Balloc>
 8003f1c:	4607      	mov	r7, r0
 8003f1e:	b928      	cbnz	r0, 8003f2c <_dtoa_r+0x9bc>
 8003f20:	4602      	mov	r2, r0
 8003f22:	f240 21ef 	movw	r1, #751	; 0x2ef
 8003f26:	4b81      	ldr	r3, [pc, #516]	; (800412c <_dtoa_r+0xbbc>)
 8003f28:	f7ff bb36 	b.w	8003598 <_dtoa_r+0x28>
 8003f2c:	6932      	ldr	r2, [r6, #16]
 8003f2e:	f106 010c 	add.w	r1, r6, #12
 8003f32:	3202      	adds	r2, #2
 8003f34:	0092      	lsls	r2, r2, #2
 8003f36:	300c      	adds	r0, #12
 8003f38:	f002 f938 	bl	80061ac <memcpy>
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	4639      	mov	r1, r7
 8003f40:	4628      	mov	r0, r5
 8003f42:	f000 fc4d 	bl	80047e0 <__lshift>
 8003f46:	46b0      	mov	r8, r6
 8003f48:	4606      	mov	r6, r0
 8003f4a:	9b03      	ldr	r3, [sp, #12]
 8003f4c:	9a03      	ldr	r2, [sp, #12]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	9308      	str	r3, [sp, #32]
 8003f52:	9b06      	ldr	r3, [sp, #24]
 8003f54:	4413      	add	r3, r2
 8003f56:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f58:	9b04      	ldr	r3, [sp, #16]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	930a      	str	r3, [sp, #40]	; 0x28
 8003f60:	9b08      	ldr	r3, [sp, #32]
 8003f62:	4621      	mov	r1, r4
 8003f64:	3b01      	subs	r3, #1
 8003f66:	4650      	mov	r0, sl
 8003f68:	9304      	str	r3, [sp, #16]
 8003f6a:	f7ff fa77 	bl	800345c <quorem>
 8003f6e:	4641      	mov	r1, r8
 8003f70:	9006      	str	r0, [sp, #24]
 8003f72:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003f76:	4650      	mov	r0, sl
 8003f78:	f000 fc9e 	bl	80048b8 <__mcmp>
 8003f7c:	4632      	mov	r2, r6
 8003f7e:	9009      	str	r0, [sp, #36]	; 0x24
 8003f80:	4621      	mov	r1, r4
 8003f82:	4628      	mov	r0, r5
 8003f84:	f000 fcb4 	bl	80048f0 <__mdiff>
 8003f88:	68c2      	ldr	r2, [r0, #12]
 8003f8a:	4607      	mov	r7, r0
 8003f8c:	bb02      	cbnz	r2, 8003fd0 <_dtoa_r+0xa60>
 8003f8e:	4601      	mov	r1, r0
 8003f90:	4650      	mov	r0, sl
 8003f92:	f000 fc91 	bl	80048b8 <__mcmp>
 8003f96:	4602      	mov	r2, r0
 8003f98:	4639      	mov	r1, r7
 8003f9a:	4628      	mov	r0, r5
 8003f9c:	920c      	str	r2, [sp, #48]	; 0x30
 8003f9e:	f000 fa07 	bl	80043b0 <_Bfree>
 8003fa2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003fa4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003fa6:	9f08      	ldr	r7, [sp, #32]
 8003fa8:	ea43 0102 	orr.w	r1, r3, r2
 8003fac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fae:	4319      	orrs	r1, r3
 8003fb0:	d110      	bne.n	8003fd4 <_dtoa_r+0xa64>
 8003fb2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003fb6:	d029      	beq.n	800400c <_dtoa_r+0xa9c>
 8003fb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	dd02      	ble.n	8003fc4 <_dtoa_r+0xa54>
 8003fbe:	9b06      	ldr	r3, [sp, #24]
 8003fc0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8003fc4:	9b04      	ldr	r3, [sp, #16]
 8003fc6:	f883 9000 	strb.w	r9, [r3]
 8003fca:	e777      	b.n	8003ebc <_dtoa_r+0x94c>
 8003fcc:	4630      	mov	r0, r6
 8003fce:	e7ba      	b.n	8003f46 <_dtoa_r+0x9d6>
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	e7e1      	b.n	8003f98 <_dtoa_r+0xa28>
 8003fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	db04      	blt.n	8003fe4 <_dtoa_r+0xa74>
 8003fda:	9922      	ldr	r1, [sp, #136]	; 0x88
 8003fdc:	430b      	orrs	r3, r1
 8003fde:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003fe0:	430b      	orrs	r3, r1
 8003fe2:	d120      	bne.n	8004026 <_dtoa_r+0xab6>
 8003fe4:	2a00      	cmp	r2, #0
 8003fe6:	dded      	ble.n	8003fc4 <_dtoa_r+0xa54>
 8003fe8:	4651      	mov	r1, sl
 8003fea:	2201      	movs	r2, #1
 8003fec:	4628      	mov	r0, r5
 8003fee:	f000 fbf7 	bl	80047e0 <__lshift>
 8003ff2:	4621      	mov	r1, r4
 8003ff4:	4682      	mov	sl, r0
 8003ff6:	f000 fc5f 	bl	80048b8 <__mcmp>
 8003ffa:	2800      	cmp	r0, #0
 8003ffc:	dc03      	bgt.n	8004006 <_dtoa_r+0xa96>
 8003ffe:	d1e1      	bne.n	8003fc4 <_dtoa_r+0xa54>
 8004000:	f019 0f01 	tst.w	r9, #1
 8004004:	d0de      	beq.n	8003fc4 <_dtoa_r+0xa54>
 8004006:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800400a:	d1d8      	bne.n	8003fbe <_dtoa_r+0xa4e>
 800400c:	2339      	movs	r3, #57	; 0x39
 800400e:	9a04      	ldr	r2, [sp, #16]
 8004010:	7013      	strb	r3, [r2, #0]
 8004012:	463b      	mov	r3, r7
 8004014:	461f      	mov	r7, r3
 8004016:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800401a:	3b01      	subs	r3, #1
 800401c:	2a39      	cmp	r2, #57	; 0x39
 800401e:	d06b      	beq.n	80040f8 <_dtoa_r+0xb88>
 8004020:	3201      	adds	r2, #1
 8004022:	701a      	strb	r2, [r3, #0]
 8004024:	e74a      	b.n	8003ebc <_dtoa_r+0x94c>
 8004026:	2a00      	cmp	r2, #0
 8004028:	dd07      	ble.n	800403a <_dtoa_r+0xaca>
 800402a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800402e:	d0ed      	beq.n	800400c <_dtoa_r+0xa9c>
 8004030:	9a04      	ldr	r2, [sp, #16]
 8004032:	f109 0301 	add.w	r3, r9, #1
 8004036:	7013      	strb	r3, [r2, #0]
 8004038:	e740      	b.n	8003ebc <_dtoa_r+0x94c>
 800403a:	9b08      	ldr	r3, [sp, #32]
 800403c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800403e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8004042:	4293      	cmp	r3, r2
 8004044:	d042      	beq.n	80040cc <_dtoa_r+0xb5c>
 8004046:	4651      	mov	r1, sl
 8004048:	2300      	movs	r3, #0
 800404a:	220a      	movs	r2, #10
 800404c:	4628      	mov	r0, r5
 800404e:	f000 f9d1 	bl	80043f4 <__multadd>
 8004052:	45b0      	cmp	r8, r6
 8004054:	4682      	mov	sl, r0
 8004056:	f04f 0300 	mov.w	r3, #0
 800405a:	f04f 020a 	mov.w	r2, #10
 800405e:	4641      	mov	r1, r8
 8004060:	4628      	mov	r0, r5
 8004062:	d107      	bne.n	8004074 <_dtoa_r+0xb04>
 8004064:	f000 f9c6 	bl	80043f4 <__multadd>
 8004068:	4680      	mov	r8, r0
 800406a:	4606      	mov	r6, r0
 800406c:	9b08      	ldr	r3, [sp, #32]
 800406e:	3301      	adds	r3, #1
 8004070:	9308      	str	r3, [sp, #32]
 8004072:	e775      	b.n	8003f60 <_dtoa_r+0x9f0>
 8004074:	f000 f9be 	bl	80043f4 <__multadd>
 8004078:	4631      	mov	r1, r6
 800407a:	4680      	mov	r8, r0
 800407c:	2300      	movs	r3, #0
 800407e:	220a      	movs	r2, #10
 8004080:	4628      	mov	r0, r5
 8004082:	f000 f9b7 	bl	80043f4 <__multadd>
 8004086:	4606      	mov	r6, r0
 8004088:	e7f0      	b.n	800406c <_dtoa_r+0xafc>
 800408a:	9b08      	ldr	r3, [sp, #32]
 800408c:	9306      	str	r3, [sp, #24]
 800408e:	9f03      	ldr	r7, [sp, #12]
 8004090:	4621      	mov	r1, r4
 8004092:	4650      	mov	r0, sl
 8004094:	f7ff f9e2 	bl	800345c <quorem>
 8004098:	9b03      	ldr	r3, [sp, #12]
 800409a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800409e:	f807 9b01 	strb.w	r9, [r7], #1
 80040a2:	1afa      	subs	r2, r7, r3
 80040a4:	9b06      	ldr	r3, [sp, #24]
 80040a6:	4293      	cmp	r3, r2
 80040a8:	dd07      	ble.n	80040ba <_dtoa_r+0xb4a>
 80040aa:	4651      	mov	r1, sl
 80040ac:	2300      	movs	r3, #0
 80040ae:	220a      	movs	r2, #10
 80040b0:	4628      	mov	r0, r5
 80040b2:	f000 f99f 	bl	80043f4 <__multadd>
 80040b6:	4682      	mov	sl, r0
 80040b8:	e7ea      	b.n	8004090 <_dtoa_r+0xb20>
 80040ba:	9b06      	ldr	r3, [sp, #24]
 80040bc:	f04f 0800 	mov.w	r8, #0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	bfcc      	ite	gt
 80040c4:	461f      	movgt	r7, r3
 80040c6:	2701      	movle	r7, #1
 80040c8:	9b03      	ldr	r3, [sp, #12]
 80040ca:	441f      	add	r7, r3
 80040cc:	4651      	mov	r1, sl
 80040ce:	2201      	movs	r2, #1
 80040d0:	4628      	mov	r0, r5
 80040d2:	f000 fb85 	bl	80047e0 <__lshift>
 80040d6:	4621      	mov	r1, r4
 80040d8:	4682      	mov	sl, r0
 80040da:	f000 fbed 	bl	80048b8 <__mcmp>
 80040de:	2800      	cmp	r0, #0
 80040e0:	dc97      	bgt.n	8004012 <_dtoa_r+0xaa2>
 80040e2:	d102      	bne.n	80040ea <_dtoa_r+0xb7a>
 80040e4:	f019 0f01 	tst.w	r9, #1
 80040e8:	d193      	bne.n	8004012 <_dtoa_r+0xaa2>
 80040ea:	463b      	mov	r3, r7
 80040ec:	461f      	mov	r7, r3
 80040ee:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80040f2:	2a30      	cmp	r2, #48	; 0x30
 80040f4:	d0fa      	beq.n	80040ec <_dtoa_r+0xb7c>
 80040f6:	e6e1      	b.n	8003ebc <_dtoa_r+0x94c>
 80040f8:	9a03      	ldr	r2, [sp, #12]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d18a      	bne.n	8004014 <_dtoa_r+0xaa4>
 80040fe:	2331      	movs	r3, #49	; 0x31
 8004100:	f10b 0b01 	add.w	fp, fp, #1
 8004104:	e797      	b.n	8004036 <_dtoa_r+0xac6>
 8004106:	4b0a      	ldr	r3, [pc, #40]	; (8004130 <_dtoa_r+0xbc0>)
 8004108:	f7ff ba9f 	b.w	800364a <_dtoa_r+0xda>
 800410c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800410e:	2b00      	cmp	r3, #0
 8004110:	f47f aa77 	bne.w	8003602 <_dtoa_r+0x92>
 8004114:	4b07      	ldr	r3, [pc, #28]	; (8004134 <_dtoa_r+0xbc4>)
 8004116:	f7ff ba98 	b.w	800364a <_dtoa_r+0xda>
 800411a:	9b06      	ldr	r3, [sp, #24]
 800411c:	2b00      	cmp	r3, #0
 800411e:	dcb6      	bgt.n	800408e <_dtoa_r+0xb1e>
 8004120:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004122:	2b02      	cmp	r3, #2
 8004124:	f73f aeb5 	bgt.w	8003e92 <_dtoa_r+0x922>
 8004128:	e7b1      	b.n	800408e <_dtoa_r+0xb1e>
 800412a:	bf00      	nop
 800412c:	08006b5b 	.word	0x08006b5b
 8004130:	08006ab6 	.word	0x08006ab6
 8004134:	08006adf 	.word	0x08006adf

08004138 <_free_r>:
 8004138:	b538      	push	{r3, r4, r5, lr}
 800413a:	4605      	mov	r5, r0
 800413c:	2900      	cmp	r1, #0
 800413e:	d040      	beq.n	80041c2 <_free_r+0x8a>
 8004140:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004144:	1f0c      	subs	r4, r1, #4
 8004146:	2b00      	cmp	r3, #0
 8004148:	bfb8      	it	lt
 800414a:	18e4      	addlt	r4, r4, r3
 800414c:	f000 f8e4 	bl	8004318 <__malloc_lock>
 8004150:	4a1c      	ldr	r2, [pc, #112]	; (80041c4 <_free_r+0x8c>)
 8004152:	6813      	ldr	r3, [r2, #0]
 8004154:	b933      	cbnz	r3, 8004164 <_free_r+0x2c>
 8004156:	6063      	str	r3, [r4, #4]
 8004158:	6014      	str	r4, [r2, #0]
 800415a:	4628      	mov	r0, r5
 800415c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004160:	f000 b8e0 	b.w	8004324 <__malloc_unlock>
 8004164:	42a3      	cmp	r3, r4
 8004166:	d908      	bls.n	800417a <_free_r+0x42>
 8004168:	6820      	ldr	r0, [r4, #0]
 800416a:	1821      	adds	r1, r4, r0
 800416c:	428b      	cmp	r3, r1
 800416e:	bf01      	itttt	eq
 8004170:	6819      	ldreq	r1, [r3, #0]
 8004172:	685b      	ldreq	r3, [r3, #4]
 8004174:	1809      	addeq	r1, r1, r0
 8004176:	6021      	streq	r1, [r4, #0]
 8004178:	e7ed      	b.n	8004156 <_free_r+0x1e>
 800417a:	461a      	mov	r2, r3
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	b10b      	cbz	r3, 8004184 <_free_r+0x4c>
 8004180:	42a3      	cmp	r3, r4
 8004182:	d9fa      	bls.n	800417a <_free_r+0x42>
 8004184:	6811      	ldr	r1, [r2, #0]
 8004186:	1850      	adds	r0, r2, r1
 8004188:	42a0      	cmp	r0, r4
 800418a:	d10b      	bne.n	80041a4 <_free_r+0x6c>
 800418c:	6820      	ldr	r0, [r4, #0]
 800418e:	4401      	add	r1, r0
 8004190:	1850      	adds	r0, r2, r1
 8004192:	4283      	cmp	r3, r0
 8004194:	6011      	str	r1, [r2, #0]
 8004196:	d1e0      	bne.n	800415a <_free_r+0x22>
 8004198:	6818      	ldr	r0, [r3, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	4408      	add	r0, r1
 800419e:	6010      	str	r0, [r2, #0]
 80041a0:	6053      	str	r3, [r2, #4]
 80041a2:	e7da      	b.n	800415a <_free_r+0x22>
 80041a4:	d902      	bls.n	80041ac <_free_r+0x74>
 80041a6:	230c      	movs	r3, #12
 80041a8:	602b      	str	r3, [r5, #0]
 80041aa:	e7d6      	b.n	800415a <_free_r+0x22>
 80041ac:	6820      	ldr	r0, [r4, #0]
 80041ae:	1821      	adds	r1, r4, r0
 80041b0:	428b      	cmp	r3, r1
 80041b2:	bf01      	itttt	eq
 80041b4:	6819      	ldreq	r1, [r3, #0]
 80041b6:	685b      	ldreq	r3, [r3, #4]
 80041b8:	1809      	addeq	r1, r1, r0
 80041ba:	6021      	streq	r1, [r4, #0]
 80041bc:	6063      	str	r3, [r4, #4]
 80041be:	6054      	str	r4, [r2, #4]
 80041c0:	e7cb      	b.n	800415a <_free_r+0x22>
 80041c2:	bd38      	pop	{r3, r4, r5, pc}
 80041c4:	20000384 	.word	0x20000384

080041c8 <malloc>:
 80041c8:	4b02      	ldr	r3, [pc, #8]	; (80041d4 <malloc+0xc>)
 80041ca:	4601      	mov	r1, r0
 80041cc:	6818      	ldr	r0, [r3, #0]
 80041ce:	f000 b823 	b.w	8004218 <_malloc_r>
 80041d2:	bf00      	nop
 80041d4:	20000064 	.word	0x20000064

080041d8 <sbrk_aligned>:
 80041d8:	b570      	push	{r4, r5, r6, lr}
 80041da:	4e0e      	ldr	r6, [pc, #56]	; (8004214 <sbrk_aligned+0x3c>)
 80041dc:	460c      	mov	r4, r1
 80041de:	6831      	ldr	r1, [r6, #0]
 80041e0:	4605      	mov	r5, r0
 80041e2:	b911      	cbnz	r1, 80041ea <sbrk_aligned+0x12>
 80041e4:	f001 ffd2 	bl	800618c <_sbrk_r>
 80041e8:	6030      	str	r0, [r6, #0]
 80041ea:	4621      	mov	r1, r4
 80041ec:	4628      	mov	r0, r5
 80041ee:	f001 ffcd 	bl	800618c <_sbrk_r>
 80041f2:	1c43      	adds	r3, r0, #1
 80041f4:	d00a      	beq.n	800420c <sbrk_aligned+0x34>
 80041f6:	1cc4      	adds	r4, r0, #3
 80041f8:	f024 0403 	bic.w	r4, r4, #3
 80041fc:	42a0      	cmp	r0, r4
 80041fe:	d007      	beq.n	8004210 <sbrk_aligned+0x38>
 8004200:	1a21      	subs	r1, r4, r0
 8004202:	4628      	mov	r0, r5
 8004204:	f001 ffc2 	bl	800618c <_sbrk_r>
 8004208:	3001      	adds	r0, #1
 800420a:	d101      	bne.n	8004210 <sbrk_aligned+0x38>
 800420c:	f04f 34ff 	mov.w	r4, #4294967295
 8004210:	4620      	mov	r0, r4
 8004212:	bd70      	pop	{r4, r5, r6, pc}
 8004214:	20000388 	.word	0x20000388

08004218 <_malloc_r>:
 8004218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800421c:	1ccd      	adds	r5, r1, #3
 800421e:	f025 0503 	bic.w	r5, r5, #3
 8004222:	3508      	adds	r5, #8
 8004224:	2d0c      	cmp	r5, #12
 8004226:	bf38      	it	cc
 8004228:	250c      	movcc	r5, #12
 800422a:	2d00      	cmp	r5, #0
 800422c:	4607      	mov	r7, r0
 800422e:	db01      	blt.n	8004234 <_malloc_r+0x1c>
 8004230:	42a9      	cmp	r1, r5
 8004232:	d905      	bls.n	8004240 <_malloc_r+0x28>
 8004234:	230c      	movs	r3, #12
 8004236:	2600      	movs	r6, #0
 8004238:	603b      	str	r3, [r7, #0]
 800423a:	4630      	mov	r0, r6
 800423c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004240:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004314 <_malloc_r+0xfc>
 8004244:	f000 f868 	bl	8004318 <__malloc_lock>
 8004248:	f8d8 3000 	ldr.w	r3, [r8]
 800424c:	461c      	mov	r4, r3
 800424e:	bb5c      	cbnz	r4, 80042a8 <_malloc_r+0x90>
 8004250:	4629      	mov	r1, r5
 8004252:	4638      	mov	r0, r7
 8004254:	f7ff ffc0 	bl	80041d8 <sbrk_aligned>
 8004258:	1c43      	adds	r3, r0, #1
 800425a:	4604      	mov	r4, r0
 800425c:	d155      	bne.n	800430a <_malloc_r+0xf2>
 800425e:	f8d8 4000 	ldr.w	r4, [r8]
 8004262:	4626      	mov	r6, r4
 8004264:	2e00      	cmp	r6, #0
 8004266:	d145      	bne.n	80042f4 <_malloc_r+0xdc>
 8004268:	2c00      	cmp	r4, #0
 800426a:	d048      	beq.n	80042fe <_malloc_r+0xe6>
 800426c:	6823      	ldr	r3, [r4, #0]
 800426e:	4631      	mov	r1, r6
 8004270:	4638      	mov	r0, r7
 8004272:	eb04 0903 	add.w	r9, r4, r3
 8004276:	f001 ff89 	bl	800618c <_sbrk_r>
 800427a:	4581      	cmp	r9, r0
 800427c:	d13f      	bne.n	80042fe <_malloc_r+0xe6>
 800427e:	6821      	ldr	r1, [r4, #0]
 8004280:	4638      	mov	r0, r7
 8004282:	1a6d      	subs	r5, r5, r1
 8004284:	4629      	mov	r1, r5
 8004286:	f7ff ffa7 	bl	80041d8 <sbrk_aligned>
 800428a:	3001      	adds	r0, #1
 800428c:	d037      	beq.n	80042fe <_malloc_r+0xe6>
 800428e:	6823      	ldr	r3, [r4, #0]
 8004290:	442b      	add	r3, r5
 8004292:	6023      	str	r3, [r4, #0]
 8004294:	f8d8 3000 	ldr.w	r3, [r8]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d038      	beq.n	800430e <_malloc_r+0xf6>
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	42a2      	cmp	r2, r4
 80042a0:	d12b      	bne.n	80042fa <_malloc_r+0xe2>
 80042a2:	2200      	movs	r2, #0
 80042a4:	605a      	str	r2, [r3, #4]
 80042a6:	e00f      	b.n	80042c8 <_malloc_r+0xb0>
 80042a8:	6822      	ldr	r2, [r4, #0]
 80042aa:	1b52      	subs	r2, r2, r5
 80042ac:	d41f      	bmi.n	80042ee <_malloc_r+0xd6>
 80042ae:	2a0b      	cmp	r2, #11
 80042b0:	d917      	bls.n	80042e2 <_malloc_r+0xca>
 80042b2:	1961      	adds	r1, r4, r5
 80042b4:	42a3      	cmp	r3, r4
 80042b6:	6025      	str	r5, [r4, #0]
 80042b8:	bf18      	it	ne
 80042ba:	6059      	strne	r1, [r3, #4]
 80042bc:	6863      	ldr	r3, [r4, #4]
 80042be:	bf08      	it	eq
 80042c0:	f8c8 1000 	streq.w	r1, [r8]
 80042c4:	5162      	str	r2, [r4, r5]
 80042c6:	604b      	str	r3, [r1, #4]
 80042c8:	4638      	mov	r0, r7
 80042ca:	f104 060b 	add.w	r6, r4, #11
 80042ce:	f000 f829 	bl	8004324 <__malloc_unlock>
 80042d2:	f026 0607 	bic.w	r6, r6, #7
 80042d6:	1d23      	adds	r3, r4, #4
 80042d8:	1af2      	subs	r2, r6, r3
 80042da:	d0ae      	beq.n	800423a <_malloc_r+0x22>
 80042dc:	1b9b      	subs	r3, r3, r6
 80042de:	50a3      	str	r3, [r4, r2]
 80042e0:	e7ab      	b.n	800423a <_malloc_r+0x22>
 80042e2:	42a3      	cmp	r3, r4
 80042e4:	6862      	ldr	r2, [r4, #4]
 80042e6:	d1dd      	bne.n	80042a4 <_malloc_r+0x8c>
 80042e8:	f8c8 2000 	str.w	r2, [r8]
 80042ec:	e7ec      	b.n	80042c8 <_malloc_r+0xb0>
 80042ee:	4623      	mov	r3, r4
 80042f0:	6864      	ldr	r4, [r4, #4]
 80042f2:	e7ac      	b.n	800424e <_malloc_r+0x36>
 80042f4:	4634      	mov	r4, r6
 80042f6:	6876      	ldr	r6, [r6, #4]
 80042f8:	e7b4      	b.n	8004264 <_malloc_r+0x4c>
 80042fa:	4613      	mov	r3, r2
 80042fc:	e7cc      	b.n	8004298 <_malloc_r+0x80>
 80042fe:	230c      	movs	r3, #12
 8004300:	4638      	mov	r0, r7
 8004302:	603b      	str	r3, [r7, #0]
 8004304:	f000 f80e 	bl	8004324 <__malloc_unlock>
 8004308:	e797      	b.n	800423a <_malloc_r+0x22>
 800430a:	6025      	str	r5, [r4, #0]
 800430c:	e7dc      	b.n	80042c8 <_malloc_r+0xb0>
 800430e:	605b      	str	r3, [r3, #4]
 8004310:	deff      	udf	#255	; 0xff
 8004312:	bf00      	nop
 8004314:	20000384 	.word	0x20000384

08004318 <__malloc_lock>:
 8004318:	4801      	ldr	r0, [pc, #4]	; (8004320 <__malloc_lock+0x8>)
 800431a:	f7ff b88a 	b.w	8003432 <__retarget_lock_acquire_recursive>
 800431e:	bf00      	nop
 8004320:	20000380 	.word	0x20000380

08004324 <__malloc_unlock>:
 8004324:	4801      	ldr	r0, [pc, #4]	; (800432c <__malloc_unlock+0x8>)
 8004326:	f7ff b885 	b.w	8003434 <__retarget_lock_release_recursive>
 800432a:	bf00      	nop
 800432c:	20000380 	.word	0x20000380

08004330 <_Balloc>:
 8004330:	b570      	push	{r4, r5, r6, lr}
 8004332:	69c6      	ldr	r6, [r0, #28]
 8004334:	4604      	mov	r4, r0
 8004336:	460d      	mov	r5, r1
 8004338:	b976      	cbnz	r6, 8004358 <_Balloc+0x28>
 800433a:	2010      	movs	r0, #16
 800433c:	f7ff ff44 	bl	80041c8 <malloc>
 8004340:	4602      	mov	r2, r0
 8004342:	61e0      	str	r0, [r4, #28]
 8004344:	b920      	cbnz	r0, 8004350 <_Balloc+0x20>
 8004346:	216b      	movs	r1, #107	; 0x6b
 8004348:	4b17      	ldr	r3, [pc, #92]	; (80043a8 <_Balloc+0x78>)
 800434a:	4818      	ldr	r0, [pc, #96]	; (80043ac <_Balloc+0x7c>)
 800434c:	f001 ff42 	bl	80061d4 <__assert_func>
 8004350:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004354:	6006      	str	r6, [r0, #0]
 8004356:	60c6      	str	r6, [r0, #12]
 8004358:	69e6      	ldr	r6, [r4, #28]
 800435a:	68f3      	ldr	r3, [r6, #12]
 800435c:	b183      	cbz	r3, 8004380 <_Balloc+0x50>
 800435e:	69e3      	ldr	r3, [r4, #28]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004366:	b9b8      	cbnz	r0, 8004398 <_Balloc+0x68>
 8004368:	2101      	movs	r1, #1
 800436a:	fa01 f605 	lsl.w	r6, r1, r5
 800436e:	1d72      	adds	r2, r6, #5
 8004370:	4620      	mov	r0, r4
 8004372:	0092      	lsls	r2, r2, #2
 8004374:	f001 ff4c 	bl	8006210 <_calloc_r>
 8004378:	b160      	cbz	r0, 8004394 <_Balloc+0x64>
 800437a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800437e:	e00e      	b.n	800439e <_Balloc+0x6e>
 8004380:	2221      	movs	r2, #33	; 0x21
 8004382:	2104      	movs	r1, #4
 8004384:	4620      	mov	r0, r4
 8004386:	f001 ff43 	bl	8006210 <_calloc_r>
 800438a:	69e3      	ldr	r3, [r4, #28]
 800438c:	60f0      	str	r0, [r6, #12]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1e4      	bne.n	800435e <_Balloc+0x2e>
 8004394:	2000      	movs	r0, #0
 8004396:	bd70      	pop	{r4, r5, r6, pc}
 8004398:	6802      	ldr	r2, [r0, #0]
 800439a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800439e:	2300      	movs	r3, #0
 80043a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80043a4:	e7f7      	b.n	8004396 <_Balloc+0x66>
 80043a6:	bf00      	nop
 80043a8:	08006aec 	.word	0x08006aec
 80043ac:	08006b6c 	.word	0x08006b6c

080043b0 <_Bfree>:
 80043b0:	b570      	push	{r4, r5, r6, lr}
 80043b2:	69c6      	ldr	r6, [r0, #28]
 80043b4:	4605      	mov	r5, r0
 80043b6:	460c      	mov	r4, r1
 80043b8:	b976      	cbnz	r6, 80043d8 <_Bfree+0x28>
 80043ba:	2010      	movs	r0, #16
 80043bc:	f7ff ff04 	bl	80041c8 <malloc>
 80043c0:	4602      	mov	r2, r0
 80043c2:	61e8      	str	r0, [r5, #28]
 80043c4:	b920      	cbnz	r0, 80043d0 <_Bfree+0x20>
 80043c6:	218f      	movs	r1, #143	; 0x8f
 80043c8:	4b08      	ldr	r3, [pc, #32]	; (80043ec <_Bfree+0x3c>)
 80043ca:	4809      	ldr	r0, [pc, #36]	; (80043f0 <_Bfree+0x40>)
 80043cc:	f001 ff02 	bl	80061d4 <__assert_func>
 80043d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80043d4:	6006      	str	r6, [r0, #0]
 80043d6:	60c6      	str	r6, [r0, #12]
 80043d8:	b13c      	cbz	r4, 80043ea <_Bfree+0x3a>
 80043da:	69eb      	ldr	r3, [r5, #28]
 80043dc:	6862      	ldr	r2, [r4, #4]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80043e4:	6021      	str	r1, [r4, #0]
 80043e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80043ea:	bd70      	pop	{r4, r5, r6, pc}
 80043ec:	08006aec 	.word	0x08006aec
 80043f0:	08006b6c 	.word	0x08006b6c

080043f4 <__multadd>:
 80043f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043f8:	4607      	mov	r7, r0
 80043fa:	460c      	mov	r4, r1
 80043fc:	461e      	mov	r6, r3
 80043fe:	2000      	movs	r0, #0
 8004400:	690d      	ldr	r5, [r1, #16]
 8004402:	f101 0c14 	add.w	ip, r1, #20
 8004406:	f8dc 3000 	ldr.w	r3, [ip]
 800440a:	3001      	adds	r0, #1
 800440c:	b299      	uxth	r1, r3
 800440e:	fb02 6101 	mla	r1, r2, r1, r6
 8004412:	0c1e      	lsrs	r6, r3, #16
 8004414:	0c0b      	lsrs	r3, r1, #16
 8004416:	fb02 3306 	mla	r3, r2, r6, r3
 800441a:	b289      	uxth	r1, r1
 800441c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004420:	4285      	cmp	r5, r0
 8004422:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004426:	f84c 1b04 	str.w	r1, [ip], #4
 800442a:	dcec      	bgt.n	8004406 <__multadd+0x12>
 800442c:	b30e      	cbz	r6, 8004472 <__multadd+0x7e>
 800442e:	68a3      	ldr	r3, [r4, #8]
 8004430:	42ab      	cmp	r3, r5
 8004432:	dc19      	bgt.n	8004468 <__multadd+0x74>
 8004434:	6861      	ldr	r1, [r4, #4]
 8004436:	4638      	mov	r0, r7
 8004438:	3101      	adds	r1, #1
 800443a:	f7ff ff79 	bl	8004330 <_Balloc>
 800443e:	4680      	mov	r8, r0
 8004440:	b928      	cbnz	r0, 800444e <__multadd+0x5a>
 8004442:	4602      	mov	r2, r0
 8004444:	21ba      	movs	r1, #186	; 0xba
 8004446:	4b0c      	ldr	r3, [pc, #48]	; (8004478 <__multadd+0x84>)
 8004448:	480c      	ldr	r0, [pc, #48]	; (800447c <__multadd+0x88>)
 800444a:	f001 fec3 	bl	80061d4 <__assert_func>
 800444e:	6922      	ldr	r2, [r4, #16]
 8004450:	f104 010c 	add.w	r1, r4, #12
 8004454:	3202      	adds	r2, #2
 8004456:	0092      	lsls	r2, r2, #2
 8004458:	300c      	adds	r0, #12
 800445a:	f001 fea7 	bl	80061ac <memcpy>
 800445e:	4621      	mov	r1, r4
 8004460:	4638      	mov	r0, r7
 8004462:	f7ff ffa5 	bl	80043b0 <_Bfree>
 8004466:	4644      	mov	r4, r8
 8004468:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800446c:	3501      	adds	r5, #1
 800446e:	615e      	str	r6, [r3, #20]
 8004470:	6125      	str	r5, [r4, #16]
 8004472:	4620      	mov	r0, r4
 8004474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004478:	08006b5b 	.word	0x08006b5b
 800447c:	08006b6c 	.word	0x08006b6c

08004480 <__s2b>:
 8004480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004484:	4615      	mov	r5, r2
 8004486:	2209      	movs	r2, #9
 8004488:	461f      	mov	r7, r3
 800448a:	3308      	adds	r3, #8
 800448c:	460c      	mov	r4, r1
 800448e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004492:	4606      	mov	r6, r0
 8004494:	2201      	movs	r2, #1
 8004496:	2100      	movs	r1, #0
 8004498:	429a      	cmp	r2, r3
 800449a:	db09      	blt.n	80044b0 <__s2b+0x30>
 800449c:	4630      	mov	r0, r6
 800449e:	f7ff ff47 	bl	8004330 <_Balloc>
 80044a2:	b940      	cbnz	r0, 80044b6 <__s2b+0x36>
 80044a4:	4602      	mov	r2, r0
 80044a6:	21d3      	movs	r1, #211	; 0xd3
 80044a8:	4b18      	ldr	r3, [pc, #96]	; (800450c <__s2b+0x8c>)
 80044aa:	4819      	ldr	r0, [pc, #100]	; (8004510 <__s2b+0x90>)
 80044ac:	f001 fe92 	bl	80061d4 <__assert_func>
 80044b0:	0052      	lsls	r2, r2, #1
 80044b2:	3101      	adds	r1, #1
 80044b4:	e7f0      	b.n	8004498 <__s2b+0x18>
 80044b6:	9b08      	ldr	r3, [sp, #32]
 80044b8:	2d09      	cmp	r5, #9
 80044ba:	6143      	str	r3, [r0, #20]
 80044bc:	f04f 0301 	mov.w	r3, #1
 80044c0:	6103      	str	r3, [r0, #16]
 80044c2:	dd16      	ble.n	80044f2 <__s2b+0x72>
 80044c4:	f104 0909 	add.w	r9, r4, #9
 80044c8:	46c8      	mov	r8, r9
 80044ca:	442c      	add	r4, r5
 80044cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80044d0:	4601      	mov	r1, r0
 80044d2:	220a      	movs	r2, #10
 80044d4:	4630      	mov	r0, r6
 80044d6:	3b30      	subs	r3, #48	; 0x30
 80044d8:	f7ff ff8c 	bl	80043f4 <__multadd>
 80044dc:	45a0      	cmp	r8, r4
 80044de:	d1f5      	bne.n	80044cc <__s2b+0x4c>
 80044e0:	f1a5 0408 	sub.w	r4, r5, #8
 80044e4:	444c      	add	r4, r9
 80044e6:	1b2d      	subs	r5, r5, r4
 80044e8:	1963      	adds	r3, r4, r5
 80044ea:	42bb      	cmp	r3, r7
 80044ec:	db04      	blt.n	80044f8 <__s2b+0x78>
 80044ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044f2:	2509      	movs	r5, #9
 80044f4:	340a      	adds	r4, #10
 80044f6:	e7f6      	b.n	80044e6 <__s2b+0x66>
 80044f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80044fc:	4601      	mov	r1, r0
 80044fe:	220a      	movs	r2, #10
 8004500:	4630      	mov	r0, r6
 8004502:	3b30      	subs	r3, #48	; 0x30
 8004504:	f7ff ff76 	bl	80043f4 <__multadd>
 8004508:	e7ee      	b.n	80044e8 <__s2b+0x68>
 800450a:	bf00      	nop
 800450c:	08006b5b 	.word	0x08006b5b
 8004510:	08006b6c 	.word	0x08006b6c

08004514 <__hi0bits>:
 8004514:	0c02      	lsrs	r2, r0, #16
 8004516:	0412      	lsls	r2, r2, #16
 8004518:	4603      	mov	r3, r0
 800451a:	b9ca      	cbnz	r2, 8004550 <__hi0bits+0x3c>
 800451c:	0403      	lsls	r3, r0, #16
 800451e:	2010      	movs	r0, #16
 8004520:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004524:	bf04      	itt	eq
 8004526:	021b      	lsleq	r3, r3, #8
 8004528:	3008      	addeq	r0, #8
 800452a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800452e:	bf04      	itt	eq
 8004530:	011b      	lsleq	r3, r3, #4
 8004532:	3004      	addeq	r0, #4
 8004534:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004538:	bf04      	itt	eq
 800453a:	009b      	lsleq	r3, r3, #2
 800453c:	3002      	addeq	r0, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	db05      	blt.n	800454e <__hi0bits+0x3a>
 8004542:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004546:	f100 0001 	add.w	r0, r0, #1
 800454a:	bf08      	it	eq
 800454c:	2020      	moveq	r0, #32
 800454e:	4770      	bx	lr
 8004550:	2000      	movs	r0, #0
 8004552:	e7e5      	b.n	8004520 <__hi0bits+0xc>

08004554 <__lo0bits>:
 8004554:	6803      	ldr	r3, [r0, #0]
 8004556:	4602      	mov	r2, r0
 8004558:	f013 0007 	ands.w	r0, r3, #7
 800455c:	d00b      	beq.n	8004576 <__lo0bits+0x22>
 800455e:	07d9      	lsls	r1, r3, #31
 8004560:	d421      	bmi.n	80045a6 <__lo0bits+0x52>
 8004562:	0798      	lsls	r0, r3, #30
 8004564:	bf49      	itett	mi
 8004566:	085b      	lsrmi	r3, r3, #1
 8004568:	089b      	lsrpl	r3, r3, #2
 800456a:	2001      	movmi	r0, #1
 800456c:	6013      	strmi	r3, [r2, #0]
 800456e:	bf5c      	itt	pl
 8004570:	2002      	movpl	r0, #2
 8004572:	6013      	strpl	r3, [r2, #0]
 8004574:	4770      	bx	lr
 8004576:	b299      	uxth	r1, r3
 8004578:	b909      	cbnz	r1, 800457e <__lo0bits+0x2a>
 800457a:	2010      	movs	r0, #16
 800457c:	0c1b      	lsrs	r3, r3, #16
 800457e:	b2d9      	uxtb	r1, r3
 8004580:	b909      	cbnz	r1, 8004586 <__lo0bits+0x32>
 8004582:	3008      	adds	r0, #8
 8004584:	0a1b      	lsrs	r3, r3, #8
 8004586:	0719      	lsls	r1, r3, #28
 8004588:	bf04      	itt	eq
 800458a:	091b      	lsreq	r3, r3, #4
 800458c:	3004      	addeq	r0, #4
 800458e:	0799      	lsls	r1, r3, #30
 8004590:	bf04      	itt	eq
 8004592:	089b      	lsreq	r3, r3, #2
 8004594:	3002      	addeq	r0, #2
 8004596:	07d9      	lsls	r1, r3, #31
 8004598:	d403      	bmi.n	80045a2 <__lo0bits+0x4e>
 800459a:	085b      	lsrs	r3, r3, #1
 800459c:	f100 0001 	add.w	r0, r0, #1
 80045a0:	d003      	beq.n	80045aa <__lo0bits+0x56>
 80045a2:	6013      	str	r3, [r2, #0]
 80045a4:	4770      	bx	lr
 80045a6:	2000      	movs	r0, #0
 80045a8:	4770      	bx	lr
 80045aa:	2020      	movs	r0, #32
 80045ac:	4770      	bx	lr
	...

080045b0 <__i2b>:
 80045b0:	b510      	push	{r4, lr}
 80045b2:	460c      	mov	r4, r1
 80045b4:	2101      	movs	r1, #1
 80045b6:	f7ff febb 	bl	8004330 <_Balloc>
 80045ba:	4602      	mov	r2, r0
 80045bc:	b928      	cbnz	r0, 80045ca <__i2b+0x1a>
 80045be:	f240 1145 	movw	r1, #325	; 0x145
 80045c2:	4b04      	ldr	r3, [pc, #16]	; (80045d4 <__i2b+0x24>)
 80045c4:	4804      	ldr	r0, [pc, #16]	; (80045d8 <__i2b+0x28>)
 80045c6:	f001 fe05 	bl	80061d4 <__assert_func>
 80045ca:	2301      	movs	r3, #1
 80045cc:	6144      	str	r4, [r0, #20]
 80045ce:	6103      	str	r3, [r0, #16]
 80045d0:	bd10      	pop	{r4, pc}
 80045d2:	bf00      	nop
 80045d4:	08006b5b 	.word	0x08006b5b
 80045d8:	08006b6c 	.word	0x08006b6c

080045dc <__multiply>:
 80045dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045e0:	4691      	mov	r9, r2
 80045e2:	690a      	ldr	r2, [r1, #16]
 80045e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80045e8:	460c      	mov	r4, r1
 80045ea:	429a      	cmp	r2, r3
 80045ec:	bfbe      	ittt	lt
 80045ee:	460b      	movlt	r3, r1
 80045f0:	464c      	movlt	r4, r9
 80045f2:	4699      	movlt	r9, r3
 80045f4:	6927      	ldr	r7, [r4, #16]
 80045f6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80045fa:	68a3      	ldr	r3, [r4, #8]
 80045fc:	6861      	ldr	r1, [r4, #4]
 80045fe:	eb07 060a 	add.w	r6, r7, sl
 8004602:	42b3      	cmp	r3, r6
 8004604:	b085      	sub	sp, #20
 8004606:	bfb8      	it	lt
 8004608:	3101      	addlt	r1, #1
 800460a:	f7ff fe91 	bl	8004330 <_Balloc>
 800460e:	b930      	cbnz	r0, 800461e <__multiply+0x42>
 8004610:	4602      	mov	r2, r0
 8004612:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8004616:	4b43      	ldr	r3, [pc, #268]	; (8004724 <__multiply+0x148>)
 8004618:	4843      	ldr	r0, [pc, #268]	; (8004728 <__multiply+0x14c>)
 800461a:	f001 fddb 	bl	80061d4 <__assert_func>
 800461e:	f100 0514 	add.w	r5, r0, #20
 8004622:	462b      	mov	r3, r5
 8004624:	2200      	movs	r2, #0
 8004626:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800462a:	4543      	cmp	r3, r8
 800462c:	d321      	bcc.n	8004672 <__multiply+0x96>
 800462e:	f104 0314 	add.w	r3, r4, #20
 8004632:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004636:	f109 0314 	add.w	r3, r9, #20
 800463a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800463e:	9202      	str	r2, [sp, #8]
 8004640:	1b3a      	subs	r2, r7, r4
 8004642:	3a15      	subs	r2, #21
 8004644:	f022 0203 	bic.w	r2, r2, #3
 8004648:	3204      	adds	r2, #4
 800464a:	f104 0115 	add.w	r1, r4, #21
 800464e:	428f      	cmp	r7, r1
 8004650:	bf38      	it	cc
 8004652:	2204      	movcc	r2, #4
 8004654:	9201      	str	r2, [sp, #4]
 8004656:	9a02      	ldr	r2, [sp, #8]
 8004658:	9303      	str	r3, [sp, #12]
 800465a:	429a      	cmp	r2, r3
 800465c:	d80c      	bhi.n	8004678 <__multiply+0x9c>
 800465e:	2e00      	cmp	r6, #0
 8004660:	dd03      	ble.n	800466a <__multiply+0x8e>
 8004662:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004666:	2b00      	cmp	r3, #0
 8004668:	d05a      	beq.n	8004720 <__multiply+0x144>
 800466a:	6106      	str	r6, [r0, #16]
 800466c:	b005      	add	sp, #20
 800466e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004672:	f843 2b04 	str.w	r2, [r3], #4
 8004676:	e7d8      	b.n	800462a <__multiply+0x4e>
 8004678:	f8b3 a000 	ldrh.w	sl, [r3]
 800467c:	f1ba 0f00 	cmp.w	sl, #0
 8004680:	d023      	beq.n	80046ca <__multiply+0xee>
 8004682:	46a9      	mov	r9, r5
 8004684:	f04f 0c00 	mov.w	ip, #0
 8004688:	f104 0e14 	add.w	lr, r4, #20
 800468c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004690:	f8d9 1000 	ldr.w	r1, [r9]
 8004694:	fa1f fb82 	uxth.w	fp, r2
 8004698:	b289      	uxth	r1, r1
 800469a:	fb0a 110b 	mla	r1, sl, fp, r1
 800469e:	4461      	add	r1, ip
 80046a0:	f8d9 c000 	ldr.w	ip, [r9]
 80046a4:	0c12      	lsrs	r2, r2, #16
 80046a6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80046aa:	fb0a c202 	mla	r2, sl, r2, ip
 80046ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80046b2:	b289      	uxth	r1, r1
 80046b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80046b8:	4577      	cmp	r7, lr
 80046ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80046be:	f849 1b04 	str.w	r1, [r9], #4
 80046c2:	d8e3      	bhi.n	800468c <__multiply+0xb0>
 80046c4:	9a01      	ldr	r2, [sp, #4]
 80046c6:	f845 c002 	str.w	ip, [r5, r2]
 80046ca:	9a03      	ldr	r2, [sp, #12]
 80046cc:	3304      	adds	r3, #4
 80046ce:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80046d2:	f1b9 0f00 	cmp.w	r9, #0
 80046d6:	d021      	beq.n	800471c <__multiply+0x140>
 80046d8:	46ae      	mov	lr, r5
 80046da:	f04f 0a00 	mov.w	sl, #0
 80046de:	6829      	ldr	r1, [r5, #0]
 80046e0:	f104 0c14 	add.w	ip, r4, #20
 80046e4:	f8bc b000 	ldrh.w	fp, [ip]
 80046e8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80046ec:	b289      	uxth	r1, r1
 80046ee:	fb09 220b 	mla	r2, r9, fp, r2
 80046f2:	4452      	add	r2, sl
 80046f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80046f8:	f84e 1b04 	str.w	r1, [lr], #4
 80046fc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004700:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004704:	f8be 1000 	ldrh.w	r1, [lr]
 8004708:	4567      	cmp	r7, ip
 800470a:	fb09 110a 	mla	r1, r9, sl, r1
 800470e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8004712:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004716:	d8e5      	bhi.n	80046e4 <__multiply+0x108>
 8004718:	9a01      	ldr	r2, [sp, #4]
 800471a:	50a9      	str	r1, [r5, r2]
 800471c:	3504      	adds	r5, #4
 800471e:	e79a      	b.n	8004656 <__multiply+0x7a>
 8004720:	3e01      	subs	r6, #1
 8004722:	e79c      	b.n	800465e <__multiply+0x82>
 8004724:	08006b5b 	.word	0x08006b5b
 8004728:	08006b6c 	.word	0x08006b6c

0800472c <__pow5mult>:
 800472c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004730:	4615      	mov	r5, r2
 8004732:	f012 0203 	ands.w	r2, r2, #3
 8004736:	4606      	mov	r6, r0
 8004738:	460f      	mov	r7, r1
 800473a:	d007      	beq.n	800474c <__pow5mult+0x20>
 800473c:	4c25      	ldr	r4, [pc, #148]	; (80047d4 <__pow5mult+0xa8>)
 800473e:	3a01      	subs	r2, #1
 8004740:	2300      	movs	r3, #0
 8004742:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004746:	f7ff fe55 	bl	80043f4 <__multadd>
 800474a:	4607      	mov	r7, r0
 800474c:	10ad      	asrs	r5, r5, #2
 800474e:	d03d      	beq.n	80047cc <__pow5mult+0xa0>
 8004750:	69f4      	ldr	r4, [r6, #28]
 8004752:	b97c      	cbnz	r4, 8004774 <__pow5mult+0x48>
 8004754:	2010      	movs	r0, #16
 8004756:	f7ff fd37 	bl	80041c8 <malloc>
 800475a:	4602      	mov	r2, r0
 800475c:	61f0      	str	r0, [r6, #28]
 800475e:	b928      	cbnz	r0, 800476c <__pow5mult+0x40>
 8004760:	f240 11b3 	movw	r1, #435	; 0x1b3
 8004764:	4b1c      	ldr	r3, [pc, #112]	; (80047d8 <__pow5mult+0xac>)
 8004766:	481d      	ldr	r0, [pc, #116]	; (80047dc <__pow5mult+0xb0>)
 8004768:	f001 fd34 	bl	80061d4 <__assert_func>
 800476c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004770:	6004      	str	r4, [r0, #0]
 8004772:	60c4      	str	r4, [r0, #12]
 8004774:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8004778:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800477c:	b94c      	cbnz	r4, 8004792 <__pow5mult+0x66>
 800477e:	f240 2171 	movw	r1, #625	; 0x271
 8004782:	4630      	mov	r0, r6
 8004784:	f7ff ff14 	bl	80045b0 <__i2b>
 8004788:	2300      	movs	r3, #0
 800478a:	4604      	mov	r4, r0
 800478c:	f8c8 0008 	str.w	r0, [r8, #8]
 8004790:	6003      	str	r3, [r0, #0]
 8004792:	f04f 0900 	mov.w	r9, #0
 8004796:	07eb      	lsls	r3, r5, #31
 8004798:	d50a      	bpl.n	80047b0 <__pow5mult+0x84>
 800479a:	4639      	mov	r1, r7
 800479c:	4622      	mov	r2, r4
 800479e:	4630      	mov	r0, r6
 80047a0:	f7ff ff1c 	bl	80045dc <__multiply>
 80047a4:	4680      	mov	r8, r0
 80047a6:	4639      	mov	r1, r7
 80047a8:	4630      	mov	r0, r6
 80047aa:	f7ff fe01 	bl	80043b0 <_Bfree>
 80047ae:	4647      	mov	r7, r8
 80047b0:	106d      	asrs	r5, r5, #1
 80047b2:	d00b      	beq.n	80047cc <__pow5mult+0xa0>
 80047b4:	6820      	ldr	r0, [r4, #0]
 80047b6:	b938      	cbnz	r0, 80047c8 <__pow5mult+0x9c>
 80047b8:	4622      	mov	r2, r4
 80047ba:	4621      	mov	r1, r4
 80047bc:	4630      	mov	r0, r6
 80047be:	f7ff ff0d 	bl	80045dc <__multiply>
 80047c2:	6020      	str	r0, [r4, #0]
 80047c4:	f8c0 9000 	str.w	r9, [r0]
 80047c8:	4604      	mov	r4, r0
 80047ca:	e7e4      	b.n	8004796 <__pow5mult+0x6a>
 80047cc:	4638      	mov	r0, r7
 80047ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047d2:	bf00      	nop
 80047d4:	08006cb8 	.word	0x08006cb8
 80047d8:	08006aec 	.word	0x08006aec
 80047dc:	08006b6c 	.word	0x08006b6c

080047e0 <__lshift>:
 80047e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047e4:	460c      	mov	r4, r1
 80047e6:	4607      	mov	r7, r0
 80047e8:	4691      	mov	r9, r2
 80047ea:	6923      	ldr	r3, [r4, #16]
 80047ec:	6849      	ldr	r1, [r1, #4]
 80047ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80047f2:	68a3      	ldr	r3, [r4, #8]
 80047f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80047f8:	f108 0601 	add.w	r6, r8, #1
 80047fc:	42b3      	cmp	r3, r6
 80047fe:	db0b      	blt.n	8004818 <__lshift+0x38>
 8004800:	4638      	mov	r0, r7
 8004802:	f7ff fd95 	bl	8004330 <_Balloc>
 8004806:	4605      	mov	r5, r0
 8004808:	b948      	cbnz	r0, 800481e <__lshift+0x3e>
 800480a:	4602      	mov	r2, r0
 800480c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8004810:	4b27      	ldr	r3, [pc, #156]	; (80048b0 <__lshift+0xd0>)
 8004812:	4828      	ldr	r0, [pc, #160]	; (80048b4 <__lshift+0xd4>)
 8004814:	f001 fcde 	bl	80061d4 <__assert_func>
 8004818:	3101      	adds	r1, #1
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	e7ee      	b.n	80047fc <__lshift+0x1c>
 800481e:	2300      	movs	r3, #0
 8004820:	f100 0114 	add.w	r1, r0, #20
 8004824:	f100 0210 	add.w	r2, r0, #16
 8004828:	4618      	mov	r0, r3
 800482a:	4553      	cmp	r3, sl
 800482c:	db33      	blt.n	8004896 <__lshift+0xb6>
 800482e:	6920      	ldr	r0, [r4, #16]
 8004830:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004834:	f104 0314 	add.w	r3, r4, #20
 8004838:	f019 091f 	ands.w	r9, r9, #31
 800483c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004840:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004844:	d02b      	beq.n	800489e <__lshift+0xbe>
 8004846:	468a      	mov	sl, r1
 8004848:	2200      	movs	r2, #0
 800484a:	f1c9 0e20 	rsb	lr, r9, #32
 800484e:	6818      	ldr	r0, [r3, #0]
 8004850:	fa00 f009 	lsl.w	r0, r0, r9
 8004854:	4310      	orrs	r0, r2
 8004856:	f84a 0b04 	str.w	r0, [sl], #4
 800485a:	f853 2b04 	ldr.w	r2, [r3], #4
 800485e:	459c      	cmp	ip, r3
 8004860:	fa22 f20e 	lsr.w	r2, r2, lr
 8004864:	d8f3      	bhi.n	800484e <__lshift+0x6e>
 8004866:	ebac 0304 	sub.w	r3, ip, r4
 800486a:	3b15      	subs	r3, #21
 800486c:	f023 0303 	bic.w	r3, r3, #3
 8004870:	3304      	adds	r3, #4
 8004872:	f104 0015 	add.w	r0, r4, #21
 8004876:	4584      	cmp	ip, r0
 8004878:	bf38      	it	cc
 800487a:	2304      	movcc	r3, #4
 800487c:	50ca      	str	r2, [r1, r3]
 800487e:	b10a      	cbz	r2, 8004884 <__lshift+0xa4>
 8004880:	f108 0602 	add.w	r6, r8, #2
 8004884:	3e01      	subs	r6, #1
 8004886:	4638      	mov	r0, r7
 8004888:	4621      	mov	r1, r4
 800488a:	612e      	str	r6, [r5, #16]
 800488c:	f7ff fd90 	bl	80043b0 <_Bfree>
 8004890:	4628      	mov	r0, r5
 8004892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004896:	f842 0f04 	str.w	r0, [r2, #4]!
 800489a:	3301      	adds	r3, #1
 800489c:	e7c5      	b.n	800482a <__lshift+0x4a>
 800489e:	3904      	subs	r1, #4
 80048a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80048a4:	459c      	cmp	ip, r3
 80048a6:	f841 2f04 	str.w	r2, [r1, #4]!
 80048aa:	d8f9      	bhi.n	80048a0 <__lshift+0xc0>
 80048ac:	e7ea      	b.n	8004884 <__lshift+0xa4>
 80048ae:	bf00      	nop
 80048b0:	08006b5b 	.word	0x08006b5b
 80048b4:	08006b6c 	.word	0x08006b6c

080048b8 <__mcmp>:
 80048b8:	4603      	mov	r3, r0
 80048ba:	690a      	ldr	r2, [r1, #16]
 80048bc:	6900      	ldr	r0, [r0, #16]
 80048be:	b530      	push	{r4, r5, lr}
 80048c0:	1a80      	subs	r0, r0, r2
 80048c2:	d10d      	bne.n	80048e0 <__mcmp+0x28>
 80048c4:	3314      	adds	r3, #20
 80048c6:	3114      	adds	r1, #20
 80048c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80048cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80048d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80048d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80048d8:	4295      	cmp	r5, r2
 80048da:	d002      	beq.n	80048e2 <__mcmp+0x2a>
 80048dc:	d304      	bcc.n	80048e8 <__mcmp+0x30>
 80048de:	2001      	movs	r0, #1
 80048e0:	bd30      	pop	{r4, r5, pc}
 80048e2:	42a3      	cmp	r3, r4
 80048e4:	d3f4      	bcc.n	80048d0 <__mcmp+0x18>
 80048e6:	e7fb      	b.n	80048e0 <__mcmp+0x28>
 80048e8:	f04f 30ff 	mov.w	r0, #4294967295
 80048ec:	e7f8      	b.n	80048e0 <__mcmp+0x28>
	...

080048f0 <__mdiff>:
 80048f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048f4:	460d      	mov	r5, r1
 80048f6:	4607      	mov	r7, r0
 80048f8:	4611      	mov	r1, r2
 80048fa:	4628      	mov	r0, r5
 80048fc:	4614      	mov	r4, r2
 80048fe:	f7ff ffdb 	bl	80048b8 <__mcmp>
 8004902:	1e06      	subs	r6, r0, #0
 8004904:	d111      	bne.n	800492a <__mdiff+0x3a>
 8004906:	4631      	mov	r1, r6
 8004908:	4638      	mov	r0, r7
 800490a:	f7ff fd11 	bl	8004330 <_Balloc>
 800490e:	4602      	mov	r2, r0
 8004910:	b928      	cbnz	r0, 800491e <__mdiff+0x2e>
 8004912:	f240 2137 	movw	r1, #567	; 0x237
 8004916:	4b3a      	ldr	r3, [pc, #232]	; (8004a00 <__mdiff+0x110>)
 8004918:	483a      	ldr	r0, [pc, #232]	; (8004a04 <__mdiff+0x114>)
 800491a:	f001 fc5b 	bl	80061d4 <__assert_func>
 800491e:	2301      	movs	r3, #1
 8004920:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004924:	4610      	mov	r0, r2
 8004926:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800492a:	bfa4      	itt	ge
 800492c:	4623      	movge	r3, r4
 800492e:	462c      	movge	r4, r5
 8004930:	4638      	mov	r0, r7
 8004932:	6861      	ldr	r1, [r4, #4]
 8004934:	bfa6      	itte	ge
 8004936:	461d      	movge	r5, r3
 8004938:	2600      	movge	r6, #0
 800493a:	2601      	movlt	r6, #1
 800493c:	f7ff fcf8 	bl	8004330 <_Balloc>
 8004940:	4602      	mov	r2, r0
 8004942:	b918      	cbnz	r0, 800494c <__mdiff+0x5c>
 8004944:	f240 2145 	movw	r1, #581	; 0x245
 8004948:	4b2d      	ldr	r3, [pc, #180]	; (8004a00 <__mdiff+0x110>)
 800494a:	e7e5      	b.n	8004918 <__mdiff+0x28>
 800494c:	f102 0814 	add.w	r8, r2, #20
 8004950:	46c2      	mov	sl, r8
 8004952:	f04f 0c00 	mov.w	ip, #0
 8004956:	6927      	ldr	r7, [r4, #16]
 8004958:	60c6      	str	r6, [r0, #12]
 800495a:	692e      	ldr	r6, [r5, #16]
 800495c:	f104 0014 	add.w	r0, r4, #20
 8004960:	f105 0914 	add.w	r9, r5, #20
 8004964:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8004968:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800496c:	3410      	adds	r4, #16
 800496e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8004972:	f859 3b04 	ldr.w	r3, [r9], #4
 8004976:	fa1f f18b 	uxth.w	r1, fp
 800497a:	4461      	add	r1, ip
 800497c:	fa1f fc83 	uxth.w	ip, r3
 8004980:	0c1b      	lsrs	r3, r3, #16
 8004982:	eba1 010c 	sub.w	r1, r1, ip
 8004986:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800498a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800498e:	b289      	uxth	r1, r1
 8004990:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8004994:	454e      	cmp	r6, r9
 8004996:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800499a:	f84a 1b04 	str.w	r1, [sl], #4
 800499e:	d8e6      	bhi.n	800496e <__mdiff+0x7e>
 80049a0:	1b73      	subs	r3, r6, r5
 80049a2:	3b15      	subs	r3, #21
 80049a4:	f023 0303 	bic.w	r3, r3, #3
 80049a8:	3515      	adds	r5, #21
 80049aa:	3304      	adds	r3, #4
 80049ac:	42ae      	cmp	r6, r5
 80049ae:	bf38      	it	cc
 80049b0:	2304      	movcc	r3, #4
 80049b2:	4418      	add	r0, r3
 80049b4:	4443      	add	r3, r8
 80049b6:	461e      	mov	r6, r3
 80049b8:	4605      	mov	r5, r0
 80049ba:	4575      	cmp	r5, lr
 80049bc:	d30e      	bcc.n	80049dc <__mdiff+0xec>
 80049be:	f10e 0103 	add.w	r1, lr, #3
 80049c2:	1a09      	subs	r1, r1, r0
 80049c4:	f021 0103 	bic.w	r1, r1, #3
 80049c8:	3803      	subs	r0, #3
 80049ca:	4586      	cmp	lr, r0
 80049cc:	bf38      	it	cc
 80049ce:	2100      	movcc	r1, #0
 80049d0:	440b      	add	r3, r1
 80049d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80049d6:	b189      	cbz	r1, 80049fc <__mdiff+0x10c>
 80049d8:	6117      	str	r7, [r2, #16]
 80049da:	e7a3      	b.n	8004924 <__mdiff+0x34>
 80049dc:	f855 8b04 	ldr.w	r8, [r5], #4
 80049e0:	fa1f f188 	uxth.w	r1, r8
 80049e4:	4461      	add	r1, ip
 80049e6:	140c      	asrs	r4, r1, #16
 80049e8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80049ec:	b289      	uxth	r1, r1
 80049ee:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80049f2:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80049f6:	f846 1b04 	str.w	r1, [r6], #4
 80049fa:	e7de      	b.n	80049ba <__mdiff+0xca>
 80049fc:	3f01      	subs	r7, #1
 80049fe:	e7e8      	b.n	80049d2 <__mdiff+0xe2>
 8004a00:	08006b5b 	.word	0x08006b5b
 8004a04:	08006b6c 	.word	0x08006b6c

08004a08 <__ulp>:
 8004a08:	4b0e      	ldr	r3, [pc, #56]	; (8004a44 <__ulp+0x3c>)
 8004a0a:	400b      	ands	r3, r1
 8004a0c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	dc08      	bgt.n	8004a26 <__ulp+0x1e>
 8004a14:	425b      	negs	r3, r3
 8004a16:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8004a1a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8004a1e:	da04      	bge.n	8004a2a <__ulp+0x22>
 8004a20:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004a24:	4113      	asrs	r3, r2
 8004a26:	2200      	movs	r2, #0
 8004a28:	e008      	b.n	8004a3c <__ulp+0x34>
 8004a2a:	f1a2 0314 	sub.w	r3, r2, #20
 8004a2e:	2b1e      	cmp	r3, #30
 8004a30:	bfd6      	itet	le
 8004a32:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8004a36:	2201      	movgt	r2, #1
 8004a38:	40da      	lsrle	r2, r3
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	4610      	mov	r0, r2
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	7ff00000 	.word	0x7ff00000

08004a48 <__b2d>:
 8004a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a4a:	6905      	ldr	r5, [r0, #16]
 8004a4c:	f100 0714 	add.w	r7, r0, #20
 8004a50:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8004a54:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8004a58:	1f2e      	subs	r6, r5, #4
 8004a5a:	4620      	mov	r0, r4
 8004a5c:	f7ff fd5a 	bl	8004514 <__hi0bits>
 8004a60:	f1c0 0220 	rsb	r2, r0, #32
 8004a64:	280a      	cmp	r0, #10
 8004a66:	4603      	mov	r3, r0
 8004a68:	f8df c068 	ldr.w	ip, [pc, #104]	; 8004ad4 <__b2d+0x8c>
 8004a6c:	600a      	str	r2, [r1, #0]
 8004a6e:	dc12      	bgt.n	8004a96 <__b2d+0x4e>
 8004a70:	f1c0 0e0b 	rsb	lr, r0, #11
 8004a74:	fa24 f20e 	lsr.w	r2, r4, lr
 8004a78:	42b7      	cmp	r7, r6
 8004a7a:	ea42 010c 	orr.w	r1, r2, ip
 8004a7e:	bf2c      	ite	cs
 8004a80:	2200      	movcs	r2, #0
 8004a82:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8004a86:	3315      	adds	r3, #21
 8004a88:	fa04 f303 	lsl.w	r3, r4, r3
 8004a8c:	fa22 f20e 	lsr.w	r2, r2, lr
 8004a90:	431a      	orrs	r2, r3
 8004a92:	4610      	mov	r0, r2
 8004a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a96:	42b7      	cmp	r7, r6
 8004a98:	bf2e      	itee	cs
 8004a9a:	2200      	movcs	r2, #0
 8004a9c:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8004aa0:	f1a5 0608 	subcc.w	r6, r5, #8
 8004aa4:	3b0b      	subs	r3, #11
 8004aa6:	d012      	beq.n	8004ace <__b2d+0x86>
 8004aa8:	f1c3 0520 	rsb	r5, r3, #32
 8004aac:	fa22 f105 	lsr.w	r1, r2, r5
 8004ab0:	409c      	lsls	r4, r3
 8004ab2:	430c      	orrs	r4, r1
 8004ab4:	42be      	cmp	r6, r7
 8004ab6:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8004aba:	bf94      	ite	ls
 8004abc:	2400      	movls	r4, #0
 8004abe:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8004ac2:	409a      	lsls	r2, r3
 8004ac4:	40ec      	lsrs	r4, r5
 8004ac6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004aca:	4322      	orrs	r2, r4
 8004acc:	e7e1      	b.n	8004a92 <__b2d+0x4a>
 8004ace:	ea44 010c 	orr.w	r1, r4, ip
 8004ad2:	e7de      	b.n	8004a92 <__b2d+0x4a>
 8004ad4:	3ff00000 	.word	0x3ff00000

08004ad8 <__d2b>:
 8004ad8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ada:	2101      	movs	r1, #1
 8004adc:	4617      	mov	r7, r2
 8004ade:	461c      	mov	r4, r3
 8004ae0:	9e08      	ldr	r6, [sp, #32]
 8004ae2:	f7ff fc25 	bl	8004330 <_Balloc>
 8004ae6:	4605      	mov	r5, r0
 8004ae8:	b930      	cbnz	r0, 8004af8 <__d2b+0x20>
 8004aea:	4602      	mov	r2, r0
 8004aec:	f240 310f 	movw	r1, #783	; 0x30f
 8004af0:	4b22      	ldr	r3, [pc, #136]	; (8004b7c <__d2b+0xa4>)
 8004af2:	4823      	ldr	r0, [pc, #140]	; (8004b80 <__d2b+0xa8>)
 8004af4:	f001 fb6e 	bl	80061d4 <__assert_func>
 8004af8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8004afc:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8004b00:	bb24      	cbnz	r4, 8004b4c <__d2b+0x74>
 8004b02:	2f00      	cmp	r7, #0
 8004b04:	9301      	str	r3, [sp, #4]
 8004b06:	d026      	beq.n	8004b56 <__d2b+0x7e>
 8004b08:	4668      	mov	r0, sp
 8004b0a:	9700      	str	r7, [sp, #0]
 8004b0c:	f7ff fd22 	bl	8004554 <__lo0bits>
 8004b10:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004b14:	b1e8      	cbz	r0, 8004b52 <__d2b+0x7a>
 8004b16:	f1c0 0320 	rsb	r3, r0, #32
 8004b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1e:	430b      	orrs	r3, r1
 8004b20:	40c2      	lsrs	r2, r0
 8004b22:	616b      	str	r3, [r5, #20]
 8004b24:	9201      	str	r2, [sp, #4]
 8004b26:	9b01      	ldr	r3, [sp, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	bf14      	ite	ne
 8004b2c:	2102      	movne	r1, #2
 8004b2e:	2101      	moveq	r1, #1
 8004b30:	61ab      	str	r3, [r5, #24]
 8004b32:	6129      	str	r1, [r5, #16]
 8004b34:	b1bc      	cbz	r4, 8004b66 <__d2b+0x8e>
 8004b36:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004b3a:	4404      	add	r4, r0
 8004b3c:	6034      	str	r4, [r6, #0]
 8004b3e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b44:	6018      	str	r0, [r3, #0]
 8004b46:	4628      	mov	r0, r5
 8004b48:	b003      	add	sp, #12
 8004b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b50:	e7d7      	b.n	8004b02 <__d2b+0x2a>
 8004b52:	6169      	str	r1, [r5, #20]
 8004b54:	e7e7      	b.n	8004b26 <__d2b+0x4e>
 8004b56:	a801      	add	r0, sp, #4
 8004b58:	f7ff fcfc 	bl	8004554 <__lo0bits>
 8004b5c:	9b01      	ldr	r3, [sp, #4]
 8004b5e:	2101      	movs	r1, #1
 8004b60:	616b      	str	r3, [r5, #20]
 8004b62:	3020      	adds	r0, #32
 8004b64:	e7e5      	b.n	8004b32 <__d2b+0x5a>
 8004b66:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004b6a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8004b6e:	6030      	str	r0, [r6, #0]
 8004b70:	6918      	ldr	r0, [r3, #16]
 8004b72:	f7ff fccf 	bl	8004514 <__hi0bits>
 8004b76:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004b7a:	e7e2      	b.n	8004b42 <__d2b+0x6a>
 8004b7c:	08006b5b 	.word	0x08006b5b
 8004b80:	08006b6c 	.word	0x08006b6c

08004b84 <__ratio>:
 8004b84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b88:	4688      	mov	r8, r1
 8004b8a:	4669      	mov	r1, sp
 8004b8c:	4681      	mov	r9, r0
 8004b8e:	f7ff ff5b 	bl	8004a48 <__b2d>
 8004b92:	460f      	mov	r7, r1
 8004b94:	4604      	mov	r4, r0
 8004b96:	460d      	mov	r5, r1
 8004b98:	4640      	mov	r0, r8
 8004b9a:	a901      	add	r1, sp, #4
 8004b9c:	f7ff ff54 	bl	8004a48 <__b2d>
 8004ba0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004ba4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8004ba8:	468b      	mov	fp, r1
 8004baa:	eba3 0c02 	sub.w	ip, r3, r2
 8004bae:	e9dd 3200 	ldrd	r3, r2, [sp]
 8004bb2:	1a9b      	subs	r3, r3, r2
 8004bb4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	bfd5      	itete	le
 8004bbc:	460a      	movle	r2, r1
 8004bbe:	462a      	movgt	r2, r5
 8004bc0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8004bc4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8004bc8:	bfd8      	it	le
 8004bca:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8004bce:	465b      	mov	r3, fp
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	4639      	mov	r1, r7
 8004bd4:	4620      	mov	r0, r4
 8004bd6:	f7fb fda9 	bl	800072c <__aeabi_ddiv>
 8004bda:	b003      	add	sp, #12
 8004bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004be0 <__copybits>:
 8004be0:	3901      	subs	r1, #1
 8004be2:	b570      	push	{r4, r5, r6, lr}
 8004be4:	1149      	asrs	r1, r1, #5
 8004be6:	6914      	ldr	r4, [r2, #16]
 8004be8:	3101      	adds	r1, #1
 8004bea:	f102 0314 	add.w	r3, r2, #20
 8004bee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004bf2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004bf6:	1f05      	subs	r5, r0, #4
 8004bf8:	42a3      	cmp	r3, r4
 8004bfa:	d30c      	bcc.n	8004c16 <__copybits+0x36>
 8004bfc:	1aa3      	subs	r3, r4, r2
 8004bfe:	3b11      	subs	r3, #17
 8004c00:	f023 0303 	bic.w	r3, r3, #3
 8004c04:	3211      	adds	r2, #17
 8004c06:	42a2      	cmp	r2, r4
 8004c08:	bf88      	it	hi
 8004c0a:	2300      	movhi	r3, #0
 8004c0c:	4418      	add	r0, r3
 8004c0e:	2300      	movs	r3, #0
 8004c10:	4288      	cmp	r0, r1
 8004c12:	d305      	bcc.n	8004c20 <__copybits+0x40>
 8004c14:	bd70      	pop	{r4, r5, r6, pc}
 8004c16:	f853 6b04 	ldr.w	r6, [r3], #4
 8004c1a:	f845 6f04 	str.w	r6, [r5, #4]!
 8004c1e:	e7eb      	b.n	8004bf8 <__copybits+0x18>
 8004c20:	f840 3b04 	str.w	r3, [r0], #4
 8004c24:	e7f4      	b.n	8004c10 <__copybits+0x30>

08004c26 <__any_on>:
 8004c26:	f100 0214 	add.w	r2, r0, #20
 8004c2a:	6900      	ldr	r0, [r0, #16]
 8004c2c:	114b      	asrs	r3, r1, #5
 8004c2e:	4298      	cmp	r0, r3
 8004c30:	b510      	push	{r4, lr}
 8004c32:	db11      	blt.n	8004c58 <__any_on+0x32>
 8004c34:	dd0a      	ble.n	8004c4c <__any_on+0x26>
 8004c36:	f011 011f 	ands.w	r1, r1, #31
 8004c3a:	d007      	beq.n	8004c4c <__any_on+0x26>
 8004c3c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8004c40:	fa24 f001 	lsr.w	r0, r4, r1
 8004c44:	fa00 f101 	lsl.w	r1, r0, r1
 8004c48:	428c      	cmp	r4, r1
 8004c4a:	d10b      	bne.n	8004c64 <__any_on+0x3e>
 8004c4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d803      	bhi.n	8004c5c <__any_on+0x36>
 8004c54:	2000      	movs	r0, #0
 8004c56:	bd10      	pop	{r4, pc}
 8004c58:	4603      	mov	r3, r0
 8004c5a:	e7f7      	b.n	8004c4c <__any_on+0x26>
 8004c5c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004c60:	2900      	cmp	r1, #0
 8004c62:	d0f5      	beq.n	8004c50 <__any_on+0x2a>
 8004c64:	2001      	movs	r0, #1
 8004c66:	e7f6      	b.n	8004c56 <__any_on+0x30>

08004c68 <sulp>:
 8004c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c6c:	460f      	mov	r7, r1
 8004c6e:	4690      	mov	r8, r2
 8004c70:	f7ff feca 	bl	8004a08 <__ulp>
 8004c74:	4604      	mov	r4, r0
 8004c76:	460d      	mov	r5, r1
 8004c78:	f1b8 0f00 	cmp.w	r8, #0
 8004c7c:	d011      	beq.n	8004ca2 <sulp+0x3a>
 8004c7e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004c82:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	dd0b      	ble.n	8004ca2 <sulp+0x3a>
 8004c8a:	2400      	movs	r4, #0
 8004c8c:	051b      	lsls	r3, r3, #20
 8004c8e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004c92:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004c96:	4622      	mov	r2, r4
 8004c98:	462b      	mov	r3, r5
 8004c9a:	f7fb fc1d 	bl	80004d8 <__aeabi_dmul>
 8004c9e:	4604      	mov	r4, r0
 8004ca0:	460d      	mov	r5, r1
 8004ca2:	4620      	mov	r0, r4
 8004ca4:	4629      	mov	r1, r5
 8004ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004caa:	0000      	movs	r0, r0
 8004cac:	0000      	movs	r0, r0
	...

08004cb0 <_strtod_l>:
 8004cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cb4:	b09f      	sub	sp, #124	; 0x7c
 8004cb6:	9217      	str	r2, [sp, #92]	; 0x5c
 8004cb8:	2200      	movs	r2, #0
 8004cba:	4604      	mov	r4, r0
 8004cbc:	921a      	str	r2, [sp, #104]	; 0x68
 8004cbe:	460d      	mov	r5, r1
 8004cc0:	f04f 0800 	mov.w	r8, #0
 8004cc4:	f04f 0900 	mov.w	r9, #0
 8004cc8:	460a      	mov	r2, r1
 8004cca:	9219      	str	r2, [sp, #100]	; 0x64
 8004ccc:	7811      	ldrb	r1, [r2, #0]
 8004cce:	292b      	cmp	r1, #43	; 0x2b
 8004cd0:	d04a      	beq.n	8004d68 <_strtod_l+0xb8>
 8004cd2:	d838      	bhi.n	8004d46 <_strtod_l+0x96>
 8004cd4:	290d      	cmp	r1, #13
 8004cd6:	d832      	bhi.n	8004d3e <_strtod_l+0x8e>
 8004cd8:	2908      	cmp	r1, #8
 8004cda:	d832      	bhi.n	8004d42 <_strtod_l+0x92>
 8004cdc:	2900      	cmp	r1, #0
 8004cde:	d03b      	beq.n	8004d58 <_strtod_l+0xa8>
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	920e      	str	r2, [sp, #56]	; 0x38
 8004ce4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8004ce6:	7832      	ldrb	r2, [r6, #0]
 8004ce8:	2a30      	cmp	r2, #48	; 0x30
 8004cea:	f040 80b2 	bne.w	8004e52 <_strtod_l+0x1a2>
 8004cee:	7872      	ldrb	r2, [r6, #1]
 8004cf0:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8004cf4:	2a58      	cmp	r2, #88	; 0x58
 8004cf6:	d16e      	bne.n	8004dd6 <_strtod_l+0x126>
 8004cf8:	9302      	str	r3, [sp, #8]
 8004cfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cfc:	4620      	mov	r0, r4
 8004cfe:	9301      	str	r3, [sp, #4]
 8004d00:	ab1a      	add	r3, sp, #104	; 0x68
 8004d02:	9300      	str	r3, [sp, #0]
 8004d04:	4a8c      	ldr	r2, [pc, #560]	; (8004f38 <_strtod_l+0x288>)
 8004d06:	ab1b      	add	r3, sp, #108	; 0x6c
 8004d08:	a919      	add	r1, sp, #100	; 0x64
 8004d0a:	f001 fafd 	bl	8006308 <__gethex>
 8004d0e:	f010 070f 	ands.w	r7, r0, #15
 8004d12:	4605      	mov	r5, r0
 8004d14:	d005      	beq.n	8004d22 <_strtod_l+0x72>
 8004d16:	2f06      	cmp	r7, #6
 8004d18:	d128      	bne.n	8004d6c <_strtod_l+0xbc>
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	3601      	adds	r6, #1
 8004d1e:	9619      	str	r6, [sp, #100]	; 0x64
 8004d20:	930e      	str	r3, [sp, #56]	; 0x38
 8004d22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f040 85a0 	bne.w	800586a <_strtod_l+0xbba>
 8004d2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d2c:	b1cb      	cbz	r3, 8004d62 <_strtod_l+0xb2>
 8004d2e:	4642      	mov	r2, r8
 8004d30:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004d34:	4610      	mov	r0, r2
 8004d36:	4619      	mov	r1, r3
 8004d38:	b01f      	add	sp, #124	; 0x7c
 8004d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d3e:	2920      	cmp	r1, #32
 8004d40:	d1ce      	bne.n	8004ce0 <_strtod_l+0x30>
 8004d42:	3201      	adds	r2, #1
 8004d44:	e7c1      	b.n	8004cca <_strtod_l+0x1a>
 8004d46:	292d      	cmp	r1, #45	; 0x2d
 8004d48:	d1ca      	bne.n	8004ce0 <_strtod_l+0x30>
 8004d4a:	2101      	movs	r1, #1
 8004d4c:	910e      	str	r1, [sp, #56]	; 0x38
 8004d4e:	1c51      	adds	r1, r2, #1
 8004d50:	9119      	str	r1, [sp, #100]	; 0x64
 8004d52:	7852      	ldrb	r2, [r2, #1]
 8004d54:	2a00      	cmp	r2, #0
 8004d56:	d1c5      	bne.n	8004ce4 <_strtod_l+0x34>
 8004d58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004d5a:	9519      	str	r5, [sp, #100]	; 0x64
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f040 8582 	bne.w	8005866 <_strtod_l+0xbb6>
 8004d62:	4642      	mov	r2, r8
 8004d64:	464b      	mov	r3, r9
 8004d66:	e7e5      	b.n	8004d34 <_strtod_l+0x84>
 8004d68:	2100      	movs	r1, #0
 8004d6a:	e7ef      	b.n	8004d4c <_strtod_l+0x9c>
 8004d6c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004d6e:	b13a      	cbz	r2, 8004d80 <_strtod_l+0xd0>
 8004d70:	2135      	movs	r1, #53	; 0x35
 8004d72:	a81c      	add	r0, sp, #112	; 0x70
 8004d74:	f7ff ff34 	bl	8004be0 <__copybits>
 8004d78:	4620      	mov	r0, r4
 8004d7a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004d7c:	f7ff fb18 	bl	80043b0 <_Bfree>
 8004d80:	3f01      	subs	r7, #1
 8004d82:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004d84:	2f04      	cmp	r7, #4
 8004d86:	d806      	bhi.n	8004d96 <_strtod_l+0xe6>
 8004d88:	e8df f007 	tbb	[pc, r7]
 8004d8c:	201d0314 	.word	0x201d0314
 8004d90:	14          	.byte	0x14
 8004d91:	00          	.byte	0x00
 8004d92:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8004d96:	05e9      	lsls	r1, r5, #23
 8004d98:	bf48      	it	mi
 8004d9a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8004d9e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004da2:	0d1b      	lsrs	r3, r3, #20
 8004da4:	051b      	lsls	r3, r3, #20
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1bb      	bne.n	8004d22 <_strtod_l+0x72>
 8004daa:	f7fe fb17 	bl	80033dc <__errno>
 8004dae:	2322      	movs	r3, #34	; 0x22
 8004db0:	6003      	str	r3, [r0, #0]
 8004db2:	e7b6      	b.n	8004d22 <_strtod_l+0x72>
 8004db4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004db8:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8004dbc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004dc0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8004dc4:	e7e7      	b.n	8004d96 <_strtod_l+0xe6>
 8004dc6:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8004f3c <_strtod_l+0x28c>
 8004dca:	e7e4      	b.n	8004d96 <_strtod_l+0xe6>
 8004dcc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8004dd0:	f04f 38ff 	mov.w	r8, #4294967295
 8004dd4:	e7df      	b.n	8004d96 <_strtod_l+0xe6>
 8004dd6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004dd8:	1c5a      	adds	r2, r3, #1
 8004dda:	9219      	str	r2, [sp, #100]	; 0x64
 8004ddc:	785b      	ldrb	r3, [r3, #1]
 8004dde:	2b30      	cmp	r3, #48	; 0x30
 8004de0:	d0f9      	beq.n	8004dd6 <_strtod_l+0x126>
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d09d      	beq.n	8004d22 <_strtod_l+0x72>
 8004de6:	2301      	movs	r3, #1
 8004de8:	f04f 0a00 	mov.w	sl, #0
 8004dec:	220a      	movs	r2, #10
 8004dee:	46d3      	mov	fp, sl
 8004df0:	9305      	str	r3, [sp, #20]
 8004df2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004df4:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8004df8:	930b      	str	r3, [sp, #44]	; 0x2c
 8004dfa:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004dfc:	7806      	ldrb	r6, [r0, #0]
 8004dfe:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004e02:	b2d9      	uxtb	r1, r3
 8004e04:	2909      	cmp	r1, #9
 8004e06:	d926      	bls.n	8004e56 <_strtod_l+0x1a6>
 8004e08:	2201      	movs	r2, #1
 8004e0a:	494d      	ldr	r1, [pc, #308]	; (8004f40 <_strtod_l+0x290>)
 8004e0c:	f001 f989 	bl	8006122 <strncmp>
 8004e10:	2800      	cmp	r0, #0
 8004e12:	d030      	beq.n	8004e76 <_strtod_l+0x1c6>
 8004e14:	2000      	movs	r0, #0
 8004e16:	4632      	mov	r2, r6
 8004e18:	4603      	mov	r3, r0
 8004e1a:	465e      	mov	r6, fp
 8004e1c:	9008      	str	r0, [sp, #32]
 8004e1e:	2a65      	cmp	r2, #101	; 0x65
 8004e20:	d001      	beq.n	8004e26 <_strtod_l+0x176>
 8004e22:	2a45      	cmp	r2, #69	; 0x45
 8004e24:	d113      	bne.n	8004e4e <_strtod_l+0x19e>
 8004e26:	b91e      	cbnz	r6, 8004e30 <_strtod_l+0x180>
 8004e28:	9a05      	ldr	r2, [sp, #20]
 8004e2a:	4302      	orrs	r2, r0
 8004e2c:	d094      	beq.n	8004d58 <_strtod_l+0xa8>
 8004e2e:	2600      	movs	r6, #0
 8004e30:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8004e32:	1c6a      	adds	r2, r5, #1
 8004e34:	9219      	str	r2, [sp, #100]	; 0x64
 8004e36:	786a      	ldrb	r2, [r5, #1]
 8004e38:	2a2b      	cmp	r2, #43	; 0x2b
 8004e3a:	d074      	beq.n	8004f26 <_strtod_l+0x276>
 8004e3c:	2a2d      	cmp	r2, #45	; 0x2d
 8004e3e:	d078      	beq.n	8004f32 <_strtod_l+0x282>
 8004e40:	f04f 0c00 	mov.w	ip, #0
 8004e44:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004e48:	2909      	cmp	r1, #9
 8004e4a:	d97f      	bls.n	8004f4c <_strtod_l+0x29c>
 8004e4c:	9519      	str	r5, [sp, #100]	; 0x64
 8004e4e:	2700      	movs	r7, #0
 8004e50:	e09e      	b.n	8004f90 <_strtod_l+0x2e0>
 8004e52:	2300      	movs	r3, #0
 8004e54:	e7c8      	b.n	8004de8 <_strtod_l+0x138>
 8004e56:	f1bb 0f08 	cmp.w	fp, #8
 8004e5a:	bfd8      	it	le
 8004e5c:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8004e5e:	f100 0001 	add.w	r0, r0, #1
 8004e62:	bfd6      	itet	le
 8004e64:	fb02 3301 	mlale	r3, r2, r1, r3
 8004e68:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8004e6c:	930a      	strle	r3, [sp, #40]	; 0x28
 8004e6e:	f10b 0b01 	add.w	fp, fp, #1
 8004e72:	9019      	str	r0, [sp, #100]	; 0x64
 8004e74:	e7c1      	b.n	8004dfa <_strtod_l+0x14a>
 8004e76:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004e78:	1c5a      	adds	r2, r3, #1
 8004e7a:	9219      	str	r2, [sp, #100]	; 0x64
 8004e7c:	785a      	ldrb	r2, [r3, #1]
 8004e7e:	f1bb 0f00 	cmp.w	fp, #0
 8004e82:	d037      	beq.n	8004ef4 <_strtod_l+0x244>
 8004e84:	465e      	mov	r6, fp
 8004e86:	9008      	str	r0, [sp, #32]
 8004e88:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004e8c:	2b09      	cmp	r3, #9
 8004e8e:	d912      	bls.n	8004eb6 <_strtod_l+0x206>
 8004e90:	2301      	movs	r3, #1
 8004e92:	e7c4      	b.n	8004e1e <_strtod_l+0x16e>
 8004e94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004e96:	3001      	adds	r0, #1
 8004e98:	1c5a      	adds	r2, r3, #1
 8004e9a:	9219      	str	r2, [sp, #100]	; 0x64
 8004e9c:	785a      	ldrb	r2, [r3, #1]
 8004e9e:	2a30      	cmp	r2, #48	; 0x30
 8004ea0:	d0f8      	beq.n	8004e94 <_strtod_l+0x1e4>
 8004ea2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004ea6:	2b08      	cmp	r3, #8
 8004ea8:	f200 84e4 	bhi.w	8005874 <_strtod_l+0xbc4>
 8004eac:	9008      	str	r0, [sp, #32]
 8004eae:	2000      	movs	r0, #0
 8004eb0:	4606      	mov	r6, r0
 8004eb2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004eb4:	930b      	str	r3, [sp, #44]	; 0x2c
 8004eb6:	3a30      	subs	r2, #48	; 0x30
 8004eb8:	f100 0301 	add.w	r3, r0, #1
 8004ebc:	d014      	beq.n	8004ee8 <_strtod_l+0x238>
 8004ebe:	9908      	ldr	r1, [sp, #32]
 8004ec0:	eb00 0c06 	add.w	ip, r0, r6
 8004ec4:	4419      	add	r1, r3
 8004ec6:	9108      	str	r1, [sp, #32]
 8004ec8:	4633      	mov	r3, r6
 8004eca:	210a      	movs	r1, #10
 8004ecc:	4563      	cmp	r3, ip
 8004ece:	d113      	bne.n	8004ef8 <_strtod_l+0x248>
 8004ed0:	1833      	adds	r3, r6, r0
 8004ed2:	2b08      	cmp	r3, #8
 8004ed4:	f106 0601 	add.w	r6, r6, #1
 8004ed8:	4406      	add	r6, r0
 8004eda:	dc1a      	bgt.n	8004f12 <_strtod_l+0x262>
 8004edc:	230a      	movs	r3, #10
 8004ede:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004ee0:	fb03 2301 	mla	r3, r3, r1, r2
 8004ee4:	930a      	str	r3, [sp, #40]	; 0x28
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004eea:	4618      	mov	r0, r3
 8004eec:	1c51      	adds	r1, r2, #1
 8004eee:	9119      	str	r1, [sp, #100]	; 0x64
 8004ef0:	7852      	ldrb	r2, [r2, #1]
 8004ef2:	e7c9      	b.n	8004e88 <_strtod_l+0x1d8>
 8004ef4:	4658      	mov	r0, fp
 8004ef6:	e7d2      	b.n	8004e9e <_strtod_l+0x1ee>
 8004ef8:	2b08      	cmp	r3, #8
 8004efa:	f103 0301 	add.w	r3, r3, #1
 8004efe:	dc03      	bgt.n	8004f08 <_strtod_l+0x258>
 8004f00:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8004f02:	434f      	muls	r7, r1
 8004f04:	970a      	str	r7, [sp, #40]	; 0x28
 8004f06:	e7e1      	b.n	8004ecc <_strtod_l+0x21c>
 8004f08:	2b10      	cmp	r3, #16
 8004f0a:	bfd8      	it	le
 8004f0c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8004f10:	e7dc      	b.n	8004ecc <_strtod_l+0x21c>
 8004f12:	2e10      	cmp	r6, #16
 8004f14:	bfdc      	itt	le
 8004f16:	230a      	movle	r3, #10
 8004f18:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8004f1c:	e7e3      	b.n	8004ee6 <_strtod_l+0x236>
 8004f1e:	2300      	movs	r3, #0
 8004f20:	9308      	str	r3, [sp, #32]
 8004f22:	2301      	movs	r3, #1
 8004f24:	e780      	b.n	8004e28 <_strtod_l+0x178>
 8004f26:	f04f 0c00 	mov.w	ip, #0
 8004f2a:	1caa      	adds	r2, r5, #2
 8004f2c:	9219      	str	r2, [sp, #100]	; 0x64
 8004f2e:	78aa      	ldrb	r2, [r5, #2]
 8004f30:	e788      	b.n	8004e44 <_strtod_l+0x194>
 8004f32:	f04f 0c01 	mov.w	ip, #1
 8004f36:	e7f8      	b.n	8004f2a <_strtod_l+0x27a>
 8004f38:	08006cc8 	.word	0x08006cc8
 8004f3c:	7ff00000 	.word	0x7ff00000
 8004f40:	08006cc4 	.word	0x08006cc4
 8004f44:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004f46:	1c51      	adds	r1, r2, #1
 8004f48:	9119      	str	r1, [sp, #100]	; 0x64
 8004f4a:	7852      	ldrb	r2, [r2, #1]
 8004f4c:	2a30      	cmp	r2, #48	; 0x30
 8004f4e:	d0f9      	beq.n	8004f44 <_strtod_l+0x294>
 8004f50:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004f54:	2908      	cmp	r1, #8
 8004f56:	f63f af7a 	bhi.w	8004e4e <_strtod_l+0x19e>
 8004f5a:	3a30      	subs	r2, #48	; 0x30
 8004f5c:	9209      	str	r2, [sp, #36]	; 0x24
 8004f5e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004f60:	920c      	str	r2, [sp, #48]	; 0x30
 8004f62:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004f64:	1c57      	adds	r7, r2, #1
 8004f66:	9719      	str	r7, [sp, #100]	; 0x64
 8004f68:	7852      	ldrb	r2, [r2, #1]
 8004f6a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8004f6e:	f1be 0f09 	cmp.w	lr, #9
 8004f72:	d938      	bls.n	8004fe6 <_strtod_l+0x336>
 8004f74:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004f76:	1a7f      	subs	r7, r7, r1
 8004f78:	2f08      	cmp	r7, #8
 8004f7a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8004f7e:	dc03      	bgt.n	8004f88 <_strtod_l+0x2d8>
 8004f80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f82:	428f      	cmp	r7, r1
 8004f84:	bfa8      	it	ge
 8004f86:	460f      	movge	r7, r1
 8004f88:	f1bc 0f00 	cmp.w	ip, #0
 8004f8c:	d000      	beq.n	8004f90 <_strtod_l+0x2e0>
 8004f8e:	427f      	negs	r7, r7
 8004f90:	2e00      	cmp	r6, #0
 8004f92:	d14f      	bne.n	8005034 <_strtod_l+0x384>
 8004f94:	9905      	ldr	r1, [sp, #20]
 8004f96:	4301      	orrs	r1, r0
 8004f98:	f47f aec3 	bne.w	8004d22 <_strtod_l+0x72>
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f47f aedb 	bne.w	8004d58 <_strtod_l+0xa8>
 8004fa2:	2a69      	cmp	r2, #105	; 0x69
 8004fa4:	d029      	beq.n	8004ffa <_strtod_l+0x34a>
 8004fa6:	dc26      	bgt.n	8004ff6 <_strtod_l+0x346>
 8004fa8:	2a49      	cmp	r2, #73	; 0x49
 8004faa:	d026      	beq.n	8004ffa <_strtod_l+0x34a>
 8004fac:	2a4e      	cmp	r2, #78	; 0x4e
 8004fae:	f47f aed3 	bne.w	8004d58 <_strtod_l+0xa8>
 8004fb2:	499a      	ldr	r1, [pc, #616]	; (800521c <_strtod_l+0x56c>)
 8004fb4:	a819      	add	r0, sp, #100	; 0x64
 8004fb6:	f001 fbe9 	bl	800678c <__match>
 8004fba:	2800      	cmp	r0, #0
 8004fbc:	f43f aecc 	beq.w	8004d58 <_strtod_l+0xa8>
 8004fc0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	2b28      	cmp	r3, #40	; 0x28
 8004fc6:	d12f      	bne.n	8005028 <_strtod_l+0x378>
 8004fc8:	4995      	ldr	r1, [pc, #596]	; (8005220 <_strtod_l+0x570>)
 8004fca:	aa1c      	add	r2, sp, #112	; 0x70
 8004fcc:	a819      	add	r0, sp, #100	; 0x64
 8004fce:	f001 fbf1 	bl	80067b4 <__hexnan>
 8004fd2:	2805      	cmp	r0, #5
 8004fd4:	d128      	bne.n	8005028 <_strtod_l+0x378>
 8004fd6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004fd8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8004fdc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004fe0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8004fe4:	e69d      	b.n	8004d22 <_strtod_l+0x72>
 8004fe6:	210a      	movs	r1, #10
 8004fe8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004fea:	fb01 2107 	mla	r1, r1, r7, r2
 8004fee:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8004ff2:	9209      	str	r2, [sp, #36]	; 0x24
 8004ff4:	e7b5      	b.n	8004f62 <_strtod_l+0x2b2>
 8004ff6:	2a6e      	cmp	r2, #110	; 0x6e
 8004ff8:	e7d9      	b.n	8004fae <_strtod_l+0x2fe>
 8004ffa:	498a      	ldr	r1, [pc, #552]	; (8005224 <_strtod_l+0x574>)
 8004ffc:	a819      	add	r0, sp, #100	; 0x64
 8004ffe:	f001 fbc5 	bl	800678c <__match>
 8005002:	2800      	cmp	r0, #0
 8005004:	f43f aea8 	beq.w	8004d58 <_strtod_l+0xa8>
 8005008:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800500a:	4987      	ldr	r1, [pc, #540]	; (8005228 <_strtod_l+0x578>)
 800500c:	3b01      	subs	r3, #1
 800500e:	a819      	add	r0, sp, #100	; 0x64
 8005010:	9319      	str	r3, [sp, #100]	; 0x64
 8005012:	f001 fbbb 	bl	800678c <__match>
 8005016:	b910      	cbnz	r0, 800501e <_strtod_l+0x36e>
 8005018:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800501a:	3301      	adds	r3, #1
 800501c:	9319      	str	r3, [sp, #100]	; 0x64
 800501e:	f04f 0800 	mov.w	r8, #0
 8005022:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800522c <_strtod_l+0x57c>
 8005026:	e67c      	b.n	8004d22 <_strtod_l+0x72>
 8005028:	4881      	ldr	r0, [pc, #516]	; (8005230 <_strtod_l+0x580>)
 800502a:	f001 f8cd 	bl	80061c8 <nan>
 800502e:	4680      	mov	r8, r0
 8005030:	4689      	mov	r9, r1
 8005032:	e676      	b.n	8004d22 <_strtod_l+0x72>
 8005034:	9b08      	ldr	r3, [sp, #32]
 8005036:	f1bb 0f00 	cmp.w	fp, #0
 800503a:	bf08      	it	eq
 800503c:	46b3      	moveq	fp, r6
 800503e:	1afb      	subs	r3, r7, r3
 8005040:	2e10      	cmp	r6, #16
 8005042:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005044:	4635      	mov	r5, r6
 8005046:	9309      	str	r3, [sp, #36]	; 0x24
 8005048:	bfa8      	it	ge
 800504a:	2510      	movge	r5, #16
 800504c:	f7fb f9ca 	bl	80003e4 <__aeabi_ui2d>
 8005050:	2e09      	cmp	r6, #9
 8005052:	4680      	mov	r8, r0
 8005054:	4689      	mov	r9, r1
 8005056:	dd13      	ble.n	8005080 <_strtod_l+0x3d0>
 8005058:	4b76      	ldr	r3, [pc, #472]	; (8005234 <_strtod_l+0x584>)
 800505a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800505e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005062:	f7fb fa39 	bl	80004d8 <__aeabi_dmul>
 8005066:	4680      	mov	r8, r0
 8005068:	4650      	mov	r0, sl
 800506a:	4689      	mov	r9, r1
 800506c:	f7fb f9ba 	bl	80003e4 <__aeabi_ui2d>
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	4640      	mov	r0, r8
 8005076:	4649      	mov	r1, r9
 8005078:	f7fb f878 	bl	800016c <__adddf3>
 800507c:	4680      	mov	r8, r0
 800507e:	4689      	mov	r9, r1
 8005080:	2e0f      	cmp	r6, #15
 8005082:	dc36      	bgt.n	80050f2 <_strtod_l+0x442>
 8005084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005086:	2b00      	cmp	r3, #0
 8005088:	f43f ae4b 	beq.w	8004d22 <_strtod_l+0x72>
 800508c:	dd22      	ble.n	80050d4 <_strtod_l+0x424>
 800508e:	2b16      	cmp	r3, #22
 8005090:	dc09      	bgt.n	80050a6 <_strtod_l+0x3f6>
 8005092:	4968      	ldr	r1, [pc, #416]	; (8005234 <_strtod_l+0x584>)
 8005094:	4642      	mov	r2, r8
 8005096:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800509a:	464b      	mov	r3, r9
 800509c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050a0:	f7fb fa1a 	bl	80004d8 <__aeabi_dmul>
 80050a4:	e7c3      	b.n	800502e <_strtod_l+0x37e>
 80050a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050a8:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80050ac:	4293      	cmp	r3, r2
 80050ae:	db20      	blt.n	80050f2 <_strtod_l+0x442>
 80050b0:	4c60      	ldr	r4, [pc, #384]	; (8005234 <_strtod_l+0x584>)
 80050b2:	f1c6 060f 	rsb	r6, r6, #15
 80050b6:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80050ba:	4642      	mov	r2, r8
 80050bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050c0:	464b      	mov	r3, r9
 80050c2:	f7fb fa09 	bl	80004d8 <__aeabi_dmul>
 80050c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050c8:	1b9e      	subs	r6, r3, r6
 80050ca:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80050ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 80050d2:	e7e5      	b.n	80050a0 <_strtod_l+0x3f0>
 80050d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050d6:	3316      	adds	r3, #22
 80050d8:	db0b      	blt.n	80050f2 <_strtod_l+0x442>
 80050da:	9b08      	ldr	r3, [sp, #32]
 80050dc:	4640      	mov	r0, r8
 80050de:	1bdf      	subs	r7, r3, r7
 80050e0:	4b54      	ldr	r3, [pc, #336]	; (8005234 <_strtod_l+0x584>)
 80050e2:	4649      	mov	r1, r9
 80050e4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80050e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050ec:	f7fb fb1e 	bl	800072c <__aeabi_ddiv>
 80050f0:	e79d      	b.n	800502e <_strtod_l+0x37e>
 80050f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050f4:	1b75      	subs	r5, r6, r5
 80050f6:	441d      	add	r5, r3
 80050f8:	2d00      	cmp	r5, #0
 80050fa:	dd70      	ble.n	80051de <_strtod_l+0x52e>
 80050fc:	f015 030f 	ands.w	r3, r5, #15
 8005100:	d00a      	beq.n	8005118 <_strtod_l+0x468>
 8005102:	494c      	ldr	r1, [pc, #304]	; (8005234 <_strtod_l+0x584>)
 8005104:	4642      	mov	r2, r8
 8005106:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800510a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800510e:	464b      	mov	r3, r9
 8005110:	f7fb f9e2 	bl	80004d8 <__aeabi_dmul>
 8005114:	4680      	mov	r8, r0
 8005116:	4689      	mov	r9, r1
 8005118:	f035 050f 	bics.w	r5, r5, #15
 800511c:	d04d      	beq.n	80051ba <_strtod_l+0x50a>
 800511e:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8005122:	dd22      	ble.n	800516a <_strtod_l+0x4ba>
 8005124:	2600      	movs	r6, #0
 8005126:	46b3      	mov	fp, r6
 8005128:	960b      	str	r6, [sp, #44]	; 0x2c
 800512a:	9608      	str	r6, [sp, #32]
 800512c:	2322      	movs	r3, #34	; 0x22
 800512e:	f04f 0800 	mov.w	r8, #0
 8005132:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800522c <_strtod_l+0x57c>
 8005136:	6023      	str	r3, [r4, #0]
 8005138:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800513a:	2b00      	cmp	r3, #0
 800513c:	f43f adf1 	beq.w	8004d22 <_strtod_l+0x72>
 8005140:	4620      	mov	r0, r4
 8005142:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005144:	f7ff f934 	bl	80043b0 <_Bfree>
 8005148:	4620      	mov	r0, r4
 800514a:	9908      	ldr	r1, [sp, #32]
 800514c:	f7ff f930 	bl	80043b0 <_Bfree>
 8005150:	4659      	mov	r1, fp
 8005152:	4620      	mov	r0, r4
 8005154:	f7ff f92c 	bl	80043b0 <_Bfree>
 8005158:	4620      	mov	r0, r4
 800515a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800515c:	f7ff f928 	bl	80043b0 <_Bfree>
 8005160:	4631      	mov	r1, r6
 8005162:	4620      	mov	r0, r4
 8005164:	f7ff f924 	bl	80043b0 <_Bfree>
 8005168:	e5db      	b.n	8004d22 <_strtod_l+0x72>
 800516a:	4b33      	ldr	r3, [pc, #204]	; (8005238 <_strtod_l+0x588>)
 800516c:	4640      	mov	r0, r8
 800516e:	9305      	str	r3, [sp, #20]
 8005170:	2300      	movs	r3, #0
 8005172:	4649      	mov	r1, r9
 8005174:	469a      	mov	sl, r3
 8005176:	112d      	asrs	r5, r5, #4
 8005178:	2d01      	cmp	r5, #1
 800517a:	dc21      	bgt.n	80051c0 <_strtod_l+0x510>
 800517c:	b10b      	cbz	r3, 8005182 <_strtod_l+0x4d2>
 800517e:	4680      	mov	r8, r0
 8005180:	4689      	mov	r9, r1
 8005182:	492d      	ldr	r1, [pc, #180]	; (8005238 <_strtod_l+0x588>)
 8005184:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8005188:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800518c:	4642      	mov	r2, r8
 800518e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005192:	464b      	mov	r3, r9
 8005194:	f7fb f9a0 	bl	80004d8 <__aeabi_dmul>
 8005198:	4b24      	ldr	r3, [pc, #144]	; (800522c <_strtod_l+0x57c>)
 800519a:	460a      	mov	r2, r1
 800519c:	400b      	ands	r3, r1
 800519e:	4927      	ldr	r1, [pc, #156]	; (800523c <_strtod_l+0x58c>)
 80051a0:	4680      	mov	r8, r0
 80051a2:	428b      	cmp	r3, r1
 80051a4:	d8be      	bhi.n	8005124 <_strtod_l+0x474>
 80051a6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80051aa:	428b      	cmp	r3, r1
 80051ac:	bf86      	itte	hi
 80051ae:	f04f 38ff 	movhi.w	r8, #4294967295
 80051b2:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8005240 <_strtod_l+0x590>
 80051b6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80051ba:	2300      	movs	r3, #0
 80051bc:	9305      	str	r3, [sp, #20]
 80051be:	e07b      	b.n	80052b8 <_strtod_l+0x608>
 80051c0:	07ea      	lsls	r2, r5, #31
 80051c2:	d505      	bpl.n	80051d0 <_strtod_l+0x520>
 80051c4:	9b05      	ldr	r3, [sp, #20]
 80051c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ca:	f7fb f985 	bl	80004d8 <__aeabi_dmul>
 80051ce:	2301      	movs	r3, #1
 80051d0:	9a05      	ldr	r2, [sp, #20]
 80051d2:	f10a 0a01 	add.w	sl, sl, #1
 80051d6:	3208      	adds	r2, #8
 80051d8:	106d      	asrs	r5, r5, #1
 80051da:	9205      	str	r2, [sp, #20]
 80051dc:	e7cc      	b.n	8005178 <_strtod_l+0x4c8>
 80051de:	d0ec      	beq.n	80051ba <_strtod_l+0x50a>
 80051e0:	426d      	negs	r5, r5
 80051e2:	f015 020f 	ands.w	r2, r5, #15
 80051e6:	d00a      	beq.n	80051fe <_strtod_l+0x54e>
 80051e8:	4b12      	ldr	r3, [pc, #72]	; (8005234 <_strtod_l+0x584>)
 80051ea:	4640      	mov	r0, r8
 80051ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051f0:	4649      	mov	r1, r9
 80051f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f6:	f7fb fa99 	bl	800072c <__aeabi_ddiv>
 80051fa:	4680      	mov	r8, r0
 80051fc:	4689      	mov	r9, r1
 80051fe:	112d      	asrs	r5, r5, #4
 8005200:	d0db      	beq.n	80051ba <_strtod_l+0x50a>
 8005202:	2d1f      	cmp	r5, #31
 8005204:	dd1e      	ble.n	8005244 <_strtod_l+0x594>
 8005206:	2600      	movs	r6, #0
 8005208:	46b3      	mov	fp, r6
 800520a:	960b      	str	r6, [sp, #44]	; 0x2c
 800520c:	9608      	str	r6, [sp, #32]
 800520e:	2322      	movs	r3, #34	; 0x22
 8005210:	f04f 0800 	mov.w	r8, #0
 8005214:	f04f 0900 	mov.w	r9, #0
 8005218:	6023      	str	r3, [r4, #0]
 800521a:	e78d      	b.n	8005138 <_strtod_l+0x488>
 800521c:	08006ab3 	.word	0x08006ab3
 8005220:	08006cdc 	.word	0x08006cdc
 8005224:	08006aab 	.word	0x08006aab
 8005228:	08006ae2 	.word	0x08006ae2
 800522c:	7ff00000 	.word	0x7ff00000
 8005230:	08006e6d 	.word	0x08006e6d
 8005234:	08006bf0 	.word	0x08006bf0
 8005238:	08006bc8 	.word	0x08006bc8
 800523c:	7ca00000 	.word	0x7ca00000
 8005240:	7fefffff 	.word	0x7fefffff
 8005244:	f015 0310 	ands.w	r3, r5, #16
 8005248:	bf18      	it	ne
 800524a:	236a      	movne	r3, #106	; 0x6a
 800524c:	4640      	mov	r0, r8
 800524e:	9305      	str	r3, [sp, #20]
 8005250:	4649      	mov	r1, r9
 8005252:	2300      	movs	r3, #0
 8005254:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8005520 <_strtod_l+0x870>
 8005258:	07ea      	lsls	r2, r5, #31
 800525a:	d504      	bpl.n	8005266 <_strtod_l+0x5b6>
 800525c:	e9da 2300 	ldrd	r2, r3, [sl]
 8005260:	f7fb f93a 	bl	80004d8 <__aeabi_dmul>
 8005264:	2301      	movs	r3, #1
 8005266:	106d      	asrs	r5, r5, #1
 8005268:	f10a 0a08 	add.w	sl, sl, #8
 800526c:	d1f4      	bne.n	8005258 <_strtod_l+0x5a8>
 800526e:	b10b      	cbz	r3, 8005274 <_strtod_l+0x5c4>
 8005270:	4680      	mov	r8, r0
 8005272:	4689      	mov	r9, r1
 8005274:	9b05      	ldr	r3, [sp, #20]
 8005276:	b1bb      	cbz	r3, 80052a8 <_strtod_l+0x5f8>
 8005278:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800527c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005280:	2b00      	cmp	r3, #0
 8005282:	4649      	mov	r1, r9
 8005284:	dd10      	ble.n	80052a8 <_strtod_l+0x5f8>
 8005286:	2b1f      	cmp	r3, #31
 8005288:	f340 8128 	ble.w	80054dc <_strtod_l+0x82c>
 800528c:	2b34      	cmp	r3, #52	; 0x34
 800528e:	bfd8      	it	le
 8005290:	f04f 33ff 	movle.w	r3, #4294967295
 8005294:	f04f 0800 	mov.w	r8, #0
 8005298:	bfcf      	iteee	gt
 800529a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800529e:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80052a2:	4093      	lslle	r3, r2
 80052a4:	ea03 0901 	andle.w	r9, r3, r1
 80052a8:	2200      	movs	r2, #0
 80052aa:	2300      	movs	r3, #0
 80052ac:	4640      	mov	r0, r8
 80052ae:	4649      	mov	r1, r9
 80052b0:	f7fb fb7a 	bl	80009a8 <__aeabi_dcmpeq>
 80052b4:	2800      	cmp	r0, #0
 80052b6:	d1a6      	bne.n	8005206 <_strtod_l+0x556>
 80052b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052ba:	465a      	mov	r2, fp
 80052bc:	9300      	str	r3, [sp, #0]
 80052be:	4620      	mov	r0, r4
 80052c0:	4633      	mov	r3, r6
 80052c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80052c4:	f7ff f8dc 	bl	8004480 <__s2b>
 80052c8:	900b      	str	r0, [sp, #44]	; 0x2c
 80052ca:	2800      	cmp	r0, #0
 80052cc:	f43f af2a 	beq.w	8005124 <_strtod_l+0x474>
 80052d0:	2600      	movs	r6, #0
 80052d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052d4:	9b08      	ldr	r3, [sp, #32]
 80052d6:	2a00      	cmp	r2, #0
 80052d8:	eba3 0307 	sub.w	r3, r3, r7
 80052dc:	bfa8      	it	ge
 80052de:	2300      	movge	r3, #0
 80052e0:	46b3      	mov	fp, r6
 80052e2:	9312      	str	r3, [sp, #72]	; 0x48
 80052e4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80052e8:	9316      	str	r3, [sp, #88]	; 0x58
 80052ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052ec:	4620      	mov	r0, r4
 80052ee:	6859      	ldr	r1, [r3, #4]
 80052f0:	f7ff f81e 	bl	8004330 <_Balloc>
 80052f4:	9008      	str	r0, [sp, #32]
 80052f6:	2800      	cmp	r0, #0
 80052f8:	f43f af18 	beq.w	800512c <_strtod_l+0x47c>
 80052fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052fe:	300c      	adds	r0, #12
 8005300:	691a      	ldr	r2, [r3, #16]
 8005302:	f103 010c 	add.w	r1, r3, #12
 8005306:	3202      	adds	r2, #2
 8005308:	0092      	lsls	r2, r2, #2
 800530a:	f000 ff4f 	bl	80061ac <memcpy>
 800530e:	ab1c      	add	r3, sp, #112	; 0x70
 8005310:	9301      	str	r3, [sp, #4]
 8005312:	ab1b      	add	r3, sp, #108	; 0x6c
 8005314:	9300      	str	r3, [sp, #0]
 8005316:	4642      	mov	r2, r8
 8005318:	464b      	mov	r3, r9
 800531a:	4620      	mov	r0, r4
 800531c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8005320:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8005324:	f7ff fbd8 	bl	8004ad8 <__d2b>
 8005328:	901a      	str	r0, [sp, #104]	; 0x68
 800532a:	2800      	cmp	r0, #0
 800532c:	f43f aefe 	beq.w	800512c <_strtod_l+0x47c>
 8005330:	2101      	movs	r1, #1
 8005332:	4620      	mov	r0, r4
 8005334:	f7ff f93c 	bl	80045b0 <__i2b>
 8005338:	4683      	mov	fp, r0
 800533a:	2800      	cmp	r0, #0
 800533c:	f43f aef6 	beq.w	800512c <_strtod_l+0x47c>
 8005340:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8005342:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005344:	2f00      	cmp	r7, #0
 8005346:	bfab      	itete	ge
 8005348:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 800534a:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800534c:	eb07 0a03 	addge.w	sl, r7, r3
 8005350:	1bdd      	sublt	r5, r3, r7
 8005352:	9b05      	ldr	r3, [sp, #20]
 8005354:	bfa8      	it	ge
 8005356:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8005358:	eba7 0703 	sub.w	r7, r7, r3
 800535c:	4417      	add	r7, r2
 800535e:	4b71      	ldr	r3, [pc, #452]	; (8005524 <_strtod_l+0x874>)
 8005360:	f107 37ff 	add.w	r7, r7, #4294967295
 8005364:	bfb8      	it	lt
 8005366:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800536a:	429f      	cmp	r7, r3
 800536c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005370:	f280 80c7 	bge.w	8005502 <_strtod_l+0x852>
 8005374:	1bdb      	subs	r3, r3, r7
 8005376:	2b1f      	cmp	r3, #31
 8005378:	f04f 0101 	mov.w	r1, #1
 800537c:	eba2 0203 	sub.w	r2, r2, r3
 8005380:	f300 80b3 	bgt.w	80054ea <_strtod_l+0x83a>
 8005384:	fa01 f303 	lsl.w	r3, r1, r3
 8005388:	9313      	str	r3, [sp, #76]	; 0x4c
 800538a:	2300      	movs	r3, #0
 800538c:	9310      	str	r3, [sp, #64]	; 0x40
 800538e:	eb0a 0702 	add.w	r7, sl, r2
 8005392:	9b05      	ldr	r3, [sp, #20]
 8005394:	45ba      	cmp	sl, r7
 8005396:	4415      	add	r5, r2
 8005398:	441d      	add	r5, r3
 800539a:	4653      	mov	r3, sl
 800539c:	bfa8      	it	ge
 800539e:	463b      	movge	r3, r7
 80053a0:	42ab      	cmp	r3, r5
 80053a2:	bfa8      	it	ge
 80053a4:	462b      	movge	r3, r5
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	bfc2      	ittt	gt
 80053aa:	1aff      	subgt	r7, r7, r3
 80053ac:	1aed      	subgt	r5, r5, r3
 80053ae:	ebaa 0a03 	subgt.w	sl, sl, r3
 80053b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	dd17      	ble.n	80053e8 <_strtod_l+0x738>
 80053b8:	4659      	mov	r1, fp
 80053ba:	461a      	mov	r2, r3
 80053bc:	4620      	mov	r0, r4
 80053be:	f7ff f9b5 	bl	800472c <__pow5mult>
 80053c2:	4683      	mov	fp, r0
 80053c4:	2800      	cmp	r0, #0
 80053c6:	f43f aeb1 	beq.w	800512c <_strtod_l+0x47c>
 80053ca:	4601      	mov	r1, r0
 80053cc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80053ce:	4620      	mov	r0, r4
 80053d0:	f7ff f904 	bl	80045dc <__multiply>
 80053d4:	900a      	str	r0, [sp, #40]	; 0x28
 80053d6:	2800      	cmp	r0, #0
 80053d8:	f43f aea8 	beq.w	800512c <_strtod_l+0x47c>
 80053dc:	4620      	mov	r0, r4
 80053de:	991a      	ldr	r1, [sp, #104]	; 0x68
 80053e0:	f7fe ffe6 	bl	80043b0 <_Bfree>
 80053e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053e6:	931a      	str	r3, [sp, #104]	; 0x68
 80053e8:	2f00      	cmp	r7, #0
 80053ea:	f300 808f 	bgt.w	800550c <_strtod_l+0x85c>
 80053ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	dd08      	ble.n	8005406 <_strtod_l+0x756>
 80053f4:	4620      	mov	r0, r4
 80053f6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80053f8:	9908      	ldr	r1, [sp, #32]
 80053fa:	f7ff f997 	bl	800472c <__pow5mult>
 80053fe:	9008      	str	r0, [sp, #32]
 8005400:	2800      	cmp	r0, #0
 8005402:	f43f ae93 	beq.w	800512c <_strtod_l+0x47c>
 8005406:	2d00      	cmp	r5, #0
 8005408:	dd08      	ble.n	800541c <_strtod_l+0x76c>
 800540a:	462a      	mov	r2, r5
 800540c:	4620      	mov	r0, r4
 800540e:	9908      	ldr	r1, [sp, #32]
 8005410:	f7ff f9e6 	bl	80047e0 <__lshift>
 8005414:	9008      	str	r0, [sp, #32]
 8005416:	2800      	cmp	r0, #0
 8005418:	f43f ae88 	beq.w	800512c <_strtod_l+0x47c>
 800541c:	f1ba 0f00 	cmp.w	sl, #0
 8005420:	dd08      	ble.n	8005434 <_strtod_l+0x784>
 8005422:	4659      	mov	r1, fp
 8005424:	4652      	mov	r2, sl
 8005426:	4620      	mov	r0, r4
 8005428:	f7ff f9da 	bl	80047e0 <__lshift>
 800542c:	4683      	mov	fp, r0
 800542e:	2800      	cmp	r0, #0
 8005430:	f43f ae7c 	beq.w	800512c <_strtod_l+0x47c>
 8005434:	4620      	mov	r0, r4
 8005436:	9a08      	ldr	r2, [sp, #32]
 8005438:	991a      	ldr	r1, [sp, #104]	; 0x68
 800543a:	f7ff fa59 	bl	80048f0 <__mdiff>
 800543e:	4606      	mov	r6, r0
 8005440:	2800      	cmp	r0, #0
 8005442:	f43f ae73 	beq.w	800512c <_strtod_l+0x47c>
 8005446:	2500      	movs	r5, #0
 8005448:	68c3      	ldr	r3, [r0, #12]
 800544a:	4659      	mov	r1, fp
 800544c:	60c5      	str	r5, [r0, #12]
 800544e:	930a      	str	r3, [sp, #40]	; 0x28
 8005450:	f7ff fa32 	bl	80048b8 <__mcmp>
 8005454:	42a8      	cmp	r0, r5
 8005456:	da6b      	bge.n	8005530 <_strtod_l+0x880>
 8005458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800545a:	ea53 0308 	orrs.w	r3, r3, r8
 800545e:	f040 808f 	bne.w	8005580 <_strtod_l+0x8d0>
 8005462:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005466:	2b00      	cmp	r3, #0
 8005468:	f040 808a 	bne.w	8005580 <_strtod_l+0x8d0>
 800546c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005470:	0d1b      	lsrs	r3, r3, #20
 8005472:	051b      	lsls	r3, r3, #20
 8005474:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005478:	f240 8082 	bls.w	8005580 <_strtod_l+0x8d0>
 800547c:	6973      	ldr	r3, [r6, #20]
 800547e:	b913      	cbnz	r3, 8005486 <_strtod_l+0x7d6>
 8005480:	6933      	ldr	r3, [r6, #16]
 8005482:	2b01      	cmp	r3, #1
 8005484:	dd7c      	ble.n	8005580 <_strtod_l+0x8d0>
 8005486:	4631      	mov	r1, r6
 8005488:	2201      	movs	r2, #1
 800548a:	4620      	mov	r0, r4
 800548c:	f7ff f9a8 	bl	80047e0 <__lshift>
 8005490:	4659      	mov	r1, fp
 8005492:	4606      	mov	r6, r0
 8005494:	f7ff fa10 	bl	80048b8 <__mcmp>
 8005498:	2800      	cmp	r0, #0
 800549a:	dd71      	ble.n	8005580 <_strtod_l+0x8d0>
 800549c:	9905      	ldr	r1, [sp, #20]
 800549e:	464b      	mov	r3, r9
 80054a0:	4a21      	ldr	r2, [pc, #132]	; (8005528 <_strtod_l+0x878>)
 80054a2:	2900      	cmp	r1, #0
 80054a4:	f000 808d 	beq.w	80055c2 <_strtod_l+0x912>
 80054a8:	ea02 0109 	and.w	r1, r2, r9
 80054ac:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80054b0:	f300 8087 	bgt.w	80055c2 <_strtod_l+0x912>
 80054b4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80054b8:	f77f aea9 	ble.w	800520e <_strtod_l+0x55e>
 80054bc:	4640      	mov	r0, r8
 80054be:	4649      	mov	r1, r9
 80054c0:	4b1a      	ldr	r3, [pc, #104]	; (800552c <_strtod_l+0x87c>)
 80054c2:	2200      	movs	r2, #0
 80054c4:	f7fb f808 	bl	80004d8 <__aeabi_dmul>
 80054c8:	4b17      	ldr	r3, [pc, #92]	; (8005528 <_strtod_l+0x878>)
 80054ca:	4680      	mov	r8, r0
 80054cc:	400b      	ands	r3, r1
 80054ce:	4689      	mov	r9, r1
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f47f ae35 	bne.w	8005140 <_strtod_l+0x490>
 80054d6:	2322      	movs	r3, #34	; 0x22
 80054d8:	6023      	str	r3, [r4, #0]
 80054da:	e631      	b.n	8005140 <_strtod_l+0x490>
 80054dc:	f04f 32ff 	mov.w	r2, #4294967295
 80054e0:	fa02 f303 	lsl.w	r3, r2, r3
 80054e4:	ea03 0808 	and.w	r8, r3, r8
 80054e8:	e6de      	b.n	80052a8 <_strtod_l+0x5f8>
 80054ea:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 80054ee:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 80054f2:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 80054f6:	37e2      	adds	r7, #226	; 0xe2
 80054f8:	fa01 f307 	lsl.w	r3, r1, r7
 80054fc:	9310      	str	r3, [sp, #64]	; 0x40
 80054fe:	9113      	str	r1, [sp, #76]	; 0x4c
 8005500:	e745      	b.n	800538e <_strtod_l+0x6de>
 8005502:	2300      	movs	r3, #0
 8005504:	9310      	str	r3, [sp, #64]	; 0x40
 8005506:	2301      	movs	r3, #1
 8005508:	9313      	str	r3, [sp, #76]	; 0x4c
 800550a:	e740      	b.n	800538e <_strtod_l+0x6de>
 800550c:	463a      	mov	r2, r7
 800550e:	4620      	mov	r0, r4
 8005510:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005512:	f7ff f965 	bl	80047e0 <__lshift>
 8005516:	901a      	str	r0, [sp, #104]	; 0x68
 8005518:	2800      	cmp	r0, #0
 800551a:	f47f af68 	bne.w	80053ee <_strtod_l+0x73e>
 800551e:	e605      	b.n	800512c <_strtod_l+0x47c>
 8005520:	08006cf0 	.word	0x08006cf0
 8005524:	fffffc02 	.word	0xfffffc02
 8005528:	7ff00000 	.word	0x7ff00000
 800552c:	39500000 	.word	0x39500000
 8005530:	46ca      	mov	sl, r9
 8005532:	d165      	bne.n	8005600 <_strtod_l+0x950>
 8005534:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005536:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800553a:	b352      	cbz	r2, 8005592 <_strtod_l+0x8e2>
 800553c:	4a9e      	ldr	r2, [pc, #632]	; (80057b8 <_strtod_l+0xb08>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d12a      	bne.n	8005598 <_strtod_l+0x8e8>
 8005542:	9b05      	ldr	r3, [sp, #20]
 8005544:	4641      	mov	r1, r8
 8005546:	b1fb      	cbz	r3, 8005588 <_strtod_l+0x8d8>
 8005548:	4b9c      	ldr	r3, [pc, #624]	; (80057bc <_strtod_l+0xb0c>)
 800554a:	f04f 32ff 	mov.w	r2, #4294967295
 800554e:	ea09 0303 	and.w	r3, r9, r3
 8005552:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005556:	d81a      	bhi.n	800558e <_strtod_l+0x8de>
 8005558:	0d1b      	lsrs	r3, r3, #20
 800555a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800555e:	fa02 f303 	lsl.w	r3, r2, r3
 8005562:	4299      	cmp	r1, r3
 8005564:	d118      	bne.n	8005598 <_strtod_l+0x8e8>
 8005566:	4b96      	ldr	r3, [pc, #600]	; (80057c0 <_strtod_l+0xb10>)
 8005568:	459a      	cmp	sl, r3
 800556a:	d102      	bne.n	8005572 <_strtod_l+0x8c2>
 800556c:	3101      	adds	r1, #1
 800556e:	f43f addd 	beq.w	800512c <_strtod_l+0x47c>
 8005572:	f04f 0800 	mov.w	r8, #0
 8005576:	4b91      	ldr	r3, [pc, #580]	; (80057bc <_strtod_l+0xb0c>)
 8005578:	ea0a 0303 	and.w	r3, sl, r3
 800557c:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8005580:	9b05      	ldr	r3, [sp, #20]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d19a      	bne.n	80054bc <_strtod_l+0x80c>
 8005586:	e5db      	b.n	8005140 <_strtod_l+0x490>
 8005588:	f04f 33ff 	mov.w	r3, #4294967295
 800558c:	e7e9      	b.n	8005562 <_strtod_l+0x8b2>
 800558e:	4613      	mov	r3, r2
 8005590:	e7e7      	b.n	8005562 <_strtod_l+0x8b2>
 8005592:	ea53 0308 	orrs.w	r3, r3, r8
 8005596:	d081      	beq.n	800549c <_strtod_l+0x7ec>
 8005598:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800559a:	b1e3      	cbz	r3, 80055d6 <_strtod_l+0x926>
 800559c:	ea13 0f0a 	tst.w	r3, sl
 80055a0:	d0ee      	beq.n	8005580 <_strtod_l+0x8d0>
 80055a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055a4:	4640      	mov	r0, r8
 80055a6:	4649      	mov	r1, r9
 80055a8:	9a05      	ldr	r2, [sp, #20]
 80055aa:	b1c3      	cbz	r3, 80055de <_strtod_l+0x92e>
 80055ac:	f7ff fb5c 	bl	8004c68 <sulp>
 80055b0:	4602      	mov	r2, r0
 80055b2:	460b      	mov	r3, r1
 80055b4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80055b6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80055b8:	f7fa fdd8 	bl	800016c <__adddf3>
 80055bc:	4680      	mov	r8, r0
 80055be:	4689      	mov	r9, r1
 80055c0:	e7de      	b.n	8005580 <_strtod_l+0x8d0>
 80055c2:	4013      	ands	r3, r2
 80055c4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80055c8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80055cc:	f04f 38ff 	mov.w	r8, #4294967295
 80055d0:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80055d4:	e7d4      	b.n	8005580 <_strtod_l+0x8d0>
 80055d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80055d8:	ea13 0f08 	tst.w	r3, r8
 80055dc:	e7e0      	b.n	80055a0 <_strtod_l+0x8f0>
 80055de:	f7ff fb43 	bl	8004c68 <sulp>
 80055e2:	4602      	mov	r2, r0
 80055e4:	460b      	mov	r3, r1
 80055e6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80055e8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80055ea:	f7fa fdbd 	bl	8000168 <__aeabi_dsub>
 80055ee:	2200      	movs	r2, #0
 80055f0:	2300      	movs	r3, #0
 80055f2:	4680      	mov	r8, r0
 80055f4:	4689      	mov	r9, r1
 80055f6:	f7fb f9d7 	bl	80009a8 <__aeabi_dcmpeq>
 80055fa:	2800      	cmp	r0, #0
 80055fc:	d0c0      	beq.n	8005580 <_strtod_l+0x8d0>
 80055fe:	e606      	b.n	800520e <_strtod_l+0x55e>
 8005600:	4659      	mov	r1, fp
 8005602:	4630      	mov	r0, r6
 8005604:	f7ff fabe 	bl	8004b84 <__ratio>
 8005608:	4602      	mov	r2, r0
 800560a:	460b      	mov	r3, r1
 800560c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005610:	2200      	movs	r2, #0
 8005612:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005616:	f7fb f9db 	bl	80009d0 <__aeabi_dcmple>
 800561a:	2800      	cmp	r0, #0
 800561c:	d06f      	beq.n	80056fe <_strtod_l+0xa4e>
 800561e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005620:	2b00      	cmp	r3, #0
 8005622:	d17c      	bne.n	800571e <_strtod_l+0xa6e>
 8005624:	f1b8 0f00 	cmp.w	r8, #0
 8005628:	d159      	bne.n	80056de <_strtod_l+0xa2e>
 800562a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800562e:	2b00      	cmp	r3, #0
 8005630:	d17b      	bne.n	800572a <_strtod_l+0xa7a>
 8005632:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005636:	2200      	movs	r2, #0
 8005638:	4b62      	ldr	r3, [pc, #392]	; (80057c4 <_strtod_l+0xb14>)
 800563a:	f7fb f9bf 	bl	80009bc <__aeabi_dcmplt>
 800563e:	2800      	cmp	r0, #0
 8005640:	d15a      	bne.n	80056f8 <_strtod_l+0xa48>
 8005642:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005646:	2200      	movs	r2, #0
 8005648:	4b5f      	ldr	r3, [pc, #380]	; (80057c8 <_strtod_l+0xb18>)
 800564a:	f7fa ff45 	bl	80004d8 <__aeabi_dmul>
 800564e:	4605      	mov	r5, r0
 8005650:	460f      	mov	r7, r1
 8005652:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8005656:	9506      	str	r5, [sp, #24]
 8005658:	9307      	str	r3, [sp, #28]
 800565a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800565e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005662:	4b56      	ldr	r3, [pc, #344]	; (80057bc <_strtod_l+0xb0c>)
 8005664:	4a55      	ldr	r2, [pc, #340]	; (80057bc <_strtod_l+0xb0c>)
 8005666:	ea0a 0303 	and.w	r3, sl, r3
 800566a:	9313      	str	r3, [sp, #76]	; 0x4c
 800566c:	4b57      	ldr	r3, [pc, #348]	; (80057cc <_strtod_l+0xb1c>)
 800566e:	ea0a 0202 	and.w	r2, sl, r2
 8005672:	429a      	cmp	r2, r3
 8005674:	f040 80b0 	bne.w	80057d8 <_strtod_l+0xb28>
 8005678:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800567c:	4640      	mov	r0, r8
 800567e:	4649      	mov	r1, r9
 8005680:	f7ff f9c2 	bl	8004a08 <__ulp>
 8005684:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005688:	f7fa ff26 	bl	80004d8 <__aeabi_dmul>
 800568c:	4642      	mov	r2, r8
 800568e:	464b      	mov	r3, r9
 8005690:	f7fa fd6c 	bl	800016c <__adddf3>
 8005694:	f8df a124 	ldr.w	sl, [pc, #292]	; 80057bc <_strtod_l+0xb0c>
 8005698:	4a4d      	ldr	r2, [pc, #308]	; (80057d0 <_strtod_l+0xb20>)
 800569a:	ea01 0a0a 	and.w	sl, r1, sl
 800569e:	4592      	cmp	sl, r2
 80056a0:	4680      	mov	r8, r0
 80056a2:	d948      	bls.n	8005736 <_strtod_l+0xa86>
 80056a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80056a6:	4b46      	ldr	r3, [pc, #280]	; (80057c0 <_strtod_l+0xb10>)
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d103      	bne.n	80056b4 <_strtod_l+0xa04>
 80056ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80056ae:	3301      	adds	r3, #1
 80056b0:	f43f ad3c 	beq.w	800512c <_strtod_l+0x47c>
 80056b4:	f04f 38ff 	mov.w	r8, #4294967295
 80056b8:	f8df 9104 	ldr.w	r9, [pc, #260]	; 80057c0 <_strtod_l+0xb10>
 80056bc:	4620      	mov	r0, r4
 80056be:	991a      	ldr	r1, [sp, #104]	; 0x68
 80056c0:	f7fe fe76 	bl	80043b0 <_Bfree>
 80056c4:	4620      	mov	r0, r4
 80056c6:	9908      	ldr	r1, [sp, #32]
 80056c8:	f7fe fe72 	bl	80043b0 <_Bfree>
 80056cc:	4659      	mov	r1, fp
 80056ce:	4620      	mov	r0, r4
 80056d0:	f7fe fe6e 	bl	80043b0 <_Bfree>
 80056d4:	4631      	mov	r1, r6
 80056d6:	4620      	mov	r0, r4
 80056d8:	f7fe fe6a 	bl	80043b0 <_Bfree>
 80056dc:	e605      	b.n	80052ea <_strtod_l+0x63a>
 80056de:	f1b8 0f01 	cmp.w	r8, #1
 80056e2:	d103      	bne.n	80056ec <_strtod_l+0xa3c>
 80056e4:	f1b9 0f00 	cmp.w	r9, #0
 80056e8:	f43f ad91 	beq.w	800520e <_strtod_l+0x55e>
 80056ec:	2200      	movs	r2, #0
 80056ee:	4b39      	ldr	r3, [pc, #228]	; (80057d4 <_strtod_l+0xb24>)
 80056f0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80056f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80056f6:	e016      	b.n	8005726 <_strtod_l+0xa76>
 80056f8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80056fa:	4f33      	ldr	r7, [pc, #204]	; (80057c8 <_strtod_l+0xb18>)
 80056fc:	e7a9      	b.n	8005652 <_strtod_l+0x9a2>
 80056fe:	4b32      	ldr	r3, [pc, #200]	; (80057c8 <_strtod_l+0xb18>)
 8005700:	2200      	movs	r2, #0
 8005702:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005706:	f7fa fee7 	bl	80004d8 <__aeabi_dmul>
 800570a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800570c:	4605      	mov	r5, r0
 800570e:	460f      	mov	r7, r1
 8005710:	2b00      	cmp	r3, #0
 8005712:	d09e      	beq.n	8005652 <_strtod_l+0x9a2>
 8005714:	4602      	mov	r2, r0
 8005716:	460b      	mov	r3, r1
 8005718:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800571c:	e79d      	b.n	800565a <_strtod_l+0x9aa>
 800571e:	2200      	movs	r2, #0
 8005720:	4b28      	ldr	r3, [pc, #160]	; (80057c4 <_strtod_l+0xb14>)
 8005722:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005726:	4f27      	ldr	r7, [pc, #156]	; (80057c4 <_strtod_l+0xb14>)
 8005728:	e797      	b.n	800565a <_strtod_l+0x9aa>
 800572a:	2200      	movs	r2, #0
 800572c:	4b29      	ldr	r3, [pc, #164]	; (80057d4 <_strtod_l+0xb24>)
 800572e:	4645      	mov	r5, r8
 8005730:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005734:	e7f7      	b.n	8005726 <_strtod_l+0xa76>
 8005736:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800573a:	9b05      	ldr	r3, [sp, #20]
 800573c:	46ca      	mov	sl, r9
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1bc      	bne.n	80056bc <_strtod_l+0xa0c>
 8005742:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005746:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005748:	0d1b      	lsrs	r3, r3, #20
 800574a:	051b      	lsls	r3, r3, #20
 800574c:	429a      	cmp	r2, r3
 800574e:	d1b5      	bne.n	80056bc <_strtod_l+0xa0c>
 8005750:	4628      	mov	r0, r5
 8005752:	4639      	mov	r1, r7
 8005754:	f7fb fa08 	bl	8000b68 <__aeabi_d2lz>
 8005758:	f7fa fe90 	bl	800047c <__aeabi_l2d>
 800575c:	4602      	mov	r2, r0
 800575e:	460b      	mov	r3, r1
 8005760:	4628      	mov	r0, r5
 8005762:	4639      	mov	r1, r7
 8005764:	f7fa fd00 	bl	8000168 <__aeabi_dsub>
 8005768:	460b      	mov	r3, r1
 800576a:	4602      	mov	r2, r0
 800576c:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8005770:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005776:	ea4a 0a08 	orr.w	sl, sl, r8
 800577a:	ea5a 0a03 	orrs.w	sl, sl, r3
 800577e:	d06c      	beq.n	800585a <_strtod_l+0xbaa>
 8005780:	a309      	add	r3, pc, #36	; (adr r3, 80057a8 <_strtod_l+0xaf8>)
 8005782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005786:	f7fb f919 	bl	80009bc <__aeabi_dcmplt>
 800578a:	2800      	cmp	r0, #0
 800578c:	f47f acd8 	bne.w	8005140 <_strtod_l+0x490>
 8005790:	a307      	add	r3, pc, #28	; (adr r3, 80057b0 <_strtod_l+0xb00>)
 8005792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005796:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800579a:	f7fb f92d 	bl	80009f8 <__aeabi_dcmpgt>
 800579e:	2800      	cmp	r0, #0
 80057a0:	d08c      	beq.n	80056bc <_strtod_l+0xa0c>
 80057a2:	e4cd      	b.n	8005140 <_strtod_l+0x490>
 80057a4:	f3af 8000 	nop.w
 80057a8:	94a03595 	.word	0x94a03595
 80057ac:	3fdfffff 	.word	0x3fdfffff
 80057b0:	35afe535 	.word	0x35afe535
 80057b4:	3fe00000 	.word	0x3fe00000
 80057b8:	000fffff 	.word	0x000fffff
 80057bc:	7ff00000 	.word	0x7ff00000
 80057c0:	7fefffff 	.word	0x7fefffff
 80057c4:	3ff00000 	.word	0x3ff00000
 80057c8:	3fe00000 	.word	0x3fe00000
 80057cc:	7fe00000 	.word	0x7fe00000
 80057d0:	7c9fffff 	.word	0x7c9fffff
 80057d4:	bff00000 	.word	0xbff00000
 80057d8:	9b05      	ldr	r3, [sp, #20]
 80057da:	b333      	cbz	r3, 800582a <_strtod_l+0xb7a>
 80057dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80057de:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80057e2:	d822      	bhi.n	800582a <_strtod_l+0xb7a>
 80057e4:	a328      	add	r3, pc, #160	; (adr r3, 8005888 <_strtod_l+0xbd8>)
 80057e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ea:	4628      	mov	r0, r5
 80057ec:	4639      	mov	r1, r7
 80057ee:	f7fb f8ef 	bl	80009d0 <__aeabi_dcmple>
 80057f2:	b1a0      	cbz	r0, 800581e <_strtod_l+0xb6e>
 80057f4:	4639      	mov	r1, r7
 80057f6:	4628      	mov	r0, r5
 80057f8:	f7fb f946 	bl	8000a88 <__aeabi_d2uiz>
 80057fc:	2801      	cmp	r0, #1
 80057fe:	bf38      	it	cc
 8005800:	2001      	movcc	r0, #1
 8005802:	f7fa fdef 	bl	80003e4 <__aeabi_ui2d>
 8005806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005808:	4605      	mov	r5, r0
 800580a:	460f      	mov	r7, r1
 800580c:	bb03      	cbnz	r3, 8005850 <_strtod_l+0xba0>
 800580e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005812:	9014      	str	r0, [sp, #80]	; 0x50
 8005814:	9315      	str	r3, [sp, #84]	; 0x54
 8005816:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800581a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800581e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005820:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005822:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005826:	1a9b      	subs	r3, r3, r2
 8005828:	9311      	str	r3, [sp, #68]	; 0x44
 800582a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800582c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800582e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8005832:	f7ff f8e9 	bl	8004a08 <__ulp>
 8005836:	4602      	mov	r2, r0
 8005838:	460b      	mov	r3, r1
 800583a:	4640      	mov	r0, r8
 800583c:	4649      	mov	r1, r9
 800583e:	f7fa fe4b 	bl	80004d8 <__aeabi_dmul>
 8005842:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005844:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005846:	f7fa fc91 	bl	800016c <__adddf3>
 800584a:	4680      	mov	r8, r0
 800584c:	4689      	mov	r9, r1
 800584e:	e774      	b.n	800573a <_strtod_l+0xa8a>
 8005850:	4602      	mov	r2, r0
 8005852:	460b      	mov	r3, r1
 8005854:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8005858:	e7dd      	b.n	8005816 <_strtod_l+0xb66>
 800585a:	a30d      	add	r3, pc, #52	; (adr r3, 8005890 <_strtod_l+0xbe0>)
 800585c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005860:	f7fb f8ac 	bl	80009bc <__aeabi_dcmplt>
 8005864:	e79b      	b.n	800579e <_strtod_l+0xaee>
 8005866:	2300      	movs	r3, #0
 8005868:	930e      	str	r3, [sp, #56]	; 0x38
 800586a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800586c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800586e:	6013      	str	r3, [r2, #0]
 8005870:	f7ff ba5b 	b.w	8004d2a <_strtod_l+0x7a>
 8005874:	2a65      	cmp	r2, #101	; 0x65
 8005876:	f43f ab52 	beq.w	8004f1e <_strtod_l+0x26e>
 800587a:	2a45      	cmp	r2, #69	; 0x45
 800587c:	f43f ab4f 	beq.w	8004f1e <_strtod_l+0x26e>
 8005880:	2301      	movs	r3, #1
 8005882:	f7ff bb87 	b.w	8004f94 <_strtod_l+0x2e4>
 8005886:	bf00      	nop
 8005888:	ffc00000 	.word	0xffc00000
 800588c:	41dfffff 	.word	0x41dfffff
 8005890:	94a03595 	.word	0x94a03595
 8005894:	3fcfffff 	.word	0x3fcfffff

08005898 <_strtod_r>:
 8005898:	4b01      	ldr	r3, [pc, #4]	; (80058a0 <_strtod_r+0x8>)
 800589a:	f7ff ba09 	b.w	8004cb0 <_strtod_l>
 800589e:	bf00      	nop
 80058a0:	20000068 	.word	0x20000068

080058a4 <_strtol_l.constprop.0>:
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058aa:	4686      	mov	lr, r0
 80058ac:	4690      	mov	r8, r2
 80058ae:	d001      	beq.n	80058b4 <_strtol_l.constprop.0+0x10>
 80058b0:	2b24      	cmp	r3, #36	; 0x24
 80058b2:	d906      	bls.n	80058c2 <_strtol_l.constprop.0+0x1e>
 80058b4:	f7fd fd92 	bl	80033dc <__errno>
 80058b8:	2316      	movs	r3, #22
 80058ba:	6003      	str	r3, [r0, #0]
 80058bc:	2000      	movs	r0, #0
 80058be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058c2:	460d      	mov	r5, r1
 80058c4:	4835      	ldr	r0, [pc, #212]	; (800599c <_strtol_l.constprop.0+0xf8>)
 80058c6:	462a      	mov	r2, r5
 80058c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80058cc:	5d06      	ldrb	r6, [r0, r4]
 80058ce:	f016 0608 	ands.w	r6, r6, #8
 80058d2:	d1f8      	bne.n	80058c6 <_strtol_l.constprop.0+0x22>
 80058d4:	2c2d      	cmp	r4, #45	; 0x2d
 80058d6:	d12e      	bne.n	8005936 <_strtol_l.constprop.0+0x92>
 80058d8:	2601      	movs	r6, #1
 80058da:	782c      	ldrb	r4, [r5, #0]
 80058dc:	1c95      	adds	r5, r2, #2
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d057      	beq.n	8005992 <_strtol_l.constprop.0+0xee>
 80058e2:	2b10      	cmp	r3, #16
 80058e4:	d109      	bne.n	80058fa <_strtol_l.constprop.0+0x56>
 80058e6:	2c30      	cmp	r4, #48	; 0x30
 80058e8:	d107      	bne.n	80058fa <_strtol_l.constprop.0+0x56>
 80058ea:	782a      	ldrb	r2, [r5, #0]
 80058ec:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80058f0:	2a58      	cmp	r2, #88	; 0x58
 80058f2:	d149      	bne.n	8005988 <_strtol_l.constprop.0+0xe4>
 80058f4:	2310      	movs	r3, #16
 80058f6:	786c      	ldrb	r4, [r5, #1]
 80058f8:	3502      	adds	r5, #2
 80058fa:	2200      	movs	r2, #0
 80058fc:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8005900:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005904:	fbbc f9f3 	udiv	r9, ip, r3
 8005908:	4610      	mov	r0, r2
 800590a:	fb03 ca19 	mls	sl, r3, r9, ip
 800590e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8005912:	2f09      	cmp	r7, #9
 8005914:	d814      	bhi.n	8005940 <_strtol_l.constprop.0+0x9c>
 8005916:	463c      	mov	r4, r7
 8005918:	42a3      	cmp	r3, r4
 800591a:	dd20      	ble.n	800595e <_strtol_l.constprop.0+0xba>
 800591c:	1c57      	adds	r7, r2, #1
 800591e:	d007      	beq.n	8005930 <_strtol_l.constprop.0+0x8c>
 8005920:	4581      	cmp	r9, r0
 8005922:	d319      	bcc.n	8005958 <_strtol_l.constprop.0+0xb4>
 8005924:	d101      	bne.n	800592a <_strtol_l.constprop.0+0x86>
 8005926:	45a2      	cmp	sl, r4
 8005928:	db16      	blt.n	8005958 <_strtol_l.constprop.0+0xb4>
 800592a:	2201      	movs	r2, #1
 800592c:	fb00 4003 	mla	r0, r0, r3, r4
 8005930:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005934:	e7eb      	b.n	800590e <_strtol_l.constprop.0+0x6a>
 8005936:	2c2b      	cmp	r4, #43	; 0x2b
 8005938:	bf04      	itt	eq
 800593a:	782c      	ldrbeq	r4, [r5, #0]
 800593c:	1c95      	addeq	r5, r2, #2
 800593e:	e7ce      	b.n	80058de <_strtol_l.constprop.0+0x3a>
 8005940:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005944:	2f19      	cmp	r7, #25
 8005946:	d801      	bhi.n	800594c <_strtol_l.constprop.0+0xa8>
 8005948:	3c37      	subs	r4, #55	; 0x37
 800594a:	e7e5      	b.n	8005918 <_strtol_l.constprop.0+0x74>
 800594c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005950:	2f19      	cmp	r7, #25
 8005952:	d804      	bhi.n	800595e <_strtol_l.constprop.0+0xba>
 8005954:	3c57      	subs	r4, #87	; 0x57
 8005956:	e7df      	b.n	8005918 <_strtol_l.constprop.0+0x74>
 8005958:	f04f 32ff 	mov.w	r2, #4294967295
 800595c:	e7e8      	b.n	8005930 <_strtol_l.constprop.0+0x8c>
 800595e:	1c53      	adds	r3, r2, #1
 8005960:	d108      	bne.n	8005974 <_strtol_l.constprop.0+0xd0>
 8005962:	2322      	movs	r3, #34	; 0x22
 8005964:	4660      	mov	r0, ip
 8005966:	f8ce 3000 	str.w	r3, [lr]
 800596a:	f1b8 0f00 	cmp.w	r8, #0
 800596e:	d0a6      	beq.n	80058be <_strtol_l.constprop.0+0x1a>
 8005970:	1e69      	subs	r1, r5, #1
 8005972:	e006      	b.n	8005982 <_strtol_l.constprop.0+0xde>
 8005974:	b106      	cbz	r6, 8005978 <_strtol_l.constprop.0+0xd4>
 8005976:	4240      	negs	r0, r0
 8005978:	f1b8 0f00 	cmp.w	r8, #0
 800597c:	d09f      	beq.n	80058be <_strtol_l.constprop.0+0x1a>
 800597e:	2a00      	cmp	r2, #0
 8005980:	d1f6      	bne.n	8005970 <_strtol_l.constprop.0+0xcc>
 8005982:	f8c8 1000 	str.w	r1, [r8]
 8005986:	e79a      	b.n	80058be <_strtol_l.constprop.0+0x1a>
 8005988:	2430      	movs	r4, #48	; 0x30
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1b5      	bne.n	80058fa <_strtol_l.constprop.0+0x56>
 800598e:	2308      	movs	r3, #8
 8005990:	e7b3      	b.n	80058fa <_strtol_l.constprop.0+0x56>
 8005992:	2c30      	cmp	r4, #48	; 0x30
 8005994:	d0a9      	beq.n	80058ea <_strtol_l.constprop.0+0x46>
 8005996:	230a      	movs	r3, #10
 8005998:	e7af      	b.n	80058fa <_strtol_l.constprop.0+0x56>
 800599a:	bf00      	nop
 800599c:	08006d19 	.word	0x08006d19

080059a0 <_strtol_r>:
 80059a0:	f7ff bf80 	b.w	80058a4 <_strtol_l.constprop.0>

080059a4 <__ssputs_r>:
 80059a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059a8:	461f      	mov	r7, r3
 80059aa:	688e      	ldr	r6, [r1, #8]
 80059ac:	4682      	mov	sl, r0
 80059ae:	42be      	cmp	r6, r7
 80059b0:	460c      	mov	r4, r1
 80059b2:	4690      	mov	r8, r2
 80059b4:	680b      	ldr	r3, [r1, #0]
 80059b6:	d82c      	bhi.n	8005a12 <__ssputs_r+0x6e>
 80059b8:	898a      	ldrh	r2, [r1, #12]
 80059ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80059be:	d026      	beq.n	8005a0e <__ssputs_r+0x6a>
 80059c0:	6965      	ldr	r5, [r4, #20]
 80059c2:	6909      	ldr	r1, [r1, #16]
 80059c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80059c8:	eba3 0901 	sub.w	r9, r3, r1
 80059cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80059d0:	1c7b      	adds	r3, r7, #1
 80059d2:	444b      	add	r3, r9
 80059d4:	106d      	asrs	r5, r5, #1
 80059d6:	429d      	cmp	r5, r3
 80059d8:	bf38      	it	cc
 80059da:	461d      	movcc	r5, r3
 80059dc:	0553      	lsls	r3, r2, #21
 80059de:	d527      	bpl.n	8005a30 <__ssputs_r+0x8c>
 80059e0:	4629      	mov	r1, r5
 80059e2:	f7fe fc19 	bl	8004218 <_malloc_r>
 80059e6:	4606      	mov	r6, r0
 80059e8:	b360      	cbz	r0, 8005a44 <__ssputs_r+0xa0>
 80059ea:	464a      	mov	r2, r9
 80059ec:	6921      	ldr	r1, [r4, #16]
 80059ee:	f000 fbdd 	bl	80061ac <memcpy>
 80059f2:	89a3      	ldrh	r3, [r4, #12]
 80059f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80059f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059fc:	81a3      	strh	r3, [r4, #12]
 80059fe:	6126      	str	r6, [r4, #16]
 8005a00:	444e      	add	r6, r9
 8005a02:	6026      	str	r6, [r4, #0]
 8005a04:	463e      	mov	r6, r7
 8005a06:	6165      	str	r5, [r4, #20]
 8005a08:	eba5 0509 	sub.w	r5, r5, r9
 8005a0c:	60a5      	str	r5, [r4, #8]
 8005a0e:	42be      	cmp	r6, r7
 8005a10:	d900      	bls.n	8005a14 <__ssputs_r+0x70>
 8005a12:	463e      	mov	r6, r7
 8005a14:	4632      	mov	r2, r6
 8005a16:	4641      	mov	r1, r8
 8005a18:	6820      	ldr	r0, [r4, #0]
 8005a1a:	f000 fb68 	bl	80060ee <memmove>
 8005a1e:	2000      	movs	r0, #0
 8005a20:	68a3      	ldr	r3, [r4, #8]
 8005a22:	1b9b      	subs	r3, r3, r6
 8005a24:	60a3      	str	r3, [r4, #8]
 8005a26:	6823      	ldr	r3, [r4, #0]
 8005a28:	4433      	add	r3, r6
 8005a2a:	6023      	str	r3, [r4, #0]
 8005a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a30:	462a      	mov	r2, r5
 8005a32:	f000 ff6c 	bl	800690e <_realloc_r>
 8005a36:	4606      	mov	r6, r0
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	d1e0      	bne.n	80059fe <__ssputs_r+0x5a>
 8005a3c:	4650      	mov	r0, sl
 8005a3e:	6921      	ldr	r1, [r4, #16]
 8005a40:	f7fe fb7a 	bl	8004138 <_free_r>
 8005a44:	230c      	movs	r3, #12
 8005a46:	f8ca 3000 	str.w	r3, [sl]
 8005a4a:	89a3      	ldrh	r3, [r4, #12]
 8005a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a54:	81a3      	strh	r3, [r4, #12]
 8005a56:	e7e9      	b.n	8005a2c <__ssputs_r+0x88>

08005a58 <_svfiprintf_r>:
 8005a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a5c:	4698      	mov	r8, r3
 8005a5e:	898b      	ldrh	r3, [r1, #12]
 8005a60:	4607      	mov	r7, r0
 8005a62:	061b      	lsls	r3, r3, #24
 8005a64:	460d      	mov	r5, r1
 8005a66:	4614      	mov	r4, r2
 8005a68:	b09d      	sub	sp, #116	; 0x74
 8005a6a:	d50e      	bpl.n	8005a8a <_svfiprintf_r+0x32>
 8005a6c:	690b      	ldr	r3, [r1, #16]
 8005a6e:	b963      	cbnz	r3, 8005a8a <_svfiprintf_r+0x32>
 8005a70:	2140      	movs	r1, #64	; 0x40
 8005a72:	f7fe fbd1 	bl	8004218 <_malloc_r>
 8005a76:	6028      	str	r0, [r5, #0]
 8005a78:	6128      	str	r0, [r5, #16]
 8005a7a:	b920      	cbnz	r0, 8005a86 <_svfiprintf_r+0x2e>
 8005a7c:	230c      	movs	r3, #12
 8005a7e:	603b      	str	r3, [r7, #0]
 8005a80:	f04f 30ff 	mov.w	r0, #4294967295
 8005a84:	e0d0      	b.n	8005c28 <_svfiprintf_r+0x1d0>
 8005a86:	2340      	movs	r3, #64	; 0x40
 8005a88:	616b      	str	r3, [r5, #20]
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	9309      	str	r3, [sp, #36]	; 0x24
 8005a8e:	2320      	movs	r3, #32
 8005a90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a94:	2330      	movs	r3, #48	; 0x30
 8005a96:	f04f 0901 	mov.w	r9, #1
 8005a9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a9e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8005c40 <_svfiprintf_r+0x1e8>
 8005aa2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005aa6:	4623      	mov	r3, r4
 8005aa8:	469a      	mov	sl, r3
 8005aaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005aae:	b10a      	cbz	r2, 8005ab4 <_svfiprintf_r+0x5c>
 8005ab0:	2a25      	cmp	r2, #37	; 0x25
 8005ab2:	d1f9      	bne.n	8005aa8 <_svfiprintf_r+0x50>
 8005ab4:	ebba 0b04 	subs.w	fp, sl, r4
 8005ab8:	d00b      	beq.n	8005ad2 <_svfiprintf_r+0x7a>
 8005aba:	465b      	mov	r3, fp
 8005abc:	4622      	mov	r2, r4
 8005abe:	4629      	mov	r1, r5
 8005ac0:	4638      	mov	r0, r7
 8005ac2:	f7ff ff6f 	bl	80059a4 <__ssputs_r>
 8005ac6:	3001      	adds	r0, #1
 8005ac8:	f000 80a9 	beq.w	8005c1e <_svfiprintf_r+0x1c6>
 8005acc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ace:	445a      	add	r2, fp
 8005ad0:	9209      	str	r2, [sp, #36]	; 0x24
 8005ad2:	f89a 3000 	ldrb.w	r3, [sl]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	f000 80a1 	beq.w	8005c1e <_svfiprintf_r+0x1c6>
 8005adc:	2300      	movs	r3, #0
 8005ade:	f04f 32ff 	mov.w	r2, #4294967295
 8005ae2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ae6:	f10a 0a01 	add.w	sl, sl, #1
 8005aea:	9304      	str	r3, [sp, #16]
 8005aec:	9307      	str	r3, [sp, #28]
 8005aee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005af2:	931a      	str	r3, [sp, #104]	; 0x68
 8005af4:	4654      	mov	r4, sl
 8005af6:	2205      	movs	r2, #5
 8005af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005afc:	4850      	ldr	r0, [pc, #320]	; (8005c40 <_svfiprintf_r+0x1e8>)
 8005afe:	f7fd fc9a 	bl	8003436 <memchr>
 8005b02:	9a04      	ldr	r2, [sp, #16]
 8005b04:	b9d8      	cbnz	r0, 8005b3e <_svfiprintf_r+0xe6>
 8005b06:	06d0      	lsls	r0, r2, #27
 8005b08:	bf44      	itt	mi
 8005b0a:	2320      	movmi	r3, #32
 8005b0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b10:	0711      	lsls	r1, r2, #28
 8005b12:	bf44      	itt	mi
 8005b14:	232b      	movmi	r3, #43	; 0x2b
 8005b16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b1a:	f89a 3000 	ldrb.w	r3, [sl]
 8005b1e:	2b2a      	cmp	r3, #42	; 0x2a
 8005b20:	d015      	beq.n	8005b4e <_svfiprintf_r+0xf6>
 8005b22:	4654      	mov	r4, sl
 8005b24:	2000      	movs	r0, #0
 8005b26:	f04f 0c0a 	mov.w	ip, #10
 8005b2a:	9a07      	ldr	r2, [sp, #28]
 8005b2c:	4621      	mov	r1, r4
 8005b2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b32:	3b30      	subs	r3, #48	; 0x30
 8005b34:	2b09      	cmp	r3, #9
 8005b36:	d94d      	bls.n	8005bd4 <_svfiprintf_r+0x17c>
 8005b38:	b1b0      	cbz	r0, 8005b68 <_svfiprintf_r+0x110>
 8005b3a:	9207      	str	r2, [sp, #28]
 8005b3c:	e014      	b.n	8005b68 <_svfiprintf_r+0x110>
 8005b3e:	eba0 0308 	sub.w	r3, r0, r8
 8005b42:	fa09 f303 	lsl.w	r3, r9, r3
 8005b46:	4313      	orrs	r3, r2
 8005b48:	46a2      	mov	sl, r4
 8005b4a:	9304      	str	r3, [sp, #16]
 8005b4c:	e7d2      	b.n	8005af4 <_svfiprintf_r+0x9c>
 8005b4e:	9b03      	ldr	r3, [sp, #12]
 8005b50:	1d19      	adds	r1, r3, #4
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	9103      	str	r1, [sp, #12]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	bfbb      	ittet	lt
 8005b5a:	425b      	neglt	r3, r3
 8005b5c:	f042 0202 	orrlt.w	r2, r2, #2
 8005b60:	9307      	strge	r3, [sp, #28]
 8005b62:	9307      	strlt	r3, [sp, #28]
 8005b64:	bfb8      	it	lt
 8005b66:	9204      	strlt	r2, [sp, #16]
 8005b68:	7823      	ldrb	r3, [r4, #0]
 8005b6a:	2b2e      	cmp	r3, #46	; 0x2e
 8005b6c:	d10c      	bne.n	8005b88 <_svfiprintf_r+0x130>
 8005b6e:	7863      	ldrb	r3, [r4, #1]
 8005b70:	2b2a      	cmp	r3, #42	; 0x2a
 8005b72:	d134      	bne.n	8005bde <_svfiprintf_r+0x186>
 8005b74:	9b03      	ldr	r3, [sp, #12]
 8005b76:	3402      	adds	r4, #2
 8005b78:	1d1a      	adds	r2, r3, #4
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	9203      	str	r2, [sp, #12]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	bfb8      	it	lt
 8005b82:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b86:	9305      	str	r3, [sp, #20]
 8005b88:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005c44 <_svfiprintf_r+0x1ec>
 8005b8c:	2203      	movs	r2, #3
 8005b8e:	4650      	mov	r0, sl
 8005b90:	7821      	ldrb	r1, [r4, #0]
 8005b92:	f7fd fc50 	bl	8003436 <memchr>
 8005b96:	b138      	cbz	r0, 8005ba8 <_svfiprintf_r+0x150>
 8005b98:	2240      	movs	r2, #64	; 0x40
 8005b9a:	9b04      	ldr	r3, [sp, #16]
 8005b9c:	eba0 000a 	sub.w	r0, r0, sl
 8005ba0:	4082      	lsls	r2, r0
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	3401      	adds	r4, #1
 8005ba6:	9304      	str	r3, [sp, #16]
 8005ba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bac:	2206      	movs	r2, #6
 8005bae:	4826      	ldr	r0, [pc, #152]	; (8005c48 <_svfiprintf_r+0x1f0>)
 8005bb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005bb4:	f7fd fc3f 	bl	8003436 <memchr>
 8005bb8:	2800      	cmp	r0, #0
 8005bba:	d038      	beq.n	8005c2e <_svfiprintf_r+0x1d6>
 8005bbc:	4b23      	ldr	r3, [pc, #140]	; (8005c4c <_svfiprintf_r+0x1f4>)
 8005bbe:	bb1b      	cbnz	r3, 8005c08 <_svfiprintf_r+0x1b0>
 8005bc0:	9b03      	ldr	r3, [sp, #12]
 8005bc2:	3307      	adds	r3, #7
 8005bc4:	f023 0307 	bic.w	r3, r3, #7
 8005bc8:	3308      	adds	r3, #8
 8005bca:	9303      	str	r3, [sp, #12]
 8005bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bce:	4433      	add	r3, r6
 8005bd0:	9309      	str	r3, [sp, #36]	; 0x24
 8005bd2:	e768      	b.n	8005aa6 <_svfiprintf_r+0x4e>
 8005bd4:	460c      	mov	r4, r1
 8005bd6:	2001      	movs	r0, #1
 8005bd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bdc:	e7a6      	b.n	8005b2c <_svfiprintf_r+0xd4>
 8005bde:	2300      	movs	r3, #0
 8005be0:	f04f 0c0a 	mov.w	ip, #10
 8005be4:	4619      	mov	r1, r3
 8005be6:	3401      	adds	r4, #1
 8005be8:	9305      	str	r3, [sp, #20]
 8005bea:	4620      	mov	r0, r4
 8005bec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bf0:	3a30      	subs	r2, #48	; 0x30
 8005bf2:	2a09      	cmp	r2, #9
 8005bf4:	d903      	bls.n	8005bfe <_svfiprintf_r+0x1a6>
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d0c6      	beq.n	8005b88 <_svfiprintf_r+0x130>
 8005bfa:	9105      	str	r1, [sp, #20]
 8005bfc:	e7c4      	b.n	8005b88 <_svfiprintf_r+0x130>
 8005bfe:	4604      	mov	r4, r0
 8005c00:	2301      	movs	r3, #1
 8005c02:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c06:	e7f0      	b.n	8005bea <_svfiprintf_r+0x192>
 8005c08:	ab03      	add	r3, sp, #12
 8005c0a:	9300      	str	r3, [sp, #0]
 8005c0c:	462a      	mov	r2, r5
 8005c0e:	4638      	mov	r0, r7
 8005c10:	4b0f      	ldr	r3, [pc, #60]	; (8005c50 <_svfiprintf_r+0x1f8>)
 8005c12:	a904      	add	r1, sp, #16
 8005c14:	f7fc fb98 	bl	8002348 <_printf_float>
 8005c18:	1c42      	adds	r2, r0, #1
 8005c1a:	4606      	mov	r6, r0
 8005c1c:	d1d6      	bne.n	8005bcc <_svfiprintf_r+0x174>
 8005c1e:	89ab      	ldrh	r3, [r5, #12]
 8005c20:	065b      	lsls	r3, r3, #25
 8005c22:	f53f af2d 	bmi.w	8005a80 <_svfiprintf_r+0x28>
 8005c26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c28:	b01d      	add	sp, #116	; 0x74
 8005c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c2e:	ab03      	add	r3, sp, #12
 8005c30:	9300      	str	r3, [sp, #0]
 8005c32:	462a      	mov	r2, r5
 8005c34:	4638      	mov	r0, r7
 8005c36:	4b06      	ldr	r3, [pc, #24]	; (8005c50 <_svfiprintf_r+0x1f8>)
 8005c38:	a904      	add	r1, sp, #16
 8005c3a:	f7fc fe25 	bl	8002888 <_printf_i>
 8005c3e:	e7eb      	b.n	8005c18 <_svfiprintf_r+0x1c0>
 8005c40:	08006e19 	.word	0x08006e19
 8005c44:	08006e1f 	.word	0x08006e1f
 8005c48:	08006e23 	.word	0x08006e23
 8005c4c:	08002349 	.word	0x08002349
 8005c50:	080059a5 	.word	0x080059a5

08005c54 <__sfputc_r>:
 8005c54:	6893      	ldr	r3, [r2, #8]
 8005c56:	b410      	push	{r4}
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	6093      	str	r3, [r2, #8]
 8005c5e:	da07      	bge.n	8005c70 <__sfputc_r+0x1c>
 8005c60:	6994      	ldr	r4, [r2, #24]
 8005c62:	42a3      	cmp	r3, r4
 8005c64:	db01      	blt.n	8005c6a <__sfputc_r+0x16>
 8005c66:	290a      	cmp	r1, #10
 8005c68:	d102      	bne.n	8005c70 <__sfputc_r+0x1c>
 8005c6a:	bc10      	pop	{r4}
 8005c6c:	f7fd bacf 	b.w	800320e <__swbuf_r>
 8005c70:	6813      	ldr	r3, [r2, #0]
 8005c72:	1c58      	adds	r0, r3, #1
 8005c74:	6010      	str	r0, [r2, #0]
 8005c76:	7019      	strb	r1, [r3, #0]
 8005c78:	4608      	mov	r0, r1
 8005c7a:	bc10      	pop	{r4}
 8005c7c:	4770      	bx	lr

08005c7e <__sfputs_r>:
 8005c7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c80:	4606      	mov	r6, r0
 8005c82:	460f      	mov	r7, r1
 8005c84:	4614      	mov	r4, r2
 8005c86:	18d5      	adds	r5, r2, r3
 8005c88:	42ac      	cmp	r4, r5
 8005c8a:	d101      	bne.n	8005c90 <__sfputs_r+0x12>
 8005c8c:	2000      	movs	r0, #0
 8005c8e:	e007      	b.n	8005ca0 <__sfputs_r+0x22>
 8005c90:	463a      	mov	r2, r7
 8005c92:	4630      	mov	r0, r6
 8005c94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c98:	f7ff ffdc 	bl	8005c54 <__sfputc_r>
 8005c9c:	1c43      	adds	r3, r0, #1
 8005c9e:	d1f3      	bne.n	8005c88 <__sfputs_r+0xa>
 8005ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ca4 <_vfiprintf_r>:
 8005ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca8:	460d      	mov	r5, r1
 8005caa:	4614      	mov	r4, r2
 8005cac:	4698      	mov	r8, r3
 8005cae:	4606      	mov	r6, r0
 8005cb0:	b09d      	sub	sp, #116	; 0x74
 8005cb2:	b118      	cbz	r0, 8005cbc <_vfiprintf_r+0x18>
 8005cb4:	6a03      	ldr	r3, [r0, #32]
 8005cb6:	b90b      	cbnz	r3, 8005cbc <_vfiprintf_r+0x18>
 8005cb8:	f7fd f9a2 	bl	8003000 <__sinit>
 8005cbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005cbe:	07d9      	lsls	r1, r3, #31
 8005cc0:	d405      	bmi.n	8005cce <_vfiprintf_r+0x2a>
 8005cc2:	89ab      	ldrh	r3, [r5, #12]
 8005cc4:	059a      	lsls	r2, r3, #22
 8005cc6:	d402      	bmi.n	8005cce <_vfiprintf_r+0x2a>
 8005cc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005cca:	f7fd fbb2 	bl	8003432 <__retarget_lock_acquire_recursive>
 8005cce:	89ab      	ldrh	r3, [r5, #12]
 8005cd0:	071b      	lsls	r3, r3, #28
 8005cd2:	d501      	bpl.n	8005cd8 <_vfiprintf_r+0x34>
 8005cd4:	692b      	ldr	r3, [r5, #16]
 8005cd6:	b99b      	cbnz	r3, 8005d00 <_vfiprintf_r+0x5c>
 8005cd8:	4629      	mov	r1, r5
 8005cda:	4630      	mov	r0, r6
 8005cdc:	f7fd fad4 	bl	8003288 <__swsetup_r>
 8005ce0:	b170      	cbz	r0, 8005d00 <_vfiprintf_r+0x5c>
 8005ce2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ce4:	07dc      	lsls	r4, r3, #31
 8005ce6:	d504      	bpl.n	8005cf2 <_vfiprintf_r+0x4e>
 8005ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cec:	b01d      	add	sp, #116	; 0x74
 8005cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cf2:	89ab      	ldrh	r3, [r5, #12]
 8005cf4:	0598      	lsls	r0, r3, #22
 8005cf6:	d4f7      	bmi.n	8005ce8 <_vfiprintf_r+0x44>
 8005cf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005cfa:	f7fd fb9b 	bl	8003434 <__retarget_lock_release_recursive>
 8005cfe:	e7f3      	b.n	8005ce8 <_vfiprintf_r+0x44>
 8005d00:	2300      	movs	r3, #0
 8005d02:	9309      	str	r3, [sp, #36]	; 0x24
 8005d04:	2320      	movs	r3, #32
 8005d06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d0a:	2330      	movs	r3, #48	; 0x30
 8005d0c:	f04f 0901 	mov.w	r9, #1
 8005d10:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d14:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8005ec4 <_vfiprintf_r+0x220>
 8005d18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d1c:	4623      	mov	r3, r4
 8005d1e:	469a      	mov	sl, r3
 8005d20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d24:	b10a      	cbz	r2, 8005d2a <_vfiprintf_r+0x86>
 8005d26:	2a25      	cmp	r2, #37	; 0x25
 8005d28:	d1f9      	bne.n	8005d1e <_vfiprintf_r+0x7a>
 8005d2a:	ebba 0b04 	subs.w	fp, sl, r4
 8005d2e:	d00b      	beq.n	8005d48 <_vfiprintf_r+0xa4>
 8005d30:	465b      	mov	r3, fp
 8005d32:	4622      	mov	r2, r4
 8005d34:	4629      	mov	r1, r5
 8005d36:	4630      	mov	r0, r6
 8005d38:	f7ff ffa1 	bl	8005c7e <__sfputs_r>
 8005d3c:	3001      	adds	r0, #1
 8005d3e:	f000 80a9 	beq.w	8005e94 <_vfiprintf_r+0x1f0>
 8005d42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d44:	445a      	add	r2, fp
 8005d46:	9209      	str	r2, [sp, #36]	; 0x24
 8005d48:	f89a 3000 	ldrb.w	r3, [sl]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f000 80a1 	beq.w	8005e94 <_vfiprintf_r+0x1f0>
 8005d52:	2300      	movs	r3, #0
 8005d54:	f04f 32ff 	mov.w	r2, #4294967295
 8005d58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d5c:	f10a 0a01 	add.w	sl, sl, #1
 8005d60:	9304      	str	r3, [sp, #16]
 8005d62:	9307      	str	r3, [sp, #28]
 8005d64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d68:	931a      	str	r3, [sp, #104]	; 0x68
 8005d6a:	4654      	mov	r4, sl
 8005d6c:	2205      	movs	r2, #5
 8005d6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d72:	4854      	ldr	r0, [pc, #336]	; (8005ec4 <_vfiprintf_r+0x220>)
 8005d74:	f7fd fb5f 	bl	8003436 <memchr>
 8005d78:	9a04      	ldr	r2, [sp, #16]
 8005d7a:	b9d8      	cbnz	r0, 8005db4 <_vfiprintf_r+0x110>
 8005d7c:	06d1      	lsls	r1, r2, #27
 8005d7e:	bf44      	itt	mi
 8005d80:	2320      	movmi	r3, #32
 8005d82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d86:	0713      	lsls	r3, r2, #28
 8005d88:	bf44      	itt	mi
 8005d8a:	232b      	movmi	r3, #43	; 0x2b
 8005d8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d90:	f89a 3000 	ldrb.w	r3, [sl]
 8005d94:	2b2a      	cmp	r3, #42	; 0x2a
 8005d96:	d015      	beq.n	8005dc4 <_vfiprintf_r+0x120>
 8005d98:	4654      	mov	r4, sl
 8005d9a:	2000      	movs	r0, #0
 8005d9c:	f04f 0c0a 	mov.w	ip, #10
 8005da0:	9a07      	ldr	r2, [sp, #28]
 8005da2:	4621      	mov	r1, r4
 8005da4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005da8:	3b30      	subs	r3, #48	; 0x30
 8005daa:	2b09      	cmp	r3, #9
 8005dac:	d94d      	bls.n	8005e4a <_vfiprintf_r+0x1a6>
 8005dae:	b1b0      	cbz	r0, 8005dde <_vfiprintf_r+0x13a>
 8005db0:	9207      	str	r2, [sp, #28]
 8005db2:	e014      	b.n	8005dde <_vfiprintf_r+0x13a>
 8005db4:	eba0 0308 	sub.w	r3, r0, r8
 8005db8:	fa09 f303 	lsl.w	r3, r9, r3
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	46a2      	mov	sl, r4
 8005dc0:	9304      	str	r3, [sp, #16]
 8005dc2:	e7d2      	b.n	8005d6a <_vfiprintf_r+0xc6>
 8005dc4:	9b03      	ldr	r3, [sp, #12]
 8005dc6:	1d19      	adds	r1, r3, #4
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	9103      	str	r1, [sp, #12]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	bfbb      	ittet	lt
 8005dd0:	425b      	neglt	r3, r3
 8005dd2:	f042 0202 	orrlt.w	r2, r2, #2
 8005dd6:	9307      	strge	r3, [sp, #28]
 8005dd8:	9307      	strlt	r3, [sp, #28]
 8005dda:	bfb8      	it	lt
 8005ddc:	9204      	strlt	r2, [sp, #16]
 8005dde:	7823      	ldrb	r3, [r4, #0]
 8005de0:	2b2e      	cmp	r3, #46	; 0x2e
 8005de2:	d10c      	bne.n	8005dfe <_vfiprintf_r+0x15a>
 8005de4:	7863      	ldrb	r3, [r4, #1]
 8005de6:	2b2a      	cmp	r3, #42	; 0x2a
 8005de8:	d134      	bne.n	8005e54 <_vfiprintf_r+0x1b0>
 8005dea:	9b03      	ldr	r3, [sp, #12]
 8005dec:	3402      	adds	r4, #2
 8005dee:	1d1a      	adds	r2, r3, #4
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	9203      	str	r2, [sp, #12]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	bfb8      	it	lt
 8005df8:	f04f 33ff 	movlt.w	r3, #4294967295
 8005dfc:	9305      	str	r3, [sp, #20]
 8005dfe:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005ec8 <_vfiprintf_r+0x224>
 8005e02:	2203      	movs	r2, #3
 8005e04:	4650      	mov	r0, sl
 8005e06:	7821      	ldrb	r1, [r4, #0]
 8005e08:	f7fd fb15 	bl	8003436 <memchr>
 8005e0c:	b138      	cbz	r0, 8005e1e <_vfiprintf_r+0x17a>
 8005e0e:	2240      	movs	r2, #64	; 0x40
 8005e10:	9b04      	ldr	r3, [sp, #16]
 8005e12:	eba0 000a 	sub.w	r0, r0, sl
 8005e16:	4082      	lsls	r2, r0
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	3401      	adds	r4, #1
 8005e1c:	9304      	str	r3, [sp, #16]
 8005e1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e22:	2206      	movs	r2, #6
 8005e24:	4829      	ldr	r0, [pc, #164]	; (8005ecc <_vfiprintf_r+0x228>)
 8005e26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e2a:	f7fd fb04 	bl	8003436 <memchr>
 8005e2e:	2800      	cmp	r0, #0
 8005e30:	d03f      	beq.n	8005eb2 <_vfiprintf_r+0x20e>
 8005e32:	4b27      	ldr	r3, [pc, #156]	; (8005ed0 <_vfiprintf_r+0x22c>)
 8005e34:	bb1b      	cbnz	r3, 8005e7e <_vfiprintf_r+0x1da>
 8005e36:	9b03      	ldr	r3, [sp, #12]
 8005e38:	3307      	adds	r3, #7
 8005e3a:	f023 0307 	bic.w	r3, r3, #7
 8005e3e:	3308      	adds	r3, #8
 8005e40:	9303      	str	r3, [sp, #12]
 8005e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e44:	443b      	add	r3, r7
 8005e46:	9309      	str	r3, [sp, #36]	; 0x24
 8005e48:	e768      	b.n	8005d1c <_vfiprintf_r+0x78>
 8005e4a:	460c      	mov	r4, r1
 8005e4c:	2001      	movs	r0, #1
 8005e4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e52:	e7a6      	b.n	8005da2 <_vfiprintf_r+0xfe>
 8005e54:	2300      	movs	r3, #0
 8005e56:	f04f 0c0a 	mov.w	ip, #10
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	3401      	adds	r4, #1
 8005e5e:	9305      	str	r3, [sp, #20]
 8005e60:	4620      	mov	r0, r4
 8005e62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e66:	3a30      	subs	r2, #48	; 0x30
 8005e68:	2a09      	cmp	r2, #9
 8005e6a:	d903      	bls.n	8005e74 <_vfiprintf_r+0x1d0>
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d0c6      	beq.n	8005dfe <_vfiprintf_r+0x15a>
 8005e70:	9105      	str	r1, [sp, #20]
 8005e72:	e7c4      	b.n	8005dfe <_vfiprintf_r+0x15a>
 8005e74:	4604      	mov	r4, r0
 8005e76:	2301      	movs	r3, #1
 8005e78:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e7c:	e7f0      	b.n	8005e60 <_vfiprintf_r+0x1bc>
 8005e7e:	ab03      	add	r3, sp, #12
 8005e80:	9300      	str	r3, [sp, #0]
 8005e82:	462a      	mov	r2, r5
 8005e84:	4630      	mov	r0, r6
 8005e86:	4b13      	ldr	r3, [pc, #76]	; (8005ed4 <_vfiprintf_r+0x230>)
 8005e88:	a904      	add	r1, sp, #16
 8005e8a:	f7fc fa5d 	bl	8002348 <_printf_float>
 8005e8e:	4607      	mov	r7, r0
 8005e90:	1c78      	adds	r0, r7, #1
 8005e92:	d1d6      	bne.n	8005e42 <_vfiprintf_r+0x19e>
 8005e94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e96:	07d9      	lsls	r1, r3, #31
 8005e98:	d405      	bmi.n	8005ea6 <_vfiprintf_r+0x202>
 8005e9a:	89ab      	ldrh	r3, [r5, #12]
 8005e9c:	059a      	lsls	r2, r3, #22
 8005e9e:	d402      	bmi.n	8005ea6 <_vfiprintf_r+0x202>
 8005ea0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ea2:	f7fd fac7 	bl	8003434 <__retarget_lock_release_recursive>
 8005ea6:	89ab      	ldrh	r3, [r5, #12]
 8005ea8:	065b      	lsls	r3, r3, #25
 8005eaa:	f53f af1d 	bmi.w	8005ce8 <_vfiprintf_r+0x44>
 8005eae:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005eb0:	e71c      	b.n	8005cec <_vfiprintf_r+0x48>
 8005eb2:	ab03      	add	r3, sp, #12
 8005eb4:	9300      	str	r3, [sp, #0]
 8005eb6:	462a      	mov	r2, r5
 8005eb8:	4630      	mov	r0, r6
 8005eba:	4b06      	ldr	r3, [pc, #24]	; (8005ed4 <_vfiprintf_r+0x230>)
 8005ebc:	a904      	add	r1, sp, #16
 8005ebe:	f7fc fce3 	bl	8002888 <_printf_i>
 8005ec2:	e7e4      	b.n	8005e8e <_vfiprintf_r+0x1ea>
 8005ec4:	08006e19 	.word	0x08006e19
 8005ec8:	08006e1f 	.word	0x08006e1f
 8005ecc:	08006e23 	.word	0x08006e23
 8005ed0:	08002349 	.word	0x08002349
 8005ed4:	08005c7f 	.word	0x08005c7f

08005ed8 <__sflush_r>:
 8005ed8:	898a      	ldrh	r2, [r1, #12]
 8005eda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005edc:	4605      	mov	r5, r0
 8005ede:	0710      	lsls	r0, r2, #28
 8005ee0:	460c      	mov	r4, r1
 8005ee2:	d457      	bmi.n	8005f94 <__sflush_r+0xbc>
 8005ee4:	684b      	ldr	r3, [r1, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	dc04      	bgt.n	8005ef4 <__sflush_r+0x1c>
 8005eea:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	dc01      	bgt.n	8005ef4 <__sflush_r+0x1c>
 8005ef0:	2000      	movs	r0, #0
 8005ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ef4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ef6:	2e00      	cmp	r6, #0
 8005ef8:	d0fa      	beq.n	8005ef0 <__sflush_r+0x18>
 8005efa:	2300      	movs	r3, #0
 8005efc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005f00:	682f      	ldr	r7, [r5, #0]
 8005f02:	6a21      	ldr	r1, [r4, #32]
 8005f04:	602b      	str	r3, [r5, #0]
 8005f06:	d032      	beq.n	8005f6e <__sflush_r+0x96>
 8005f08:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005f0a:	89a3      	ldrh	r3, [r4, #12]
 8005f0c:	075a      	lsls	r2, r3, #29
 8005f0e:	d505      	bpl.n	8005f1c <__sflush_r+0x44>
 8005f10:	6863      	ldr	r3, [r4, #4]
 8005f12:	1ac0      	subs	r0, r0, r3
 8005f14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f16:	b10b      	cbz	r3, 8005f1c <__sflush_r+0x44>
 8005f18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f1a:	1ac0      	subs	r0, r0, r3
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	4602      	mov	r2, r0
 8005f20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f22:	4628      	mov	r0, r5
 8005f24:	6a21      	ldr	r1, [r4, #32]
 8005f26:	47b0      	blx	r6
 8005f28:	1c43      	adds	r3, r0, #1
 8005f2a:	89a3      	ldrh	r3, [r4, #12]
 8005f2c:	d106      	bne.n	8005f3c <__sflush_r+0x64>
 8005f2e:	6829      	ldr	r1, [r5, #0]
 8005f30:	291d      	cmp	r1, #29
 8005f32:	d82b      	bhi.n	8005f8c <__sflush_r+0xb4>
 8005f34:	4a28      	ldr	r2, [pc, #160]	; (8005fd8 <__sflush_r+0x100>)
 8005f36:	410a      	asrs	r2, r1
 8005f38:	07d6      	lsls	r6, r2, #31
 8005f3a:	d427      	bmi.n	8005f8c <__sflush_r+0xb4>
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	6062      	str	r2, [r4, #4]
 8005f40:	6922      	ldr	r2, [r4, #16]
 8005f42:	04d9      	lsls	r1, r3, #19
 8005f44:	6022      	str	r2, [r4, #0]
 8005f46:	d504      	bpl.n	8005f52 <__sflush_r+0x7a>
 8005f48:	1c42      	adds	r2, r0, #1
 8005f4a:	d101      	bne.n	8005f50 <__sflush_r+0x78>
 8005f4c:	682b      	ldr	r3, [r5, #0]
 8005f4e:	b903      	cbnz	r3, 8005f52 <__sflush_r+0x7a>
 8005f50:	6560      	str	r0, [r4, #84]	; 0x54
 8005f52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f54:	602f      	str	r7, [r5, #0]
 8005f56:	2900      	cmp	r1, #0
 8005f58:	d0ca      	beq.n	8005ef0 <__sflush_r+0x18>
 8005f5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f5e:	4299      	cmp	r1, r3
 8005f60:	d002      	beq.n	8005f68 <__sflush_r+0x90>
 8005f62:	4628      	mov	r0, r5
 8005f64:	f7fe f8e8 	bl	8004138 <_free_r>
 8005f68:	2000      	movs	r0, #0
 8005f6a:	6360      	str	r0, [r4, #52]	; 0x34
 8005f6c:	e7c1      	b.n	8005ef2 <__sflush_r+0x1a>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	4628      	mov	r0, r5
 8005f72:	47b0      	blx	r6
 8005f74:	1c41      	adds	r1, r0, #1
 8005f76:	d1c8      	bne.n	8005f0a <__sflush_r+0x32>
 8005f78:	682b      	ldr	r3, [r5, #0]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d0c5      	beq.n	8005f0a <__sflush_r+0x32>
 8005f7e:	2b1d      	cmp	r3, #29
 8005f80:	d001      	beq.n	8005f86 <__sflush_r+0xae>
 8005f82:	2b16      	cmp	r3, #22
 8005f84:	d101      	bne.n	8005f8a <__sflush_r+0xb2>
 8005f86:	602f      	str	r7, [r5, #0]
 8005f88:	e7b2      	b.n	8005ef0 <__sflush_r+0x18>
 8005f8a:	89a3      	ldrh	r3, [r4, #12]
 8005f8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f90:	81a3      	strh	r3, [r4, #12]
 8005f92:	e7ae      	b.n	8005ef2 <__sflush_r+0x1a>
 8005f94:	690f      	ldr	r7, [r1, #16]
 8005f96:	2f00      	cmp	r7, #0
 8005f98:	d0aa      	beq.n	8005ef0 <__sflush_r+0x18>
 8005f9a:	0793      	lsls	r3, r2, #30
 8005f9c:	bf18      	it	ne
 8005f9e:	2300      	movne	r3, #0
 8005fa0:	680e      	ldr	r6, [r1, #0]
 8005fa2:	bf08      	it	eq
 8005fa4:	694b      	ldreq	r3, [r1, #20]
 8005fa6:	1bf6      	subs	r6, r6, r7
 8005fa8:	600f      	str	r7, [r1, #0]
 8005faa:	608b      	str	r3, [r1, #8]
 8005fac:	2e00      	cmp	r6, #0
 8005fae:	dd9f      	ble.n	8005ef0 <__sflush_r+0x18>
 8005fb0:	4633      	mov	r3, r6
 8005fb2:	463a      	mov	r2, r7
 8005fb4:	4628      	mov	r0, r5
 8005fb6:	6a21      	ldr	r1, [r4, #32]
 8005fb8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005fbc:	47e0      	blx	ip
 8005fbe:	2800      	cmp	r0, #0
 8005fc0:	dc06      	bgt.n	8005fd0 <__sflush_r+0xf8>
 8005fc2:	89a3      	ldrh	r3, [r4, #12]
 8005fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fcc:	81a3      	strh	r3, [r4, #12]
 8005fce:	e790      	b.n	8005ef2 <__sflush_r+0x1a>
 8005fd0:	4407      	add	r7, r0
 8005fd2:	1a36      	subs	r6, r6, r0
 8005fd4:	e7ea      	b.n	8005fac <__sflush_r+0xd4>
 8005fd6:	bf00      	nop
 8005fd8:	dfbffffe 	.word	0xdfbffffe

08005fdc <_fflush_r>:
 8005fdc:	b538      	push	{r3, r4, r5, lr}
 8005fde:	690b      	ldr	r3, [r1, #16]
 8005fe0:	4605      	mov	r5, r0
 8005fe2:	460c      	mov	r4, r1
 8005fe4:	b913      	cbnz	r3, 8005fec <_fflush_r+0x10>
 8005fe6:	2500      	movs	r5, #0
 8005fe8:	4628      	mov	r0, r5
 8005fea:	bd38      	pop	{r3, r4, r5, pc}
 8005fec:	b118      	cbz	r0, 8005ff6 <_fflush_r+0x1a>
 8005fee:	6a03      	ldr	r3, [r0, #32]
 8005ff0:	b90b      	cbnz	r3, 8005ff6 <_fflush_r+0x1a>
 8005ff2:	f7fd f805 	bl	8003000 <__sinit>
 8005ff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d0f3      	beq.n	8005fe6 <_fflush_r+0xa>
 8005ffe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006000:	07d0      	lsls	r0, r2, #31
 8006002:	d404      	bmi.n	800600e <_fflush_r+0x32>
 8006004:	0599      	lsls	r1, r3, #22
 8006006:	d402      	bmi.n	800600e <_fflush_r+0x32>
 8006008:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800600a:	f7fd fa12 	bl	8003432 <__retarget_lock_acquire_recursive>
 800600e:	4628      	mov	r0, r5
 8006010:	4621      	mov	r1, r4
 8006012:	f7ff ff61 	bl	8005ed8 <__sflush_r>
 8006016:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006018:	4605      	mov	r5, r0
 800601a:	07da      	lsls	r2, r3, #31
 800601c:	d4e4      	bmi.n	8005fe8 <_fflush_r+0xc>
 800601e:	89a3      	ldrh	r3, [r4, #12]
 8006020:	059b      	lsls	r3, r3, #22
 8006022:	d4e1      	bmi.n	8005fe8 <_fflush_r+0xc>
 8006024:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006026:	f7fd fa05 	bl	8003434 <__retarget_lock_release_recursive>
 800602a:	e7dd      	b.n	8005fe8 <_fflush_r+0xc>

0800602c <__swhatbuf_r>:
 800602c:	b570      	push	{r4, r5, r6, lr}
 800602e:	460c      	mov	r4, r1
 8006030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006034:	4615      	mov	r5, r2
 8006036:	2900      	cmp	r1, #0
 8006038:	461e      	mov	r6, r3
 800603a:	b096      	sub	sp, #88	; 0x58
 800603c:	da0c      	bge.n	8006058 <__swhatbuf_r+0x2c>
 800603e:	89a3      	ldrh	r3, [r4, #12]
 8006040:	2100      	movs	r1, #0
 8006042:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006046:	bf0c      	ite	eq
 8006048:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800604c:	2340      	movne	r3, #64	; 0x40
 800604e:	2000      	movs	r0, #0
 8006050:	6031      	str	r1, [r6, #0]
 8006052:	602b      	str	r3, [r5, #0]
 8006054:	b016      	add	sp, #88	; 0x58
 8006056:	bd70      	pop	{r4, r5, r6, pc}
 8006058:	466a      	mov	r2, sp
 800605a:	f000 f875 	bl	8006148 <_fstat_r>
 800605e:	2800      	cmp	r0, #0
 8006060:	dbed      	blt.n	800603e <__swhatbuf_r+0x12>
 8006062:	9901      	ldr	r1, [sp, #4]
 8006064:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006068:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800606c:	4259      	negs	r1, r3
 800606e:	4159      	adcs	r1, r3
 8006070:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006074:	e7eb      	b.n	800604e <__swhatbuf_r+0x22>

08006076 <__smakebuf_r>:
 8006076:	898b      	ldrh	r3, [r1, #12]
 8006078:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800607a:	079d      	lsls	r5, r3, #30
 800607c:	4606      	mov	r6, r0
 800607e:	460c      	mov	r4, r1
 8006080:	d507      	bpl.n	8006092 <__smakebuf_r+0x1c>
 8006082:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006086:	6023      	str	r3, [r4, #0]
 8006088:	6123      	str	r3, [r4, #16]
 800608a:	2301      	movs	r3, #1
 800608c:	6163      	str	r3, [r4, #20]
 800608e:	b002      	add	sp, #8
 8006090:	bd70      	pop	{r4, r5, r6, pc}
 8006092:	466a      	mov	r2, sp
 8006094:	ab01      	add	r3, sp, #4
 8006096:	f7ff ffc9 	bl	800602c <__swhatbuf_r>
 800609a:	9900      	ldr	r1, [sp, #0]
 800609c:	4605      	mov	r5, r0
 800609e:	4630      	mov	r0, r6
 80060a0:	f7fe f8ba 	bl	8004218 <_malloc_r>
 80060a4:	b948      	cbnz	r0, 80060ba <__smakebuf_r+0x44>
 80060a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060aa:	059a      	lsls	r2, r3, #22
 80060ac:	d4ef      	bmi.n	800608e <__smakebuf_r+0x18>
 80060ae:	f023 0303 	bic.w	r3, r3, #3
 80060b2:	f043 0302 	orr.w	r3, r3, #2
 80060b6:	81a3      	strh	r3, [r4, #12]
 80060b8:	e7e3      	b.n	8006082 <__smakebuf_r+0xc>
 80060ba:	89a3      	ldrh	r3, [r4, #12]
 80060bc:	6020      	str	r0, [r4, #0]
 80060be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060c2:	81a3      	strh	r3, [r4, #12]
 80060c4:	9b00      	ldr	r3, [sp, #0]
 80060c6:	6120      	str	r0, [r4, #16]
 80060c8:	6163      	str	r3, [r4, #20]
 80060ca:	9b01      	ldr	r3, [sp, #4]
 80060cc:	b15b      	cbz	r3, 80060e6 <__smakebuf_r+0x70>
 80060ce:	4630      	mov	r0, r6
 80060d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060d4:	f000 f84a 	bl	800616c <_isatty_r>
 80060d8:	b128      	cbz	r0, 80060e6 <__smakebuf_r+0x70>
 80060da:	89a3      	ldrh	r3, [r4, #12]
 80060dc:	f023 0303 	bic.w	r3, r3, #3
 80060e0:	f043 0301 	orr.w	r3, r3, #1
 80060e4:	81a3      	strh	r3, [r4, #12]
 80060e6:	89a3      	ldrh	r3, [r4, #12]
 80060e8:	431d      	orrs	r5, r3
 80060ea:	81a5      	strh	r5, [r4, #12]
 80060ec:	e7cf      	b.n	800608e <__smakebuf_r+0x18>

080060ee <memmove>:
 80060ee:	4288      	cmp	r0, r1
 80060f0:	b510      	push	{r4, lr}
 80060f2:	eb01 0402 	add.w	r4, r1, r2
 80060f6:	d902      	bls.n	80060fe <memmove+0x10>
 80060f8:	4284      	cmp	r4, r0
 80060fa:	4623      	mov	r3, r4
 80060fc:	d807      	bhi.n	800610e <memmove+0x20>
 80060fe:	1e43      	subs	r3, r0, #1
 8006100:	42a1      	cmp	r1, r4
 8006102:	d008      	beq.n	8006116 <memmove+0x28>
 8006104:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006108:	f803 2f01 	strb.w	r2, [r3, #1]!
 800610c:	e7f8      	b.n	8006100 <memmove+0x12>
 800610e:	4601      	mov	r1, r0
 8006110:	4402      	add	r2, r0
 8006112:	428a      	cmp	r2, r1
 8006114:	d100      	bne.n	8006118 <memmove+0x2a>
 8006116:	bd10      	pop	{r4, pc}
 8006118:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800611c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006120:	e7f7      	b.n	8006112 <memmove+0x24>

08006122 <strncmp>:
 8006122:	b510      	push	{r4, lr}
 8006124:	b16a      	cbz	r2, 8006142 <strncmp+0x20>
 8006126:	3901      	subs	r1, #1
 8006128:	1884      	adds	r4, r0, r2
 800612a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800612e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006132:	429a      	cmp	r2, r3
 8006134:	d103      	bne.n	800613e <strncmp+0x1c>
 8006136:	42a0      	cmp	r0, r4
 8006138:	d001      	beq.n	800613e <strncmp+0x1c>
 800613a:	2a00      	cmp	r2, #0
 800613c:	d1f5      	bne.n	800612a <strncmp+0x8>
 800613e:	1ad0      	subs	r0, r2, r3
 8006140:	bd10      	pop	{r4, pc}
 8006142:	4610      	mov	r0, r2
 8006144:	e7fc      	b.n	8006140 <strncmp+0x1e>
	...

08006148 <_fstat_r>:
 8006148:	b538      	push	{r3, r4, r5, lr}
 800614a:	2300      	movs	r3, #0
 800614c:	4d06      	ldr	r5, [pc, #24]	; (8006168 <_fstat_r+0x20>)
 800614e:	4604      	mov	r4, r0
 8006150:	4608      	mov	r0, r1
 8006152:	4611      	mov	r1, r2
 8006154:	602b      	str	r3, [r5, #0]
 8006156:	f7fa fe7d 	bl	8000e54 <_fstat>
 800615a:	1c43      	adds	r3, r0, #1
 800615c:	d102      	bne.n	8006164 <_fstat_r+0x1c>
 800615e:	682b      	ldr	r3, [r5, #0]
 8006160:	b103      	cbz	r3, 8006164 <_fstat_r+0x1c>
 8006162:	6023      	str	r3, [r4, #0]
 8006164:	bd38      	pop	{r3, r4, r5, pc}
 8006166:	bf00      	nop
 8006168:	2000037c 	.word	0x2000037c

0800616c <_isatty_r>:
 800616c:	b538      	push	{r3, r4, r5, lr}
 800616e:	2300      	movs	r3, #0
 8006170:	4d05      	ldr	r5, [pc, #20]	; (8006188 <_isatty_r+0x1c>)
 8006172:	4604      	mov	r4, r0
 8006174:	4608      	mov	r0, r1
 8006176:	602b      	str	r3, [r5, #0]
 8006178:	f7fa fe7b 	bl	8000e72 <_isatty>
 800617c:	1c43      	adds	r3, r0, #1
 800617e:	d102      	bne.n	8006186 <_isatty_r+0x1a>
 8006180:	682b      	ldr	r3, [r5, #0]
 8006182:	b103      	cbz	r3, 8006186 <_isatty_r+0x1a>
 8006184:	6023      	str	r3, [r4, #0]
 8006186:	bd38      	pop	{r3, r4, r5, pc}
 8006188:	2000037c 	.word	0x2000037c

0800618c <_sbrk_r>:
 800618c:	b538      	push	{r3, r4, r5, lr}
 800618e:	2300      	movs	r3, #0
 8006190:	4d05      	ldr	r5, [pc, #20]	; (80061a8 <_sbrk_r+0x1c>)
 8006192:	4604      	mov	r4, r0
 8006194:	4608      	mov	r0, r1
 8006196:	602b      	str	r3, [r5, #0]
 8006198:	f7fa fe82 	bl	8000ea0 <_sbrk>
 800619c:	1c43      	adds	r3, r0, #1
 800619e:	d102      	bne.n	80061a6 <_sbrk_r+0x1a>
 80061a0:	682b      	ldr	r3, [r5, #0]
 80061a2:	b103      	cbz	r3, 80061a6 <_sbrk_r+0x1a>
 80061a4:	6023      	str	r3, [r4, #0]
 80061a6:	bd38      	pop	{r3, r4, r5, pc}
 80061a8:	2000037c 	.word	0x2000037c

080061ac <memcpy>:
 80061ac:	440a      	add	r2, r1
 80061ae:	4291      	cmp	r1, r2
 80061b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80061b4:	d100      	bne.n	80061b8 <memcpy+0xc>
 80061b6:	4770      	bx	lr
 80061b8:	b510      	push	{r4, lr}
 80061ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061be:	4291      	cmp	r1, r2
 80061c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061c4:	d1f9      	bne.n	80061ba <memcpy+0xe>
 80061c6:	bd10      	pop	{r4, pc}

080061c8 <nan>:
 80061c8:	2000      	movs	r0, #0
 80061ca:	4901      	ldr	r1, [pc, #4]	; (80061d0 <nan+0x8>)
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	7ff80000 	.word	0x7ff80000

080061d4 <__assert_func>:
 80061d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80061d6:	4614      	mov	r4, r2
 80061d8:	461a      	mov	r2, r3
 80061da:	4b09      	ldr	r3, [pc, #36]	; (8006200 <__assert_func+0x2c>)
 80061dc:	4605      	mov	r5, r0
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68d8      	ldr	r0, [r3, #12]
 80061e2:	b14c      	cbz	r4, 80061f8 <__assert_func+0x24>
 80061e4:	4b07      	ldr	r3, [pc, #28]	; (8006204 <__assert_func+0x30>)
 80061e6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80061ea:	9100      	str	r1, [sp, #0]
 80061ec:	462b      	mov	r3, r5
 80061ee:	4906      	ldr	r1, [pc, #24]	; (8006208 <__assert_func+0x34>)
 80061f0:	f000 fbca 	bl	8006988 <fiprintf>
 80061f4:	f000 fbda 	bl	80069ac <abort>
 80061f8:	4b04      	ldr	r3, [pc, #16]	; (800620c <__assert_func+0x38>)
 80061fa:	461c      	mov	r4, r3
 80061fc:	e7f3      	b.n	80061e6 <__assert_func+0x12>
 80061fe:	bf00      	nop
 8006200:	20000064 	.word	0x20000064
 8006204:	08006e32 	.word	0x08006e32
 8006208:	08006e3f 	.word	0x08006e3f
 800620c:	08006e6d 	.word	0x08006e6d

08006210 <_calloc_r>:
 8006210:	b570      	push	{r4, r5, r6, lr}
 8006212:	fba1 5402 	umull	r5, r4, r1, r2
 8006216:	b934      	cbnz	r4, 8006226 <_calloc_r+0x16>
 8006218:	4629      	mov	r1, r5
 800621a:	f7fd fffd 	bl	8004218 <_malloc_r>
 800621e:	4606      	mov	r6, r0
 8006220:	b928      	cbnz	r0, 800622e <_calloc_r+0x1e>
 8006222:	4630      	mov	r0, r6
 8006224:	bd70      	pop	{r4, r5, r6, pc}
 8006226:	220c      	movs	r2, #12
 8006228:	2600      	movs	r6, #0
 800622a:	6002      	str	r2, [r0, #0]
 800622c:	e7f9      	b.n	8006222 <_calloc_r+0x12>
 800622e:	462a      	mov	r2, r5
 8006230:	4621      	mov	r1, r4
 8006232:	f7fd f881 	bl	8003338 <memset>
 8006236:	e7f4      	b.n	8006222 <_calloc_r+0x12>

08006238 <rshift>:
 8006238:	6903      	ldr	r3, [r0, #16]
 800623a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800623e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006242:	f100 0414 	add.w	r4, r0, #20
 8006246:	ea4f 1261 	mov.w	r2, r1, asr #5
 800624a:	dd46      	ble.n	80062da <rshift+0xa2>
 800624c:	f011 011f 	ands.w	r1, r1, #31
 8006250:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006254:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006258:	d10c      	bne.n	8006274 <rshift+0x3c>
 800625a:	4629      	mov	r1, r5
 800625c:	f100 0710 	add.w	r7, r0, #16
 8006260:	42b1      	cmp	r1, r6
 8006262:	d335      	bcc.n	80062d0 <rshift+0x98>
 8006264:	1a9b      	subs	r3, r3, r2
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	1eea      	subs	r2, r5, #3
 800626a:	4296      	cmp	r6, r2
 800626c:	bf38      	it	cc
 800626e:	2300      	movcc	r3, #0
 8006270:	4423      	add	r3, r4
 8006272:	e015      	b.n	80062a0 <rshift+0x68>
 8006274:	46a1      	mov	r9, r4
 8006276:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800627a:	f1c1 0820 	rsb	r8, r1, #32
 800627e:	40cf      	lsrs	r7, r1
 8006280:	f105 0e04 	add.w	lr, r5, #4
 8006284:	4576      	cmp	r6, lr
 8006286:	46f4      	mov	ip, lr
 8006288:	d816      	bhi.n	80062b8 <rshift+0x80>
 800628a:	1a9a      	subs	r2, r3, r2
 800628c:	0092      	lsls	r2, r2, #2
 800628e:	3a04      	subs	r2, #4
 8006290:	3501      	adds	r5, #1
 8006292:	42ae      	cmp	r6, r5
 8006294:	bf38      	it	cc
 8006296:	2200      	movcc	r2, #0
 8006298:	18a3      	adds	r3, r4, r2
 800629a:	50a7      	str	r7, [r4, r2]
 800629c:	b107      	cbz	r7, 80062a0 <rshift+0x68>
 800629e:	3304      	adds	r3, #4
 80062a0:	42a3      	cmp	r3, r4
 80062a2:	eba3 0204 	sub.w	r2, r3, r4
 80062a6:	bf08      	it	eq
 80062a8:	2300      	moveq	r3, #0
 80062aa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80062ae:	6102      	str	r2, [r0, #16]
 80062b0:	bf08      	it	eq
 80062b2:	6143      	streq	r3, [r0, #20]
 80062b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062b8:	f8dc c000 	ldr.w	ip, [ip]
 80062bc:	fa0c fc08 	lsl.w	ip, ip, r8
 80062c0:	ea4c 0707 	orr.w	r7, ip, r7
 80062c4:	f849 7b04 	str.w	r7, [r9], #4
 80062c8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80062cc:	40cf      	lsrs	r7, r1
 80062ce:	e7d9      	b.n	8006284 <rshift+0x4c>
 80062d0:	f851 cb04 	ldr.w	ip, [r1], #4
 80062d4:	f847 cf04 	str.w	ip, [r7, #4]!
 80062d8:	e7c2      	b.n	8006260 <rshift+0x28>
 80062da:	4623      	mov	r3, r4
 80062dc:	e7e0      	b.n	80062a0 <rshift+0x68>

080062de <__hexdig_fun>:
 80062de:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80062e2:	2b09      	cmp	r3, #9
 80062e4:	d802      	bhi.n	80062ec <__hexdig_fun+0xe>
 80062e6:	3820      	subs	r0, #32
 80062e8:	b2c0      	uxtb	r0, r0
 80062ea:	4770      	bx	lr
 80062ec:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80062f0:	2b05      	cmp	r3, #5
 80062f2:	d801      	bhi.n	80062f8 <__hexdig_fun+0x1a>
 80062f4:	3847      	subs	r0, #71	; 0x47
 80062f6:	e7f7      	b.n	80062e8 <__hexdig_fun+0xa>
 80062f8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80062fc:	2b05      	cmp	r3, #5
 80062fe:	d801      	bhi.n	8006304 <__hexdig_fun+0x26>
 8006300:	3827      	subs	r0, #39	; 0x27
 8006302:	e7f1      	b.n	80062e8 <__hexdig_fun+0xa>
 8006304:	2000      	movs	r0, #0
 8006306:	4770      	bx	lr

08006308 <__gethex>:
 8006308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800630c:	4681      	mov	r9, r0
 800630e:	468a      	mov	sl, r1
 8006310:	4617      	mov	r7, r2
 8006312:	680a      	ldr	r2, [r1, #0]
 8006314:	b085      	sub	sp, #20
 8006316:	f102 0b02 	add.w	fp, r2, #2
 800631a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800631e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006322:	9302      	str	r3, [sp, #8]
 8006324:	32fe      	adds	r2, #254	; 0xfe
 8006326:	eb02 030b 	add.w	r3, r2, fp
 800632a:	46d8      	mov	r8, fp
 800632c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8006330:	9301      	str	r3, [sp, #4]
 8006332:	2830      	cmp	r0, #48	; 0x30
 8006334:	d0f7      	beq.n	8006326 <__gethex+0x1e>
 8006336:	f7ff ffd2 	bl	80062de <__hexdig_fun>
 800633a:	4604      	mov	r4, r0
 800633c:	2800      	cmp	r0, #0
 800633e:	d138      	bne.n	80063b2 <__gethex+0xaa>
 8006340:	2201      	movs	r2, #1
 8006342:	4640      	mov	r0, r8
 8006344:	49a7      	ldr	r1, [pc, #668]	; (80065e4 <__gethex+0x2dc>)
 8006346:	f7ff feec 	bl	8006122 <strncmp>
 800634a:	4606      	mov	r6, r0
 800634c:	2800      	cmp	r0, #0
 800634e:	d169      	bne.n	8006424 <__gethex+0x11c>
 8006350:	f898 0001 	ldrb.w	r0, [r8, #1]
 8006354:	465d      	mov	r5, fp
 8006356:	f7ff ffc2 	bl	80062de <__hexdig_fun>
 800635a:	2800      	cmp	r0, #0
 800635c:	d064      	beq.n	8006428 <__gethex+0x120>
 800635e:	465a      	mov	r2, fp
 8006360:	7810      	ldrb	r0, [r2, #0]
 8006362:	4690      	mov	r8, r2
 8006364:	2830      	cmp	r0, #48	; 0x30
 8006366:	f102 0201 	add.w	r2, r2, #1
 800636a:	d0f9      	beq.n	8006360 <__gethex+0x58>
 800636c:	f7ff ffb7 	bl	80062de <__hexdig_fun>
 8006370:	2301      	movs	r3, #1
 8006372:	fab0 f480 	clz	r4, r0
 8006376:	465e      	mov	r6, fp
 8006378:	0964      	lsrs	r4, r4, #5
 800637a:	9301      	str	r3, [sp, #4]
 800637c:	4642      	mov	r2, r8
 800637e:	4615      	mov	r5, r2
 8006380:	7828      	ldrb	r0, [r5, #0]
 8006382:	3201      	adds	r2, #1
 8006384:	f7ff ffab 	bl	80062de <__hexdig_fun>
 8006388:	2800      	cmp	r0, #0
 800638a:	d1f8      	bne.n	800637e <__gethex+0x76>
 800638c:	2201      	movs	r2, #1
 800638e:	4628      	mov	r0, r5
 8006390:	4994      	ldr	r1, [pc, #592]	; (80065e4 <__gethex+0x2dc>)
 8006392:	f7ff fec6 	bl	8006122 <strncmp>
 8006396:	b978      	cbnz	r0, 80063b8 <__gethex+0xb0>
 8006398:	b946      	cbnz	r6, 80063ac <__gethex+0xa4>
 800639a:	1c6e      	adds	r6, r5, #1
 800639c:	4632      	mov	r2, r6
 800639e:	4615      	mov	r5, r2
 80063a0:	7828      	ldrb	r0, [r5, #0]
 80063a2:	3201      	adds	r2, #1
 80063a4:	f7ff ff9b 	bl	80062de <__hexdig_fun>
 80063a8:	2800      	cmp	r0, #0
 80063aa:	d1f8      	bne.n	800639e <__gethex+0x96>
 80063ac:	1b73      	subs	r3, r6, r5
 80063ae:	009e      	lsls	r6, r3, #2
 80063b0:	e004      	b.n	80063bc <__gethex+0xb4>
 80063b2:	2400      	movs	r4, #0
 80063b4:	4626      	mov	r6, r4
 80063b6:	e7e1      	b.n	800637c <__gethex+0x74>
 80063b8:	2e00      	cmp	r6, #0
 80063ba:	d1f7      	bne.n	80063ac <__gethex+0xa4>
 80063bc:	782b      	ldrb	r3, [r5, #0]
 80063be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80063c2:	2b50      	cmp	r3, #80	; 0x50
 80063c4:	d13d      	bne.n	8006442 <__gethex+0x13a>
 80063c6:	786b      	ldrb	r3, [r5, #1]
 80063c8:	2b2b      	cmp	r3, #43	; 0x2b
 80063ca:	d02f      	beq.n	800642c <__gethex+0x124>
 80063cc:	2b2d      	cmp	r3, #45	; 0x2d
 80063ce:	d031      	beq.n	8006434 <__gethex+0x12c>
 80063d0:	f04f 0b00 	mov.w	fp, #0
 80063d4:	1c69      	adds	r1, r5, #1
 80063d6:	7808      	ldrb	r0, [r1, #0]
 80063d8:	f7ff ff81 	bl	80062de <__hexdig_fun>
 80063dc:	1e42      	subs	r2, r0, #1
 80063de:	b2d2      	uxtb	r2, r2
 80063e0:	2a18      	cmp	r2, #24
 80063e2:	d82e      	bhi.n	8006442 <__gethex+0x13a>
 80063e4:	f1a0 0210 	sub.w	r2, r0, #16
 80063e8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80063ec:	f7ff ff77 	bl	80062de <__hexdig_fun>
 80063f0:	f100 3cff 	add.w	ip, r0, #4294967295
 80063f4:	fa5f fc8c 	uxtb.w	ip, ip
 80063f8:	f1bc 0f18 	cmp.w	ip, #24
 80063fc:	d91d      	bls.n	800643a <__gethex+0x132>
 80063fe:	f1bb 0f00 	cmp.w	fp, #0
 8006402:	d000      	beq.n	8006406 <__gethex+0xfe>
 8006404:	4252      	negs	r2, r2
 8006406:	4416      	add	r6, r2
 8006408:	f8ca 1000 	str.w	r1, [sl]
 800640c:	b1dc      	cbz	r4, 8006446 <__gethex+0x13e>
 800640e:	9b01      	ldr	r3, [sp, #4]
 8006410:	2b00      	cmp	r3, #0
 8006412:	bf14      	ite	ne
 8006414:	f04f 0800 	movne.w	r8, #0
 8006418:	f04f 0806 	moveq.w	r8, #6
 800641c:	4640      	mov	r0, r8
 800641e:	b005      	add	sp, #20
 8006420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006424:	4645      	mov	r5, r8
 8006426:	4626      	mov	r6, r4
 8006428:	2401      	movs	r4, #1
 800642a:	e7c7      	b.n	80063bc <__gethex+0xb4>
 800642c:	f04f 0b00 	mov.w	fp, #0
 8006430:	1ca9      	adds	r1, r5, #2
 8006432:	e7d0      	b.n	80063d6 <__gethex+0xce>
 8006434:	f04f 0b01 	mov.w	fp, #1
 8006438:	e7fa      	b.n	8006430 <__gethex+0x128>
 800643a:	230a      	movs	r3, #10
 800643c:	fb03 0002 	mla	r0, r3, r2, r0
 8006440:	e7d0      	b.n	80063e4 <__gethex+0xdc>
 8006442:	4629      	mov	r1, r5
 8006444:	e7e0      	b.n	8006408 <__gethex+0x100>
 8006446:	4621      	mov	r1, r4
 8006448:	eba5 0308 	sub.w	r3, r5, r8
 800644c:	3b01      	subs	r3, #1
 800644e:	2b07      	cmp	r3, #7
 8006450:	dc0a      	bgt.n	8006468 <__gethex+0x160>
 8006452:	4648      	mov	r0, r9
 8006454:	f7fd ff6c 	bl	8004330 <_Balloc>
 8006458:	4604      	mov	r4, r0
 800645a:	b940      	cbnz	r0, 800646e <__gethex+0x166>
 800645c:	4602      	mov	r2, r0
 800645e:	21e4      	movs	r1, #228	; 0xe4
 8006460:	4b61      	ldr	r3, [pc, #388]	; (80065e8 <__gethex+0x2e0>)
 8006462:	4862      	ldr	r0, [pc, #392]	; (80065ec <__gethex+0x2e4>)
 8006464:	f7ff feb6 	bl	80061d4 <__assert_func>
 8006468:	3101      	adds	r1, #1
 800646a:	105b      	asrs	r3, r3, #1
 800646c:	e7ef      	b.n	800644e <__gethex+0x146>
 800646e:	2300      	movs	r3, #0
 8006470:	469b      	mov	fp, r3
 8006472:	f100 0a14 	add.w	sl, r0, #20
 8006476:	f8cd a004 	str.w	sl, [sp, #4]
 800647a:	45a8      	cmp	r8, r5
 800647c:	d344      	bcc.n	8006508 <__gethex+0x200>
 800647e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006482:	4658      	mov	r0, fp
 8006484:	f848 bb04 	str.w	fp, [r8], #4
 8006488:	eba8 080a 	sub.w	r8, r8, sl
 800648c:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8006490:	6122      	str	r2, [r4, #16]
 8006492:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8006496:	f7fe f83d 	bl	8004514 <__hi0bits>
 800649a:	683d      	ldr	r5, [r7, #0]
 800649c:	eba8 0800 	sub.w	r8, r8, r0
 80064a0:	45a8      	cmp	r8, r5
 80064a2:	dd59      	ble.n	8006558 <__gethex+0x250>
 80064a4:	eba8 0805 	sub.w	r8, r8, r5
 80064a8:	4641      	mov	r1, r8
 80064aa:	4620      	mov	r0, r4
 80064ac:	f7fe fbbb 	bl	8004c26 <__any_on>
 80064b0:	4683      	mov	fp, r0
 80064b2:	b1b8      	cbz	r0, 80064e4 <__gethex+0x1dc>
 80064b4:	f04f 0b01 	mov.w	fp, #1
 80064b8:	f108 33ff 	add.w	r3, r8, #4294967295
 80064bc:	1159      	asrs	r1, r3, #5
 80064be:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80064c2:	f003 021f 	and.w	r2, r3, #31
 80064c6:	fa0b f202 	lsl.w	r2, fp, r2
 80064ca:	420a      	tst	r2, r1
 80064cc:	d00a      	beq.n	80064e4 <__gethex+0x1dc>
 80064ce:	455b      	cmp	r3, fp
 80064d0:	dd06      	ble.n	80064e0 <__gethex+0x1d8>
 80064d2:	4620      	mov	r0, r4
 80064d4:	f1a8 0102 	sub.w	r1, r8, #2
 80064d8:	f7fe fba5 	bl	8004c26 <__any_on>
 80064dc:	2800      	cmp	r0, #0
 80064de:	d138      	bne.n	8006552 <__gethex+0x24a>
 80064e0:	f04f 0b02 	mov.w	fp, #2
 80064e4:	4641      	mov	r1, r8
 80064e6:	4620      	mov	r0, r4
 80064e8:	f7ff fea6 	bl	8006238 <rshift>
 80064ec:	4446      	add	r6, r8
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	42b3      	cmp	r3, r6
 80064f2:	da41      	bge.n	8006578 <__gethex+0x270>
 80064f4:	4621      	mov	r1, r4
 80064f6:	4648      	mov	r0, r9
 80064f8:	f7fd ff5a 	bl	80043b0 <_Bfree>
 80064fc:	2300      	movs	r3, #0
 80064fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006500:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8006504:	6013      	str	r3, [r2, #0]
 8006506:	e789      	b.n	800641c <__gethex+0x114>
 8006508:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800650c:	2a2e      	cmp	r2, #46	; 0x2e
 800650e:	d014      	beq.n	800653a <__gethex+0x232>
 8006510:	2b20      	cmp	r3, #32
 8006512:	d106      	bne.n	8006522 <__gethex+0x21a>
 8006514:	9b01      	ldr	r3, [sp, #4]
 8006516:	f843 bb04 	str.w	fp, [r3], #4
 800651a:	f04f 0b00 	mov.w	fp, #0
 800651e:	9301      	str	r3, [sp, #4]
 8006520:	465b      	mov	r3, fp
 8006522:	7828      	ldrb	r0, [r5, #0]
 8006524:	9303      	str	r3, [sp, #12]
 8006526:	f7ff feda 	bl	80062de <__hexdig_fun>
 800652a:	9b03      	ldr	r3, [sp, #12]
 800652c:	f000 000f 	and.w	r0, r0, #15
 8006530:	4098      	lsls	r0, r3
 8006532:	ea4b 0b00 	orr.w	fp, fp, r0
 8006536:	3304      	adds	r3, #4
 8006538:	e79f      	b.n	800647a <__gethex+0x172>
 800653a:	45a8      	cmp	r8, r5
 800653c:	d8e8      	bhi.n	8006510 <__gethex+0x208>
 800653e:	2201      	movs	r2, #1
 8006540:	4628      	mov	r0, r5
 8006542:	4928      	ldr	r1, [pc, #160]	; (80065e4 <__gethex+0x2dc>)
 8006544:	9303      	str	r3, [sp, #12]
 8006546:	f7ff fdec 	bl	8006122 <strncmp>
 800654a:	9b03      	ldr	r3, [sp, #12]
 800654c:	2800      	cmp	r0, #0
 800654e:	d1df      	bne.n	8006510 <__gethex+0x208>
 8006550:	e793      	b.n	800647a <__gethex+0x172>
 8006552:	f04f 0b03 	mov.w	fp, #3
 8006556:	e7c5      	b.n	80064e4 <__gethex+0x1dc>
 8006558:	da0b      	bge.n	8006572 <__gethex+0x26a>
 800655a:	eba5 0808 	sub.w	r8, r5, r8
 800655e:	4621      	mov	r1, r4
 8006560:	4642      	mov	r2, r8
 8006562:	4648      	mov	r0, r9
 8006564:	f7fe f93c 	bl	80047e0 <__lshift>
 8006568:	4604      	mov	r4, r0
 800656a:	eba6 0608 	sub.w	r6, r6, r8
 800656e:	f100 0a14 	add.w	sl, r0, #20
 8006572:	f04f 0b00 	mov.w	fp, #0
 8006576:	e7ba      	b.n	80064ee <__gethex+0x1e6>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	42b3      	cmp	r3, r6
 800657c:	dd74      	ble.n	8006668 <__gethex+0x360>
 800657e:	1b9e      	subs	r6, r3, r6
 8006580:	42b5      	cmp	r5, r6
 8006582:	dc35      	bgt.n	80065f0 <__gethex+0x2e8>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2b02      	cmp	r3, #2
 8006588:	d023      	beq.n	80065d2 <__gethex+0x2ca>
 800658a:	2b03      	cmp	r3, #3
 800658c:	d025      	beq.n	80065da <__gethex+0x2d2>
 800658e:	2b01      	cmp	r3, #1
 8006590:	d115      	bne.n	80065be <__gethex+0x2b6>
 8006592:	42b5      	cmp	r5, r6
 8006594:	d113      	bne.n	80065be <__gethex+0x2b6>
 8006596:	2d01      	cmp	r5, #1
 8006598:	d10b      	bne.n	80065b2 <__gethex+0x2aa>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	9a02      	ldr	r2, [sp, #8]
 800659e:	f04f 0862 	mov.w	r8, #98	; 0x62
 80065a2:	6013      	str	r3, [r2, #0]
 80065a4:	2301      	movs	r3, #1
 80065a6:	6123      	str	r3, [r4, #16]
 80065a8:	f8ca 3000 	str.w	r3, [sl]
 80065ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065ae:	601c      	str	r4, [r3, #0]
 80065b0:	e734      	b.n	800641c <__gethex+0x114>
 80065b2:	4620      	mov	r0, r4
 80065b4:	1e69      	subs	r1, r5, #1
 80065b6:	f7fe fb36 	bl	8004c26 <__any_on>
 80065ba:	2800      	cmp	r0, #0
 80065bc:	d1ed      	bne.n	800659a <__gethex+0x292>
 80065be:	4621      	mov	r1, r4
 80065c0:	4648      	mov	r0, r9
 80065c2:	f7fd fef5 	bl	80043b0 <_Bfree>
 80065c6:	2300      	movs	r3, #0
 80065c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065ca:	f04f 0850 	mov.w	r8, #80	; 0x50
 80065ce:	6013      	str	r3, [r2, #0]
 80065d0:	e724      	b.n	800641c <__gethex+0x114>
 80065d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d1f2      	bne.n	80065be <__gethex+0x2b6>
 80065d8:	e7df      	b.n	800659a <__gethex+0x292>
 80065da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1dc      	bne.n	800659a <__gethex+0x292>
 80065e0:	e7ed      	b.n	80065be <__gethex+0x2b6>
 80065e2:	bf00      	nop
 80065e4:	08006cc4 	.word	0x08006cc4
 80065e8:	08006b5b 	.word	0x08006b5b
 80065ec:	08006e6e 	.word	0x08006e6e
 80065f0:	f106 38ff 	add.w	r8, r6, #4294967295
 80065f4:	f1bb 0f00 	cmp.w	fp, #0
 80065f8:	d133      	bne.n	8006662 <__gethex+0x35a>
 80065fa:	f1b8 0f00 	cmp.w	r8, #0
 80065fe:	d004      	beq.n	800660a <__gethex+0x302>
 8006600:	4641      	mov	r1, r8
 8006602:	4620      	mov	r0, r4
 8006604:	f7fe fb0f 	bl	8004c26 <__any_on>
 8006608:	4683      	mov	fp, r0
 800660a:	2301      	movs	r3, #1
 800660c:	ea4f 1268 	mov.w	r2, r8, asr #5
 8006610:	f008 081f 	and.w	r8, r8, #31
 8006614:	fa03 f308 	lsl.w	r3, r3, r8
 8006618:	f04f 0802 	mov.w	r8, #2
 800661c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8006620:	4631      	mov	r1, r6
 8006622:	4213      	tst	r3, r2
 8006624:	4620      	mov	r0, r4
 8006626:	bf18      	it	ne
 8006628:	f04b 0b02 	orrne.w	fp, fp, #2
 800662c:	1bad      	subs	r5, r5, r6
 800662e:	f7ff fe03 	bl	8006238 <rshift>
 8006632:	687e      	ldr	r6, [r7, #4]
 8006634:	f1bb 0f00 	cmp.w	fp, #0
 8006638:	d04a      	beq.n	80066d0 <__gethex+0x3c8>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2b02      	cmp	r3, #2
 800663e:	d016      	beq.n	800666e <__gethex+0x366>
 8006640:	2b03      	cmp	r3, #3
 8006642:	d018      	beq.n	8006676 <__gethex+0x36e>
 8006644:	2b01      	cmp	r3, #1
 8006646:	d109      	bne.n	800665c <__gethex+0x354>
 8006648:	f01b 0f02 	tst.w	fp, #2
 800664c:	d006      	beq.n	800665c <__gethex+0x354>
 800664e:	f8da 3000 	ldr.w	r3, [sl]
 8006652:	ea4b 0b03 	orr.w	fp, fp, r3
 8006656:	f01b 0f01 	tst.w	fp, #1
 800665a:	d10f      	bne.n	800667c <__gethex+0x374>
 800665c:	f048 0810 	orr.w	r8, r8, #16
 8006660:	e036      	b.n	80066d0 <__gethex+0x3c8>
 8006662:	f04f 0b01 	mov.w	fp, #1
 8006666:	e7d0      	b.n	800660a <__gethex+0x302>
 8006668:	f04f 0801 	mov.w	r8, #1
 800666c:	e7e2      	b.n	8006634 <__gethex+0x32c>
 800666e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006670:	f1c3 0301 	rsb	r3, r3, #1
 8006674:	930f      	str	r3, [sp, #60]	; 0x3c
 8006676:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006678:	2b00      	cmp	r3, #0
 800667a:	d0ef      	beq.n	800665c <__gethex+0x354>
 800667c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006680:	f104 0214 	add.w	r2, r4, #20
 8006684:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8006688:	9301      	str	r3, [sp, #4]
 800668a:	2300      	movs	r3, #0
 800668c:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8006690:	4694      	mov	ip, r2
 8006692:	f852 1b04 	ldr.w	r1, [r2], #4
 8006696:	f1b1 3fff 	cmp.w	r1, #4294967295
 800669a:	d01e      	beq.n	80066da <__gethex+0x3d2>
 800669c:	3101      	adds	r1, #1
 800669e:	f8cc 1000 	str.w	r1, [ip]
 80066a2:	f1b8 0f02 	cmp.w	r8, #2
 80066a6:	f104 0214 	add.w	r2, r4, #20
 80066aa:	d13d      	bne.n	8006728 <__gethex+0x420>
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	3b01      	subs	r3, #1
 80066b0:	42ab      	cmp	r3, r5
 80066b2:	d10b      	bne.n	80066cc <__gethex+0x3c4>
 80066b4:	2301      	movs	r3, #1
 80066b6:	1169      	asrs	r1, r5, #5
 80066b8:	f005 051f 	and.w	r5, r5, #31
 80066bc:	fa03 f505 	lsl.w	r5, r3, r5
 80066c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80066c4:	421d      	tst	r5, r3
 80066c6:	bf18      	it	ne
 80066c8:	f04f 0801 	movne.w	r8, #1
 80066cc:	f048 0820 	orr.w	r8, r8, #32
 80066d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066d2:	601c      	str	r4, [r3, #0]
 80066d4:	9b02      	ldr	r3, [sp, #8]
 80066d6:	601e      	str	r6, [r3, #0]
 80066d8:	e6a0      	b.n	800641c <__gethex+0x114>
 80066da:	4290      	cmp	r0, r2
 80066dc:	f842 3c04 	str.w	r3, [r2, #-4]
 80066e0:	d8d6      	bhi.n	8006690 <__gethex+0x388>
 80066e2:	68a2      	ldr	r2, [r4, #8]
 80066e4:	4593      	cmp	fp, r2
 80066e6:	db17      	blt.n	8006718 <__gethex+0x410>
 80066e8:	6861      	ldr	r1, [r4, #4]
 80066ea:	4648      	mov	r0, r9
 80066ec:	3101      	adds	r1, #1
 80066ee:	f7fd fe1f 	bl	8004330 <_Balloc>
 80066f2:	4682      	mov	sl, r0
 80066f4:	b918      	cbnz	r0, 80066fe <__gethex+0x3f6>
 80066f6:	4602      	mov	r2, r0
 80066f8:	2184      	movs	r1, #132	; 0x84
 80066fa:	4b1a      	ldr	r3, [pc, #104]	; (8006764 <__gethex+0x45c>)
 80066fc:	e6b1      	b.n	8006462 <__gethex+0x15a>
 80066fe:	6922      	ldr	r2, [r4, #16]
 8006700:	f104 010c 	add.w	r1, r4, #12
 8006704:	3202      	adds	r2, #2
 8006706:	0092      	lsls	r2, r2, #2
 8006708:	300c      	adds	r0, #12
 800670a:	f7ff fd4f 	bl	80061ac <memcpy>
 800670e:	4621      	mov	r1, r4
 8006710:	4648      	mov	r0, r9
 8006712:	f7fd fe4d 	bl	80043b0 <_Bfree>
 8006716:	4654      	mov	r4, sl
 8006718:	6922      	ldr	r2, [r4, #16]
 800671a:	1c51      	adds	r1, r2, #1
 800671c:	6121      	str	r1, [r4, #16]
 800671e:	2101      	movs	r1, #1
 8006720:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8006724:	6151      	str	r1, [r2, #20]
 8006726:	e7bc      	b.n	80066a2 <__gethex+0x39a>
 8006728:	6921      	ldr	r1, [r4, #16]
 800672a:	4559      	cmp	r1, fp
 800672c:	dd0b      	ble.n	8006746 <__gethex+0x43e>
 800672e:	2101      	movs	r1, #1
 8006730:	4620      	mov	r0, r4
 8006732:	f7ff fd81 	bl	8006238 <rshift>
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	3601      	adds	r6, #1
 800673a:	42b3      	cmp	r3, r6
 800673c:	f6ff aeda 	blt.w	80064f4 <__gethex+0x1ec>
 8006740:	f04f 0801 	mov.w	r8, #1
 8006744:	e7c2      	b.n	80066cc <__gethex+0x3c4>
 8006746:	f015 051f 	ands.w	r5, r5, #31
 800674a:	d0f9      	beq.n	8006740 <__gethex+0x438>
 800674c:	9b01      	ldr	r3, [sp, #4]
 800674e:	f1c5 0520 	rsb	r5, r5, #32
 8006752:	441a      	add	r2, r3
 8006754:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8006758:	f7fd fedc 	bl	8004514 <__hi0bits>
 800675c:	42a8      	cmp	r0, r5
 800675e:	dbe6      	blt.n	800672e <__gethex+0x426>
 8006760:	e7ee      	b.n	8006740 <__gethex+0x438>
 8006762:	bf00      	nop
 8006764:	08006b5b 	.word	0x08006b5b

08006768 <L_shift>:
 8006768:	f1c2 0208 	rsb	r2, r2, #8
 800676c:	0092      	lsls	r2, r2, #2
 800676e:	b570      	push	{r4, r5, r6, lr}
 8006770:	f1c2 0620 	rsb	r6, r2, #32
 8006774:	6843      	ldr	r3, [r0, #4]
 8006776:	6804      	ldr	r4, [r0, #0]
 8006778:	fa03 f506 	lsl.w	r5, r3, r6
 800677c:	432c      	orrs	r4, r5
 800677e:	40d3      	lsrs	r3, r2
 8006780:	6004      	str	r4, [r0, #0]
 8006782:	f840 3f04 	str.w	r3, [r0, #4]!
 8006786:	4288      	cmp	r0, r1
 8006788:	d3f4      	bcc.n	8006774 <L_shift+0xc>
 800678a:	bd70      	pop	{r4, r5, r6, pc}

0800678c <__match>:
 800678c:	b530      	push	{r4, r5, lr}
 800678e:	6803      	ldr	r3, [r0, #0]
 8006790:	3301      	adds	r3, #1
 8006792:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006796:	b914      	cbnz	r4, 800679e <__match+0x12>
 8006798:	6003      	str	r3, [r0, #0]
 800679a:	2001      	movs	r0, #1
 800679c:	bd30      	pop	{r4, r5, pc}
 800679e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067a2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80067a6:	2d19      	cmp	r5, #25
 80067a8:	bf98      	it	ls
 80067aa:	3220      	addls	r2, #32
 80067ac:	42a2      	cmp	r2, r4
 80067ae:	d0f0      	beq.n	8006792 <__match+0x6>
 80067b0:	2000      	movs	r0, #0
 80067b2:	e7f3      	b.n	800679c <__match+0x10>

080067b4 <__hexnan>:
 80067b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067b8:	2500      	movs	r5, #0
 80067ba:	680b      	ldr	r3, [r1, #0]
 80067bc:	4682      	mov	sl, r0
 80067be:	115e      	asrs	r6, r3, #5
 80067c0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80067c4:	f013 031f 	ands.w	r3, r3, #31
 80067c8:	bf18      	it	ne
 80067ca:	3604      	addne	r6, #4
 80067cc:	1f37      	subs	r7, r6, #4
 80067ce:	4690      	mov	r8, r2
 80067d0:	46b9      	mov	r9, r7
 80067d2:	463c      	mov	r4, r7
 80067d4:	46ab      	mov	fp, r5
 80067d6:	b087      	sub	sp, #28
 80067d8:	6801      	ldr	r1, [r0, #0]
 80067da:	9301      	str	r3, [sp, #4]
 80067dc:	f846 5c04 	str.w	r5, [r6, #-4]
 80067e0:	9502      	str	r5, [sp, #8]
 80067e2:	784a      	ldrb	r2, [r1, #1]
 80067e4:	1c4b      	adds	r3, r1, #1
 80067e6:	9303      	str	r3, [sp, #12]
 80067e8:	b342      	cbz	r2, 800683c <__hexnan+0x88>
 80067ea:	4610      	mov	r0, r2
 80067ec:	9105      	str	r1, [sp, #20]
 80067ee:	9204      	str	r2, [sp, #16]
 80067f0:	f7ff fd75 	bl	80062de <__hexdig_fun>
 80067f4:	2800      	cmp	r0, #0
 80067f6:	d14f      	bne.n	8006898 <__hexnan+0xe4>
 80067f8:	9a04      	ldr	r2, [sp, #16]
 80067fa:	9905      	ldr	r1, [sp, #20]
 80067fc:	2a20      	cmp	r2, #32
 80067fe:	d818      	bhi.n	8006832 <__hexnan+0x7e>
 8006800:	9b02      	ldr	r3, [sp, #8]
 8006802:	459b      	cmp	fp, r3
 8006804:	dd13      	ble.n	800682e <__hexnan+0x7a>
 8006806:	454c      	cmp	r4, r9
 8006808:	d206      	bcs.n	8006818 <__hexnan+0x64>
 800680a:	2d07      	cmp	r5, #7
 800680c:	dc04      	bgt.n	8006818 <__hexnan+0x64>
 800680e:	462a      	mov	r2, r5
 8006810:	4649      	mov	r1, r9
 8006812:	4620      	mov	r0, r4
 8006814:	f7ff ffa8 	bl	8006768 <L_shift>
 8006818:	4544      	cmp	r4, r8
 800681a:	d950      	bls.n	80068be <__hexnan+0x10a>
 800681c:	2300      	movs	r3, #0
 800681e:	f1a4 0904 	sub.w	r9, r4, #4
 8006822:	f844 3c04 	str.w	r3, [r4, #-4]
 8006826:	461d      	mov	r5, r3
 8006828:	464c      	mov	r4, r9
 800682a:	f8cd b008 	str.w	fp, [sp, #8]
 800682e:	9903      	ldr	r1, [sp, #12]
 8006830:	e7d7      	b.n	80067e2 <__hexnan+0x2e>
 8006832:	2a29      	cmp	r2, #41	; 0x29
 8006834:	d155      	bne.n	80068e2 <__hexnan+0x12e>
 8006836:	3102      	adds	r1, #2
 8006838:	f8ca 1000 	str.w	r1, [sl]
 800683c:	f1bb 0f00 	cmp.w	fp, #0
 8006840:	d04f      	beq.n	80068e2 <__hexnan+0x12e>
 8006842:	454c      	cmp	r4, r9
 8006844:	d206      	bcs.n	8006854 <__hexnan+0xa0>
 8006846:	2d07      	cmp	r5, #7
 8006848:	dc04      	bgt.n	8006854 <__hexnan+0xa0>
 800684a:	462a      	mov	r2, r5
 800684c:	4649      	mov	r1, r9
 800684e:	4620      	mov	r0, r4
 8006850:	f7ff ff8a 	bl	8006768 <L_shift>
 8006854:	4544      	cmp	r4, r8
 8006856:	d934      	bls.n	80068c2 <__hexnan+0x10e>
 8006858:	4623      	mov	r3, r4
 800685a:	f1a8 0204 	sub.w	r2, r8, #4
 800685e:	f853 1b04 	ldr.w	r1, [r3], #4
 8006862:	429f      	cmp	r7, r3
 8006864:	f842 1f04 	str.w	r1, [r2, #4]!
 8006868:	d2f9      	bcs.n	800685e <__hexnan+0xaa>
 800686a:	1b3b      	subs	r3, r7, r4
 800686c:	f023 0303 	bic.w	r3, r3, #3
 8006870:	3304      	adds	r3, #4
 8006872:	3e03      	subs	r6, #3
 8006874:	3401      	adds	r4, #1
 8006876:	42a6      	cmp	r6, r4
 8006878:	bf38      	it	cc
 800687a:	2304      	movcc	r3, #4
 800687c:	2200      	movs	r2, #0
 800687e:	4443      	add	r3, r8
 8006880:	f843 2b04 	str.w	r2, [r3], #4
 8006884:	429f      	cmp	r7, r3
 8006886:	d2fb      	bcs.n	8006880 <__hexnan+0xcc>
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	b91b      	cbnz	r3, 8006894 <__hexnan+0xe0>
 800688c:	4547      	cmp	r7, r8
 800688e:	d126      	bne.n	80068de <__hexnan+0x12a>
 8006890:	2301      	movs	r3, #1
 8006892:	603b      	str	r3, [r7, #0]
 8006894:	2005      	movs	r0, #5
 8006896:	e025      	b.n	80068e4 <__hexnan+0x130>
 8006898:	3501      	adds	r5, #1
 800689a:	2d08      	cmp	r5, #8
 800689c:	f10b 0b01 	add.w	fp, fp, #1
 80068a0:	dd06      	ble.n	80068b0 <__hexnan+0xfc>
 80068a2:	4544      	cmp	r4, r8
 80068a4:	d9c3      	bls.n	800682e <__hexnan+0x7a>
 80068a6:	2300      	movs	r3, #0
 80068a8:	2501      	movs	r5, #1
 80068aa:	f844 3c04 	str.w	r3, [r4, #-4]
 80068ae:	3c04      	subs	r4, #4
 80068b0:	6822      	ldr	r2, [r4, #0]
 80068b2:	f000 000f 	and.w	r0, r0, #15
 80068b6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80068ba:	6020      	str	r0, [r4, #0]
 80068bc:	e7b7      	b.n	800682e <__hexnan+0x7a>
 80068be:	2508      	movs	r5, #8
 80068c0:	e7b5      	b.n	800682e <__hexnan+0x7a>
 80068c2:	9b01      	ldr	r3, [sp, #4]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d0df      	beq.n	8006888 <__hexnan+0xd4>
 80068c8:	f04f 32ff 	mov.w	r2, #4294967295
 80068cc:	f1c3 0320 	rsb	r3, r3, #32
 80068d0:	40da      	lsrs	r2, r3
 80068d2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80068d6:	4013      	ands	r3, r2
 80068d8:	f846 3c04 	str.w	r3, [r6, #-4]
 80068dc:	e7d4      	b.n	8006888 <__hexnan+0xd4>
 80068de:	3f04      	subs	r7, #4
 80068e0:	e7d2      	b.n	8006888 <__hexnan+0xd4>
 80068e2:	2004      	movs	r0, #4
 80068e4:	b007      	add	sp, #28
 80068e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080068ea <__ascii_mbtowc>:
 80068ea:	b082      	sub	sp, #8
 80068ec:	b901      	cbnz	r1, 80068f0 <__ascii_mbtowc+0x6>
 80068ee:	a901      	add	r1, sp, #4
 80068f0:	b142      	cbz	r2, 8006904 <__ascii_mbtowc+0x1a>
 80068f2:	b14b      	cbz	r3, 8006908 <__ascii_mbtowc+0x1e>
 80068f4:	7813      	ldrb	r3, [r2, #0]
 80068f6:	600b      	str	r3, [r1, #0]
 80068f8:	7812      	ldrb	r2, [r2, #0]
 80068fa:	1e10      	subs	r0, r2, #0
 80068fc:	bf18      	it	ne
 80068fe:	2001      	movne	r0, #1
 8006900:	b002      	add	sp, #8
 8006902:	4770      	bx	lr
 8006904:	4610      	mov	r0, r2
 8006906:	e7fb      	b.n	8006900 <__ascii_mbtowc+0x16>
 8006908:	f06f 0001 	mvn.w	r0, #1
 800690c:	e7f8      	b.n	8006900 <__ascii_mbtowc+0x16>

0800690e <_realloc_r>:
 800690e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006912:	4680      	mov	r8, r0
 8006914:	4614      	mov	r4, r2
 8006916:	460e      	mov	r6, r1
 8006918:	b921      	cbnz	r1, 8006924 <_realloc_r+0x16>
 800691a:	4611      	mov	r1, r2
 800691c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006920:	f7fd bc7a 	b.w	8004218 <_malloc_r>
 8006924:	b92a      	cbnz	r2, 8006932 <_realloc_r+0x24>
 8006926:	f7fd fc07 	bl	8004138 <_free_r>
 800692a:	4625      	mov	r5, r4
 800692c:	4628      	mov	r0, r5
 800692e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006932:	f000 f842 	bl	80069ba <_malloc_usable_size_r>
 8006936:	4284      	cmp	r4, r0
 8006938:	4607      	mov	r7, r0
 800693a:	d802      	bhi.n	8006942 <_realloc_r+0x34>
 800693c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006940:	d812      	bhi.n	8006968 <_realloc_r+0x5a>
 8006942:	4621      	mov	r1, r4
 8006944:	4640      	mov	r0, r8
 8006946:	f7fd fc67 	bl	8004218 <_malloc_r>
 800694a:	4605      	mov	r5, r0
 800694c:	2800      	cmp	r0, #0
 800694e:	d0ed      	beq.n	800692c <_realloc_r+0x1e>
 8006950:	42bc      	cmp	r4, r7
 8006952:	4622      	mov	r2, r4
 8006954:	4631      	mov	r1, r6
 8006956:	bf28      	it	cs
 8006958:	463a      	movcs	r2, r7
 800695a:	f7ff fc27 	bl	80061ac <memcpy>
 800695e:	4631      	mov	r1, r6
 8006960:	4640      	mov	r0, r8
 8006962:	f7fd fbe9 	bl	8004138 <_free_r>
 8006966:	e7e1      	b.n	800692c <_realloc_r+0x1e>
 8006968:	4635      	mov	r5, r6
 800696a:	e7df      	b.n	800692c <_realloc_r+0x1e>

0800696c <__ascii_wctomb>:
 800696c:	4603      	mov	r3, r0
 800696e:	4608      	mov	r0, r1
 8006970:	b141      	cbz	r1, 8006984 <__ascii_wctomb+0x18>
 8006972:	2aff      	cmp	r2, #255	; 0xff
 8006974:	d904      	bls.n	8006980 <__ascii_wctomb+0x14>
 8006976:	228a      	movs	r2, #138	; 0x8a
 8006978:	f04f 30ff 	mov.w	r0, #4294967295
 800697c:	601a      	str	r2, [r3, #0]
 800697e:	4770      	bx	lr
 8006980:	2001      	movs	r0, #1
 8006982:	700a      	strb	r2, [r1, #0]
 8006984:	4770      	bx	lr
	...

08006988 <fiprintf>:
 8006988:	b40e      	push	{r1, r2, r3}
 800698a:	b503      	push	{r0, r1, lr}
 800698c:	4601      	mov	r1, r0
 800698e:	ab03      	add	r3, sp, #12
 8006990:	4805      	ldr	r0, [pc, #20]	; (80069a8 <fiprintf+0x20>)
 8006992:	f853 2b04 	ldr.w	r2, [r3], #4
 8006996:	6800      	ldr	r0, [r0, #0]
 8006998:	9301      	str	r3, [sp, #4]
 800699a:	f7ff f983 	bl	8005ca4 <_vfiprintf_r>
 800699e:	b002      	add	sp, #8
 80069a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80069a4:	b003      	add	sp, #12
 80069a6:	4770      	bx	lr
 80069a8:	20000064 	.word	0x20000064

080069ac <abort>:
 80069ac:	2006      	movs	r0, #6
 80069ae:	b508      	push	{r3, lr}
 80069b0:	f000 f834 	bl	8006a1c <raise>
 80069b4:	2001      	movs	r0, #1
 80069b6:	f7fa f9ff 	bl	8000db8 <_exit>

080069ba <_malloc_usable_size_r>:
 80069ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069be:	1f18      	subs	r0, r3, #4
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	bfbc      	itt	lt
 80069c4:	580b      	ldrlt	r3, [r1, r0]
 80069c6:	18c0      	addlt	r0, r0, r3
 80069c8:	4770      	bx	lr

080069ca <_raise_r>:
 80069ca:	291f      	cmp	r1, #31
 80069cc:	b538      	push	{r3, r4, r5, lr}
 80069ce:	4604      	mov	r4, r0
 80069d0:	460d      	mov	r5, r1
 80069d2:	d904      	bls.n	80069de <_raise_r+0x14>
 80069d4:	2316      	movs	r3, #22
 80069d6:	6003      	str	r3, [r0, #0]
 80069d8:	f04f 30ff 	mov.w	r0, #4294967295
 80069dc:	bd38      	pop	{r3, r4, r5, pc}
 80069de:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80069e0:	b112      	cbz	r2, 80069e8 <_raise_r+0x1e>
 80069e2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80069e6:	b94b      	cbnz	r3, 80069fc <_raise_r+0x32>
 80069e8:	4620      	mov	r0, r4
 80069ea:	f000 f831 	bl	8006a50 <_getpid_r>
 80069ee:	462a      	mov	r2, r5
 80069f0:	4601      	mov	r1, r0
 80069f2:	4620      	mov	r0, r4
 80069f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069f8:	f000 b818 	b.w	8006a2c <_kill_r>
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d00a      	beq.n	8006a16 <_raise_r+0x4c>
 8006a00:	1c59      	adds	r1, r3, #1
 8006a02:	d103      	bne.n	8006a0c <_raise_r+0x42>
 8006a04:	2316      	movs	r3, #22
 8006a06:	6003      	str	r3, [r0, #0]
 8006a08:	2001      	movs	r0, #1
 8006a0a:	e7e7      	b.n	80069dc <_raise_r+0x12>
 8006a0c:	2400      	movs	r4, #0
 8006a0e:	4628      	mov	r0, r5
 8006a10:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006a14:	4798      	blx	r3
 8006a16:	2000      	movs	r0, #0
 8006a18:	e7e0      	b.n	80069dc <_raise_r+0x12>
	...

08006a1c <raise>:
 8006a1c:	4b02      	ldr	r3, [pc, #8]	; (8006a28 <raise+0xc>)
 8006a1e:	4601      	mov	r1, r0
 8006a20:	6818      	ldr	r0, [r3, #0]
 8006a22:	f7ff bfd2 	b.w	80069ca <_raise_r>
 8006a26:	bf00      	nop
 8006a28:	20000064 	.word	0x20000064

08006a2c <_kill_r>:
 8006a2c:	b538      	push	{r3, r4, r5, lr}
 8006a2e:	2300      	movs	r3, #0
 8006a30:	4d06      	ldr	r5, [pc, #24]	; (8006a4c <_kill_r+0x20>)
 8006a32:	4604      	mov	r4, r0
 8006a34:	4608      	mov	r0, r1
 8006a36:	4611      	mov	r1, r2
 8006a38:	602b      	str	r3, [r5, #0]
 8006a3a:	f7fa f9ad 	bl	8000d98 <_kill>
 8006a3e:	1c43      	adds	r3, r0, #1
 8006a40:	d102      	bne.n	8006a48 <_kill_r+0x1c>
 8006a42:	682b      	ldr	r3, [r5, #0]
 8006a44:	b103      	cbz	r3, 8006a48 <_kill_r+0x1c>
 8006a46:	6023      	str	r3, [r4, #0]
 8006a48:	bd38      	pop	{r3, r4, r5, pc}
 8006a4a:	bf00      	nop
 8006a4c:	2000037c 	.word	0x2000037c

08006a50 <_getpid_r>:
 8006a50:	f7fa b99b 	b.w	8000d8a <_getpid>

08006a54 <_init>:
 8006a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a56:	bf00      	nop
 8006a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a5a:	bc08      	pop	{r3}
 8006a5c:	469e      	mov	lr, r3
 8006a5e:	4770      	bx	lr

08006a60 <_fini>:
 8006a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a62:	bf00      	nop
 8006a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a66:	bc08      	pop	{r3}
 8006a68:	469e      	mov	lr, r3
 8006a6a:	4770      	bx	lr
