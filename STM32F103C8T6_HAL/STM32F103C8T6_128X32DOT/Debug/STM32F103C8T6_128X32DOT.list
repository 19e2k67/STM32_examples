
STM32F103C8T6_128X32DOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022dc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000868  080023e8  080023e8  000123e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c50  08002c50  000202bc  2**0
                  CONTENTS
  4 .ARM          00000000  08002c50  08002c50  000202bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c50  08002c50  000202bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c50  08002c50  00012c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c54  08002c54  00012c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002bc  20000000  08002c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  200002bc  08002f14  000202bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  08002f14  00020338  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202bc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202e5  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005e32  00000000  00000000  00020328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001589  00000000  00000000  0002615a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000720  00000000  00000000  000276e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000565  00000000  00000000  00027e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016c56  00000000  00000000  0002836d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009f9d  00000000  00000000  0003efc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00081669  00000000  00000000  00048f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001b94  00000000  00000000  000ca5cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  000cc160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200002bc 	.word	0x200002bc
 8000128:	00000000 	.word	0x00000000
 800012c:	080023d0 	.word	0x080023d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200002c0 	.word	0x200002c0
 8000148:	080023d0 	.word	0x080023d0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000162:	4b0e      	ldr	r3, [pc, #56]	; (800019c <MX_GPIO_Init+0x40>)
 8000164:	699b      	ldr	r3, [r3, #24]
 8000166:	4a0d      	ldr	r2, [pc, #52]	; (800019c <MX_GPIO_Init+0x40>)
 8000168:	f043 0320 	orr.w	r3, r3, #32
 800016c:	6193      	str	r3, [r2, #24]
 800016e:	4b0b      	ldr	r3, [pc, #44]	; (800019c <MX_GPIO_Init+0x40>)
 8000170:	699b      	ldr	r3, [r3, #24]
 8000172:	f003 0320 	and.w	r3, r3, #32
 8000176:	607b      	str	r3, [r7, #4]
 8000178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800017a:	4b08      	ldr	r3, [pc, #32]	; (800019c <MX_GPIO_Init+0x40>)
 800017c:	699b      	ldr	r3, [r3, #24]
 800017e:	4a07      	ldr	r2, [pc, #28]	; (800019c <MX_GPIO_Init+0x40>)
 8000180:	f043 0308 	orr.w	r3, r3, #8
 8000184:	6193      	str	r3, [r2, #24]
 8000186:	4b05      	ldr	r3, [pc, #20]	; (800019c <MX_GPIO_Init+0x40>)
 8000188:	699b      	ldr	r3, [r3, #24]
 800018a:	f003 0308 	and.w	r3, r3, #8
 800018e:	603b      	str	r3, [r7, #0]
 8000190:	683b      	ldr	r3, [r7, #0]

}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	40021000 	.word	0x40021000

080001a0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80001a4:	4b12      	ldr	r3, [pc, #72]	; (80001f0 <MX_I2C1_Init+0x50>)
 80001a6:	4a13      	ldr	r2, [pc, #76]	; (80001f4 <MX_I2C1_Init+0x54>)
 80001a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80001aa:	4b11      	ldr	r3, [pc, #68]	; (80001f0 <MX_I2C1_Init+0x50>)
 80001ac:	4a12      	ldr	r2, [pc, #72]	; (80001f8 <MX_I2C1_Init+0x58>)
 80001ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80001b0:	4b0f      	ldr	r3, [pc, #60]	; (80001f0 <MX_I2C1_Init+0x50>)
 80001b2:	2200      	movs	r2, #0
 80001b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80001b6:	4b0e      	ldr	r3, [pc, #56]	; (80001f0 <MX_I2C1_Init+0x50>)
 80001b8:	2200      	movs	r2, #0
 80001ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80001bc:	4b0c      	ldr	r3, [pc, #48]	; (80001f0 <MX_I2C1_Init+0x50>)
 80001be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80001c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80001c4:	4b0a      	ldr	r3, [pc, #40]	; (80001f0 <MX_I2C1_Init+0x50>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80001ca:	4b09      	ldr	r3, [pc, #36]	; (80001f0 <MX_I2C1_Init+0x50>)
 80001cc:	2200      	movs	r2, #0
 80001ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80001d0:	4b07      	ldr	r3, [pc, #28]	; (80001f0 <MX_I2C1_Init+0x50>)
 80001d2:	2200      	movs	r2, #0
 80001d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80001d6:	4b06      	ldr	r3, [pc, #24]	; (80001f0 <MX_I2C1_Init+0x50>)
 80001d8:	2200      	movs	r2, #0
 80001da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <MX_I2C1_Init+0x50>)
 80001de:	f001 f823 	bl	8001228 <HAL_I2C_Init>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d001      	beq.n	80001ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80001e8:	f000 fcb5 	bl	8000b56 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80001ec:	bf00      	nop
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	200002d8 	.word	0x200002d8
 80001f4:	40005400 	.word	0x40005400
 80001f8:	000186a0 	.word	0x000186a0

080001fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b088      	sub	sp, #32
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000204:	f107 0310 	add.w	r3, r7, #16
 8000208:	2200      	movs	r2, #0
 800020a:	601a      	str	r2, [r3, #0]
 800020c:	605a      	str	r2, [r3, #4]
 800020e:	609a      	str	r2, [r3, #8]
 8000210:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	4a15      	ldr	r2, [pc, #84]	; (800026c <HAL_I2C_MspInit+0x70>)
 8000218:	4293      	cmp	r3, r2
 800021a:	d123      	bne.n	8000264 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800021c:	4b14      	ldr	r3, [pc, #80]	; (8000270 <HAL_I2C_MspInit+0x74>)
 800021e:	699b      	ldr	r3, [r3, #24]
 8000220:	4a13      	ldr	r2, [pc, #76]	; (8000270 <HAL_I2C_MspInit+0x74>)
 8000222:	f043 0308 	orr.w	r3, r3, #8
 8000226:	6193      	str	r3, [r2, #24]
 8000228:	4b11      	ldr	r3, [pc, #68]	; (8000270 <HAL_I2C_MspInit+0x74>)
 800022a:	699b      	ldr	r3, [r3, #24]
 800022c:	f003 0308 	and.w	r3, r3, #8
 8000230:	60fb      	str	r3, [r7, #12]
 8000232:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000234:	23c0      	movs	r3, #192	; 0xc0
 8000236:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000238:	2312      	movs	r3, #18
 800023a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800023c:	2303      	movs	r3, #3
 800023e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000240:	f107 0310 	add.w	r3, r7, #16
 8000244:	4619      	mov	r1, r3
 8000246:	480b      	ldr	r0, [pc, #44]	; (8000274 <HAL_I2C_MspInit+0x78>)
 8000248:	f000 fe6a 	bl	8000f20 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800024c:	4b08      	ldr	r3, [pc, #32]	; (8000270 <HAL_I2C_MspInit+0x74>)
 800024e:	69db      	ldr	r3, [r3, #28]
 8000250:	4a07      	ldr	r2, [pc, #28]	; (8000270 <HAL_I2C_MspInit+0x74>)
 8000252:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000256:	61d3      	str	r3, [r2, #28]
 8000258:	4b05      	ldr	r3, [pc, #20]	; (8000270 <HAL_I2C_MspInit+0x74>)
 800025a:	69db      	ldr	r3, [r3, #28]
 800025c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000260:	60bb      	str	r3, [r7, #8]
 8000262:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000264:	bf00      	nop
 8000266:	3720      	adds	r7, #32
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}
 800026c:	40005400 	.word	0x40005400
 8000270:	40021000 	.word	0x40021000
 8000274:	40010c00 	.word	0x40010c00

08000278 <WriteByte_command>:
int _cursor[2] = {0, 0};
uint8_t CMD_Data1[] = {0xe2, 0xa3, 0xa0, 0xc8, 0x22, 0x81, 0x30, 0x2c, 0x2e, 0x2f};
uint8_t CMD_Data2[] = {0xff, 0x72, 0xfe, 0xd6, 0x90, 0x9d, 0xaf, 0x40};

void  WriteByte_command(uint8_t cmd)    //Write a command to LCD.
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b086      	sub	sp, #24
 800027c:	af04      	add	r7, sp, #16
 800027e:	4603      	mov	r3, r0
 8000280:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, 0x7e, 0x00, I2C_MEMADD_SIZE_8BIT, &cmd, 1, 0x100);
 8000282:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000286:	9302      	str	r3, [sp, #8]
 8000288:	2301      	movs	r3, #1
 800028a:	9301      	str	r3, [sp, #4]
 800028c:	1dfb      	adds	r3, r7, #7
 800028e:	9300      	str	r3, [sp, #0]
 8000290:	2301      	movs	r3, #1
 8000292:	2200      	movs	r2, #0
 8000294:	217e      	movs	r1, #126	; 0x7e
 8000296:	4803      	ldr	r0, [pc, #12]	; (80002a4 <WriteByte_command+0x2c>)
 8000298:	f001 f90a 	bl	80014b0 <HAL_I2C_Mem_Write>
}
 800029c:	bf00      	nop
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	200002d8 	.word	0x200002d8

080002a8 <WriteByte_dat>:

void WriteByte_dat(uint8_t dat)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b086      	sub	sp, #24
 80002ac:	af04      	add	r7, sp, #16
 80002ae:	4603      	mov	r3, r0
 80002b0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, 0x7e, 0x40, I2C_MEMADD_SIZE_8BIT, &dat, 1, 0x100);
 80002b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002b6:	9302      	str	r3, [sp, #8]
 80002b8:	2301      	movs	r3, #1
 80002ba:	9301      	str	r3, [sp, #4]
 80002bc:	1dfb      	adds	r3, r7, #7
 80002be:	9300      	str	r3, [sp, #0]
 80002c0:	2301      	movs	r3, #1
 80002c2:	2240      	movs	r2, #64	; 0x40
 80002c4:	217e      	movs	r1, #126	; 0x7e
 80002c6:	4803      	ldr	r0, [pc, #12]	; (80002d4 <WriteByte_dat+0x2c>)
 80002c8:	f001 f8f2 	bl	80014b0 <HAL_I2C_Mem_Write>
}
 80002cc:	bf00      	nop
 80002ce:	3708      	adds	r7, #8
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	200002d8 	.word	0x200002d8

080002d8 <Lcd_Clear>:

void  Lcd_Clear()
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
	uint8_t x, i;
	for (x = 0; x < 4; x++) {
 80002de:	2300      	movs	r3, #0
 80002e0:	71fb      	strb	r3, [r7, #7]
 80002e2:	e01b      	b.n	800031c <Lcd_Clear+0x44>
		WriteByte_command(0xb0 + x);   //y, page address y=1-0-1-1-y3-y2-y1-y0, 1-page with 8-rows
 80002e4:	79fb      	ldrb	r3, [r7, #7]
 80002e6:	3b50      	subs	r3, #80	; 0x50
 80002e8:	b2db      	uxtb	r3, r3
 80002ea:	4618      	mov	r0, r3
 80002ec:	f7ff ffc4 	bl	8000278 <WriteByte_command>
		WriteByte_command(0x10);       //x, column address x=0-0-0-0-1-x7-x6-x5-x4
 80002f0:	2010      	movs	r0, #16
 80002f2:	f7ff ffc1 	bl	8000278 <WriteByte_command>
		WriteByte_command(0x00);       //x, column address x=0-0-0-0-0-x3-x2-x1-x0
 80002f6:	2000      	movs	r0, #0
 80002f8:	f7ff ffbe 	bl	8000278 <WriteByte_command>
		for (i = 0; i < 128; i++) {
 80002fc:	2300      	movs	r3, #0
 80002fe:	71bb      	strb	r3, [r7, #6]
 8000300:	e005      	b.n	800030e <Lcd_Clear+0x36>
			WriteByte_dat(0x00);         //row=bit0--bit7
 8000302:	2000      	movs	r0, #0
 8000304:	f7ff ffd0 	bl	80002a8 <WriteByte_dat>
		for (i = 0; i < 128; i++) {
 8000308:	79bb      	ldrb	r3, [r7, #6]
 800030a:	3301      	adds	r3, #1
 800030c:	71bb      	strb	r3, [r7, #6]
 800030e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000312:	2b00      	cmp	r3, #0
 8000314:	daf5      	bge.n	8000302 <Lcd_Clear+0x2a>
	for (x = 0; x < 4; x++) {
 8000316:	79fb      	ldrb	r3, [r7, #7]
 8000318:	3301      	adds	r3, #1
 800031a:	71fb      	strb	r3, [r7, #7]
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	2b03      	cmp	r3, #3
 8000320:	d9e0      	bls.n	80002e4 <Lcd_Clear+0xc>
		}
	}
}
 8000322:	bf00      	nop
 8000324:	bf00      	nop
 8000326:	3708      	adds	r7, #8
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}

0800032c <Lcd_Init>:

void  Lcd_Init()
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0

	HAL_Delay(200);
 8000332:	20c8      	movs	r0, #200	; 0xc8
 8000334:	f000 fcec 	bl	8000d10 <HAL_Delay>
	uint8_t i = 0;
 8000338:	2300      	movs	r3, #0
 800033a:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 10; i++) {
 800033c:	2300      	movs	r3, #0
 800033e:	71fb      	strb	r3, [r7, #7]
 8000340:	e00b      	b.n	800035a <Lcd_Init+0x2e>
		WriteByte_command(CMD_Data1[i]);
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	4a13      	ldr	r2, [pc, #76]	; (8000394 <Lcd_Init+0x68>)
 8000346:	5cd3      	ldrb	r3, [r2, r3]
 8000348:	4618      	mov	r0, r3
 800034a:	f7ff ff95 	bl	8000278 <WriteByte_command>
		HAL_Delay(20);
 800034e:	2014      	movs	r0, #20
 8000350:	f000 fcde 	bl	8000d10 <HAL_Delay>
	for (i = 0; i < 10; i++) {
 8000354:	79fb      	ldrb	r3, [r7, #7]
 8000356:	3301      	adds	r3, #1
 8000358:	71fb      	strb	r3, [r7, #7]
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	2b09      	cmp	r3, #9
 800035e:	d9f0      	bls.n	8000342 <Lcd_Init+0x16>
	}
	Lcd_Clear();
 8000360:	f7ff ffba 	bl	80002d8 <Lcd_Clear>
	for (i = 0; i < 8; i++) {
 8000364:	2300      	movs	r3, #0
 8000366:	71fb      	strb	r3, [r7, #7]
 8000368:	e00b      	b.n	8000382 <Lcd_Init+0x56>
		WriteByte_command(CMD_Data2[i]);
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	4a0a      	ldr	r2, [pc, #40]	; (8000398 <Lcd_Init+0x6c>)
 800036e:	5cd3      	ldrb	r3, [r2, r3]
 8000370:	4618      	mov	r0, r3
 8000372:	f7ff ff81 	bl	8000278 <WriteByte_command>
		HAL_Delay(20);
 8000376:	2014      	movs	r0, #20
 8000378:	f000 fcca 	bl	8000d10 <HAL_Delay>
	for (i = 0; i < 8; i++) {
 800037c:	79fb      	ldrb	r3, [r7, #7]
 800037e:	3301      	adds	r3, #1
 8000380:	71fb      	strb	r3, [r7, #7]
 8000382:	79fb      	ldrb	r3, [r7, #7]
 8000384:	2b07      	cmp	r3, #7
 8000386:	d9f0      	bls.n	800036a <Lcd_Init+0x3e>
	}
}
 8000388:	bf00      	nop
 800038a:	bf00      	nop
 800038c:	3708      	adds	r7, #8
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	2000029c 	.word	0x2000029c
 8000398:	200002a8 	.word	0x200002a8

0800039c <Lcd_Cursor>:

void  Lcd_Cursor(uint8_t y, uint8_t x)
{
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	4603      	mov	r3, r0
 80003a4:	460a      	mov	r2, r1
 80003a6:	71fb      	strb	r3, [r7, #7]
 80003a8:	4613      	mov	r3, r2
 80003aa:	71bb      	strb	r3, [r7, #6]
	if (x > 17) {
 80003ac:	79bb      	ldrb	r3, [r7, #6]
 80003ae:	2b11      	cmp	r3, #17
 80003b0:	d901      	bls.n	80003b6 <Lcd_Cursor+0x1a>
		x = 17;
 80003b2:	2311      	movs	r3, #17
 80003b4:	71bb      	strb	r3, [r7, #6]
	}
	if (y > 3) {
 80003b6:	79fb      	ldrb	r3, [r7, #7]
 80003b8:	2b03      	cmp	r3, #3
 80003ba:	d901      	bls.n	80003c0 <Lcd_Cursor+0x24>
		x = 3;
 80003bc:	2303      	movs	r3, #3
 80003be:	71bb      	strb	r3, [r7, #6]
	}
	_cursor[0] = y;
 80003c0:	79fb      	ldrb	r3, [r7, #7]
 80003c2:	4a05      	ldr	r2, [pc, #20]	; (80003d8 <Lcd_Cursor+0x3c>)
 80003c4:	6013      	str	r3, [r2, #0]
	_cursor[1] = x;
 80003c6:	79bb      	ldrb	r3, [r7, #6]
 80003c8:	4a03      	ldr	r2, [pc, #12]	; (80003d8 <Lcd_Cursor+0x3c>)
 80003ca:	6053      	str	r3, [r2, #4]
}
 80003cc:	bf00      	nop
 80003ce:	370c      	adds	r7, #12
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bc80      	pop	{r7}
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	2000032c 	.word	0x2000032c

080003dc <WriteFont>:

void  WriteFont(uint8_t num)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b084      	sub	sp, #16
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	4603      	mov	r3, r0
 80003e4:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < 7; i++) {
 80003e6:	2300      	movs	r3, #0
 80003e8:	60fb      	str	r3, [r7, #12]
 80003ea:	e00e      	b.n	800040a <WriteFont+0x2e>
		WriteByte_dat(*(font_7x8[num] + i));
 80003ec:	79fa      	ldrb	r2, [r7, #7]
 80003ee:	4613      	mov	r3, r2
 80003f0:	00db      	lsls	r3, r3, #3
 80003f2:	1a9b      	subs	r3, r3, r2
 80003f4:	4a09      	ldr	r2, [pc, #36]	; (800041c <WriteFont+0x40>)
 80003f6:	441a      	add	r2, r3
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	4413      	add	r3, r2
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	4618      	mov	r0, r3
 8000400:	f7ff ff52 	bl	80002a8 <WriteByte_dat>
	for (int i = 0; i < 7; i++) {
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	3301      	adds	r3, #1
 8000408:	60fb      	str	r3, [r7, #12]
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	2b06      	cmp	r3, #6
 800040e:	dded      	ble.n	80003ec <WriteFont+0x10>
	}
}
 8000410:	bf00      	nop
 8000412:	bf00      	nop
 8000414:	3710      	adds	r7, #16
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	20000000 	.word	0x20000000

08000420 <Lcd_Display>:

void  Lcd_Display(char *str)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b084      	sub	sp, #16
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
	int len = 0;
 8000428:	2300      	movs	r3, #0
 800042a:	60bb      	str	r3, [r7, #8]
	int num = 0;
 800042c:	2300      	movs	r3, #0
 800042e:	60fb      	str	r3, [r7, #12]
	len = strlen(str);
 8000430:	6878      	ldr	r0, [r7, #4]
 8000432:	f7ff fe8b 	bl	800014c <strlen>
 8000436:	4603      	mov	r3, r0
 8000438:	60bb      	str	r3, [r7, #8]
	WriteByte_command(0xb0 + _cursor[0]);           //y, page address y=1-0-1-1-y3-y2-y1-y0, 1-page with 8-rows
 800043a:	4bd9      	ldr	r3, [pc, #868]	; (80007a0 <Lcd_Display+0x380>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	b2db      	uxtb	r3, r3
 8000440:	3b50      	subs	r3, #80	; 0x50
 8000442:	b2db      	uxtb	r3, r3
 8000444:	4618      	mov	r0, r3
 8000446:	f7ff ff17 	bl	8000278 <WriteByte_command>
	WriteByte_command(0x10 + _cursor[1] * 7 / 16);  //x, column address x=0-0-0-0-1-x7-x6-x5-x4
 800044a:	4bd5      	ldr	r3, [pc, #852]	; (80007a0 <Lcd_Display+0x380>)
 800044c:	685a      	ldr	r2, [r3, #4]
 800044e:	4613      	mov	r3, r2
 8000450:	00db      	lsls	r3, r3, #3
 8000452:	1a9b      	subs	r3, r3, r2
 8000454:	2b00      	cmp	r3, #0
 8000456:	da00      	bge.n	800045a <Lcd_Display+0x3a>
 8000458:	330f      	adds	r3, #15
 800045a:	111b      	asrs	r3, r3, #4
 800045c:	b2db      	uxtb	r3, r3
 800045e:	3310      	adds	r3, #16
 8000460:	b2db      	uxtb	r3, r3
 8000462:	4618      	mov	r0, r3
 8000464:	f7ff ff08 	bl	8000278 <WriteByte_command>
	WriteByte_command(0x00 + _cursor[1] * 7 % 16);  //x, column address x=0-0-0-0-0-x3-x2-x1-x0
 8000468:	4bcd      	ldr	r3, [pc, #820]	; (80007a0 <Lcd_Display+0x380>)
 800046a:	685a      	ldr	r2, [r3, #4]
 800046c:	4613      	mov	r3, r2
 800046e:	00db      	lsls	r3, r3, #3
 8000470:	1a9b      	subs	r3, r3, r2
 8000472:	425a      	negs	r2, r3
 8000474:	f003 030f 	and.w	r3, r3, #15
 8000478:	f002 020f 	and.w	r2, r2, #15
 800047c:	bf58      	it	pl
 800047e:	4253      	negpl	r3, r2
 8000480:	b2db      	uxtb	r3, r3
 8000482:	4618      	mov	r0, r3
 8000484:	f7ff fef8 	bl	8000278 <WriteByte_command>
	for (num = 0; num < len; num++) {
 8000488:	2300      	movs	r3, #0
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	e24a      	b.n	8000924 <Lcd_Display+0x504>
		switch (str[num]) {
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	687a      	ldr	r2, [r7, #4]
 8000492:	4413      	add	r3, r2
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	3b20      	subs	r3, #32
 8000498:	2b5e      	cmp	r3, #94	; 0x5e
 800049a:	f200 823f 	bhi.w	800091c <Lcd_Display+0x4fc>
 800049e:	a201      	add	r2, pc, #4	; (adr r2, 80004a4 <Lcd_Display+0x84>)
 80004a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004a4:	080008dd 	.word	0x080008dd
 80004a8:	08000815 	.word	0x08000815
 80004ac:	0800081d 	.word	0x0800081d
 80004b0:	08000825 	.word	0x08000825
 80004b4:	0800082d 	.word	0x0800082d
 80004b8:	08000835 	.word	0x08000835
 80004bc:	0800083d 	.word	0x0800083d
 80004c0:	08000845 	.word	0x08000845
 80004c4:	0800084d 	.word	0x0800084d
 80004c8:	08000855 	.word	0x08000855
 80004cc:	0800085d 	.word	0x0800085d
 80004d0:	08000865 	.word	0x08000865
 80004d4:	0800086d 	.word	0x0800086d
 80004d8:	08000875 	.word	0x08000875
 80004dc:	080008e5 	.word	0x080008e5
 80004e0:	0800087d 	.word	0x0800087d
 80004e4:	08000621 	.word	0x08000621
 80004e8:	08000629 	.word	0x08000629
 80004ec:	08000631 	.word	0x08000631
 80004f0:	08000639 	.word	0x08000639
 80004f4:	08000641 	.word	0x08000641
 80004f8:	08000649 	.word	0x08000649
 80004fc:	08000651 	.word	0x08000651
 8000500:	08000659 	.word	0x08000659
 8000504:	08000661 	.word	0x08000661
 8000508:	08000669 	.word	0x08000669
 800050c:	08000885 	.word	0x08000885
 8000510:	0800088d 	.word	0x0800088d
 8000514:	08000895 	.word	0x08000895
 8000518:	0800089d 	.word	0x0800089d
 800051c:	080008a5 	.word	0x080008a5
 8000520:	080008ad 	.word	0x080008ad
 8000524:	080008b5 	.word	0x080008b5
 8000528:	08000741 	.word	0x08000741
 800052c:	08000749 	.word	0x08000749
 8000530:	08000751 	.word	0x08000751
 8000534:	08000759 	.word	0x08000759
 8000538:	08000761 	.word	0x08000761
 800053c:	08000769 	.word	0x08000769
 8000540:	08000771 	.word	0x08000771
 8000544:	08000779 	.word	0x08000779
 8000548:	08000781 	.word	0x08000781
 800054c:	08000789 	.word	0x08000789
 8000550:	08000791 	.word	0x08000791
 8000554:	08000799 	.word	0x08000799
 8000558:	080007a5 	.word	0x080007a5
 800055c:	080007ad 	.word	0x080007ad
 8000560:	080007b5 	.word	0x080007b5
 8000564:	080007bd 	.word	0x080007bd
 8000568:	080007c5 	.word	0x080007c5
 800056c:	080007cd 	.word	0x080007cd
 8000570:	080007d5 	.word	0x080007d5
 8000574:	080007dd 	.word	0x080007dd
 8000578:	080007e5 	.word	0x080007e5
 800057c:	080007ed 	.word	0x080007ed
 8000580:	080007f5 	.word	0x080007f5
 8000584:	080007fd 	.word	0x080007fd
 8000588:	08000805 	.word	0x08000805
 800058c:	0800080d 	.word	0x0800080d
 8000590:	08000905 	.word	0x08000905
 8000594:	0800090d 	.word	0x0800090d
 8000598:	08000915 	.word	0x08000915
 800059c:	080008ed 	.word	0x080008ed
 80005a0:	080008f5 	.word	0x080008f5
 80005a4:	080008fd 	.word	0x080008fd
 80005a8:	08000671 	.word	0x08000671
 80005ac:	08000679 	.word	0x08000679
 80005b0:	08000681 	.word	0x08000681
 80005b4:	08000689 	.word	0x08000689
 80005b8:	08000691 	.word	0x08000691
 80005bc:	08000699 	.word	0x08000699
 80005c0:	080006a1 	.word	0x080006a1
 80005c4:	080006a9 	.word	0x080006a9
 80005c8:	080006b1 	.word	0x080006b1
 80005cc:	080006b9 	.word	0x080006b9
 80005d0:	080006c1 	.word	0x080006c1
 80005d4:	080006c9 	.word	0x080006c9
 80005d8:	080006d1 	.word	0x080006d1
 80005dc:	080006d9 	.word	0x080006d9
 80005e0:	080006e1 	.word	0x080006e1
 80005e4:	080006e9 	.word	0x080006e9
 80005e8:	080006f1 	.word	0x080006f1
 80005ec:	080006f9 	.word	0x080006f9
 80005f0:	08000701 	.word	0x08000701
 80005f4:	08000709 	.word	0x08000709
 80005f8:	08000711 	.word	0x08000711
 80005fc:	08000719 	.word	0x08000719
 8000600:	08000721 	.word	0x08000721
 8000604:	08000729 	.word	0x08000729
 8000608:	08000731 	.word	0x08000731
 800060c:	08000739 	.word	0x08000739
 8000610:	080008bd 	.word	0x080008bd
 8000614:	080008c5 	.word	0x080008c5
 8000618:	080008cd 	.word	0x080008cd
 800061c:	080008d5 	.word	0x080008d5
			case '0':
				WriteFont(0);
 8000620:	2000      	movs	r0, #0
 8000622:	f7ff fedb 	bl	80003dc <WriteFont>
				break;
 8000626:	e17a      	b.n	800091e <Lcd_Display+0x4fe>
			case '1':
				WriteFont(1);
 8000628:	2001      	movs	r0, #1
 800062a:	f7ff fed7 	bl	80003dc <WriteFont>
				break;
 800062e:	e176      	b.n	800091e <Lcd_Display+0x4fe>
			case '2':
				WriteFont(2);
 8000630:	2002      	movs	r0, #2
 8000632:	f7ff fed3 	bl	80003dc <WriteFont>
				break;
 8000636:	e172      	b.n	800091e <Lcd_Display+0x4fe>
			case '3':
				WriteFont(3);
 8000638:	2003      	movs	r0, #3
 800063a:	f7ff fecf 	bl	80003dc <WriteFont>
				break;
 800063e:	e16e      	b.n	800091e <Lcd_Display+0x4fe>
			case '4':
				WriteFont(4);
 8000640:	2004      	movs	r0, #4
 8000642:	f7ff fecb 	bl	80003dc <WriteFont>
				break;
 8000646:	e16a      	b.n	800091e <Lcd_Display+0x4fe>
			case '5':
				WriteFont(5);
 8000648:	2005      	movs	r0, #5
 800064a:	f7ff fec7 	bl	80003dc <WriteFont>
				break;
 800064e:	e166      	b.n	800091e <Lcd_Display+0x4fe>
			case '6':
				WriteFont(6);
 8000650:	2006      	movs	r0, #6
 8000652:	f7ff fec3 	bl	80003dc <WriteFont>
				break;
 8000656:	e162      	b.n	800091e <Lcd_Display+0x4fe>
			case '7':
				WriteFont(7);
 8000658:	2007      	movs	r0, #7
 800065a:	f7ff febf 	bl	80003dc <WriteFont>
				break;
 800065e:	e15e      	b.n	800091e <Lcd_Display+0x4fe>
			case '8':
				WriteFont(8);
 8000660:	2008      	movs	r0, #8
 8000662:	f7ff febb 	bl	80003dc <WriteFont>
				break;
 8000666:	e15a      	b.n	800091e <Lcd_Display+0x4fe>
			case '9':
				WriteFont(9);
 8000668:	2009      	movs	r0, #9
 800066a:	f7ff feb7 	bl	80003dc <WriteFont>
				break;
 800066e:	e156      	b.n	800091e <Lcd_Display+0x4fe>
			case 'a':
				WriteFont(10);
 8000670:	200a      	movs	r0, #10
 8000672:	f7ff feb3 	bl	80003dc <WriteFont>
				break;
 8000676:	e152      	b.n	800091e <Lcd_Display+0x4fe>
			case 'b':
				WriteFont(11);
 8000678:	200b      	movs	r0, #11
 800067a:	f7ff feaf 	bl	80003dc <WriteFont>
				break;
 800067e:	e14e      	b.n	800091e <Lcd_Display+0x4fe>
			case 'c':
				WriteFont(12);
 8000680:	200c      	movs	r0, #12
 8000682:	f7ff feab 	bl	80003dc <WriteFont>
				break;
 8000686:	e14a      	b.n	800091e <Lcd_Display+0x4fe>
			case 'd':
				WriteFont(13);
 8000688:	200d      	movs	r0, #13
 800068a:	f7ff fea7 	bl	80003dc <WriteFont>
				break;
 800068e:	e146      	b.n	800091e <Lcd_Display+0x4fe>
			case 'e':
				WriteFont(14);
 8000690:	200e      	movs	r0, #14
 8000692:	f7ff fea3 	bl	80003dc <WriteFont>
				break;
 8000696:	e142      	b.n	800091e <Lcd_Display+0x4fe>
			case 'f':
				WriteFont(15);
 8000698:	200f      	movs	r0, #15
 800069a:	f7ff fe9f 	bl	80003dc <WriteFont>
				break;
 800069e:	e13e      	b.n	800091e <Lcd_Display+0x4fe>
			case 'g':
				WriteFont(16);
 80006a0:	2010      	movs	r0, #16
 80006a2:	f7ff fe9b 	bl	80003dc <WriteFont>
				break;
 80006a6:	e13a      	b.n	800091e <Lcd_Display+0x4fe>
			case 'h':
				WriteFont(17);
 80006a8:	2011      	movs	r0, #17
 80006aa:	f7ff fe97 	bl	80003dc <WriteFont>
				break;
 80006ae:	e136      	b.n	800091e <Lcd_Display+0x4fe>
			case 'i':
				WriteFont(18);
 80006b0:	2012      	movs	r0, #18
 80006b2:	f7ff fe93 	bl	80003dc <WriteFont>
				break;
 80006b6:	e132      	b.n	800091e <Lcd_Display+0x4fe>
			case 'j':
				WriteFont(19);
 80006b8:	2013      	movs	r0, #19
 80006ba:	f7ff fe8f 	bl	80003dc <WriteFont>
				break;
 80006be:	e12e      	b.n	800091e <Lcd_Display+0x4fe>
			case 'k':
				WriteFont(20);
 80006c0:	2014      	movs	r0, #20
 80006c2:	f7ff fe8b 	bl	80003dc <WriteFont>
				break;
 80006c6:	e12a      	b.n	800091e <Lcd_Display+0x4fe>
			case 'l':
				WriteFont(21);
 80006c8:	2015      	movs	r0, #21
 80006ca:	f7ff fe87 	bl	80003dc <WriteFont>
				break;
 80006ce:	e126      	b.n	800091e <Lcd_Display+0x4fe>
			case 'm':
				WriteFont(22);
 80006d0:	2016      	movs	r0, #22
 80006d2:	f7ff fe83 	bl	80003dc <WriteFont>
				break;
 80006d6:	e122      	b.n	800091e <Lcd_Display+0x4fe>
			case 'n':
				WriteFont(23);
 80006d8:	2017      	movs	r0, #23
 80006da:	f7ff fe7f 	bl	80003dc <WriteFont>
				break;
 80006de:	e11e      	b.n	800091e <Lcd_Display+0x4fe>
			case 'o':
				WriteFont(24);
 80006e0:	2018      	movs	r0, #24
 80006e2:	f7ff fe7b 	bl	80003dc <WriteFont>
				break;
 80006e6:	e11a      	b.n	800091e <Lcd_Display+0x4fe>
			case 'p':
				WriteFont(25);
 80006e8:	2019      	movs	r0, #25
 80006ea:	f7ff fe77 	bl	80003dc <WriteFont>
				break;
 80006ee:	e116      	b.n	800091e <Lcd_Display+0x4fe>
			case 'q':
				WriteFont(26);
 80006f0:	201a      	movs	r0, #26
 80006f2:	f7ff fe73 	bl	80003dc <WriteFont>
				break;
 80006f6:	e112      	b.n	800091e <Lcd_Display+0x4fe>
			case 'r':
				WriteFont(27);
 80006f8:	201b      	movs	r0, #27
 80006fa:	f7ff fe6f 	bl	80003dc <WriteFont>
				break;
 80006fe:	e10e      	b.n	800091e <Lcd_Display+0x4fe>
			case 's':
				WriteFont(28);
 8000700:	201c      	movs	r0, #28
 8000702:	f7ff fe6b 	bl	80003dc <WriteFont>
				break;
 8000706:	e10a      	b.n	800091e <Lcd_Display+0x4fe>
			case 't':
				WriteFont(29);
 8000708:	201d      	movs	r0, #29
 800070a:	f7ff fe67 	bl	80003dc <WriteFont>
				break;
 800070e:	e106      	b.n	800091e <Lcd_Display+0x4fe>
			case 'u':
				WriteFont(30);
 8000710:	201e      	movs	r0, #30
 8000712:	f7ff fe63 	bl	80003dc <WriteFont>
				break;
 8000716:	e102      	b.n	800091e <Lcd_Display+0x4fe>
			case 'v':
				WriteFont(31);
 8000718:	201f      	movs	r0, #31
 800071a:	f7ff fe5f 	bl	80003dc <WriteFont>
				break;
 800071e:	e0fe      	b.n	800091e <Lcd_Display+0x4fe>
			case 'w':
				WriteFont(32);
 8000720:	2020      	movs	r0, #32
 8000722:	f7ff fe5b 	bl	80003dc <WriteFont>
				break;
 8000726:	e0fa      	b.n	800091e <Lcd_Display+0x4fe>
			case 'x':
				WriteFont(33);
 8000728:	2021      	movs	r0, #33	; 0x21
 800072a:	f7ff fe57 	bl	80003dc <WriteFont>
				break;
 800072e:	e0f6      	b.n	800091e <Lcd_Display+0x4fe>
			case 'y':
				WriteFont(34);
 8000730:	2022      	movs	r0, #34	; 0x22
 8000732:	f7ff fe53 	bl	80003dc <WriteFont>
				break;
 8000736:	e0f2      	b.n	800091e <Lcd_Display+0x4fe>
			case 'z':
				WriteFont(35);
 8000738:	2023      	movs	r0, #35	; 0x23
 800073a:	f7ff fe4f 	bl	80003dc <WriteFont>
				break;
 800073e:	e0ee      	b.n	800091e <Lcd_Display+0x4fe>
			case 'A':
				WriteFont(36);
 8000740:	2024      	movs	r0, #36	; 0x24
 8000742:	f7ff fe4b 	bl	80003dc <WriteFont>
				break;
 8000746:	e0ea      	b.n	800091e <Lcd_Display+0x4fe>
			case 'B':
				WriteFont(37);
 8000748:	2025      	movs	r0, #37	; 0x25
 800074a:	f7ff fe47 	bl	80003dc <WriteFont>
				break;
 800074e:	e0e6      	b.n	800091e <Lcd_Display+0x4fe>
			case 'C':
				WriteFont(38);
 8000750:	2026      	movs	r0, #38	; 0x26
 8000752:	f7ff fe43 	bl	80003dc <WriteFont>
				break;
 8000756:	e0e2      	b.n	800091e <Lcd_Display+0x4fe>
			case 'D':
				WriteFont(39);
 8000758:	2027      	movs	r0, #39	; 0x27
 800075a:	f7ff fe3f 	bl	80003dc <WriteFont>
				break;
 800075e:	e0de      	b.n	800091e <Lcd_Display+0x4fe>
			case 'E':
				WriteFont(40);
 8000760:	2028      	movs	r0, #40	; 0x28
 8000762:	f7ff fe3b 	bl	80003dc <WriteFont>
				break;
 8000766:	e0da      	b.n	800091e <Lcd_Display+0x4fe>
			case 'F':
				WriteFont(41);
 8000768:	2029      	movs	r0, #41	; 0x29
 800076a:	f7ff fe37 	bl	80003dc <WriteFont>
				break;
 800076e:	e0d6      	b.n	800091e <Lcd_Display+0x4fe>
			case 'G':
				WriteFont(42);
 8000770:	202a      	movs	r0, #42	; 0x2a
 8000772:	f7ff fe33 	bl	80003dc <WriteFont>
				break;
 8000776:	e0d2      	b.n	800091e <Lcd_Display+0x4fe>
			case 'H':
				WriteFont(43);
 8000778:	202b      	movs	r0, #43	; 0x2b
 800077a:	f7ff fe2f 	bl	80003dc <WriteFont>
				break;
 800077e:	e0ce      	b.n	800091e <Lcd_Display+0x4fe>
			case 'I':
				WriteFont(44);
 8000780:	202c      	movs	r0, #44	; 0x2c
 8000782:	f7ff fe2b 	bl	80003dc <WriteFont>
				break;
 8000786:	e0ca      	b.n	800091e <Lcd_Display+0x4fe>
			case 'J':
				WriteFont(45);
 8000788:	202d      	movs	r0, #45	; 0x2d
 800078a:	f7ff fe27 	bl	80003dc <WriteFont>
				break;
 800078e:	e0c6      	b.n	800091e <Lcd_Display+0x4fe>
			case 'K':
				WriteFont(46);
 8000790:	202e      	movs	r0, #46	; 0x2e
 8000792:	f7ff fe23 	bl	80003dc <WriteFont>
				break;
 8000796:	e0c2      	b.n	800091e <Lcd_Display+0x4fe>
			case 'L':
				WriteFont(47);
 8000798:	202f      	movs	r0, #47	; 0x2f
 800079a:	f7ff fe1f 	bl	80003dc <WriteFont>
				break;
 800079e:	e0be      	b.n	800091e <Lcd_Display+0x4fe>
 80007a0:	2000032c 	.word	0x2000032c
			case 'M':
				WriteFont(48);
 80007a4:	2030      	movs	r0, #48	; 0x30
 80007a6:	f7ff fe19 	bl	80003dc <WriteFont>
				break;
 80007aa:	e0b8      	b.n	800091e <Lcd_Display+0x4fe>
			case 'N':
				WriteFont(49);
 80007ac:	2031      	movs	r0, #49	; 0x31
 80007ae:	f7ff fe15 	bl	80003dc <WriteFont>
				break;
 80007b2:	e0b4      	b.n	800091e <Lcd_Display+0x4fe>
			case 'O':
				WriteFont(50);
 80007b4:	2032      	movs	r0, #50	; 0x32
 80007b6:	f7ff fe11 	bl	80003dc <WriteFont>
				break;
 80007ba:	e0b0      	b.n	800091e <Lcd_Display+0x4fe>
			case 'P':
				WriteFont(51);
 80007bc:	2033      	movs	r0, #51	; 0x33
 80007be:	f7ff fe0d 	bl	80003dc <WriteFont>
				break;
 80007c2:	e0ac      	b.n	800091e <Lcd_Display+0x4fe>
			case 'Q':
				WriteFont(52);
 80007c4:	2034      	movs	r0, #52	; 0x34
 80007c6:	f7ff fe09 	bl	80003dc <WriteFont>
				break;
 80007ca:	e0a8      	b.n	800091e <Lcd_Display+0x4fe>
			case 'R':
				WriteFont(53);
 80007cc:	2035      	movs	r0, #53	; 0x35
 80007ce:	f7ff fe05 	bl	80003dc <WriteFont>
				break;
 80007d2:	e0a4      	b.n	800091e <Lcd_Display+0x4fe>
			case 'S':
				WriteFont(54);
 80007d4:	2036      	movs	r0, #54	; 0x36
 80007d6:	f7ff fe01 	bl	80003dc <WriteFont>
				break;
 80007da:	e0a0      	b.n	800091e <Lcd_Display+0x4fe>
			case 'T':
				WriteFont(55);
 80007dc:	2037      	movs	r0, #55	; 0x37
 80007de:	f7ff fdfd 	bl	80003dc <WriteFont>
				break;
 80007e2:	e09c      	b.n	800091e <Lcd_Display+0x4fe>
			case 'U':
				WriteFont(56);
 80007e4:	2038      	movs	r0, #56	; 0x38
 80007e6:	f7ff fdf9 	bl	80003dc <WriteFont>
				break;
 80007ea:	e098      	b.n	800091e <Lcd_Display+0x4fe>
			case 'V':
				WriteFont(57);
 80007ec:	2039      	movs	r0, #57	; 0x39
 80007ee:	f7ff fdf5 	bl	80003dc <WriteFont>
				break;
 80007f2:	e094      	b.n	800091e <Lcd_Display+0x4fe>
			case 'W':
				WriteFont(58);
 80007f4:	203a      	movs	r0, #58	; 0x3a
 80007f6:	f7ff fdf1 	bl	80003dc <WriteFont>
				break;
 80007fa:	e090      	b.n	800091e <Lcd_Display+0x4fe>
			case 'X':
				WriteFont(59);
 80007fc:	203b      	movs	r0, #59	; 0x3b
 80007fe:	f7ff fded 	bl	80003dc <WriteFont>
				break;
 8000802:	e08c      	b.n	800091e <Lcd_Display+0x4fe>
			case 'Y':
				WriteFont(60);
 8000804:	203c      	movs	r0, #60	; 0x3c
 8000806:	f7ff fde9 	bl	80003dc <WriteFont>
				break;
 800080a:	e088      	b.n	800091e <Lcd_Display+0x4fe>
			case 'Z':
				WriteFont(61);
 800080c:	203d      	movs	r0, #61	; 0x3d
 800080e:	f7ff fde5 	bl	80003dc <WriteFont>
				break;
 8000812:	e084      	b.n	800091e <Lcd_Display+0x4fe>
			case '!':
				WriteFont(62);
 8000814:	203e      	movs	r0, #62	; 0x3e
 8000816:	f7ff fde1 	bl	80003dc <WriteFont>
				break;
 800081a:	e080      	b.n	800091e <Lcd_Display+0x4fe>
			case '"':
				WriteFont(63);
 800081c:	203f      	movs	r0, #63	; 0x3f
 800081e:	f7ff fddd 	bl	80003dc <WriteFont>
				break;
 8000822:	e07c      	b.n	800091e <Lcd_Display+0x4fe>
			case '#':
				WriteFont(64);
 8000824:	2040      	movs	r0, #64	; 0x40
 8000826:	f7ff fdd9 	bl	80003dc <WriteFont>
				break;
 800082a:	e078      	b.n	800091e <Lcd_Display+0x4fe>
			case '$':
				WriteFont(65);
 800082c:	2041      	movs	r0, #65	; 0x41
 800082e:	f7ff fdd5 	bl	80003dc <WriteFont>
				break;
 8000832:	e074      	b.n	800091e <Lcd_Display+0x4fe>
			case '%':
				WriteFont(66);
 8000834:	2042      	movs	r0, #66	; 0x42
 8000836:	f7ff fdd1 	bl	80003dc <WriteFont>
				break;
 800083a:	e070      	b.n	800091e <Lcd_Display+0x4fe>
			case '&':
				WriteFont(67);
 800083c:	2043      	movs	r0, #67	; 0x43
 800083e:	f7ff fdcd 	bl	80003dc <WriteFont>
				break;
 8000842:	e06c      	b.n	800091e <Lcd_Display+0x4fe>
			case '\'':
				WriteFont(68);
 8000844:	2044      	movs	r0, #68	; 0x44
 8000846:	f7ff fdc9 	bl	80003dc <WriteFont>
				break;
 800084a:	e068      	b.n	800091e <Lcd_Display+0x4fe>
			case '(':
				WriteFont(69);
 800084c:	2045      	movs	r0, #69	; 0x45
 800084e:	f7ff fdc5 	bl	80003dc <WriteFont>
				break;
 8000852:	e064      	b.n	800091e <Lcd_Display+0x4fe>
			case ')':
				WriteFont(70);
 8000854:	2046      	movs	r0, #70	; 0x46
 8000856:	f7ff fdc1 	bl	80003dc <WriteFont>
				break;
 800085a:	e060      	b.n	800091e <Lcd_Display+0x4fe>
			case '*':
				WriteFont(71);
 800085c:	2047      	movs	r0, #71	; 0x47
 800085e:	f7ff fdbd 	bl	80003dc <WriteFont>
				break;
 8000862:	e05c      	b.n	800091e <Lcd_Display+0x4fe>
			case '+':
				WriteFont(72);
 8000864:	2048      	movs	r0, #72	; 0x48
 8000866:	f7ff fdb9 	bl	80003dc <WriteFont>
				break;
 800086a:	e058      	b.n	800091e <Lcd_Display+0x4fe>
			case ',':
				WriteFont(73);
 800086c:	2049      	movs	r0, #73	; 0x49
 800086e:	f7ff fdb5 	bl	80003dc <WriteFont>
				break;
 8000872:	e054      	b.n	800091e <Lcd_Display+0x4fe>
			case '-':
				WriteFont(74);
 8000874:	204a      	movs	r0, #74	; 0x4a
 8000876:	f7ff fdb1 	bl	80003dc <WriteFont>
				break;
 800087a:	e050      	b.n	800091e <Lcd_Display+0x4fe>
			case '/':
				WriteFont(75);
 800087c:	204b      	movs	r0, #75	; 0x4b
 800087e:	f7ff fdad 	bl	80003dc <WriteFont>
				break;
 8000882:	e04c      	b.n	800091e <Lcd_Display+0x4fe>
			case ':':
				WriteFont(76);
 8000884:	204c      	movs	r0, #76	; 0x4c
 8000886:	f7ff fda9 	bl	80003dc <WriteFont>
				break;
 800088a:	e048      	b.n	800091e <Lcd_Display+0x4fe>
			case ';':
				WriteFont(77);
 800088c:	204d      	movs	r0, #77	; 0x4d
 800088e:	f7ff fda5 	bl	80003dc <WriteFont>
				break;
 8000892:	e044      	b.n	800091e <Lcd_Display+0x4fe>
			case '<':
				WriteFont(78);
 8000894:	204e      	movs	r0, #78	; 0x4e
 8000896:	f7ff fda1 	bl	80003dc <WriteFont>
				break;
 800089a:	e040      	b.n	800091e <Lcd_Display+0x4fe>
			case '=':
				WriteFont(79);
 800089c:	204f      	movs	r0, #79	; 0x4f
 800089e:	f7ff fd9d 	bl	80003dc <WriteFont>
				break;
 80008a2:	e03c      	b.n	800091e <Lcd_Display+0x4fe>
			case '>':
				WriteFont(80);
 80008a4:	2050      	movs	r0, #80	; 0x50
 80008a6:	f7ff fd99 	bl	80003dc <WriteFont>
				break;
 80008aa:	e038      	b.n	800091e <Lcd_Display+0x4fe>
			case '?':
				WriteFont(81);
 80008ac:	2051      	movs	r0, #81	; 0x51
 80008ae:	f7ff fd95 	bl	80003dc <WriteFont>
				break;
 80008b2:	e034      	b.n	800091e <Lcd_Display+0x4fe>
			case '@':
				WriteFont(82);
 80008b4:	2052      	movs	r0, #82	; 0x52
 80008b6:	f7ff fd91 	bl	80003dc <WriteFont>
				break;
 80008ba:	e030      	b.n	800091e <Lcd_Display+0x4fe>
			case '{':
				WriteFont(83);
 80008bc:	2053      	movs	r0, #83	; 0x53
 80008be:	f7ff fd8d 	bl	80003dc <WriteFont>
				break;
 80008c2:	e02c      	b.n	800091e <Lcd_Display+0x4fe>
			case '|':
				WriteFont(84);
 80008c4:	2054      	movs	r0, #84	; 0x54
 80008c6:	f7ff fd89 	bl	80003dc <WriteFont>
				break;
 80008ca:	e028      	b.n	800091e <Lcd_Display+0x4fe>
			case '}':
				WriteFont(85);
 80008cc:	2055      	movs	r0, #85	; 0x55
 80008ce:	f7ff fd85 	bl	80003dc <WriteFont>
				break;
 80008d2:	e024      	b.n	800091e <Lcd_Display+0x4fe>
			case '~':
				WriteFont(86);
 80008d4:	2056      	movs	r0, #86	; 0x56
 80008d6:	f7ff fd81 	bl	80003dc <WriteFont>
				break;
 80008da:	e020      	b.n	800091e <Lcd_Display+0x4fe>
			case ' ':
				WriteFont(87);
 80008dc:	2057      	movs	r0, #87	; 0x57
 80008de:	f7ff fd7d 	bl	80003dc <WriteFont>
				break;
 80008e2:	e01c      	b.n	800091e <Lcd_Display+0x4fe>
			case '.':
				WriteFont(88);
 80008e4:	2058      	movs	r0, #88	; 0x58
 80008e6:	f7ff fd79 	bl	80003dc <WriteFont>
				break;
 80008ea:	e018      	b.n	800091e <Lcd_Display+0x4fe>
			case '^':
				WriteFont(89);
 80008ec:	2059      	movs	r0, #89	; 0x59
 80008ee:	f7ff fd75 	bl	80003dc <WriteFont>
				break;
 80008f2:	e014      	b.n	800091e <Lcd_Display+0x4fe>
			case '_':
				WriteFont(90);
 80008f4:	205a      	movs	r0, #90	; 0x5a
 80008f6:	f7ff fd71 	bl	80003dc <WriteFont>
				break;
 80008fa:	e010      	b.n	800091e <Lcd_Display+0x4fe>
			case '`':
				WriteFont(91);
 80008fc:	205b      	movs	r0, #91	; 0x5b
 80008fe:	f7ff fd6d 	bl	80003dc <WriteFont>
				break;
 8000902:	e00c      	b.n	800091e <Lcd_Display+0x4fe>
			case '[':
				WriteFont(92);
 8000904:	205c      	movs	r0, #92	; 0x5c
 8000906:	f7ff fd69 	bl	80003dc <WriteFont>
				break;
 800090a:	e008      	b.n	800091e <Lcd_Display+0x4fe>
			case '\\':
				WriteFont(93);
 800090c:	205d      	movs	r0, #93	; 0x5d
 800090e:	f7ff fd65 	bl	80003dc <WriteFont>
				break;
 8000912:	e004      	b.n	800091e <Lcd_Display+0x4fe>
			case ']':
				WriteFont(94);
 8000914:	205e      	movs	r0, #94	; 0x5e
 8000916:	f7ff fd61 	bl	80003dc <WriteFont>
				break;
 800091a:	e000      	b.n	800091e <Lcd_Display+0x4fe>
			default:
				break;
 800091c:	bf00      	nop
	for (num = 0; num < len; num++) {
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	3301      	adds	r3, #1
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fa      	ldr	r2, [r7, #12]
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	429a      	cmp	r2, r3
 800092a:	f6ff adb0 	blt.w	800048e <Lcd_Display+0x6e>
		}
	}
}
 800092e:	bf00      	nop
 8000930:	bf00      	nop
 8000932:	3710      	adds	r7, #16
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <Lcd_DisplayNum>:


//display number
void  Lcd_DisplayNum(uint16_t number, int Length)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b088      	sub	sp, #32
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	6039      	str	r1, [r7, #0]
 8000942:	80fb      	strh	r3, [r7, #6]
	char array[18];
	uint8_t k = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	77fb      	strb	r3, [r7, #31]
	array[Length] = 0;
 8000948:	f107 020c 	add.w	r2, r7, #12
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	4413      	add	r3, r2
 8000950:	2200      	movs	r2, #0
 8000952:	701a      	strb	r2, [r3, #0]
	for (k = Length; k > 0; k--) {
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	77fb      	strb	r3, [r7, #31]
 8000958:	e01c      	b.n	8000994 <Lcd_DisplayNum+0x5c>
		array[k - 1] = number % 10 + '0';
 800095a:	88fa      	ldrh	r2, [r7, #6]
 800095c:	4b20      	ldr	r3, [pc, #128]	; (80009e0 <Lcd_DisplayNum+0xa8>)
 800095e:	fba3 1302 	umull	r1, r3, r3, r2
 8000962:	08d9      	lsrs	r1, r3, #3
 8000964:	460b      	mov	r3, r1
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	440b      	add	r3, r1
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	1ad3      	subs	r3, r2, r3
 800096e:	b29b      	uxth	r3, r3
 8000970:	b2da      	uxtb	r2, r3
 8000972:	7ffb      	ldrb	r3, [r7, #31]
 8000974:	3b01      	subs	r3, #1
 8000976:	3230      	adds	r2, #48	; 0x30
 8000978:	b2d2      	uxtb	r2, r2
 800097a:	3320      	adds	r3, #32
 800097c:	443b      	add	r3, r7
 800097e:	f803 2c14 	strb.w	r2, [r3, #-20]
		number /= 10;
 8000982:	88fb      	ldrh	r3, [r7, #6]
 8000984:	4a16      	ldr	r2, [pc, #88]	; (80009e0 <Lcd_DisplayNum+0xa8>)
 8000986:	fba2 2303 	umull	r2, r3, r2, r3
 800098a:	08db      	lsrs	r3, r3, #3
 800098c:	80fb      	strh	r3, [r7, #6]
	for (k = Length; k > 0; k--) {
 800098e:	7ffb      	ldrb	r3, [r7, #31]
 8000990:	3b01      	subs	r3, #1
 8000992:	77fb      	strb	r3, [r7, #31]
 8000994:	7ffb      	ldrb	r3, [r7, #31]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d1df      	bne.n	800095a <Lcd_DisplayNum+0x22>
	}

	for (k = 0; k < Length - 1; k++) {
 800099a:	2300      	movs	r3, #0
 800099c:	77fb      	strb	r3, [r7, #31]
 800099e:	e00f      	b.n	80009c0 <Lcd_DisplayNum+0x88>
		if (array[k] == '0') {
 80009a0:	7ffb      	ldrb	r3, [r7, #31]
 80009a2:	3320      	adds	r3, #32
 80009a4:	443b      	add	r3, r7
 80009a6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80009aa:	2b30      	cmp	r3, #48	; 0x30
 80009ac:	d10e      	bne.n	80009cc <Lcd_DisplayNum+0x94>
			array[k] = ' ';
 80009ae:	7ffb      	ldrb	r3, [r7, #31]
 80009b0:	3320      	adds	r3, #32
 80009b2:	443b      	add	r3, r7
 80009b4:	2220      	movs	r2, #32
 80009b6:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (k = 0; k < Length - 1; k++) {
 80009ba:	7ffb      	ldrb	r3, [r7, #31]
 80009bc:	3301      	adds	r3, #1
 80009be:	77fb      	strb	r3, [r7, #31]
 80009c0:	7ffa      	ldrb	r2, [r7, #31]
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	3b01      	subs	r3, #1
 80009c6:	429a      	cmp	r2, r3
 80009c8:	dbea      	blt.n	80009a0 <Lcd_DisplayNum+0x68>
 80009ca:	e000      	b.n	80009ce <Lcd_DisplayNum+0x96>
		}
		else {
			break;
 80009cc:	bf00      	nop
		}
	}

	Lcd_Display(array);
 80009ce:	f107 030c 	add.w	r3, r7, #12
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff fd24 	bl	8000420 <Lcd_Display>
}
 80009d8:	bf00      	nop
 80009da:	3720      	adds	r7, #32
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	cccccccd 	.word	0xcccccccd

080009e4 <Lcd_DisplayPicture>:
void Lcd_DisplayPicture(){
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
  for(int x=0; x<4; x++){
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	e024      	b.n	8000a3a <Lcd_DisplayPicture+0x56>
    WriteByte_command(0xb0 + x);   //y, page address y=1-0-1-1-y3-y2-y1-y0, 1-page with 8-rows
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	3b50      	subs	r3, #80	; 0x50
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fc3d 	bl	8000278 <WriteByte_command>

    /*******automatically increased by one******/
    WriteByte_command(0x10);       //x, column address x=0-0-0-0-1-x7-x6-x5-x4
 80009fe:	2010      	movs	r0, #16
 8000a00:	f7ff fc3a 	bl	8000278 <WriteByte_command>
    WriteByte_command(0x00);       //x, column address x=0-0-0-0-0-x3-x2-x1-x0
 8000a04:	2000      	movs	r0, #0
 8000a06:	f7ff fc37 	bl	8000278 <WriteByte_command>

    for(int i=0; i<128; i++){
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	e00e      	b.n	8000a2e <Lcd_DisplayPicture+0x4a>
      WriteByte_dat(*(picture+i+x*128));
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	01da      	lsls	r2, r3, #7
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	4413      	add	r3, r2
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	4a0c      	ldr	r2, [pc, #48]	; (8000a4c <Lcd_DisplayPicture+0x68>)
 8000a1c:	4413      	add	r3, r2
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff fc40 	bl	80002a8 <WriteByte_dat>
    for(int i=0; i<128; i++){
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	603b      	str	r3, [r7, #0]
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	2b7f      	cmp	r3, #127	; 0x7f
 8000a32:	dded      	ble.n	8000a10 <Lcd_DisplayPicture+0x2c>
  for(int x=0; x<4; x++){
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3301      	adds	r3, #1
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2b03      	cmp	r3, #3
 8000a3e:	ddd7      	ble.n	80009f0 <Lcd_DisplayPicture+0xc>
      }
  }
}
 8000a40:	bf00      	nop
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	08002424 	.word	0x08002424

08000a50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a54:	f000 f8fa 	bl	8000c4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a58:	f000 f838 	bl	8000acc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a5c:	f7ff fb7e 	bl	800015c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a60:	f7ff fb9e 	bl	80001a0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  Lcd_Init(); //initialize
 8000a64:	f7ff fc62 	bl	800032c <Lcd_Init>
  Lcd_Clear();  //clear
 8000a68:	f7ff fc36 	bl	80002d8 <Lcd_Clear>
  Lcd_Cursor(0, 4); //Set display position
 8000a6c:	2104      	movs	r1, #4
 8000a6e:	2000      	movs	r0, #0
 8000a70:	f7ff fc94 	bl	800039c <Lcd_Cursor>
  Lcd_DisplayNum(12345,3); //Setting the display
 8000a74:	2103      	movs	r1, #3
 8000a76:	f243 0039 	movw	r0, #12345	; 0x3039
 8000a7a:	f7ff ff5d 	bl	8000938 <Lcd_DisplayNum>
  Lcd_Cursor(1, 0);
 8000a7e:	2100      	movs	r1, #0
 8000a80:	2001      	movs	r0, #1
 8000a82:	f7ff fc8b 	bl	800039c <Lcd_Cursor>
  Lcd_Display("ABCDEFGHIJKLMNOPQR");
 8000a86:	480e      	ldr	r0, [pc, #56]	; (8000ac0 <main+0x70>)
 8000a88:	f7ff fcca 	bl	8000420 <Lcd_Display>
  Lcd_Cursor(2, 0);
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	2002      	movs	r0, #2
 8000a90:	f7ff fc84 	bl	800039c <Lcd_Cursor>
  Lcd_Display("123456789+-*/<>=$@");
 8000a94:	480b      	ldr	r0, [pc, #44]	; (8000ac4 <main+0x74>)
 8000a96:	f7ff fcc3 	bl	8000420 <Lcd_Display>
  Lcd_Cursor(3, 0);
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	2003      	movs	r0, #3
 8000a9e:	f7ff fc7d 	bl	800039c <Lcd_Cursor>
  Lcd_Display("%^&(){}:;'|?,.~\\[]");
 8000aa2:	4809      	ldr	r0, [pc, #36]	; (8000ac8 <main+0x78>)
 8000aa4:	f7ff fcbc 	bl	8000420 <Lcd_Display>
  HAL_Delay(1000);
 8000aa8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aac:	f000 f930 	bl	8000d10 <HAL_Delay>
  Lcd_DisplayPicture();
 8000ab0:	f7ff ff98 	bl	80009e4 <Lcd_DisplayPicture>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_Delay(1000);
 8000ab4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ab8:	f000 f92a 	bl	8000d10 <HAL_Delay>
 8000abc:	e7fa      	b.n	8000ab4 <main+0x64>
 8000abe:	bf00      	nop
 8000ac0:	080023e8 	.word	0x080023e8
 8000ac4:	080023fc 	.word	0x080023fc
 8000ac8:	08002410 	.word	0x08002410

08000acc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b090      	sub	sp, #64	; 0x40
 8000ad0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad2:	f107 0318 	add.w	r3, r7, #24
 8000ad6:	2228      	movs	r2, #40	; 0x28
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4618      	mov	r0, r3
 8000adc:	f001 fc4c 	bl	8002378 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]
 8000aec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aee:	2301      	movs	r3, #1
 8000af0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000af2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000af6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000afc:	2301      	movs	r3, #1
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b00:	2302      	movs	r3, #2
 8000b02:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b0a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b10:	f107 0318 	add.w	r3, r7, #24
 8000b14:	4618      	mov	r0, r3
 8000b16:	f001 f833 	bl	8001b80 <HAL_RCC_OscConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b20:	f000 f819 	bl	8000b56 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b24:	230f      	movs	r3, #15
 8000b26:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	2102      	movs	r1, #2
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f001 faa0 	bl	8002084 <HAL_RCC_ClockConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b4a:	f000 f804 	bl	8000b56 <Error_Handler>
  }
}
 8000b4e:	bf00      	nop
 8000b50:	3740      	adds	r7, #64	; 0x40
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b5a:	b672      	cpsid	i
}
 8000b5c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <Error_Handler+0x8>

08000b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <HAL_MspInit+0x40>)
 8000b68:	699b      	ldr	r3, [r3, #24]
 8000b6a:	4a0d      	ldr	r2, [pc, #52]	; (8000ba0 <HAL_MspInit+0x40>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6193      	str	r3, [r2, #24]
 8000b72:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <HAL_MspInit+0x40>)
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <HAL_MspInit+0x40>)
 8000b80:	69db      	ldr	r3, [r3, #28]
 8000b82:	4a07      	ldr	r2, [pc, #28]	; (8000ba0 <HAL_MspInit+0x40>)
 8000b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b88:	61d3      	str	r3, [r2, #28]
 8000b8a:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <HAL_MspInit+0x40>)
 8000b8c:	69db      	ldr	r3, [r3, #28]
 8000b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr
 8000ba0:	40021000 	.word	0x40021000

08000ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <NMI_Handler+0x4>

08000baa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <HardFault_Handler+0x4>

08000bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <MemManage_Handler+0x4>

08000bb6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <BusFault_Handler+0x4>

08000bbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <UsageFault_Handler+0x4>

08000bc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr

08000bce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr

08000bda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bc80      	pop	{r7}
 8000be4:	4770      	bx	lr

08000be6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bea:	f000 f875 	bl	8000cd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bc80      	pop	{r7}
 8000bfc:	4770      	bx	lr
	...

08000c00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c00:	f7ff fff7 	bl	8000bf2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c04:	480b      	ldr	r0, [pc, #44]	; (8000c34 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c06:	490c      	ldr	r1, [pc, #48]	; (8000c38 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c08:	4a0c      	ldr	r2, [pc, #48]	; (8000c3c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c0c:	e002      	b.n	8000c14 <LoopCopyDataInit>

08000c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c12:	3304      	adds	r3, #4

08000c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c18:	d3f9      	bcc.n	8000c0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1a:	4a09      	ldr	r2, [pc, #36]	; (8000c40 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c1c:	4c09      	ldr	r4, [pc, #36]	; (8000c44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c20:	e001      	b.n	8000c26 <LoopFillZerobss>

08000c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c24:	3204      	adds	r2, #4

08000c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c28:	d3fb      	bcc.n	8000c22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c2a:	f001 fbad 	bl	8002388 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c2e:	f7ff ff0f 	bl	8000a50 <main>
  bx lr
 8000c32:	4770      	bx	lr
  ldr r0, =_sdata
 8000c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c38:	200002bc 	.word	0x200002bc
  ldr r2, =_sidata
 8000c3c:	08002c58 	.word	0x08002c58
  ldr r2, =_sbss
 8000c40:	200002bc 	.word	0x200002bc
  ldr r4, =_ebss
 8000c44:	20000338 	.word	0x20000338

08000c48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c48:	e7fe      	b.n	8000c48 <ADC1_2_IRQHandler>
	...

08000c4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c50:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <HAL_Init+0x28>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a07      	ldr	r2, [pc, #28]	; (8000c74 <HAL_Init+0x28>)
 8000c56:	f043 0310 	orr.w	r3, r3, #16
 8000c5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c5c:	2003      	movs	r0, #3
 8000c5e:	f000 f92b 	bl	8000eb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c62:	200f      	movs	r0, #15
 8000c64:	f000 f808 	bl	8000c78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c68:	f7ff ff7a 	bl	8000b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40022000 	.word	0x40022000

08000c78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c80:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <HAL_InitTick+0x54>)
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <HAL_InitTick+0x58>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	4619      	mov	r1, r3
 8000c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c96:	4618      	mov	r0, r3
 8000c98:	f000 f935 	bl	8000f06 <HAL_SYSTICK_Config>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e00e      	b.n	8000cc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2b0f      	cmp	r3, #15
 8000caa:	d80a      	bhi.n	8000cc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cac:	2200      	movs	r2, #0
 8000cae:	6879      	ldr	r1, [r7, #4]
 8000cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb4:	f000 f90b 	bl	8000ece <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb8:	4a06      	ldr	r2, [pc, #24]	; (8000cd4 <HAL_InitTick+0x5c>)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	e000      	b.n	8000cc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	200002b0 	.word	0x200002b0
 8000cd0:	200002b8 	.word	0x200002b8
 8000cd4:	200002b4 	.word	0x200002b4

08000cd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <HAL_IncTick+0x1c>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <HAL_IncTick+0x20>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	4a03      	ldr	r2, [pc, #12]	; (8000cf8 <HAL_IncTick+0x20>)
 8000cea:	6013      	str	r3, [r2, #0]
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr
 8000cf4:	200002b8 	.word	0x200002b8
 8000cf8:	20000334 	.word	0x20000334

08000cfc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000d00:	4b02      	ldr	r3, [pc, #8]	; (8000d0c <HAL_GetTick+0x10>)
 8000d02:	681b      	ldr	r3, [r3, #0]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr
 8000d0c:	20000334 	.word	0x20000334

08000d10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d18:	f7ff fff0 	bl	8000cfc <HAL_GetTick>
 8000d1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d28:	d005      	beq.n	8000d36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d2a:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <HAL_Delay+0x44>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	4413      	add	r3, r2
 8000d34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d36:	bf00      	nop
 8000d38:	f7ff ffe0 	bl	8000cfc <HAL_GetTick>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	68fa      	ldr	r2, [r7, #12]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d8f7      	bhi.n	8000d38 <HAL_Delay+0x28>
  {
  }
}
 8000d48:	bf00      	nop
 8000d4a:	bf00      	nop
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	200002b8 	.word	0x200002b8

08000d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <__NVIC_SetPriorityGrouping+0x44>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6e:	68ba      	ldr	r2, [r7, #8]
 8000d70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d74:	4013      	ands	r3, r2
 8000d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8a:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <__NVIC_SetPriorityGrouping+0x44>)
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	60d3      	str	r3, [r2, #12]
}
 8000d90:	bf00      	nop
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bc80      	pop	{r7}
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da4:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <__NVIC_GetPriorityGrouping+0x18>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	0a1b      	lsrs	r3, r3, #8
 8000daa:	f003 0307 	and.w	r3, r3, #7
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	6039      	str	r1, [r7, #0]
 8000dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	db0a      	blt.n	8000de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	490c      	ldr	r1, [pc, #48]	; (8000e08 <__NVIC_SetPriority+0x4c>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	0112      	lsls	r2, r2, #4
 8000ddc:	b2d2      	uxtb	r2, r2
 8000dde:	440b      	add	r3, r1
 8000de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de4:	e00a      	b.n	8000dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	4908      	ldr	r1, [pc, #32]	; (8000e0c <__NVIC_SetPriority+0x50>)
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	f003 030f 	and.w	r3, r3, #15
 8000df2:	3b04      	subs	r3, #4
 8000df4:	0112      	lsls	r2, r2, #4
 8000df6:	b2d2      	uxtb	r2, r2
 8000df8:	440b      	add	r3, r1
 8000dfa:	761a      	strb	r2, [r3, #24]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000e100 	.word	0xe000e100
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b089      	sub	sp, #36	; 0x24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f1c3 0307 	rsb	r3, r3, #7
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	bf28      	it	cs
 8000e2e:	2304      	movcs	r3, #4
 8000e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3304      	adds	r3, #4
 8000e36:	2b06      	cmp	r3, #6
 8000e38:	d902      	bls.n	8000e40 <NVIC_EncodePriority+0x30>
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3b03      	subs	r3, #3
 8000e3e:	e000      	b.n	8000e42 <NVIC_EncodePriority+0x32>
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	f04f 32ff 	mov.w	r2, #4294967295
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43da      	mvns	r2, r3
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	401a      	ands	r2, r3
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e58:	f04f 31ff 	mov.w	r1, #4294967295
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e62:	43d9      	mvns	r1, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	4313      	orrs	r3, r2
         );
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3724      	adds	r7, #36	; 0x24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr

08000e74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e84:	d301      	bcc.n	8000e8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e86:	2301      	movs	r3, #1
 8000e88:	e00f      	b.n	8000eaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <SysTick_Config+0x40>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e92:	210f      	movs	r1, #15
 8000e94:	f04f 30ff 	mov.w	r0, #4294967295
 8000e98:	f7ff ff90 	bl	8000dbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e9c:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <SysTick_Config+0x40>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ea2:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <SysTick_Config+0x40>)
 8000ea4:	2207      	movs	r2, #7
 8000ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	e000e010 	.word	0xe000e010

08000eb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f7ff ff49 	bl	8000d58 <__NVIC_SetPriorityGrouping>
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b086      	sub	sp, #24
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	607a      	str	r2, [r7, #4]
 8000eda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee0:	f7ff ff5e 	bl	8000da0 <__NVIC_GetPriorityGrouping>
 8000ee4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	68b9      	ldr	r1, [r7, #8]
 8000eea:	6978      	ldr	r0, [r7, #20]
 8000eec:	f7ff ff90 	bl	8000e10 <NVIC_EncodePriority>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ff5f 	bl	8000dbc <__NVIC_SetPriority>
}
 8000efe:	bf00      	nop
 8000f00:	3718      	adds	r7, #24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff ffb0 	bl	8000e74 <SysTick_Config>
 8000f14:	4603      	mov	r3, r0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b08b      	sub	sp, #44	; 0x2c
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f32:	e169      	b.n	8001208 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f34:	2201      	movs	r2, #1
 8000f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	69fa      	ldr	r2, [r7, #28]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	f040 8158 	bne.w	8001202 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	4a9a      	ldr	r2, [pc, #616]	; (80011c0 <HAL_GPIO_Init+0x2a0>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d05e      	beq.n	800101a <HAL_GPIO_Init+0xfa>
 8000f5c:	4a98      	ldr	r2, [pc, #608]	; (80011c0 <HAL_GPIO_Init+0x2a0>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d875      	bhi.n	800104e <HAL_GPIO_Init+0x12e>
 8000f62:	4a98      	ldr	r2, [pc, #608]	; (80011c4 <HAL_GPIO_Init+0x2a4>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d058      	beq.n	800101a <HAL_GPIO_Init+0xfa>
 8000f68:	4a96      	ldr	r2, [pc, #600]	; (80011c4 <HAL_GPIO_Init+0x2a4>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d86f      	bhi.n	800104e <HAL_GPIO_Init+0x12e>
 8000f6e:	4a96      	ldr	r2, [pc, #600]	; (80011c8 <HAL_GPIO_Init+0x2a8>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d052      	beq.n	800101a <HAL_GPIO_Init+0xfa>
 8000f74:	4a94      	ldr	r2, [pc, #592]	; (80011c8 <HAL_GPIO_Init+0x2a8>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d869      	bhi.n	800104e <HAL_GPIO_Init+0x12e>
 8000f7a:	4a94      	ldr	r2, [pc, #592]	; (80011cc <HAL_GPIO_Init+0x2ac>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d04c      	beq.n	800101a <HAL_GPIO_Init+0xfa>
 8000f80:	4a92      	ldr	r2, [pc, #584]	; (80011cc <HAL_GPIO_Init+0x2ac>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d863      	bhi.n	800104e <HAL_GPIO_Init+0x12e>
 8000f86:	4a92      	ldr	r2, [pc, #584]	; (80011d0 <HAL_GPIO_Init+0x2b0>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d046      	beq.n	800101a <HAL_GPIO_Init+0xfa>
 8000f8c:	4a90      	ldr	r2, [pc, #576]	; (80011d0 <HAL_GPIO_Init+0x2b0>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d85d      	bhi.n	800104e <HAL_GPIO_Init+0x12e>
 8000f92:	2b12      	cmp	r3, #18
 8000f94:	d82a      	bhi.n	8000fec <HAL_GPIO_Init+0xcc>
 8000f96:	2b12      	cmp	r3, #18
 8000f98:	d859      	bhi.n	800104e <HAL_GPIO_Init+0x12e>
 8000f9a:	a201      	add	r2, pc, #4	; (adr r2, 8000fa0 <HAL_GPIO_Init+0x80>)
 8000f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa0:	0800101b 	.word	0x0800101b
 8000fa4:	08000ff5 	.word	0x08000ff5
 8000fa8:	08001007 	.word	0x08001007
 8000fac:	08001049 	.word	0x08001049
 8000fb0:	0800104f 	.word	0x0800104f
 8000fb4:	0800104f 	.word	0x0800104f
 8000fb8:	0800104f 	.word	0x0800104f
 8000fbc:	0800104f 	.word	0x0800104f
 8000fc0:	0800104f 	.word	0x0800104f
 8000fc4:	0800104f 	.word	0x0800104f
 8000fc8:	0800104f 	.word	0x0800104f
 8000fcc:	0800104f 	.word	0x0800104f
 8000fd0:	0800104f 	.word	0x0800104f
 8000fd4:	0800104f 	.word	0x0800104f
 8000fd8:	0800104f 	.word	0x0800104f
 8000fdc:	0800104f 	.word	0x0800104f
 8000fe0:	0800104f 	.word	0x0800104f
 8000fe4:	08000ffd 	.word	0x08000ffd
 8000fe8:	08001011 	.word	0x08001011
 8000fec:	4a79      	ldr	r2, [pc, #484]	; (80011d4 <HAL_GPIO_Init+0x2b4>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d013      	beq.n	800101a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ff2:	e02c      	b.n	800104e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	623b      	str	r3, [r7, #32]
          break;
 8000ffa:	e029      	b.n	8001050 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	3304      	adds	r3, #4
 8001002:	623b      	str	r3, [r7, #32]
          break;
 8001004:	e024      	b.n	8001050 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	3308      	adds	r3, #8
 800100c:	623b      	str	r3, [r7, #32]
          break;
 800100e:	e01f      	b.n	8001050 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	330c      	adds	r3, #12
 8001016:	623b      	str	r3, [r7, #32]
          break;
 8001018:	e01a      	b.n	8001050 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d102      	bne.n	8001028 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001022:	2304      	movs	r3, #4
 8001024:	623b      	str	r3, [r7, #32]
          break;
 8001026:	e013      	b.n	8001050 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d105      	bne.n	800103c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001030:	2308      	movs	r3, #8
 8001032:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	69fa      	ldr	r2, [r7, #28]
 8001038:	611a      	str	r2, [r3, #16]
          break;
 800103a:	e009      	b.n	8001050 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800103c:	2308      	movs	r3, #8
 800103e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	69fa      	ldr	r2, [r7, #28]
 8001044:	615a      	str	r2, [r3, #20]
          break;
 8001046:	e003      	b.n	8001050 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001048:	2300      	movs	r3, #0
 800104a:	623b      	str	r3, [r7, #32]
          break;
 800104c:	e000      	b.n	8001050 <HAL_GPIO_Init+0x130>
          break;
 800104e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	2bff      	cmp	r3, #255	; 0xff
 8001054:	d801      	bhi.n	800105a <HAL_GPIO_Init+0x13a>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	e001      	b.n	800105e <HAL_GPIO_Init+0x13e>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3304      	adds	r3, #4
 800105e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	2bff      	cmp	r3, #255	; 0xff
 8001064:	d802      	bhi.n	800106c <HAL_GPIO_Init+0x14c>
 8001066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	e002      	b.n	8001072 <HAL_GPIO_Init+0x152>
 800106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106e:	3b08      	subs	r3, #8
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	210f      	movs	r1, #15
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	fa01 f303 	lsl.w	r3, r1, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	401a      	ands	r2, r3
 8001084:	6a39      	ldr	r1, [r7, #32]
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	fa01 f303 	lsl.w	r3, r1, r3
 800108c:	431a      	orrs	r2, r3
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109a:	2b00      	cmp	r3, #0
 800109c:	f000 80b1 	beq.w	8001202 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010a0:	4b4d      	ldr	r3, [pc, #308]	; (80011d8 <HAL_GPIO_Init+0x2b8>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	4a4c      	ldr	r2, [pc, #304]	; (80011d8 <HAL_GPIO_Init+0x2b8>)
 80010a6:	f043 0301 	orr.w	r3, r3, #1
 80010aa:	6193      	str	r3, [r2, #24]
 80010ac:	4b4a      	ldr	r3, [pc, #296]	; (80011d8 <HAL_GPIO_Init+0x2b8>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010b8:	4a48      	ldr	r2, [pc, #288]	; (80011dc <HAL_GPIO_Init+0x2bc>)
 80010ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010bc:	089b      	lsrs	r3, r3, #2
 80010be:	3302      	adds	r3, #2
 80010c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c8:	f003 0303 	and.w	r3, r3, #3
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	220f      	movs	r2, #15
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	68fa      	ldr	r2, [r7, #12]
 80010d8:	4013      	ands	r3, r2
 80010da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a40      	ldr	r2, [pc, #256]	; (80011e0 <HAL_GPIO_Init+0x2c0>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d013      	beq.n	800110c <HAL_GPIO_Init+0x1ec>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a3f      	ldr	r2, [pc, #252]	; (80011e4 <HAL_GPIO_Init+0x2c4>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d00d      	beq.n	8001108 <HAL_GPIO_Init+0x1e8>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a3e      	ldr	r2, [pc, #248]	; (80011e8 <HAL_GPIO_Init+0x2c8>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d007      	beq.n	8001104 <HAL_GPIO_Init+0x1e4>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a3d      	ldr	r2, [pc, #244]	; (80011ec <HAL_GPIO_Init+0x2cc>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d101      	bne.n	8001100 <HAL_GPIO_Init+0x1e0>
 80010fc:	2303      	movs	r3, #3
 80010fe:	e006      	b.n	800110e <HAL_GPIO_Init+0x1ee>
 8001100:	2304      	movs	r3, #4
 8001102:	e004      	b.n	800110e <HAL_GPIO_Init+0x1ee>
 8001104:	2302      	movs	r3, #2
 8001106:	e002      	b.n	800110e <HAL_GPIO_Init+0x1ee>
 8001108:	2301      	movs	r3, #1
 800110a:	e000      	b.n	800110e <HAL_GPIO_Init+0x1ee>
 800110c:	2300      	movs	r3, #0
 800110e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001110:	f002 0203 	and.w	r2, r2, #3
 8001114:	0092      	lsls	r2, r2, #2
 8001116:	4093      	lsls	r3, r2
 8001118:	68fa      	ldr	r2, [r7, #12]
 800111a:	4313      	orrs	r3, r2
 800111c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800111e:	492f      	ldr	r1, [pc, #188]	; (80011dc <HAL_GPIO_Init+0x2bc>)
 8001120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001122:	089b      	lsrs	r3, r3, #2
 8001124:	3302      	adds	r3, #2
 8001126:	68fa      	ldr	r2, [r7, #12]
 8001128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d006      	beq.n	8001146 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001138:	4b2d      	ldr	r3, [pc, #180]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	492c      	ldr	r1, [pc, #176]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	4313      	orrs	r3, r2
 8001142:	608b      	str	r3, [r1, #8]
 8001144:	e006      	b.n	8001154 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001146:	4b2a      	ldr	r3, [pc, #168]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 8001148:	689a      	ldr	r2, [r3, #8]
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	43db      	mvns	r3, r3
 800114e:	4928      	ldr	r1, [pc, #160]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 8001150:	4013      	ands	r3, r2
 8001152:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d006      	beq.n	800116e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001160:	4b23      	ldr	r3, [pc, #140]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 8001162:	68da      	ldr	r2, [r3, #12]
 8001164:	4922      	ldr	r1, [pc, #136]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	4313      	orrs	r3, r2
 800116a:	60cb      	str	r3, [r1, #12]
 800116c:	e006      	b.n	800117c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800116e:	4b20      	ldr	r3, [pc, #128]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 8001170:	68da      	ldr	r2, [r3, #12]
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	43db      	mvns	r3, r3
 8001176:	491e      	ldr	r1, [pc, #120]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 8001178:	4013      	ands	r3, r2
 800117a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d006      	beq.n	8001196 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001188:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	4918      	ldr	r1, [pc, #96]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	4313      	orrs	r3, r2
 8001192:	604b      	str	r3, [r1, #4]
 8001194:	e006      	b.n	80011a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001196:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	43db      	mvns	r3, r3
 800119e:	4914      	ldr	r1, [pc, #80]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 80011a0:	4013      	ands	r3, r2
 80011a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d021      	beq.n	80011f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011b0:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	490e      	ldr	r1, [pc, #56]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	600b      	str	r3, [r1, #0]
 80011bc:	e021      	b.n	8001202 <HAL_GPIO_Init+0x2e2>
 80011be:	bf00      	nop
 80011c0:	10320000 	.word	0x10320000
 80011c4:	10310000 	.word	0x10310000
 80011c8:	10220000 	.word	0x10220000
 80011cc:	10210000 	.word	0x10210000
 80011d0:	10120000 	.word	0x10120000
 80011d4:	10110000 	.word	0x10110000
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40010000 	.word	0x40010000
 80011e0:	40010800 	.word	0x40010800
 80011e4:	40010c00 	.word	0x40010c00
 80011e8:	40011000 	.word	0x40011000
 80011ec:	40011400 	.word	0x40011400
 80011f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011f4:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <HAL_GPIO_Init+0x304>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	43db      	mvns	r3, r3
 80011fc:	4909      	ldr	r1, [pc, #36]	; (8001224 <HAL_GPIO_Init+0x304>)
 80011fe:	4013      	ands	r3, r2
 8001200:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001204:	3301      	adds	r3, #1
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120e:	fa22 f303 	lsr.w	r3, r2, r3
 8001212:	2b00      	cmp	r3, #0
 8001214:	f47f ae8e 	bne.w	8000f34 <HAL_GPIO_Init+0x14>
  }
}
 8001218:	bf00      	nop
 800121a:	bf00      	nop
 800121c:	372c      	adds	r7, #44	; 0x2c
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr
 8001224:	40010400 	.word	0x40010400

08001228 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d101      	bne.n	800123a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e12b      	b.n	8001492 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b00      	cmp	r3, #0
 8001244:	d106      	bne.n	8001254 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7fe ffd4 	bl	80001fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2224      	movs	r2, #36	; 0x24
 8001258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f022 0201 	bic.w	r2, r2, #1
 800126a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800127a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800128a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800128c:	f001 f842 	bl	8002314 <HAL_RCC_GetPCLK1Freq>
 8001290:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	4a81      	ldr	r2, [pc, #516]	; (800149c <HAL_I2C_Init+0x274>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d807      	bhi.n	80012ac <HAL_I2C_Init+0x84>
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4a80      	ldr	r2, [pc, #512]	; (80014a0 <HAL_I2C_Init+0x278>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	bf94      	ite	ls
 80012a4:	2301      	movls	r3, #1
 80012a6:	2300      	movhi	r3, #0
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	e006      	b.n	80012ba <HAL_I2C_Init+0x92>
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4a7d      	ldr	r2, [pc, #500]	; (80014a4 <HAL_I2C_Init+0x27c>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	bf94      	ite	ls
 80012b4:	2301      	movls	r3, #1
 80012b6:	2300      	movhi	r3, #0
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e0e7      	b.n	8001492 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	4a78      	ldr	r2, [pc, #480]	; (80014a8 <HAL_I2C_Init+0x280>)
 80012c6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ca:	0c9b      	lsrs	r3, r3, #18
 80012cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	68ba      	ldr	r2, [r7, #8]
 80012de:	430a      	orrs	r2, r1
 80012e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6a1b      	ldr	r3, [r3, #32]
 80012e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	4a6a      	ldr	r2, [pc, #424]	; (800149c <HAL_I2C_Init+0x274>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d802      	bhi.n	80012fc <HAL_I2C_Init+0xd4>
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	3301      	adds	r3, #1
 80012fa:	e009      	b.n	8001310 <HAL_I2C_Init+0xe8>
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001302:	fb02 f303 	mul.w	r3, r2, r3
 8001306:	4a69      	ldr	r2, [pc, #420]	; (80014ac <HAL_I2C_Init+0x284>)
 8001308:	fba2 2303 	umull	r2, r3, r2, r3
 800130c:	099b      	lsrs	r3, r3, #6
 800130e:	3301      	adds	r3, #1
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	6812      	ldr	r2, [r2, #0]
 8001314:	430b      	orrs	r3, r1
 8001316:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001322:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	495c      	ldr	r1, [pc, #368]	; (800149c <HAL_I2C_Init+0x274>)
 800132c:	428b      	cmp	r3, r1
 800132e:	d819      	bhi.n	8001364 <HAL_I2C_Init+0x13c>
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	1e59      	subs	r1, r3, #1
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	fbb1 f3f3 	udiv	r3, r1, r3
 800133e:	1c59      	adds	r1, r3, #1
 8001340:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001344:	400b      	ands	r3, r1
 8001346:	2b00      	cmp	r3, #0
 8001348:	d00a      	beq.n	8001360 <HAL_I2C_Init+0x138>
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	1e59      	subs	r1, r3, #1
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	fbb1 f3f3 	udiv	r3, r1, r3
 8001358:	3301      	adds	r3, #1
 800135a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800135e:	e051      	b.n	8001404 <HAL_I2C_Init+0x1dc>
 8001360:	2304      	movs	r3, #4
 8001362:	e04f      	b.n	8001404 <HAL_I2C_Init+0x1dc>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d111      	bne.n	8001390 <HAL_I2C_Init+0x168>
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	1e58      	subs	r0, r3, #1
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6859      	ldr	r1, [r3, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	440b      	add	r3, r1
 800137a:	fbb0 f3f3 	udiv	r3, r0, r3
 800137e:	3301      	adds	r3, #1
 8001380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001384:	2b00      	cmp	r3, #0
 8001386:	bf0c      	ite	eq
 8001388:	2301      	moveq	r3, #1
 800138a:	2300      	movne	r3, #0
 800138c:	b2db      	uxtb	r3, r3
 800138e:	e012      	b.n	80013b6 <HAL_I2C_Init+0x18e>
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	1e58      	subs	r0, r3, #1
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6859      	ldr	r1, [r3, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	440b      	add	r3, r1
 800139e:	0099      	lsls	r1, r3, #2
 80013a0:	440b      	add	r3, r1
 80013a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80013a6:	3301      	adds	r3, #1
 80013a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	bf0c      	ite	eq
 80013b0:	2301      	moveq	r3, #1
 80013b2:	2300      	movne	r3, #0
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <HAL_I2C_Init+0x196>
 80013ba:	2301      	movs	r3, #1
 80013bc:	e022      	b.n	8001404 <HAL_I2C_Init+0x1dc>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d10e      	bne.n	80013e4 <HAL_I2C_Init+0x1bc>
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	1e58      	subs	r0, r3, #1
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6859      	ldr	r1, [r3, #4]
 80013ce:	460b      	mov	r3, r1
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	440b      	add	r3, r1
 80013d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80013d8:	3301      	adds	r3, #1
 80013da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013e2:	e00f      	b.n	8001404 <HAL_I2C_Init+0x1dc>
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	1e58      	subs	r0, r3, #1
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6859      	ldr	r1, [r3, #4]
 80013ec:	460b      	mov	r3, r1
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	440b      	add	r3, r1
 80013f2:	0099      	lsls	r1, r3, #2
 80013f4:	440b      	add	r3, r1
 80013f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80013fa:	3301      	adds	r3, #1
 80013fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001400:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001404:	6879      	ldr	r1, [r7, #4]
 8001406:	6809      	ldr	r1, [r1, #0]
 8001408:	4313      	orrs	r3, r2
 800140a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	69da      	ldr	r2, [r3, #28]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a1b      	ldr	r3, [r3, #32]
 800141e:	431a      	orrs	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	430a      	orrs	r2, r1
 8001426:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001432:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	6911      	ldr	r1, [r2, #16]
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	68d2      	ldr	r2, [r2, #12]
 800143e:	4311      	orrs	r1, r2
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	6812      	ldr	r2, [r2, #0]
 8001444:	430b      	orrs	r3, r1
 8001446:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	695a      	ldr	r2, [r3, #20]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	431a      	orrs	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	430a      	orrs	r2, r1
 8001462:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f042 0201 	orr.w	r2, r2, #1
 8001472:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2220      	movs	r2, #32
 800147e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	000186a0 	.word	0x000186a0
 80014a0:	001e847f 	.word	0x001e847f
 80014a4:	003d08ff 	.word	0x003d08ff
 80014a8:	431bde83 	.word	0x431bde83
 80014ac:	10624dd3 	.word	0x10624dd3

080014b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b088      	sub	sp, #32
 80014b4:	af02      	add	r7, sp, #8
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	4608      	mov	r0, r1
 80014ba:	4611      	mov	r1, r2
 80014bc:	461a      	mov	r2, r3
 80014be:	4603      	mov	r3, r0
 80014c0:	817b      	strh	r3, [r7, #10]
 80014c2:	460b      	mov	r3, r1
 80014c4:	813b      	strh	r3, [r7, #8]
 80014c6:	4613      	mov	r3, r2
 80014c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80014ca:	f7ff fc17 	bl	8000cfc <HAL_GetTick>
 80014ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	2b20      	cmp	r3, #32
 80014da:	f040 80d9 	bne.w	8001690 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	2319      	movs	r3, #25
 80014e4:	2201      	movs	r2, #1
 80014e6:	496d      	ldr	r1, [pc, #436]	; (800169c <HAL_I2C_Mem_Write+0x1ec>)
 80014e8:	68f8      	ldr	r0, [r7, #12]
 80014ea:	f000 f971 	bl	80017d0 <I2C_WaitOnFlagUntilTimeout>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80014f4:	2302      	movs	r3, #2
 80014f6:	e0cc      	b.n	8001692 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d101      	bne.n	8001506 <HAL_I2C_Mem_Write+0x56>
 8001502:	2302      	movs	r3, #2
 8001504:	e0c5      	b.n	8001692 <HAL_I2C_Mem_Write+0x1e2>
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2201      	movs	r2, #1
 800150a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	2b01      	cmp	r3, #1
 800151a:	d007      	beq.n	800152c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f042 0201 	orr.w	r2, r2, #1
 800152a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800153a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2221      	movs	r2, #33	; 0x21
 8001540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2240      	movs	r2, #64	; 0x40
 8001548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2200      	movs	r2, #0
 8001550:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6a3a      	ldr	r2, [r7, #32]
 8001556:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800155c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001562:	b29a      	uxth	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4a4d      	ldr	r2, [pc, #308]	; (80016a0 <HAL_I2C_Mem_Write+0x1f0>)
 800156c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800156e:	88f8      	ldrh	r0, [r7, #6]
 8001570:	893a      	ldrh	r2, [r7, #8]
 8001572:	8979      	ldrh	r1, [r7, #10]
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	9301      	str	r3, [sp, #4]
 8001578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	4603      	mov	r3, r0
 800157e:	68f8      	ldr	r0, [r7, #12]
 8001580:	f000 f890 	bl	80016a4 <I2C_RequestMemoryWrite>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d052      	beq.n	8001630 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e081      	b.n	8001692 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800158e:	697a      	ldr	r2, [r7, #20]
 8001590:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001592:	68f8      	ldr	r0, [r7, #12]
 8001594:	f000 fa36 	bl	8001a04 <I2C_WaitOnTXEFlagUntilTimeout>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d00d      	beq.n	80015ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	d107      	bne.n	80015b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e06b      	b.n	8001692 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015be:	781a      	ldrb	r2, [r3, #0]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ca:	1c5a      	adds	r2, r3, #1
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015d4:	3b01      	subs	r3, #1
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	3b01      	subs	r3, #1
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	695b      	ldr	r3, [r3, #20]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	2b04      	cmp	r3, #4
 80015f6:	d11b      	bne.n	8001630 <HAL_I2C_Mem_Write+0x180>
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d017      	beq.n	8001630 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001604:	781a      	ldrb	r2, [r3, #0]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001610:	1c5a      	adds	r2, r3, #1
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800161a:	3b01      	subs	r3, #1
 800161c:	b29a      	uxth	r2, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001626:	b29b      	uxth	r3, r3
 8001628:	3b01      	subs	r3, #1
 800162a:	b29a      	uxth	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1aa      	bne.n	800158e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001638:	697a      	ldr	r2, [r7, #20]
 800163a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800163c:	68f8      	ldr	r0, [r7, #12]
 800163e:	f000 fa29 	bl	8001a94 <I2C_WaitOnBTFFlagUntilTimeout>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d00d      	beq.n	8001664 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164c:	2b04      	cmp	r3, #4
 800164e:	d107      	bne.n	8001660 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800165e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e016      	b.n	8001692 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001672:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2220      	movs	r2, #32
 8001678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800168c:	2300      	movs	r3, #0
 800168e:	e000      	b.n	8001692 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001690:	2302      	movs	r3, #2
  }
}
 8001692:	4618      	mov	r0, r3
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	00100002 	.word	0x00100002
 80016a0:	ffff0000 	.word	0xffff0000

080016a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b088      	sub	sp, #32
 80016a8:	af02      	add	r7, sp, #8
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	4608      	mov	r0, r1
 80016ae:	4611      	mov	r1, r2
 80016b0:	461a      	mov	r2, r3
 80016b2:	4603      	mov	r3, r0
 80016b4:	817b      	strh	r3, [r7, #10]
 80016b6:	460b      	mov	r3, r1
 80016b8:	813b      	strh	r3, [r7, #8]
 80016ba:	4613      	mov	r3, r2
 80016bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	6a3b      	ldr	r3, [r7, #32]
 80016d4:	2200      	movs	r2, #0
 80016d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	f000 f878 	bl	80017d0 <I2C_WaitOnFlagUntilTimeout>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d00d      	beq.n	8001702 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016f4:	d103      	bne.n	80016fe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e05f      	b.n	80017c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001702:	897b      	ldrh	r3, [r7, #10]
 8001704:	b2db      	uxtb	r3, r3
 8001706:	461a      	mov	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001710:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	6a3a      	ldr	r2, [r7, #32]
 8001716:	492d      	ldr	r1, [pc, #180]	; (80017cc <I2C_RequestMemoryWrite+0x128>)
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	f000 f8d3 	bl	80018c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e04c      	b.n	80017c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	695b      	ldr	r3, [r3, #20]
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800173e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001740:	6a39      	ldr	r1, [r7, #32]
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f000 f95e 	bl	8001a04 <I2C_WaitOnTXEFlagUntilTimeout>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d00d      	beq.n	800176a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	2b04      	cmp	r3, #4
 8001754:	d107      	bne.n	8001766 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001764:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e02b      	b.n	80017c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800176a:	88fb      	ldrh	r3, [r7, #6]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d105      	bne.n	800177c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001770:	893b      	ldrh	r3, [r7, #8]
 8001772:	b2da      	uxtb	r2, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	611a      	str	r2, [r3, #16]
 800177a:	e021      	b.n	80017c0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800177c:	893b      	ldrh	r3, [r7, #8]
 800177e:	0a1b      	lsrs	r3, r3, #8
 8001780:	b29b      	uxth	r3, r3
 8001782:	b2da      	uxtb	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800178a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800178c:	6a39      	ldr	r1, [r7, #32]
 800178e:	68f8      	ldr	r0, [r7, #12]
 8001790:	f000 f938 	bl	8001a04 <I2C_WaitOnTXEFlagUntilTimeout>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d00d      	beq.n	80017b6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	2b04      	cmp	r3, #4
 80017a0:	d107      	bne.n	80017b2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e005      	b.n	80017c2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80017b6:	893b      	ldrh	r3, [r7, #8]
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	00010002 	.word	0x00010002

080017d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	603b      	str	r3, [r7, #0]
 80017dc:	4613      	mov	r3, r2
 80017de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017e0:	e048      	b.n	8001874 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e8:	d044      	beq.n	8001874 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017ea:	f7ff fa87 	bl	8000cfc <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d302      	bcc.n	8001800 <I2C_WaitOnFlagUntilTimeout+0x30>
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d139      	bne.n	8001874 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	0c1b      	lsrs	r3, r3, #16
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b01      	cmp	r3, #1
 8001808:	d10d      	bne.n	8001826 <I2C_WaitOnFlagUntilTimeout+0x56>
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	43da      	mvns	r2, r3
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	4013      	ands	r3, r2
 8001816:	b29b      	uxth	r3, r3
 8001818:	2b00      	cmp	r3, #0
 800181a:	bf0c      	ite	eq
 800181c:	2301      	moveq	r3, #1
 800181e:	2300      	movne	r3, #0
 8001820:	b2db      	uxtb	r3, r3
 8001822:	461a      	mov	r2, r3
 8001824:	e00c      	b.n	8001840 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	43da      	mvns	r2, r3
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	4013      	ands	r3, r2
 8001832:	b29b      	uxth	r3, r3
 8001834:	2b00      	cmp	r3, #0
 8001836:	bf0c      	ite	eq
 8001838:	2301      	moveq	r3, #1
 800183a:	2300      	movne	r3, #0
 800183c:	b2db      	uxtb	r3, r3
 800183e:	461a      	mov	r2, r3
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	429a      	cmp	r2, r3
 8001844:	d116      	bne.n	8001874 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2200      	movs	r2, #0
 800184a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2220      	movs	r2, #32
 8001850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	f043 0220 	orr.w	r2, r3, #32
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2200      	movs	r2, #0
 800186c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e023      	b.n	80018bc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	0c1b      	lsrs	r3, r3, #16
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b01      	cmp	r3, #1
 800187c:	d10d      	bne.n	800189a <I2C_WaitOnFlagUntilTimeout+0xca>
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	43da      	mvns	r2, r3
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	4013      	ands	r3, r2
 800188a:	b29b      	uxth	r3, r3
 800188c:	2b00      	cmp	r3, #0
 800188e:	bf0c      	ite	eq
 8001890:	2301      	moveq	r3, #1
 8001892:	2300      	movne	r3, #0
 8001894:	b2db      	uxtb	r3, r3
 8001896:	461a      	mov	r2, r3
 8001898:	e00c      	b.n	80018b4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	43da      	mvns	r2, r3
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	4013      	ands	r3, r2
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	bf0c      	ite	eq
 80018ac:	2301      	moveq	r3, #1
 80018ae:	2300      	movne	r3, #0
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	461a      	mov	r2, r3
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d093      	beq.n	80017e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
 80018d0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80018d2:	e071      	b.n	80019b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018e2:	d123      	bne.n	800192c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018f2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80018fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2200      	movs	r2, #0
 8001902:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2220      	movs	r2, #32
 8001908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001918:	f043 0204 	orr.w	r2, r3, #4
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e067      	b.n	80019fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001932:	d041      	beq.n	80019b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001934:	f7ff f9e2 	bl	8000cfc <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	429a      	cmp	r2, r3
 8001942:	d302      	bcc.n	800194a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d136      	bne.n	80019b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	0c1b      	lsrs	r3, r3, #16
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b01      	cmp	r3, #1
 8001952:	d10c      	bne.n	800196e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	43da      	mvns	r2, r3
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	4013      	ands	r3, r2
 8001960:	b29b      	uxth	r3, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	bf14      	ite	ne
 8001966:	2301      	movne	r3, #1
 8001968:	2300      	moveq	r3, #0
 800196a:	b2db      	uxtb	r3, r3
 800196c:	e00b      	b.n	8001986 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	43da      	mvns	r2, r3
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	4013      	ands	r3, r2
 800197a:	b29b      	uxth	r3, r3
 800197c:	2b00      	cmp	r3, #0
 800197e:	bf14      	ite	ne
 8001980:	2301      	movne	r3, #1
 8001982:	2300      	moveq	r3, #0
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d016      	beq.n	80019b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2200      	movs	r2, #0
 800198e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2220      	movs	r2, #32
 8001994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a4:	f043 0220 	orr.w	r2, r3, #32
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e021      	b.n	80019fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	0c1b      	lsrs	r3, r3, #16
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d10c      	bne.n	80019dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	43da      	mvns	r2, r3
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	4013      	ands	r3, r2
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	bf14      	ite	ne
 80019d4:	2301      	movne	r3, #1
 80019d6:	2300      	moveq	r3, #0
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	e00b      	b.n	80019f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	43da      	mvns	r2, r3
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	4013      	ands	r3, r2
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	bf14      	ite	ne
 80019ee:	2301      	movne	r3, #1
 80019f0:	2300      	moveq	r3, #0
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f47f af6d 	bne.w	80018d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a10:	e034      	b.n	8001a7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	f000 f886 	bl	8001b24 <I2C_IsAcknowledgeFailed>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e034      	b.n	8001a8c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a28:	d028      	beq.n	8001a7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a2a:	f7ff f967 	bl	8000cfc <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	68ba      	ldr	r2, [r7, #8]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d302      	bcc.n	8001a40 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d11d      	bne.n	8001a7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a4a:	2b80      	cmp	r3, #128	; 0x80
 8001a4c:	d016      	beq.n	8001a7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2200      	movs	r2, #0
 8001a52:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2220      	movs	r2, #32
 8001a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a68:	f043 0220 	orr.w	r2, r3, #32
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e007      	b.n	8001a8c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a86:	2b80      	cmp	r3, #128	; 0x80
 8001a88:	d1c3      	bne.n	8001a12 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001aa0:	e034      	b.n	8001b0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f000 f83e 	bl	8001b24 <I2C_IsAcknowledgeFailed>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e034      	b.n	8001b1c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab8:	d028      	beq.n	8001b0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aba:	f7ff f91f 	bl	8000cfc <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	68ba      	ldr	r2, [r7, #8]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d302      	bcc.n	8001ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d11d      	bne.n	8001b0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	f003 0304 	and.w	r3, r3, #4
 8001ada:	2b04      	cmp	r3, #4
 8001adc:	d016      	beq.n	8001b0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2220      	movs	r2, #32
 8001ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af8:	f043 0220 	orr.w	r2, r3, #32
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e007      	b.n	8001b1c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	f003 0304 	and.w	r3, r3, #4
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	d1c3      	bne.n	8001aa2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b3a:	d11b      	bne.n	8001b74 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b44:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2220      	movs	r2, #32
 8001b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	f043 0204 	orr.w	r2, r3, #4
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e000      	b.n	8001b76 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr

08001b80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e272      	b.n	8002078 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f000 8087 	beq.w	8001cae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ba0:	4b92      	ldr	r3, [pc, #584]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 030c 	and.w	r3, r3, #12
 8001ba8:	2b04      	cmp	r3, #4
 8001baa:	d00c      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bac:	4b8f      	ldr	r3, [pc, #572]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 030c 	and.w	r3, r3, #12
 8001bb4:	2b08      	cmp	r3, #8
 8001bb6:	d112      	bne.n	8001bde <HAL_RCC_OscConfig+0x5e>
 8001bb8:	4b8c      	ldr	r3, [pc, #560]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bc4:	d10b      	bne.n	8001bde <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc6:	4b89      	ldr	r3, [pc, #548]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d06c      	beq.n	8001cac <HAL_RCC_OscConfig+0x12c>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d168      	bne.n	8001cac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e24c      	b.n	8002078 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be6:	d106      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x76>
 8001be8:	4b80      	ldr	r3, [pc, #512]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a7f      	ldr	r2, [pc, #508]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	e02e      	b.n	8001c54 <HAL_RCC_OscConfig+0xd4>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10c      	bne.n	8001c18 <HAL_RCC_OscConfig+0x98>
 8001bfe:	4b7b      	ldr	r3, [pc, #492]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a7a      	ldr	r2, [pc, #488]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001c04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	4b78      	ldr	r3, [pc, #480]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a77      	ldr	r2, [pc, #476]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001c10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c14:	6013      	str	r3, [r2, #0]
 8001c16:	e01d      	b.n	8001c54 <HAL_RCC_OscConfig+0xd4>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c20:	d10c      	bne.n	8001c3c <HAL_RCC_OscConfig+0xbc>
 8001c22:	4b72      	ldr	r3, [pc, #456]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a71      	ldr	r2, [pc, #452]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001c28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c2c:	6013      	str	r3, [r2, #0]
 8001c2e:	4b6f      	ldr	r3, [pc, #444]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a6e      	ldr	r2, [pc, #440]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c38:	6013      	str	r3, [r2, #0]
 8001c3a:	e00b      	b.n	8001c54 <HAL_RCC_OscConfig+0xd4>
 8001c3c:	4b6b      	ldr	r3, [pc, #428]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a6a      	ldr	r2, [pc, #424]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c46:	6013      	str	r3, [r2, #0]
 8001c48:	4b68      	ldr	r3, [pc, #416]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a67      	ldr	r2, [pc, #412]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001c4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d013      	beq.n	8001c84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5c:	f7ff f84e 	bl	8000cfc <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c64:	f7ff f84a 	bl	8000cfc <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b64      	cmp	r3, #100	; 0x64
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e200      	b.n	8002078 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c76:	4b5d      	ldr	r3, [pc, #372]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d0f0      	beq.n	8001c64 <HAL_RCC_OscConfig+0xe4>
 8001c82:	e014      	b.n	8001cae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c84:	f7ff f83a 	bl	8000cfc <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c8c:	f7ff f836 	bl	8000cfc <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b64      	cmp	r3, #100	; 0x64
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e1ec      	b.n	8002078 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c9e:	4b53      	ldr	r3, [pc, #332]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1f0      	bne.n	8001c8c <HAL_RCC_OscConfig+0x10c>
 8001caa:	e000      	b.n	8001cae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d063      	beq.n	8001d82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cba:	4b4c      	ldr	r3, [pc, #304]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f003 030c 	and.w	r3, r3, #12
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d00b      	beq.n	8001cde <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cc6:	4b49      	ldr	r3, [pc, #292]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f003 030c 	and.w	r3, r3, #12
 8001cce:	2b08      	cmp	r3, #8
 8001cd0:	d11c      	bne.n	8001d0c <HAL_RCC_OscConfig+0x18c>
 8001cd2:	4b46      	ldr	r3, [pc, #280]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d116      	bne.n	8001d0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cde:	4b43      	ldr	r3, [pc, #268]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d005      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x176>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d001      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e1c0      	b.n	8002078 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf6:	4b3d      	ldr	r3, [pc, #244]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	4939      	ldr	r1, [pc, #228]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d0a:	e03a      	b.n	8001d82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d020      	beq.n	8001d56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d14:	4b36      	ldr	r3, [pc, #216]	; (8001df0 <HAL_RCC_OscConfig+0x270>)
 8001d16:	2201      	movs	r2, #1
 8001d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1a:	f7fe ffef 	bl	8000cfc <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d20:	e008      	b.n	8001d34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d22:	f7fe ffeb 	bl	8000cfc <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e1a1      	b.n	8002078 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d34:	4b2d      	ldr	r3, [pc, #180]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0f0      	beq.n	8001d22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d40:	4b2a      	ldr	r3, [pc, #168]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	4927      	ldr	r1, [pc, #156]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	600b      	str	r3, [r1, #0]
 8001d54:	e015      	b.n	8001d82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d56:	4b26      	ldr	r3, [pc, #152]	; (8001df0 <HAL_RCC_OscConfig+0x270>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5c:	f7fe ffce 	bl	8000cfc <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d64:	f7fe ffca 	bl	8000cfc <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e180      	b.n	8002078 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d76:	4b1d      	ldr	r3, [pc, #116]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f0      	bne.n	8001d64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0308 	and.w	r3, r3, #8
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d03a      	beq.n	8001e04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d019      	beq.n	8001dca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d96:	4b17      	ldr	r3, [pc, #92]	; (8001df4 <HAL_RCC_OscConfig+0x274>)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d9c:	f7fe ffae 	bl	8000cfc <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001da4:	f7fe ffaa 	bl	8000cfc <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e160      	b.n	8002078 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001db6:	4b0d      	ldr	r3, [pc, #52]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0f0      	beq.n	8001da4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dc2:	2001      	movs	r0, #1
 8001dc4:	f000 faba 	bl	800233c <RCC_Delay>
 8001dc8:	e01c      	b.n	8001e04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dca:	4b0a      	ldr	r3, [pc, #40]	; (8001df4 <HAL_RCC_OscConfig+0x274>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd0:	f7fe ff94 	bl	8000cfc <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd6:	e00f      	b.n	8001df8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dd8:	f7fe ff90 	bl	8000cfc <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d908      	bls.n	8001df8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e146      	b.n	8002078 <HAL_RCC_OscConfig+0x4f8>
 8001dea:	bf00      	nop
 8001dec:	40021000 	.word	0x40021000
 8001df0:	42420000 	.word	0x42420000
 8001df4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df8:	4b92      	ldr	r3, [pc, #584]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d1e9      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f000 80a6 	beq.w	8001f5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e12:	2300      	movs	r3, #0
 8001e14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e16:	4b8b      	ldr	r3, [pc, #556]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10d      	bne.n	8001e3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e22:	4b88      	ldr	r3, [pc, #544]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	4a87      	ldr	r2, [pc, #540]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e2c:	61d3      	str	r3, [r2, #28]
 8001e2e:	4b85      	ldr	r3, [pc, #532]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e36:	60bb      	str	r3, [r7, #8]
 8001e38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e3e:	4b82      	ldr	r3, [pc, #520]	; (8002048 <HAL_RCC_OscConfig+0x4c8>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d118      	bne.n	8001e7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e4a:	4b7f      	ldr	r3, [pc, #508]	; (8002048 <HAL_RCC_OscConfig+0x4c8>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a7e      	ldr	r2, [pc, #504]	; (8002048 <HAL_RCC_OscConfig+0x4c8>)
 8001e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e56:	f7fe ff51 	bl	8000cfc <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5c:	e008      	b.n	8001e70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e5e:	f7fe ff4d 	bl	8000cfc <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b64      	cmp	r3, #100	; 0x64
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e103      	b.n	8002078 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e70:	4b75      	ldr	r3, [pc, #468]	; (8002048 <HAL_RCC_OscConfig+0x4c8>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d0f0      	beq.n	8001e5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d106      	bne.n	8001e92 <HAL_RCC_OscConfig+0x312>
 8001e84:	4b6f      	ldr	r3, [pc, #444]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	4a6e      	ldr	r2, [pc, #440]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	6213      	str	r3, [r2, #32]
 8001e90:	e02d      	b.n	8001eee <HAL_RCC_OscConfig+0x36e>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10c      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x334>
 8001e9a:	4b6a      	ldr	r3, [pc, #424]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	4a69      	ldr	r2, [pc, #420]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001ea0:	f023 0301 	bic.w	r3, r3, #1
 8001ea4:	6213      	str	r3, [r2, #32]
 8001ea6:	4b67      	ldr	r3, [pc, #412]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
 8001eaa:	4a66      	ldr	r2, [pc, #408]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001eac:	f023 0304 	bic.w	r3, r3, #4
 8001eb0:	6213      	str	r3, [r2, #32]
 8001eb2:	e01c      	b.n	8001eee <HAL_RCC_OscConfig+0x36e>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	2b05      	cmp	r3, #5
 8001eba:	d10c      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x356>
 8001ebc:	4b61      	ldr	r3, [pc, #388]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	4a60      	ldr	r2, [pc, #384]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001ec2:	f043 0304 	orr.w	r3, r3, #4
 8001ec6:	6213      	str	r3, [r2, #32]
 8001ec8:	4b5e      	ldr	r3, [pc, #376]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	4a5d      	ldr	r2, [pc, #372]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001ece:	f043 0301 	orr.w	r3, r3, #1
 8001ed2:	6213      	str	r3, [r2, #32]
 8001ed4:	e00b      	b.n	8001eee <HAL_RCC_OscConfig+0x36e>
 8001ed6:	4b5b      	ldr	r3, [pc, #364]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	4a5a      	ldr	r2, [pc, #360]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001edc:	f023 0301 	bic.w	r3, r3, #1
 8001ee0:	6213      	str	r3, [r2, #32]
 8001ee2:	4b58      	ldr	r3, [pc, #352]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	4a57      	ldr	r2, [pc, #348]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001ee8:	f023 0304 	bic.w	r3, r3, #4
 8001eec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d015      	beq.n	8001f22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef6:	f7fe ff01 	bl	8000cfc <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001efc:	e00a      	b.n	8001f14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001efe:	f7fe fefd 	bl	8000cfc <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e0b1      	b.n	8002078 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f14:	4b4b      	ldr	r3, [pc, #300]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0ee      	beq.n	8001efe <HAL_RCC_OscConfig+0x37e>
 8001f20:	e014      	b.n	8001f4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f22:	f7fe feeb 	bl	8000cfc <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f28:	e00a      	b.n	8001f40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f2a:	f7fe fee7 	bl	8000cfc <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e09b      	b.n	8002078 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f40:	4b40      	ldr	r3, [pc, #256]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1ee      	bne.n	8001f2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f4c:	7dfb      	ldrb	r3, [r7, #23]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d105      	bne.n	8001f5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f52:	4b3c      	ldr	r3, [pc, #240]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	4a3b      	ldr	r2, [pc, #236]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 8087 	beq.w	8002076 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f68:	4b36      	ldr	r3, [pc, #216]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 030c 	and.w	r3, r3, #12
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	d061      	beq.n	8002038 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69db      	ldr	r3, [r3, #28]
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d146      	bne.n	800200a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f7c:	4b33      	ldr	r3, [pc, #204]	; (800204c <HAL_RCC_OscConfig+0x4cc>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f82:	f7fe febb 	bl	8000cfc <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f8a:	f7fe feb7 	bl	8000cfc <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e06d      	b.n	8002078 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f9c:	4b29      	ldr	r3, [pc, #164]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d1f0      	bne.n	8001f8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fb0:	d108      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fb2:	4b24      	ldr	r3, [pc, #144]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	4921      	ldr	r1, [pc, #132]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fc4:	4b1f      	ldr	r3, [pc, #124]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a19      	ldr	r1, [r3, #32]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd4:	430b      	orrs	r3, r1
 8001fd6:	491b      	ldr	r1, [pc, #108]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fdc:	4b1b      	ldr	r3, [pc, #108]	; (800204c <HAL_RCC_OscConfig+0x4cc>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe2:	f7fe fe8b 	bl	8000cfc <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fe8:	e008      	b.n	8001ffc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fea:	f7fe fe87 	bl	8000cfc <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e03d      	b.n	8002078 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ffc:	4b11      	ldr	r3, [pc, #68]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0f0      	beq.n	8001fea <HAL_RCC_OscConfig+0x46a>
 8002008:	e035      	b.n	8002076 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800200a:	4b10      	ldr	r3, [pc, #64]	; (800204c <HAL_RCC_OscConfig+0x4cc>)
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002010:	f7fe fe74 	bl	8000cfc <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002018:	f7fe fe70 	bl	8000cfc <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e026      	b.n	8002078 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800202a:	4b06      	ldr	r3, [pc, #24]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f0      	bne.n	8002018 <HAL_RCC_OscConfig+0x498>
 8002036:	e01e      	b.n	8002076 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d107      	bne.n	8002050 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e019      	b.n	8002078 <HAL_RCC_OscConfig+0x4f8>
 8002044:	40021000 	.word	0x40021000
 8002048:	40007000 	.word	0x40007000
 800204c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002050:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <HAL_RCC_OscConfig+0x500>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	429a      	cmp	r2, r3
 8002062:	d106      	bne.n	8002072 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800206e:	429a      	cmp	r2, r3
 8002070:	d001      	beq.n	8002076 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e000      	b.n	8002078 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40021000 	.word	0x40021000

08002084 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e0d0      	b.n	800223a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002098:	4b6a      	ldr	r3, [pc, #424]	; (8002244 <HAL_RCC_ClockConfig+0x1c0>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d910      	bls.n	80020c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a6:	4b67      	ldr	r3, [pc, #412]	; (8002244 <HAL_RCC_ClockConfig+0x1c0>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f023 0207 	bic.w	r2, r3, #7
 80020ae:	4965      	ldr	r1, [pc, #404]	; (8002244 <HAL_RCC_ClockConfig+0x1c0>)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b6:	4b63      	ldr	r3, [pc, #396]	; (8002244 <HAL_RCC_ClockConfig+0x1c0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d001      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e0b8      	b.n	800223a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d020      	beq.n	8002116 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d005      	beq.n	80020ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020e0:	4b59      	ldr	r3, [pc, #356]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	4a58      	ldr	r2, [pc, #352]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 80020e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0308 	and.w	r3, r3, #8
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d005      	beq.n	8002104 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020f8:	4b53      	ldr	r3, [pc, #332]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	4a52      	ldr	r2, [pc, #328]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 80020fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002102:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002104:	4b50      	ldr	r3, [pc, #320]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	494d      	ldr	r1, [pc, #308]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 8002112:	4313      	orrs	r3, r2
 8002114:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d040      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d107      	bne.n	800213a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800212a:	4b47      	ldr	r3, [pc, #284]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d115      	bne.n	8002162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e07f      	b.n	800223a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b02      	cmp	r3, #2
 8002140:	d107      	bne.n	8002152 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002142:	4b41      	ldr	r3, [pc, #260]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d109      	bne.n	8002162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e073      	b.n	800223a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002152:	4b3d      	ldr	r3, [pc, #244]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e06b      	b.n	800223a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002162:	4b39      	ldr	r3, [pc, #228]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f023 0203 	bic.w	r2, r3, #3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	4936      	ldr	r1, [pc, #216]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 8002170:	4313      	orrs	r3, r2
 8002172:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002174:	f7fe fdc2 	bl	8000cfc <HAL_GetTick>
 8002178:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800217a:	e00a      	b.n	8002192 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800217c:	f7fe fdbe 	bl	8000cfc <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	f241 3288 	movw	r2, #5000	; 0x1388
 800218a:	4293      	cmp	r3, r2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e053      	b.n	800223a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002192:	4b2d      	ldr	r3, [pc, #180]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f003 020c 	and.w	r2, r3, #12
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d1eb      	bne.n	800217c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021a4:	4b27      	ldr	r3, [pc, #156]	; (8002244 <HAL_RCC_ClockConfig+0x1c0>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d210      	bcs.n	80021d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b2:	4b24      	ldr	r3, [pc, #144]	; (8002244 <HAL_RCC_ClockConfig+0x1c0>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f023 0207 	bic.w	r2, r3, #7
 80021ba:	4922      	ldr	r1, [pc, #136]	; (8002244 <HAL_RCC_ClockConfig+0x1c0>)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	4313      	orrs	r3, r2
 80021c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021c2:	4b20      	ldr	r3, [pc, #128]	; (8002244 <HAL_RCC_ClockConfig+0x1c0>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d001      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e032      	b.n	800223a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d008      	beq.n	80021f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021e0:	4b19      	ldr	r3, [pc, #100]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	4916      	ldr	r1, [pc, #88]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d009      	beq.n	8002212 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021fe:	4b12      	ldr	r3, [pc, #72]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	490e      	ldr	r1, [pc, #56]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 800220e:	4313      	orrs	r3, r2
 8002210:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002212:	f000 f821 	bl	8002258 <HAL_RCC_GetSysClockFreq>
 8002216:	4602      	mov	r2, r0
 8002218:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	091b      	lsrs	r3, r3, #4
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	490a      	ldr	r1, [pc, #40]	; (800224c <HAL_RCC_ClockConfig+0x1c8>)
 8002224:	5ccb      	ldrb	r3, [r1, r3]
 8002226:	fa22 f303 	lsr.w	r3, r2, r3
 800222a:	4a09      	ldr	r2, [pc, #36]	; (8002250 <HAL_RCC_ClockConfig+0x1cc>)
 800222c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800222e:	4b09      	ldr	r3, [pc, #36]	; (8002254 <HAL_RCC_ClockConfig+0x1d0>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe fd20 	bl	8000c78 <HAL_InitTick>

  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40022000 	.word	0x40022000
 8002248:	40021000 	.word	0x40021000
 800224c:	08002c24 	.word	0x08002c24
 8002250:	200002b0 	.word	0x200002b0
 8002254:	200002b4 	.word	0x200002b4

08002258 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002258:	b480      	push	{r7}
 800225a:	b087      	sub	sp, #28
 800225c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	2300      	movs	r3, #0
 8002264:	60bb      	str	r3, [r7, #8]
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
 800226a:	2300      	movs	r3, #0
 800226c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800226e:	2300      	movs	r3, #0
 8002270:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002272:	4b1e      	ldr	r3, [pc, #120]	; (80022ec <HAL_RCC_GetSysClockFreq+0x94>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f003 030c 	and.w	r3, r3, #12
 800227e:	2b04      	cmp	r3, #4
 8002280:	d002      	beq.n	8002288 <HAL_RCC_GetSysClockFreq+0x30>
 8002282:	2b08      	cmp	r3, #8
 8002284:	d003      	beq.n	800228e <HAL_RCC_GetSysClockFreq+0x36>
 8002286:	e027      	b.n	80022d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002288:	4b19      	ldr	r3, [pc, #100]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800228a:	613b      	str	r3, [r7, #16]
      break;
 800228c:	e027      	b.n	80022de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	0c9b      	lsrs	r3, r3, #18
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	4a17      	ldr	r2, [pc, #92]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002298:	5cd3      	ldrb	r3, [r2, r3]
 800229a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d010      	beq.n	80022c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022a6:	4b11      	ldr	r3, [pc, #68]	; (80022ec <HAL_RCC_GetSysClockFreq+0x94>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	0c5b      	lsrs	r3, r3, #17
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	4a11      	ldr	r2, [pc, #68]	; (80022f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80022b2:	5cd3      	ldrb	r3, [r2, r3]
 80022b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a0d      	ldr	r2, [pc, #52]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80022ba:	fb03 f202 	mul.w	r2, r3, r2
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c4:	617b      	str	r3, [r7, #20]
 80022c6:	e004      	b.n	80022d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a0c      	ldr	r2, [pc, #48]	; (80022fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80022cc:	fb02 f303 	mul.w	r3, r2, r3
 80022d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	613b      	str	r3, [r7, #16]
      break;
 80022d6:	e002      	b.n	80022de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022d8:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80022da:	613b      	str	r3, [r7, #16]
      break;
 80022dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022de:	693b      	ldr	r3, [r7, #16]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	371c      	adds	r7, #28
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bc80      	pop	{r7}
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	40021000 	.word	0x40021000
 80022f0:	007a1200 	.word	0x007a1200
 80022f4:	08002c3c 	.word	0x08002c3c
 80022f8:	08002c4c 	.word	0x08002c4c
 80022fc:	003d0900 	.word	0x003d0900

08002300 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002304:	4b02      	ldr	r3, [pc, #8]	; (8002310 <HAL_RCC_GetHCLKFreq+0x10>)
 8002306:	681b      	ldr	r3, [r3, #0]
}
 8002308:	4618      	mov	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr
 8002310:	200002b0 	.word	0x200002b0

08002314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002318:	f7ff fff2 	bl	8002300 <HAL_RCC_GetHCLKFreq>
 800231c:	4602      	mov	r2, r0
 800231e:	4b05      	ldr	r3, [pc, #20]	; (8002334 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	0a1b      	lsrs	r3, r3, #8
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	4903      	ldr	r1, [pc, #12]	; (8002338 <HAL_RCC_GetPCLK1Freq+0x24>)
 800232a:	5ccb      	ldrb	r3, [r1, r3]
 800232c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002330:	4618      	mov	r0, r3
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40021000 	.word	0x40021000
 8002338:	08002c34 	.word	0x08002c34

0800233c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002344:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <RCC_Delay+0x34>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a0a      	ldr	r2, [pc, #40]	; (8002374 <RCC_Delay+0x38>)
 800234a:	fba2 2303 	umull	r2, r3, r2, r3
 800234e:	0a5b      	lsrs	r3, r3, #9
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	fb02 f303 	mul.w	r3, r2, r3
 8002356:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002358:	bf00      	nop
  }
  while (Delay --);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	1e5a      	subs	r2, r3, #1
 800235e:	60fa      	str	r2, [r7, #12]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1f9      	bne.n	8002358 <RCC_Delay+0x1c>
}
 8002364:	bf00      	nop
 8002366:	bf00      	nop
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr
 8002370:	200002b0 	.word	0x200002b0
 8002374:	10624dd3 	.word	0x10624dd3

08002378 <memset>:
 8002378:	4603      	mov	r3, r0
 800237a:	4402      	add	r2, r0
 800237c:	4293      	cmp	r3, r2
 800237e:	d100      	bne.n	8002382 <memset+0xa>
 8002380:	4770      	bx	lr
 8002382:	f803 1b01 	strb.w	r1, [r3], #1
 8002386:	e7f9      	b.n	800237c <memset+0x4>

08002388 <__libc_init_array>:
 8002388:	b570      	push	{r4, r5, r6, lr}
 800238a:	2600      	movs	r6, #0
 800238c:	4d0c      	ldr	r5, [pc, #48]	; (80023c0 <__libc_init_array+0x38>)
 800238e:	4c0d      	ldr	r4, [pc, #52]	; (80023c4 <__libc_init_array+0x3c>)
 8002390:	1b64      	subs	r4, r4, r5
 8002392:	10a4      	asrs	r4, r4, #2
 8002394:	42a6      	cmp	r6, r4
 8002396:	d109      	bne.n	80023ac <__libc_init_array+0x24>
 8002398:	f000 f81a 	bl	80023d0 <_init>
 800239c:	2600      	movs	r6, #0
 800239e:	4d0a      	ldr	r5, [pc, #40]	; (80023c8 <__libc_init_array+0x40>)
 80023a0:	4c0a      	ldr	r4, [pc, #40]	; (80023cc <__libc_init_array+0x44>)
 80023a2:	1b64      	subs	r4, r4, r5
 80023a4:	10a4      	asrs	r4, r4, #2
 80023a6:	42a6      	cmp	r6, r4
 80023a8:	d105      	bne.n	80023b6 <__libc_init_array+0x2e>
 80023aa:	bd70      	pop	{r4, r5, r6, pc}
 80023ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80023b0:	4798      	blx	r3
 80023b2:	3601      	adds	r6, #1
 80023b4:	e7ee      	b.n	8002394 <__libc_init_array+0xc>
 80023b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80023ba:	4798      	blx	r3
 80023bc:	3601      	adds	r6, #1
 80023be:	e7f2      	b.n	80023a6 <__libc_init_array+0x1e>
 80023c0:	08002c50 	.word	0x08002c50
 80023c4:	08002c50 	.word	0x08002c50
 80023c8:	08002c50 	.word	0x08002c50
 80023cc:	08002c54 	.word	0x08002c54

080023d0 <_init>:
 80023d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023d2:	bf00      	nop
 80023d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023d6:	bc08      	pop	{r3}
 80023d8:	469e      	mov	lr, r3
 80023da:	4770      	bx	lr

080023dc <_fini>:
 80023dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023de:	bf00      	nop
 80023e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023e2:	bc08      	pop	{r3}
 80023e4:	469e      	mov	lr, r3
 80023e6:	4770      	bx	lr
